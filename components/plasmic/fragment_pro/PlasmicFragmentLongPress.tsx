// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tGFFjizqpBh1JPEqzUQxjY
// Component: F6FdGjFt2-9F

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: tGFFjizqpBh1JPEqzUQxjY/projectcss
import sty from "./PlasmicFragmentLongPress.module.css"; // plasmic-import: F6FdGjFt2-9F/css

createPlasmicElementProxy;

export type PlasmicFragmentLongPress__VariantMembers = {};
export type PlasmicFragmentLongPress__VariantsArgs = {};
type VariantPropType = keyof PlasmicFragmentLongPress__VariantsArgs;
export const PlasmicFragmentLongPress__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFragmentLongPress__ArgsType = {
  onLongPress?: () => void;
  children?: React.ReactNode;
  duration?: number;
  onCancel?: () => void;
  onStart?: () => void;
};
type ArgPropType = keyof PlasmicFragmentLongPress__ArgsType;
export const PlasmicFragmentLongPress__ArgProps = new Array<ArgPropType>(
  "onLongPress",
  "children",
  "duration",
  "onCancel",
  "onStart"
);

export type PlasmicFragmentLongPress__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultFragmentLongPressProps {
  onLongPress?: () => void;
  children?: React.ReactNode;
  duration?: number;
  onCancel?: () => void;
  onStart?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFragmentLongPress__RenderFunc(props: {
  variants: PlasmicFragmentLongPress__VariantsArgs;
  args: PlasmicFragmentLongPress__ArgsType;
  overrides: PlasmicFragmentLongPress__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          duration: 500
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "start",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      onMouseDown={async event => {
        const $steps = {};

        $steps["updateVariable"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["start"]
                },
                operation: 0,
                value: Date.now()
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateVariable"] != null &&
          typeof $steps["updateVariable"] === "object" &&
          typeof $steps["updateVariable"].then === "function"
        ) {
          $steps["updateVariable"] = await $steps["updateVariable"];
        }

        $steps["runOnStart"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onStart"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnStart"] != null &&
          typeof $steps["runOnStart"] === "object" &&
          typeof $steps["runOnStart"].then === "function"
        ) {
          $steps["runOnStart"] = await $steps["runOnStart"];
        }
      }}
      onMouseUp={async event => {
        const $steps = {};

        $steps["runOnLongPress"] =
          Date.now() - $state.start >= $props.duration
            ? (() => {
                const actionArgs = { eventRef: $props["onLongPress"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runOnLongPress"] != null &&
          typeof $steps["runOnLongPress"] === "object" &&
          typeof $steps["runOnLongPress"].then === "function"
        ) {
          $steps["runOnLongPress"] = await $steps["runOnLongPress"];
        }

        $steps["runOnCancel"] =
          Date.now() - $state.start < $props.duration
            ? (() => {
                const actionArgs = { eventRef: $props["onCancel"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runOnCancel"] != null &&
          typeof $steps["runOnCancel"] === "object" &&
          typeof $steps["runOnCancel"].then === "function"
        ) {
          $steps["runOnCancel"] = await $steps["runOnCancel"];
        }
      }}
      onTouchEnd={async event => {
        const $steps = {};

        $steps["runOnLongPress"] =
          Date.now() - $state.start >= $props.duration
            ? (() => {
                const actionArgs = { eventRef: $props["onLongPress"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runOnLongPress"] != null &&
          typeof $steps["runOnLongPress"] === "object" &&
          typeof $steps["runOnLongPress"].then === "function"
        ) {
          $steps["runOnLongPress"] = await $steps["runOnLongPress"];
        }

        $steps["updateActive2"] =
          Date.now() - $state.start < $props.duration
            ? (() => {
                const actionArgs = { eventRef: $props["onCancel"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["updateActive2"] != null &&
          typeof $steps["updateActive2"] === "object" &&
          typeof $steps["updateActive2"].then === "function"
        ) {
          $steps["updateActive2"] = await $steps["updateActive2"];
        }
      }}
      onTouchStart={async event => {
        const $steps = {};

        $steps["updateStart"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["start"]
                },
                operation: 0,
                value: Date.now()
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateStart"] != null &&
          typeof $steps["updateStart"] === "object" &&
          typeof $steps["updateStart"].then === "function"
        ) {
          $steps["updateStart"] = await $steps["updateStart"];
        }

        $steps["runOnStart"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onStart"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnStart"] != null &&
          typeof $steps["runOnStart"] === "object" &&
          typeof $steps["runOnStart"].then === "function"
        ) {
          $steps["runOnStart"] = await $steps["runOnStart"];
        }
      }}
    >
      {renderPlasmicSlot({
        defaultContents: null,
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFragmentLongPress__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFragmentLongPress__VariantsArgs;
    args?: PlasmicFragmentLongPress__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFragmentLongPress__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFragmentLongPress__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFragmentLongPress__ArgProps,
          internalVariantPropNames: PlasmicFragmentLongPress__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFragmentLongPress__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFragmentLongPress";
  } else {
    func.displayName = `PlasmicFragmentLongPress.${nodeName}`;
  }
  return func;
}

export const PlasmicFragmentLongPress = Object.assign(
  // Top-level PlasmicFragmentLongPress renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFragmentLongPress
    internalVariantProps: PlasmicFragmentLongPress__VariantProps,
    internalArgProps: PlasmicFragmentLongPress__ArgProps
  }
);

export default PlasmicFragmentLongPress;
/* prettier-ignore-end */
