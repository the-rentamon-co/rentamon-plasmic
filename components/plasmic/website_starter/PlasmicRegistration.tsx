/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: 6Wv1NvT4ZD0j

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import Checkbox from "../../Checkbox"; // plasmic-import: kNwK3iA1B39P/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TestimonialsScrolling from "../../TestimonialsScrolling"; // plasmic-import: lrlVKcMJCRk_/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicRegistration.module.css"; // plasmic-import: 6Wv1NvT4ZD0j/css

import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: TftNRT31euw0/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicRegistration__VariantMembers = {};
export type PlasmicRegistration__VariantsArgs = {};
type VariantPropType = keyof PlasmicRegistration__VariantsArgs;
export const PlasmicRegistration__VariantProps = new Array<VariantPropType>();

export type PlasmicRegistration__ArgsType = {};
type ArgPropType = keyof PlasmicRegistration__ArgsType;
export const PlasmicRegistration__ArgProps = new Array<ArgPropType>();

export type PlasmicRegistration__OverridesType = {
  registration?: Flex__<"div">;
  html?: Flex__<"div">;
  goftino?: Flex__<typeof Embed>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  form?: Flex__<typeof FormWrapper>;
  platforms?: Flex__<typeof FormItemWrapper>;
  policiesCheckbox?: Flex__<typeof Checkbox>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  submitButton?: Flex__<typeof AntdButton>;
  guide?: Flex__<"div">;
  _1?: Flex__<"div">;
  _2?: Flex__<"div">;
  _3?: Flex__<"div">;
  guidePanel?: Flex__<"div">;
  _4?: Flex__<"div">;
  _5?: Flex__<"div">;
  _6?: Flex__<"div">;
  quotes?: Flex__<"div">;
  testimonialsScrolling?: Flex__<typeof TestimonialsScrolling>;
};

export interface DefaultRegistrationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegistration__RenderFunc(props: {
  variants: PlasmicRegistration__VariantsArgs;
  args: PlasmicRegistration__ArgsType;
  overrides: PlasmicRegistration__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($ctx.params.type == 3) {
                  return 1;
                } else {
                  return 0;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 3;
              }
              throw e;
            }
          })()
      },
      {
        path: "policiesCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "platformstatus",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$state.apiRequest2.data) {
                  return { status: {} };
                } else {
                  return $state.apiRequest2.data;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "guideStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "panelGuide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "rateLimit",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          shab: 0,
          jabama: 0,
          jajiga: 0,
          otaghak: 0,
          mihmansho: 0,
          homsa: 0
        })
      },
      {
        path: "invitationCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "source",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"registration"}
          data-plasmic-override={overrides.registration}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.registration
          )}
        >
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__vnN4N)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lWbm5)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.history.back();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <Icon23Icon
              className={classNames(projectcss.all, sty.svg__vaqDi)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage3"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return (window.location.href =
                              "https://rentamon.com/panel/");
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage3"] != null &&
                  typeof $steps["goToPage3"] === "object" &&
                  typeof $steps["goToPage3"].then === "function"
                ) {
                  $steps["goToPage3"] = await $steps["goToPage3"];
                }
              }}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3CbM)}>
            <div className={classNames(projectcss.all, sty.freeBox___2EXtv)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nL6Or)}
                displayHeight={"49px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"108px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: "/plasmic/website_starter/images/rentamonFaPng.png",
                  fullWidth: 684,
                  fullHeight: 306,
                  aspectRatio: undefined
                }}
              />

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__uegPz)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__lgvVx
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__aKvz)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__pQZy)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__qoip)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__stifY
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__uA9Ls,
              hasVariant(globalVariants, "screen", "mobile")
                ? "shadow"
                : undefined
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  {(() => {
                    try {
                      return $state.step == 0 && $ctx.params.type == 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FormItemWrapper
                      data-plasmic-name={"platforms"}
                      data-plasmic-override={overrides.platforms}
                      className={classNames("__wab_instance", sty.platforms)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nGxwp
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      name={"platforms"}
                      rules={[]}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vVqK4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aeVwz
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                fontWeight: 700,
                                color: "var(--token-8nedppYkGVaH)"
                              }}
                            >
                              {
                                "\u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u062e\u0648\u0634 \u0627\u0648\u0645\u062f\u06cc\ud83d\udc4b"
                              }
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qreW
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6OjGg
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___394Fv
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gwXSj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kjn26
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vxza4
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__otQDl
                        )}
                      >
                        <Checkbox
                          data-plasmic-name={"policiesCheckbox"}
                          data-plasmic-override={overrides.policiesCheckbox}
                          className={classNames(
                            "__wab_instance",
                            sty.policiesCheckbox
                          )}
                          isChecked={
                            generateStateValueProp($state, [
                              "policiesCheckbox",
                              "isChecked"
                            ]) ?? false
                          }
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "policiesCheckbox",
                                "isChecked"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }

                            (async isChecked => {
                              const $steps = {};

                              $steps["runCode2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          function getCookieValue(cookieName) {
                                            const cookies = document.cookie
                                              .split(";")
                                              .map(cookie => cookie.trim());
                                            for (const cookie of cookies) {
                                              const [name, value] =
                                                cookie.split("=");
                                              if (name === cookieName) {
                                                return value;
                                              }
                                            }
                                            return null;
                                          }
                                          if (
                                            document.cookie.includes(
                                              "invite_code"
                                            )
                                          ) {
                                            console.log("in the invite");
                                            const inviteCode =
                                              getCookieValue("invite_code");
                                            if (inviteCode != null) {
                                              $state.invitationCode =
                                                inviteCode;
                                              $state.source = "referral";
                                            }
                                            console.log(
                                              "invite_code:",
                                              $state.invitationCode
                                            );
                                          }
                                          console.log(
                                            "beetween  to coundition"
                                          );
                                          if (
                                            document.cookie.includes("source")
                                          ) {
                                            console.log("in the web_source");
                                            const user_type =
                                              getCookieValue("source");
                                            console.log("user_type", user_type);
                                            if (user_type != null) {
                                              $state.source = user_type;
                                            }
                                          }
                                          return console.log(
                                            "source:",
                                            $state.source
                                          );
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode2"] != null &&
                                typeof $steps["runCode2"] === "object" &&
                                typeof $steps["runCode2"].then === "function"
                              ) {
                                $steps["runCode2"] = await $steps["runCode2"];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        (() => {
                                          try {
                                            return (() => {
                                              if ($ctx.params.type == "1") {
                                                return "https://gateway.rentamon.com/webhook/user-registration?param=1";
                                              } else {
                                                return "";
                                              }
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["invokeGlobalAction2"] =
                                $steps.invokeGlobalAction.data.message !=
                                "user is already registered"
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/add_referal_code",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                return {
                                                  invitationCode:
                                                    $state.invitationCode
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["invokeGlobalAction2"] != null &&
                                typeof $steps["invokeGlobalAction2"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction2"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction2"] = await $steps[
                                  "invokeGlobalAction2"
                                ];
                              }

                              $steps["invokeGlobalAction3"] =
                                $steps.invokeGlobalAction2.status == 200
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u06a9\u062f \u062f\u0639\u0648\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["invokeGlobalAction3"] != null &&
                                typeof $steps["invokeGlobalAction3"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction3"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction3"] = await $steps[
                                  "invokeGlobalAction3"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mnS78
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile") ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#1F3546" }}
                                >
                                  {"\u0645\u0646 "}
                                </span>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <PlasmicLink__
                                    data-plasmic-name={"link"}
                                    data-plasmic-override={overrides.link}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      projectcss.plasmic_default__inline,
                                      sty.link
                                    )}
                                    component={Link}
                                    href={"https://rentamon.com/terms-of-use/"}
                                    platform={"nextjs"}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    ) ? (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "#8165D6",
                                            fontWeight: 600
                                          }}
                                        >
                                          {
                                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                                          }
                                        </span>
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "#8165D6",
                                            fontWeight: 600
                                          }}
                                        >
                                          {
                                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                                          }
                                        </span>
                                      </React.Fragment>
                                    )}
                                  </PlasmicLink__>
                                }
                                <React.Fragment>{""}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#1F3546" }}
                                >
                                  {
                                    " \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0627 \u0645\u06cc\u200c\u067e\u0630\u06cc\u0631\u0645."
                                  }
                                </span>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#1F3546" }}
                                >
                                  {"\u0645\u0646 "}
                                </span>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <PlasmicLink__
                                    data-plasmic-name={"link"}
                                    data-plasmic-override={overrides.link}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      projectcss.plasmic_default__inline,
                                      sty.link
                                    )}
                                    component={Link}
                                    href={"https://rentamon.com/terms-of-use/"}
                                    platform={"nextjs"}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    ) ? (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "#8165D6",
                                            fontWeight: 600
                                          }}
                                        >
                                          {
                                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                                          }
                                        </span>
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "#8165D6",
                                            fontWeight: 600
                                          }}
                                        >
                                          {
                                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                                          }
                                        </span>
                                      </React.Fragment>
                                    )}
                                  </PlasmicLink__>
                                }
                                <React.Fragment>{""}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#1F3546" }}
                                >
                                  {
                                    " \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0627 \u0645\u06cc\u200c\u067e\u0630\u06cc\u0631\u0645."
                                  }
                                </span>
                              </React.Fragment>
                            )}
                          </div>
                        </Checkbox>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w4VD
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rFltZ
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"submitButton"}
                            data-plasmic-override={overrides.submitButton}
                            className={classNames(
                              "__wab_instance",
                              sty.submitButton
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateLoading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading"] != null &&
                                typeof $steps["updateLoading"] === "object" &&
                                typeof $steps["updateLoading"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading"] = await $steps[
                                  "updateLoading"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = { args: [1000] };
                                    return $globalActions[
                                      "Fragment.wait"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["updateInput6Value3"] = $state
                                .policiesCheckbox.isChecked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/set_user_source",
                                        undefined,
                                        (() => {
                                          try {
                                            return (() => {
                                              return { source: $state.source };
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateInput6Value3"] != null &&
                                typeof $steps["updateInput6Value3"] ===
                                  "object" &&
                                typeof $steps["updateInput6Value3"].then ===
                                  "function"
                              ) {
                                $steps["updateInput6Value3"] = await $steps[
                                  "updateInput6Value3"
                                ];
                              }

                              $steps["updateInput6Value2"] = $state
                                .policiesCheckbox.isChecked
                                ? (() => {
                                    const actionArgs = { destination: `/tier` };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateInput6Value2"] != null &&
                                typeof $steps["updateInput6Value2"] ===
                                  "object" &&
                                typeof $steps["updateInput6Value2"].then ===
                                  "function"
                              ) {
                                $steps["updateInput6Value2"] = await $steps[
                                  "updateInput6Value2"
                                ];
                              }

                              $steps["updateLoading2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading2"] != null &&
                                typeof $steps["updateLoading2"] === "object" &&
                                typeof $steps["updateLoading2"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading2"] = await $steps[
                                  "updateLoading2"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jDhVy
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sgXNi
                                )}
                              >
                                {"\u0628\u0631\u06cc\u0645"}
                              </div>
                              {(() => {
                                try {
                                  return $state.loading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__dfSzF)}
                                  displayHeight={"26px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={
                                    "https://web.rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                                  }
                                />
                              ) : null}
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    </FormItemWrapper>
                  ) : null}
                </FormWrapper>
              );
            })()}
          </div>
          {(() => {
            try {
              return $state.step == 13;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"guide"}
              data-plasmic-override={overrides.guide}
              className={classNames(projectcss.all, sty.guide)}
            >
              {(() => {
                try {
                  return $state.guideStep == 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_1"}
                  data-plasmic-override={overrides._1}
                  className={classNames(projectcss.all, sty._1)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__iigsh)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 2)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jhQE)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "300px"
                        : "300px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_1L2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.guideStep == 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  className={classNames(projectcss.all, sty._2)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xRyWz)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 3)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cfGeL)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "300px"
                        : "300px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_2L2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__x60Ws)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 1)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.guideStep == 3;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_3"}
                  data-plasmic-override={overrides._3}
                  className={classNames(projectcss.all, sty._3)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kfvIc)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.step = 1)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__k04Fb)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "300px"
                        : "300px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_3L2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__bM3D)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 2)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.step == 14 && $ctx.params.type == 1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"guidePanel"}
              data-plasmic-override={overrides.guidePanel}
              className={classNames(projectcss.all, sty.guidePanel)}
            >
              {(() => {
                try {
                  return $state.panelGuide == 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_4"}
                  data-plasmic-override={overrides._4}
                  className={classNames(projectcss.all, sty._4)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___58Xrw)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.panelGuide = 2)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__q1A1X)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "400px"
                        : "500px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_1Low2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.panelGuide == 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_5"}
                  data-plasmic-override={overrides._5}
                  className={classNames(projectcss.all, sty._5)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tjye3)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.panelGuide = 3)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1H6Qr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : "500px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_2Low2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__p3UqN)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.panelGuide = 1)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.panelGuide == 3 && $ctx.params.type == 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_6"}
                  data-plasmic-override={overrides._6}
                  className={classNames(projectcss.all, sty._6)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__fUc7L)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPanelCalendar"] = true
                        ? (() => {
                            const actionArgs = { destination: `/panel` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPanelCalendar"] != null &&
                        typeof $steps["goToPanelCalendar"] === "object" &&
                        typeof $steps["goToPanelCalendar"].then === "function"
                      ) {
                        $steps["goToPanelCalendar"] = await $steps[
                          "goToPanelCalendar"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__bwrIt)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : "500px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_3Low2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tntgZ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.panelGuide = 2)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $ctx.params.type == 1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"quotes"}
              data-plasmic-override={overrides.quotes}
              className={classNames(projectcss.all, sty.quotes)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__q2O4A)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xVk4J
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0627\u0639\u062a\u0645\u0627\u062f \u0628\u06cc\u0634 \u0627\u0632 \u06f8\u06f0\u06f0 \u0645\u06cc\u0632\u0628\u0627\u0646 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                    : "\u0627\u0639\u062a\u0645\u0627\u062f \u0628\u06cc\u0634 \u0627\u0632 \u06f1\u06f0\u06f0\u06f0 \u0645\u06cc\u0632\u0628\u0627\u0646 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"}
                </div>
                <TestimonialsScrolling
                  data-plasmic-name={"testimonialsScrolling"}
                  data-plasmic-override={overrides.testimonialsScrolling}
                  className={classNames(
                    "__wab_instance",
                    sty.testimonialsScrolling
                  )}
                />
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__w7DQc)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hzm4Y
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.list[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zrxbm)}>
            <div className={classNames(projectcss.all, sty.freeBox___9PhAq)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tvlDc
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "\u0634\u0631\u06a9\u062a \u062a\u0648\u0633\u0639\u0647 \u0641\u0646\u0627\u0648\u0631\u06cc \u0648 \u062a\u0648\u0627\u0646\u0645\u0646\u062f\u0633\u0627\u0632\u06cc \u0634\u0631\u06cc\u0641 (\u0631\u0646\u062a\u0627\u0645\u0648\u0646)\n\u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7  \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u062f\u0627\u0631\u06cc \u0627\u0632 \u06f9 \u0627\u0644\u06cc \u06f1\u06f7\r\n\r\n\u0642\u0645\u060c \u067e\u0631\u062f\u06cc\u0633\u0627\u0646\u060c \u0628\u0644\u0648\u0627\u0631 \u0645\u0648\u0644\u0648\u06cc\u060c \u067e\u0627\u0631\u06a9 \u0639\u0644\u0645 \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u0627\u0633\u062a\u0627\u0646 \u0642\u0645\u060c \u0628\u0644\u0648\u06a9 \u06f1\u060c\u200c \u0637\u0628\u0642\u0647 \u06f3\r"
                  : "\u0634\u0631\u06a9\u062a \u062a\u0648\u0633\u0639\u0647 \u0641\u0646\u0627\u0648\u0631\u06cc \u0648 \u062a\u0648\u0627\u0646\u0645\u0646\u062f\u0633\u0627\u0632\u06cc \u0634\u0631\u06cc\u0641\n\u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u062f\u0627\u0631\u06cc \u0627\u0632 \u06f9 \u0627\u0644\u06cc \u06f1\u06f7\r\n\r\n\u0642\u0645\u060c \u067e\u0631\u062f\u06cc\u0633\u0627\u0646\u060c \u0628\u0644\u0648\u0627\u0631 \u0645\u0648\u0644\u0648\u06cc\u060c \u067e\u0627\u0631\u06a9 \u0639\u0644\u0645 \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u0627\u0633\u062a\u0627\u0646 \u0642\u0645\u060c \u0628\u0644\u0648\u06a9 \u06f1\u060c\u200c \u0637\u0628\u0642\u0647 \u06f3\r"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  registration: [
    "registration",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent",
    "form",
    "platforms",
    "policiesCheckbox",
    "link",
    "submitButton",
    "guide",
    "_1",
    "_2",
    "_3",
    "guidePanel",
    "_4",
    "_5",
    "_6",
    "quotes",
    "testimonialsScrolling"
  ],
  html: ["html", "goftino", "clarityRntComponent", "faviconRntComponent"],
  goftino: ["goftino"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  form: ["form", "platforms", "policiesCheckbox", "link", "submitButton"],
  platforms: ["platforms", "policiesCheckbox", "link", "submitButton"],
  policiesCheckbox: ["policiesCheckbox", "link"],
  link: ["link"],
  submitButton: ["submitButton"],
  guide: ["guide", "_1", "_2", "_3"],
  _1: ["_1"],
  _2: ["_2"],
  _3: ["_3"],
  guidePanel: ["guidePanel", "_4", "_5", "_6"],
  _4: ["_4"],
  _5: ["_5"],
  _6: ["_6"],
  quotes: ["quotes", "testimonialsScrolling"],
  testimonialsScrolling: ["testimonialsScrolling"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  registration: "div";
  html: "div";
  goftino: typeof Embed;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  form: typeof FormWrapper;
  platforms: typeof FormItemWrapper;
  policiesCheckbox: typeof Checkbox;
  link: "a";
  submitButton: typeof AntdButton;
  guide: "div";
  _1: "div";
  _2: "div";
  _3: "div";
  guidePanel: "div";
  _4: "div";
  _5: "div";
  _6: "div";
  quotes: "div";
  testimonialsScrolling: typeof TestimonialsScrolling;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegistration__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegistration__VariantsArgs;
    args?: PlasmicRegistration__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegistration__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRegistration__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegistration__ArgProps,
          internalVariantPropNames: PlasmicRegistration__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegistration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "registration") {
    func.displayName = "PlasmicRegistration";
  } else {
    func.displayName = `PlasmicRegistration.${nodeName}`;
  }
  return func;
}

export const PlasmicRegistration = Object.assign(
  // Top-level PlasmicRegistration renders the root element
  makeNodeComponent("registration"),
  {
    // Helper components rendering sub-elements
    html: makeNodeComponent("html"),
    goftino: makeNodeComponent("goftino"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    form: makeNodeComponent("form"),
    platforms: makeNodeComponent("platforms"),
    policiesCheckbox: makeNodeComponent("policiesCheckbox"),
    link: makeNodeComponent("link"),
    submitButton: makeNodeComponent("submitButton"),
    guide: makeNodeComponent("guide"),
    _1: makeNodeComponent("_1"),
    _2: makeNodeComponent("_2"),
    _3: makeNodeComponent("_3"),
    guidePanel: makeNodeComponent("guidePanel"),
    _4: makeNodeComponent("_4"),
    _5: makeNodeComponent("_5"),
    _6: makeNodeComponent("_6"),
    quotes: makeNodeComponent("quotes"),
    testimonialsScrolling: makeNodeComponent("testimonialsScrolling"),

    // Metadata about props expected for PlasmicRegistration
    internalVariantProps: PlasmicRegistration__VariantProps,
    internalArgProps: PlasmicRegistration__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRegistration;
/* prettier-ignore-end */
