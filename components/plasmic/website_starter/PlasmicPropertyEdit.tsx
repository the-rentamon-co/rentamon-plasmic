/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: YgmWRwZ4aPr5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicPropertyEdit.module.css"; // plasmic-import: YgmWRwZ4aPr5/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon

createPlasmicElementProxy;

export type PlasmicPropertyEdit__VariantMembers = {};
export type PlasmicPropertyEdit__VariantsArgs = {};
type VariantPropType = keyof PlasmicPropertyEdit__VariantsArgs;
export const PlasmicPropertyEdit__VariantProps = new Array<VariantPropType>();

export type PlasmicPropertyEdit__ArgsType = {};
type ArgPropType = keyof PlasmicPropertyEdit__ArgsType;
export const PlasmicPropertyEdit__ArgProps = new Array<ArgPropType>();

export type PlasmicPropertyEdit__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  name?: Flex__<"div">;
  type?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  image?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  imagePreview?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultPropertyEditProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPropertyEdit__RenderFunc(props: {
  variants: PlasmicPropertyEdit__VariantsArgs;
  args: PlasmicPropertyEdit__ArgsType;
  overrides: PlasmicPropertyEdit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.properties[$ctx.params.id - 1]
                .property_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Ch58
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rTcZv
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={(() => {
              try {
                return `https://api-v2.rentamon.com/api/user_info?property_id=${$ctx.params.id}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {(() => {
              try {
                return $state.step == 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                hasGap={true}
                className={classNames(projectcss.all, sty.name)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hYmNp)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ujfDw
                    )}
                  >
                    {
                      "\u0627\u06cc\u062c\u0627\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dvUxm
                    )}
                  >
                    {
                      "\u0646\u0648\u0639 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0686\u06cc\u0647\u061f"
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qsUmy)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__k6Quz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lw8Mb
                      )}
                    >
                      {
                        "\u0648\u06cc\u0644\u0627/\u0648\u06cc\u0644\u0627\u06cc\u06cc"
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__b7Hq5)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__njdMr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__arb4E
                      )}
                    >
                      {
                        "\u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646/\u0633\u0648\u0626\u06cc\u062a"
                      }
                    </div>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ikYam)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__apMtH)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sE5Qd
                      )}
                    >
                      {
                        "\u0628\u0648\u0645\u06af\u0631\u062f\u06cc/\u0647\u0627\u0633\u062a\u0644"
                      }
                    </div>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wAdqO)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___5X2)}
                  >
                    {"\u0628\u0639\u062f"}
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button___0SrO9)}
                  >
                    {"\u0642\u0628\u0644"}
                  </Button>
                </Stack__>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $state.step == 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"type"}
                data-plasmic-override={overrides.type}
                hasGap={true}
                className={classNames(projectcss.all, sty.type)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3BVdg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qCbD
                    )}
                  >
                    {
                      "\u0646\u0627\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pWQb
                    )}
                  >
                    {
                      "\u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627 \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0686\u06cc \u0628\u0627\u0634\u0647\u061f"
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vzuDv)}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.textInput2),
                      onChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      value:
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "textInput2.value",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return $state.apiRequest.data.properties[
                                  $ctx.params.id - 1
                                ].property_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <TextInput
                        data-plasmic-name={"textInput2"}
                        data-plasmic-override={overrides.textInput2}
                        {...child$Props}
                      />
                    );
                  })()}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fjjF)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__yX5Xz)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/change_property_name",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      let a = {
                                        property_name: $state.textInput2.value,
                                        property_id: $ctx.params.id
                                      };
                                      return a;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    {"\u0628\u0639\u062f"}
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__vcGme)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                  >
                    {"\u0642\u0628\u0644"}
                  </Button>
                </Stack__>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $state.step == 2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"image"}
                data-plasmic-override={overrides.image}
                hasGap={true}
                className={classNames(projectcss.all, sty.image)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mvHmx)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__soxc5
                    )}
                  >
                    {
                      "\u062a\u0635\u0648\u06cc\u0631 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qTcXd
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `برای «${
                            $state.apiRequest.data.properties[
                              $ctx.params.id - 1
                            ].property_name
                          }» یه عکس بذار`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0628\u0631\u0627\u06cc \u00ab\u0633\u0648\u06cc\u06cc\u062a \u0645\u0628\u0644\u0647 \u0645\u0647\u062a\u0627\u0628\u00bb \u06cc\u0647 \u0639\u06a9\u0633 \u0628\u0630\u0627\u0631";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kDi)}
                >
                  <UploadWrapper
                    data-plasmic-name={"upload"}
                    data-plasmic-override={overrides.upload}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload)}
                    files={generateStateValueProp($state, ["upload", "files"])}
                    listType={"picture"}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload",
                        "files"
                      ]).apply(null, eventArgs);
                    }}
                    showUploadList={true}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__eeVZo
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zDxI0
                        )}
                      >
                        {
                          "\u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc \u062a\u0635\u0648\u06cc\u0631"
                        }
                      </div>
                    </AntdButton>
                  </UploadWrapper>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bip8X)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__mJj3Z)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/change_property_pic",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      let a = {
                                        pic: $state.upload.files,
                                        property_id: $ctx.params.id
                                      };
                                      return a;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    {"\u0628\u0639\u062f"}
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__ykr5G)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                  >
                    {"\u0642\u0628\u0644"}
                  </Button>
                </Stack__>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $state.step == 3;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"imagePreview"}
                data-plasmic-override={overrides.imagePreview}
                hasGap={true}
                className={classNames(projectcss.all, sty.imagePreview)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cN9En)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4L1Vc
                    )}
                  >
                    {
                      "\u0646\u0627\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__asRwP
                    )}
                  >
                    {
                      "\u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627 \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0686\u06cc \u0628\u0627\u0634\u0647\u061f"
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6KjN)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8XV96)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__rJpwz)}
                  >
                    {"\u0628\u0639\u062f"}
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__dFv1O)}
                  >
                    {"\u0642\u0628\u0644"}
                  </Button>
                </Stack__>
              </Stack__>
            ) : null}
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "name",
    "type",
    "textInput2",
    "image",
    "upload",
    "imagePreview",
    "img"
  ],
  apiRequest: [
    "apiRequest",
    "name",
    "type",
    "textInput2",
    "image",
    "upload",
    "imagePreview",
    "img"
  ],
  name: ["name"],
  type: ["type", "textInput2"],
  textInput2: ["textInput2"],
  image: ["image", "upload"],
  upload: ["upload"],
  imagePreview: ["imagePreview", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  name: "div";
  type: "div";
  textInput2: typeof TextInput;
  image: "div";
  upload: typeof UploadWrapper;
  imagePreview: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPropertyEdit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPropertyEdit__VariantsArgs;
    args?: PlasmicPropertyEdit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPropertyEdit__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPropertyEdit__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPropertyEdit__ArgProps,
          internalVariantPropNames: PlasmicPropertyEdit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPropertyEdit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPropertyEdit";
  } else {
    func.displayName = `PlasmicPropertyEdit.${nodeName}`;
  }
  return func;
}

export const PlasmicPropertyEdit = Object.assign(
  // Top-level PlasmicPropertyEdit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    _name: makeNodeComponent("name"),
    type: makeNodeComponent("type"),
    textInput2: makeNodeComponent("textInput2"),
    image: makeNodeComponent("image"),
    upload: makeNodeComponent("upload"),
    imagePreview: makeNodeComponent("imagePreview"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicPropertyEdit
    internalVariantProps: PlasmicPropertyEdit__VariantProps,
    internalArgProps: PlasmicPropertyEdit__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPropertyEdit;
/* prettier-ignore-end */
