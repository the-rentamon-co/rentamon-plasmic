// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: nz5EAC1dRXp3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicWallet3.module.css"; // plasmic-import: nz5EAC1dRXp3/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicWallet3__VariantMembers = {};
export type PlasmicWallet3__VariantsArgs = {};
type VariantPropType = keyof PlasmicWallet3__VariantsArgs;
export const PlasmicWallet3__VariantProps = new Array<VariantPropType>();

export type PlasmicWallet3__ArgsType = {};
type ArgPropType = keyof PlasmicWallet3__ArgsType;
export const PlasmicWallet3__ArgProps = new Array<ArgPropType>();

export type PlasmicWallet3__OverridesType = {
  wallet?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  favIcon?: Flex__<typeof Embed>;
  walletDesc?: Flex__<"div">;
  balanceAndCharge?: Flex__<"div">;
  balance?: Flex__<"div">;
  balance2?: Flex__<"div">;
  report?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  qA?: Flex__<"div">;
  accordionMain?: Flex__<typeof AntdAccordion>;
  _2?: Flex__<typeof AntdAccordionItem>;
  _1?: Flex__<"div">;
  _4?: Flex__<typeof AntdAccordionItem>;
  _5?: Flex__<typeof AntdAccordionItem>;
  _6?: Flex__<typeof AntdAccordionItem>;
  ctaReferral?: Flex__<"div">;
  html?: Flex__<"div">;
  clarity2?: Flex__<typeof Embed>;
  goftino?: Flex__<typeof Embed>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
  profile?: Flex__<typeof ApiRequest>;
};

export interface DefaultWallet3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWallet3__RenderFunc(props: {
  variants: PlasmicWallet3__VariantsArgs;
  args: PlasmicWallet3__ArgsType;
  overrides: PlasmicWallet3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordionMain.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "tokenResponse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicWallet3.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicWallet3.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicWallet3.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"wallet"}
          data-plasmic-override={overrides.wallet}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.wallet
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <SideBar2
              data-plasmic-name={"sideBar2"}
              data-plasmic-override={overrides.sideBar2}
              className={classNames("__wab_instance", sty.sideBar2)}
              isOpen={false}
              userData={(() => {
                try {
                  return $state.profile2.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div className={classNames(projectcss.all, sty.freeBox__vz8Jg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n7WGr
                )}
              >
                {"\u06a9\u06cc\u0641 \u067e\u0648\u0644"}
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"profile2"}
              data-plasmic-override={overrides.profile2}
              className={classNames("__wab_instance", sty.profile2)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "profile2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile2"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <Embed
            data-plasmic-name={"favIcon"}
            data-plasmic-override={overrides.favIcon}
            className={classNames("__wab_instance", sty.favIcon)}
            code={
              "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n// icon address\r\n    link.href = 'https://rentamon.com/wp-content/uploads/2024/03/cropped-Logo-2024-fav-icon-1.png';\r\n})();\r\n</script>"
            }
          />

          <div
            data-plasmic-name={"walletDesc"}
            data-plasmic-override={overrides.walletDesc}
            className={classNames(projectcss.all, sty.walletDesc)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dfpnz
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "\u0647\u0631 \u0686\u06cc\u0632\u06cc \u06a9\u0647 \u0645\u0631\u0628\u0648\u0637 \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u0647\u060c \u0627\u06cc\u0646\u200c\u062c\u0627\u0633\u062a. "
                : "\u0647\u0631 \u0686\u06cc\u0632\u06cc \u06a9\u0647 \u0645\u0631\u0628\u0648\u0637 \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u0647\u060c \u0627\u06cc\u0646\u200c\u062c\u0627\u0633\u062a. "}
            </div>
          </div>
          <div
            data-plasmic-name={"balanceAndCharge"}
            data-plasmic-override={overrides.balanceAndCharge}
            className={classNames(projectcss.all, sty.balanceAndCharge)}
          >
            <div
              data-plasmic-name={"balance"}
              data-plasmic-override={overrides.balance}
              className={classNames(projectcss.all, sty.balance)}
            >
              <div
                data-plasmic-name={"balance2"}
                data-plasmic-override={overrides.balance2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.balance2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        const balance_info =
                          $props.userData.user_info.balance_info;
                        const reducedBalance = Math.floor(
                          balance_info.balance / 10
                        );
                        const formattedBalance = new Intl.NumberFormat(
                          "fa-IR"
                        ).format(reducedBalance);
                        return `موجودی: ${formattedBalance} تومان`;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"report"}
              data-plasmic-override={overrides.report}
              className={classNames(projectcss.all, sty.report)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hiIkz
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToTransactions"] = true
                    ? (() => {
                        const actionArgs = { destination: `/transactions` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToTransactions"] != null &&
                    typeof $steps["goToTransactions"] === "object" &&
                    typeof $steps["goToTransactions"].then === "function"
                  ) {
                    $steps["goToTransactions"] = await $steps[
                      "goToTransactions"
                    ];
                  }
                }}
              >
                {
                  "\u06af\u0632\u0627\u0631\u0634 \u0645\u0635\u0631\u0641 \u0627\u0639\u062a\u0628\u0627\u0631"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__dNxTs)}>
            <div className={classNames(projectcss.all, sty.freeBox__p3SMt)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5HxjS
                )}
              >
                {
                  "\u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647 \u0648 \u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                }
              </div>
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__yLxRv)}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["goToPaymentPage"] = false
                  ? (() => {
                      const actionArgs = {};
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPaymentPage"] != null &&
                  typeof $steps["goToPaymentPage"] === "object" &&
                  typeof $steps["goToPaymentPage"].then === "function"
                ) {
                  $steps["goToPaymentPage"] = await $steps["goToPaymentPage"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/f0e9689b-e711-4212-8551-e138c23b4cf5",
                          undefined,
                          (() => {
                            try {
                              return { amount: "1000000" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.tokenResponse.payInfo =
                            $steps.invokeGlobalAction.data.payinfo;
                          $state.tokenResponse.amount = "۱۰۰\u066C۰۰۰";
                          return console.log($state.tokenResponse);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }

                $steps["updateLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading2"] != null &&
                  typeof $steps["updateLoading2"] === "object" &&
                  typeof $steps["updateLoading2"].then === "function"
                ) {
                  $steps["updateLoading2"] = await $steps["updateLoading2"];
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wreVx)}
              >
                {(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__sbWyj)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cnBMu
                  )}
                >
                  {
                    "\u06f1\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646"
                  }
                </div>
              </Stack__>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__pRlw)}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["goToPaymentPage"] = false
                  ? (() => {
                      const actionArgs = {};
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPaymentPage"] != null &&
                  typeof $steps["goToPaymentPage"] === "object" &&
                  typeof $steps["goToPaymentPage"].then === "function"
                ) {
                  $steps["goToPaymentPage"] = await $steps["goToPaymentPage"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/f0e9689b-e711-4212-8551-e138c23b4cf5",
                          undefined,
                          (() => {
                            try {
                              return { amount: "2000000" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.tokenResponse.payInfo =
                            $steps.invokeGlobalAction.data.payinfo;
                          $state.tokenResponse.amount = "۲۰۰\u066C۰۰۰";
                          return console.log($state.tokenResponse);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }

                $steps["updateLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading2"] != null &&
                  typeof $steps["updateLoading2"] === "object" &&
                  typeof $steps["updateLoading2"].then === "function"
                ) {
                  $steps["updateLoading2"] = await $steps["updateLoading2"];
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pSwBa)}
              >
                {(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__pMhIa)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uqs1C
                  )}
                >
                  {
                    "\u06f2\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646"
                  }
                </div>
              </Stack__>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__zDpDv)}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["goToPaymentPage"] = false
                  ? (() => {
                      const actionArgs = {};
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPaymentPage"] != null &&
                  typeof $steps["goToPaymentPage"] === "object" &&
                  typeof $steps["goToPaymentPage"].then === "function"
                ) {
                  $steps["goToPaymentPage"] = await $steps["goToPaymentPage"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/f0e9689b-e711-4212-8551-e138c23b4cf5",
                          undefined,
                          (() => {
                            try {
                              return { amount: "5000000" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.tokenResponse.payInfo =
                            $steps.invokeGlobalAction.data.payinfo;
                          $state.tokenResponse.amount = "۵۰۰\u066C۰۰۰";
                          return console.log($state.tokenResponse);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }

                $steps["updateLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading2"] != null &&
                  typeof $steps["updateLoading2"] === "object" &&
                  typeof $steps["updateLoading2"].then === "function"
                ) {
                  $steps["updateLoading2"] = await $steps["updateLoading2"];
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__atEw6)}
              >
                {(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__moCGp)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qvZ15
                  )}
                >
                  {
                    "\u06f5\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646"
                  }
                </div>
              </Stack__>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__u2NwF)}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }

                $steps["goToPaymentPage"] = false
                  ? (() => {
                      const actionArgs = {};
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPaymentPage"] != null &&
                  typeof $steps["goToPaymentPage"] === "object" &&
                  typeof $steps["goToPaymentPage"].then === "function"
                ) {
                  $steps["goToPaymentPage"] = await $steps["goToPaymentPage"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/f0e9689b-e711-4212-8551-e138c23b4cf5",
                          undefined,
                          (() => {
                            try {
                              return { amount: "10000000" };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.tokenResponse.payInfo =
                            $steps.invokeGlobalAction.data.payinfo;
                          $state.tokenResponse.amount = "۱\u066C۰۰۰\u066C۰۰۰ ";
                          return console.log($state.tokenResponse);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }

                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }

                $steps["updateLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading2"] != null &&
                  typeof $steps["updateLoading2"] === "object" &&
                  typeof $steps["updateLoading2"].then === "function"
                ) {
                  $steps["updateLoading2"] = await $steps["updateLoading2"];
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fxD4G)}
              >
                {(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rpcMp)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Fr3F
                  )}
                >
                  {
                    "\u06f1 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"
                  }
                </div>
              </Stack__>
            </Button>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ajzfg
              )}
            >
              {
                "\u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0647."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a8Xv
              )}
            >
              {
                "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7-\u06f0\u06f2\u06f1\r\u00a0\n\r"
              }
            </div>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalContentClassName={classNames({
                [sty["pcls_CmpF8jkKA5OQ"]]: true,
                [sty["pcls_X5OuuLluSa_K"]]: hasVariant(
                  globalVariants,
                  "screen",
                  "tablet"
                )
              })}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["modal", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pu3RU
                  )}
                >
                  {
                    "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u067e\u0631\u062f\u0627\u062e\u062a \u062f\u0631 \u062f\u0631\u06af\u0627\u0647 \u0628\u0627\u0646\u06a9"
                  }
                </div>
              }
              trigger={null}
              width={
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? "320"
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? "400"
                  : undefined
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__buUMp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aFwh
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "\u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc:  "
                    : "\u0645\u0628\u0644\u063a:"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tdx4A
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.tokenResponse.amount + " تومان";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__ktBJb)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dFi4N
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tablet")
                      ? "\u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062a\u0645\u0627\u0645\u06cc \u06a9\u0627\u0631\u062a\u200c\u0647\u0627\u06cc \u0628\u0627\u0646\u06a9\u06cc \u0639\u0636\u0648 \u0634\u062a\u0627\u0628"
                      : "\u0645\u0628\u0644\u063a:"}
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__mmdog)}>
                <Button
                  className={classNames("__wab_instance", sty.button__yXzkG)}
                  link={(() => {
                    try {
                      return (
                        "https://payment.zarinpal.com/pg/StartPay/" +
                        $state.tokenResponse.payInfo
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xtbcc
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tablet")
                      ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                      : "\u067e\u0631\u062f\u0627\u062e\u062a"}
                  </div>
                </Button>
              </div>
            </AntdModal>
          </div>
          <div
            data-plasmic-name={"qA"}
            data-plasmic-override={overrides.qA}
            className={classNames(projectcss.all, sty.qA)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__eZrXa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jChhM
                )}
              >
                {
                  "\u0633\u0648\u0627\u0644\u0627\u062a \u0645\u062a\u062f\u0627\u0648\u0644:\r\n\r"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___01HVf)}>
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "accordionMain",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames("__wab_instance", sty.accordionMain),
                    ghost: true,
                    items: (
                      <React.Fragment>
                        <AntdAccordionItem
                          data-plasmic-name={"_2"}
                          data-plasmic-override={overrides._2}
                          className={classNames("__wab_instance", sty._2)}
                          id={"11"}
                          label2={
                            <div
                              data-plasmic-name={"_1"}
                              data-plasmic-override={overrides._1}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty._1
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u0645\u0628\u0644\u063a \u0628\u0627\u0628\u062a \u0686\u06cc\u0647\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__owfpa
                            )}
                          >
                            {
                              "\u0641\u0642\u0637 \u062f\u0631\u0635\u0648\u0631\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u00ab\u0631\u0632\u0631\u0648 \u0646\u0647\u0627\u06cc\u06cc\u00bb \u0627\u0632 \u06a9\u0644 \u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648 \u06a9\u0627\u0631\u0645\u0632\u062f \u06a9\u0645 \u0645\u06cc\u200c\u0634\u0647.\r\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          data-plasmic-name={"_4"}
                          data-plasmic-override={overrides._4}
                          className={classNames("__wab_instance", sty._4)}
                          id={"22"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gljJt
                              )}
                            >
                              {
                                "\u0647\u0632\u06cc\u0646\u0647\u200c\u0647\u0627 \u0686\u0637\u0648\u0631 \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc\u200c\u0634\u0647\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__awyNx
                            )}
                          >
                            {
                              "\u0628\u0639\u0636\u06cc \u0627\u0632 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627 \u0631\u0627\u06cc\u06af\u0627\u0646\u0647. \u0627\u0645\u0627 \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u06a9\u0627\u0631\u0645\u0632\u062f \u062f\u0627\u0631\u0646\u062f \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062f\u0631\u0635\u062f\u06cc \u0627\u0632 \u062c\u0645\u0639 \u0645\u0628\u0644\u063a \u0647\u0631 \u0631\u0632\u0631\u0648 \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc\u200c\u0634\u0646.\n\n\u0645\u062b\u0627\u0644: \u062f\u0631\u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0648\u06cc\u0698\u06af\u06cc \u00ab\u067e\u0631 \u06a9\u0631\u062f\u0646 \u062e\u0648\u062f\u06a9\u0627\u0631 \u062a\u0642\u0648\u06cc\u0645\u00bb \u0641\u0639\u0627\u0644 \u0628\u0627\u0634\u0647\u060c \u0648 \u06cc\u06a9 \u0631\u0632\u0631\u0648 \u06f2 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0646\u06cc \u0628\u06af\u06cc\u0631\u06cc\u060c \u0645\u06cc\u0632\u0627\u0646 \u06f1.\u06f5\u066a \u0627\u0632 \u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u06a9\u0627\u0631\u0645\u0632\u062f \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc\u200c\u0634\u0647:\n\u06f3\u06f0,\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646 = \u06f1.\u06f5\u066a \u00d7 \u06f2,\u06f0\u06f0\u06f0,\u06f0\u06f0\u06f0\n\n\r\n\r"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          data-plasmic-name={"_5"}
                          data-plasmic-override={overrides._5}
                          className={classNames("__wab_instance", sty._5)}
                          id={"33"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3AmO
                              )}
                            >
                              {
                                "\u0627\u0645\u06a9\u0627\u0646 \u0644\u063a\u0648 \u0639\u0636\u0648\u06cc\u062a \u062f\u0631 \u0628\u0631\u0646\u0627\u0645\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0647\u0633\u062a\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vHy7V
                            )}
                          >
                            {
                              "\u0645\u0627 \u062a\u0645\u0627\u0645 \u062a\u0644\u0627\u0634\u0645\u0648\u0646 \u0631\u0648 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645 \u062a\u0627 \u0647\u0645\u06cc\u0634\u0647 \u0631\u0627\u0636\u06cc \u0628\u0627\u0634\u06cc. \u0648\u0644\u06cc \u0647\u0631 \u0632\u0645\u0627\u0646 \u0648 \u0628\u0647 \u0647\u0631 \u062f\u0644\u06cc\u0644 \u062a\u0645\u0627\u06cc\u0644\u06cc \u0628\u0647 \u0627\u062f\u0627\u0645\u0647\u200c\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0646\u062f\u0627\u0634\u062a\u06cc\u060c \u0639\u0636\u0648\u06cc\u062a \u0644\u063a\u0648 \u0634\u062f\u0647 \u0648 \u06a9\u0644 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0639\u0648\u062f\u062a \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          data-plasmic-name={"_6"}
                          data-plasmic-override={overrides._6}
                          className={classNames("__wab_instance", sty._6)}
                          id={"44"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hPsL9
                              )}
                            >
                              {
                                "\u06a9\u06cc\u0641 \u067e\u0648\u0644\u0645 \u0631\u0648 \u0686\u0637\u0648\u0631 \u0634\u0627\u0631\u0698 \u06a9\u0646\u0645\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kcWmW
                            )}
                          >
                            {
                              "\u06a9\u0627\u0641\u06cc\u0647 \u0631\u0648\u06cc \u06cc\u06a9\u06cc \u0627\u0632 \u0628\u0633\u062a\u0647\u200c\u0647\u0627\u06cc \u0628\u0627\u0644\u0627 \u0628\u0632\u0646\u06cc \u0648 \u062f\u0631 \u062f\u0631\u06af\u0627\u0647 \u0628\u0627\u0646\u06a9 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646\u06cc. \u0628\u0627 \u06cc\u06a9 \u0641\u0627\u0635\u0644\u0647\u200c\u06cc \u0632\u0645\u0627\u0646\u06cc \u06a9\u0648\u062a\u0627\u0647\u060c \u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0647.\r\n\r\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__zo7V
                          )}
                          id={"55"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aBwTb
                              )}
                            >
                              {
                                "\u062f\u0631\u0635\u0648\u0631\u062a \u062e\u0627\u0644\u06cc \u0634\u062f\u0646 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0686\u06cc \u0645\u06cc\u0634\u0647\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zgieD
                            )}
                          >
                            {
                              "\u062f\u0631\u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u00ab\u06a9\u0645\u062a\u0631 \u0627\u0632 \u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 \u0628\u0631\u0627\u06cc \u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f\u00bb \u0634\u0645\u0627 \u0628\u0634\u0647\u060c \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u062f\u0627\u0631\u0627\u06cc \u06a9\u0627\u0631\u0645\u0632\u062f \u0647\u0633\u062a\u0646\u062f \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0646. \u0627\u0645\u0627 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0631\u0627\u06cc\u06af\u0627\u0646 \u0647\u0645\u0686\u0646\u0627\u0646 \u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0647\u0633\u062a\u0646\u062f.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__adTgR
                          )}
                          id={"66"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6G02U
                              )}
                            >
                              {
                                "\u0627\u06af\u0647 \u0631\u0632\u0631\u0648 \u0644\u063a\u0648 \u0628\u0634\u0647\u060c \u06a9\u0627\u0631\u0645\u0632\u062f\u06cc \u06a9\u0647 \u062f\u0627\u062f\u0645 \u0628\u0631\u0645\u06cc\u200c\u06af\u0631\u062f\u0647\u061f"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___09Ui9
                            )}
                          >
                            {
                              "\u0628\u0644\u0647. \u062f\u0631\u0635\u0648\u0631\u062a \u0644\u063a\u0648 \u0634\u062f\u0646 \u0631\u0632\u0631\u0648\u060c \u06a9\u0627\u0631\u0645\u0632\u062f \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a \u0628\u0631\u0645\u06cc\u200c\u06af\u0631\u062f\u0647.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__sEpel
                          )}
                          id={"77"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bL9Ja
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u062a\u0639\u0631\u0641\u0647 \u0628\u0631\u0627\u06cc \u0633\u0627\u0644 \u062c\u062f\u06cc\u062f \u062a\u063a\u06cc\u06cc\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647\u061f"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fGCQ
                            )}
                          >
                            {
                              "\u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0647\u06cc\u0686 \u062a\u0635\u0645\u06cc\u0645 \u0648 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0627\u06cc \u0628\u0631\u0627\u06cc \u062a\u063a\u06cc\u06cc\u0631 \u062a\u0639\u0631\u0641\u0647\u200c\u0647\u0627 \u062f\u0631 \u0633\u0627\u0644 \u062c\u062f\u06cc\u062f (\u06f1\u06f4\u06f0\u06f4) \u0646\u062f\u0627\u0631\u06cc\u0645."
                            }
                          </div>
                        </AntdAccordionItem>
                      </React.Fragment>
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordionMain", "activePanelId"],
                        AntdAccordion_Helpers
                      ).apply(null, eventArgs);
                    }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "accordionMain.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"accordionMain"}
                      data-plasmic-override={overrides.accordionMain}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
            <div
              data-plasmic-name={"ctaReferral"}
              data-plasmic-override={overrides.ctaReferral}
              className={classNames(projectcss.all, sty.ctaReferral)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___45D1H
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToReferral"] = true
                    ? (() => {
                        const actionArgs = { destination: `/referral` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToReferral"] != null &&
                    typeof $steps["goToReferral"] === "object" &&
                    typeof $steps["goToReferral"].then === "function"
                  ) {
                    $steps["goToReferral"] = await $steps["goToReferral"];
                  }
                }}
              >
                {
                  "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u0631\u0627\u06cc\u06af\u0627\u0646 \ud83c\udf81"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"html"}
              data-plasmic-override={overrides.html}
              className={classNames(projectcss.all, sty.html)}
            >
              <Embed
                data-plasmic-name={"clarity2"}
                data-plasmic-override={overrides.clarity2}
                className={classNames("__wab_instance", sty.clarity2)}
                code={
                  '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
                }
              />

              <Embed
                data-plasmic-name={"goftino"}
                data-plasmic-override={overrides.goftino}
                className={classNames("__wab_instance", sty.goftino)}
                code={
                  '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
                }
              />
            </div>
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />

          {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
            <ApiRequest
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames("__wab_instance", sty.profile)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile"] = ref;
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Olf5
                )}
              >
                {"Enter some text"}
              </div>
            </ApiRequest>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wallet: [
    "wallet",
    "header",
    "sideBar2",
    "profile2",
    "favIcon",
    "walletDesc",
    "balanceAndCharge",
    "balance",
    "balance2",
    "report",
    "modal",
    "qA",
    "accordionMain",
    "_2",
    "_1",
    "_4",
    "_5",
    "_6",
    "ctaReferral",
    "html",
    "clarity2",
    "goftino",
    "rentamonFooter",
    "profile"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  favIcon: ["favIcon"],
  walletDesc: ["walletDesc"],
  balanceAndCharge: ["balanceAndCharge", "balance", "balance2", "report"],
  balance: ["balance", "balance2"],
  balance2: ["balance2"],
  report: ["report"],
  modal: ["modal"],
  qA: [
    "qA",
    "accordionMain",
    "_2",
    "_1",
    "_4",
    "_5",
    "_6",
    "ctaReferral",
    "html",
    "clarity2",
    "goftino"
  ],
  accordionMain: ["accordionMain", "_2", "_1", "_4", "_5", "_6"],
  _2: ["_2", "_1"],
  _1: ["_1"],
  _4: ["_4"],
  _5: ["_5"],
  _6: ["_6"],
  ctaReferral: ["ctaReferral"],
  html: ["html", "clarity2", "goftino"],
  clarity2: ["clarity2"],
  goftino: ["goftino"],
  rentamonFooter: ["rentamonFooter"],
  profile: ["profile"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  wallet: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  favIcon: typeof Embed;
  walletDesc: "div";
  balanceAndCharge: "div";
  balance: "div";
  balance2: "div";
  report: "div";
  modal: typeof AntdModal;
  qA: "div";
  accordionMain: typeof AntdAccordion;
  _2: typeof AntdAccordionItem;
  _1: "div";
  _4: typeof AntdAccordionItem;
  _5: typeof AntdAccordionItem;
  _6: typeof AntdAccordionItem;
  ctaReferral: "div";
  html: "div";
  clarity2: typeof Embed;
  goftino: typeof Embed;
  rentamonFooter: typeof RentamonFooter;
  profile: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWallet3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWallet3__VariantsArgs;
    args?: PlasmicWallet3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWallet3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWallet3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWallet3__ArgProps,
          internalVariantPropNames: PlasmicWallet3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWallet3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wallet") {
    func.displayName = "PlasmicWallet3";
  } else {
    func.displayName = `PlasmicWallet3.${nodeName}`;
  }
  return func;
}

export const PlasmicWallet3 = Object.assign(
  // Top-level PlasmicWallet3 renders the root element
  makeNodeComponent("wallet"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    favIcon: makeNodeComponent("favIcon"),
    walletDesc: makeNodeComponent("walletDesc"),
    balanceAndCharge: makeNodeComponent("balanceAndCharge"),
    balance: makeNodeComponent("balance"),
    balance2: makeNodeComponent("balance2"),
    report: makeNodeComponent("report"),
    modal: makeNodeComponent("modal"),
    qA: makeNodeComponent("qA"),
    accordionMain: makeNodeComponent("accordionMain"),
    _2: makeNodeComponent("_2"),
    _1: makeNodeComponent("_1"),
    _4: makeNodeComponent("_4"),
    _5: makeNodeComponent("_5"),
    _6: makeNodeComponent("_6"),
    ctaReferral: makeNodeComponent("ctaReferral"),
    html: makeNodeComponent("html"),
    clarity2: makeNodeComponent("clarity2"),
    goftino: makeNodeComponent("goftino"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),
    profile: makeNodeComponent("profile"),

    // Metadata about props expected for PlasmicWallet3
    internalVariantProps: PlasmicWallet3__VariantProps,
    internalArgProps: PlasmicWallet3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "کیف پول",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWallet3;
/* prettier-ignore-end */
