/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: ew-lMhwJhrpF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSplash.module.css"; // plasmic-import: ew-lMhwJhrpF/css

import Icon79Icon from "./icons/PlasmicIcon__Icon79"; // plasmic-import: 8tMAV60HqJyj/icon

createPlasmicElementProxy;

export type PlasmicSplash__VariantMembers = {};
export type PlasmicSplash__VariantsArgs = {};
type VariantPropType = keyof PlasmicSplash__VariantsArgs;
export const PlasmicSplash__VariantProps = new Array<VariantPropType>();

export type PlasmicSplash__ArgsType = {};
type ArgPropType = keyof PlasmicSplash__ArgsType;
export const PlasmicSplash__ArgProps = new Array<ArgPropType>();

export type PlasmicSplash__OverridesType = {
  root?: Flex__<"div">;
  center?: Flex__<"div">;
  svg?: Flex__<"svg">;
  sideEffect?: Flex__<typeof SideEffect>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
};

export interface DefaultSplashProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSplash__RenderFunc(props: {
  variants: PlasmicSplash__VariantsArgs;
  args: PlasmicSplash__ArgsType;
  overrides: PlasmicSplash__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "src",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isErrorHappen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            hasVariant(globalVariants, "screen", "mobile") ? `` : undefined
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__v4W4T)}>
            {(() => {
              try {
                return !$state.isErrorHappen;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fzVw8)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "50px"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "60px"
                    : "80px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image140.gif",
                  fullWidth: 500,
                  fullHeight: 500,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {(() => {
              try {
                return !$state.isErrorHappen;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cww71
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u062f\u0631 \u062d\u0627\u0644 \u0627\u0646\u062a\u0642\u0627\u0644 \u0628\u0647 \u067e\u0646\u0644 \u06a9\u0627\u0631\u0628\u0631\u06cc..."
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? "\u062f\u0631 \u062d\u0627\u0644 \u0627\u0646\u062a\u0642\u0627\u0644 \u0628\u0647 \u067e\u0646\u0644 \u06a9\u0627\u0631\u0628\u0631\u06cc..."
                  : "\u062f\u0631 \u062d\u0627\u0644 \u0627\u0646\u062a\u0642\u0627\u0644 \u0628\u0647 \u067e\u0646\u0644 \u06a9\u0627\u0631\u0628\u0631\u06cc..."}
              </div>
            ) : null}
          </div>
          {(() => {
            try {
              return $state.isErrorHappen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__lbOl7)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xZcNv
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u0628\u0647 \u062f\u0644\u06cc\u0644 \u0627\u062e\u062a\u0644\u0627\u0644\u0627\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u0645\u0645\u06a9\u0646\u0647 \u062e\u062f\u0645\u0627\u062a \u0646\u0627\u067e\u0627\u06cc\u062f\u0627\u0631 \u0628\u0627\u0634\u0647\n\n\r\n\u00a0\u062f\u0631\u0635\u0648\u0631\u062a \u0645\u0634\u0627\u0647\u062f\u0647 \u062e\u0637\u0627\u060c \u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639 \u0628\u062f\u0647\u00a0\r\n\u00a0\u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7\r"
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? "\u0644\u0637\u0641\u0627 \u0648\u0636\u0639\u06cc\u062a \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u062e\u0648\u062f \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u06a9\u0646\u06cc\u062f"
                  : "\u0644\u0637\u0641\u0627 \u0648\u0636\u0639\u06cc\u062a \u0627\u062a\u0635\u0627\u0644 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u062e\u0648\u062f \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u06a9\u0646\u06cc\u062f"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.freeBox__nxgSw,
                  "clickable fadein"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return location.reload();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jc0Fd
                  )}
                >
                  {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ppz2)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"20px"}
                  loading={"lazy"}
                  src={
                    "https://media.rentamon.com/icon%2Freload.svg"
                  }
                />
              </Stack__>
            </div>
          ) : null}
          <div
            data-plasmic-name={"center"}
            data-plasmic-override={overrides.center}
            className={classNames(
              projectcss.all,
              sty.center,
              hasVariant(globalVariants, "screen", "mobile")
                ? "logo-effect1"
                : ``
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__bXpcU,
                hasVariant(globalVariants, "screen", "mobile") ? `` : undefined
              )}
            >
              <Icon79Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(
                  projectcss.all,
                  sty.svg,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ``
                    : "fadeinf"
                )}
                role={"img"}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__pwpH,
                hasVariant(globalVariants, "screen", "mobile")
                  ? ``
                  : "logo-effect1"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eYj3W,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ``
                    : undefined
                )}
              >
                {
                  "\u0645\u062f\u06cc\u0631\u06cc\u062a \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                }
              </div>
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["updateSrc"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["src"]
                      },
                      operation: 0,
                      value: ($state.src = $ctx.query.src)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSrc"] != null &&
                typeof $steps["updateSrc"] === "object" &&
                typeof $steps["updateSrc"].then === "function"
              ) {
                $steps["updateSrc"] = await $steps["updateSrc"];
              }

              $steps["setCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function setCookie(name, value, hours) {
                            let expires = "";
                            if (hours) {
                              const date = new Date();
                              date.setTime(
                                date.getTime() + hours * 60 * 60 * 1000
                              );
                              expires = "; expires=" + date.toUTCString();
                            }
                            document.cookie =
                              name + "=" + (value || "") + expires + "; path=/";
                          }
                          const params = new URLSearchParams(
                            window.location.search
                          );
                          const srcValue = params.get("src");
                          if (srcValue) {
                            return setCookie("source", srcValue, 12);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["checkIsUserLogin"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/splash/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/splash/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkIsUserLogin"] != null &&
                typeof $steps["checkIsUserLogin"] === "object" &&
                typeof $steps["checkIsUserLogin"].then === "function"
              ) {
                $steps["checkIsUserLogin"] = await $steps["checkIsUserLogin"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://gateway.rentamon.com/webhook/get_user_segment"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateErrorHandeling"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isErrorHappen"]
                      },
                      operation: 0,
                      value: (() => {
                        console.log($steps.invokeGlobalAction.status);
                        if ($steps.invokeGlobalAction.status != 200) {
                          return ($state.isErrorHappen = true);
                        } else {
                          return ($state.isErrorHappen = false);
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateErrorHandeling"] != null &&
                typeof $steps["updateErrorHandeling"] === "object" &&
                typeof $steps["updateErrorHandeling"].then === "function"
              ) {
                $steps["updateErrorHandeling"] = await $steps[
                  "updateErrorHandeling"
                ];
              }

              $steps["redirectAndSetUserCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            !$steps.invokeGlobalAction ||
                            !$steps.invokeGlobalAction.data ||
                            $steps.invokeGlobalAction.data.flag == null
                          ) {
                            $state.isErrorHappen = true;
                          }
                          function setCookie(name, value, hours) {
                            let expires = "";
                            if (hours) {
                              const date = new Date();
                              date.setTime(
                                date.getTime() + hours * 60 * 60 * 1000
                              );
                              expires = "; expires=" + date.toUTCString();
                            }
                            document.cookie =
                              name + "=" + (value || "") + expires + "; path=/";
                          }
                          setCookie(
                            "vt",
                            $steps.invokeGlobalAction.data.flag || 99,
                            0.3333
                          );
                          console.log($steps.invokeGlobalAction.data);
                          console.log($steps.invokeGlobalAction.data.flag);
                          if ($steps.invokeGlobalAction.data.flag == 3) {
                            window.location.href =
                              "https://web.rentamon.com/panels/?prop_id=1";
                          }
                          if ($steps.invokeGlobalAction.data.flag == 2) {
                            window.location.href =
                              "https://rentamon.com//calendar/";
                          }
                          if ($steps.invokeGlobalAction.data.flag == 1) {
                            window.location.href =
                              "https://rentamon.com//panel/";
                          }
                          if ($steps.invokeGlobalAction.data.flag == 0) {
                            return (window.location.href =
                              "https://rentamon.com//calendar/");
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["redirectAndSetUserCookie"] != null &&
                typeof $steps["redirectAndSetUserCookie"] === "object" &&
                typeof $steps["redirectAndSetUserCookie"].then === "function"
              ) {
                $steps["redirectAndSetUserCookie"] = await $steps[
                  "redirectAndSetUserCookie"
                ];
              }
            }}
          />

          <ClarityRntComponent
            data-plasmic-name={"clarityRntComponent"}
            data-plasmic-override={overrides.clarityRntComponent}
            className={classNames("__wab_instance", sty.clarityRntComponent)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "center", "svg", "sideEffect", "clarityRntComponent"],
  center: ["center", "svg"],
  svg: ["svg"],
  sideEffect: ["sideEffect"],
  clarityRntComponent: ["clarityRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  center: "div";
  svg: "svg";
  sideEffect: typeof SideEffect;
  clarityRntComponent: typeof ClarityRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSplash__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSplash__VariantsArgs;
    args?: PlasmicSplash__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSplash__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSplash__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSplash__ArgProps,
          internalVariantPropNames: PlasmicSplash__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSplash__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSplash";
  } else {
    func.displayName = `PlasmicSplash.${nodeName}`;
  }
  return func;
}

export const PlasmicSplash = Object.assign(
  // Top-level PlasmicSplash renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    center: makeNodeComponent("center"),
    svg: makeNodeComponent("svg"),
    sideEffect: makeNodeComponent("sideEffect"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),

    // Metadata about props expected for PlasmicSplash
    internalVariantProps: PlasmicSplash__VariantProps,
    internalArgProps: PlasmicSplash__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSplash;
/* prettier-ignore-end */
