// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: DpoRYqi8MTy5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Checkbox from "../../Checkbox"; // plasmic-import: kNwK3iA1B39P/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSelfRegister.module.css"; // plasmic-import: DpoRYqi8MTy5/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicSelfRegister__VariantMembers = {};
export type PlasmicSelfRegister__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfRegister__VariantsArgs;
export const PlasmicSelfRegister__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfRegister__ArgsType = {};
type ArgPropType = keyof PlasmicSelfRegister__ArgsType;
export const PlasmicSelfRegister__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfRegister__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  html?: Flex__<"div">;
  goftino?: Flex__<typeof Embed>;
  clarity?: Flex__<typeof Embed>;
  openReplay?: Flex__<typeof Embed>;
  favIcon?: Flex__<typeof Embed>;
  guide?: Flex__<"div">;
  selfRegisterForm?: Flex__<typeof FormWrapper>;
  step0?: Flex__<"div">;
  name?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  lastName?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  policiesCheckbox?: Flex__<typeof Checkbox>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  step1?: Flex__<"div">;
  propertyName?: Flex__<typeof FormItemWrapper>;
  input3?: Flex__<typeof AntdInput>;
  phoneNumber?: Flex__<typeof FormItemWrapper>;
  input4?: Flex__<typeof AntdInput>;
  step2?: Flex__<"div">;
  jajigaPpid?: Flex__<typeof FormItemWrapper>;
  input6?: Flex__<typeof AntdInput>;
  shabPpid?: Flex__<typeof FormItemWrapper>;
  input7?: Flex__<typeof AntdInput>;
  otaghakPpid?: Flex__<typeof FormItemWrapper>;
  input9?: Flex__<typeof AntdInput>;
  mihmanshoPpid?: Flex__<typeof FormItemWrapper>;
  input10?: Flex__<typeof AntdInput>;
  homsaPpid?: Flex__<typeof FormItemWrapper>;
  input11?: Flex__<typeof AntdInput>;
  mizboonPpid?: Flex__<typeof FormItemWrapper>;
  input8?: Flex__<typeof AntdInput>;
  jabamaPpid?: Flex__<typeof FormItemWrapper>;
  input5?: Flex__<typeof AntdInput>;
  submitButton?: Flex__<typeof AntdButton>;
  step3?: Flex__<"div">;
  htmlVideo?: Flex__<typeof Video>;
  enterButton?: Flex__<typeof AntdButton>;
  backButton?: Flex__<typeof AntdButton>;
  guide2?: Flex__<"div">;
  submitButton2?: Flex__<typeof AntdButton>;
};

export interface DefaultSelfRegisterProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfRegister__RenderFunc(props: {
  variants: PlasmicSelfRegister__VariantsArgs;
  args: PlasmicSelfRegister__ArgsType;
  overrides: PlasmicSelfRegister__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selfRegisterForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "selfRegisterForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "selfRegisterForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "selfRegisterForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "formStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "policiesCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tjwa5)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nf730)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHttpsRentamonCom"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://rentamon.com/"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsRentamonCom"] != null &&
                    typeof $steps["goToHttpsRentamonCom"] === "object" &&
                    typeof $steps["goToHttpsRentamonCom"].then === "function"
                  ) {
                    $steps["goToHttpsRentamonCom"] = await $steps[
                      "goToHttpsRentamonCom"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/website_starter/images/rentamonFaPng.png",
                  fullWidth: 684,
                  fullHeight: 306,
                  aspectRatio: undefined
                }}
              />

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__j02WI)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__dn7Kb
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__gunip)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__qht3H)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__cxd96)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nbWoJ
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"clarity"}
              data-plasmic-override={overrides.clarity}
              className={classNames("__wab_instance", sty.clarity)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"openReplay"}
              data-plasmic-override={overrides.openReplay}
              className={classNames("__wab_instance", sty.openReplay)}
              code={
                '<!-- OpenReplay Tracking Code for my  project -->\r\n<script>\r\n  var initOpts = {\r\n    projectKey: "3ZxSHuM9j2XKwEJeYX4x",\r\n    defaultInputMode: 0,\r\n    obscureTextNumbers: false,\r\n    obscureTextEmails: false,\r\n  };\r\n  var startOpts = { userID: "" };\r\n  (function(A,s,a,y,e,r){\r\n    r=window.OpenReplay=[e,r,y,[s-1, e]];\r\n    s=document.createElement(\'script\');s.src=A;s.async=!a;\r\n    document.getElementsByTagName(\'head\')[0].appendChild(s);\r\n    r.start=function(v){r.push([0])};\r\n    r.stop=function(v){r.push([1])};\r\n    r.setUserID=function(id){r.push([2,id])};\r\n    r.setUserAnonymousID=function(id){r.push([3,id])};\r\n    r.setMetadata=function(k,v){r.push([4,k,v])};\r\n    r.event=function(k,p,i){r.push([5,k,p,i])};\r\n    r.issue=function(k,p){r.push([6,k,p])};\r\n    r.isActive=function(){return false};\r\n    r.getSessionToken=function(){};\r\n  })("//static.openreplay.com/latest/openreplay.js",1,0,initOpts,startOpts);\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"favIcon"}
              data-plasmic-override={overrides.favIcon}
              className={classNames("__wab_instance", sty.favIcon)}
              code={
                "(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n// icon address\r\n    link.href = 'https://rentamon.com/wp-content/uploads/2024/03/cropped-Logo-2024-fav-icon-1.png';\r\n})();\r\n</script>"
              }
            />
          </div>
          <div
            data-plasmic-name={"guide"}
            data-plasmic-override={overrides.guide}
            className={classNames(projectcss.all, sty.guide)}
          >
            {(() => {
              try {
                return $state.formStep == 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3CfU
                )}
              >
                {
                  "\u0634\u0631\u0648\u0639 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632  \u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647"
                }
              </div>
            ) : null}
            {(() => {
              try {
                return $state.formStep == 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nlgw
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646 \u062a\u0627 \u062a\u0642\u0648\u06cc\u0645 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0631\u0627\u062a \u0633\u0627\u062e\u062a\u0647 \u0628\u0634\u0647"
                }
              </div>
            ) : null}
            {(() => {
              try {
                return $state.formStep == 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3D5Qe
                )}
              >
                {
                  "\u0645\u0634\u062e\u0635\u0627\u062a \u0648\u06cc\u0644\u0627"
                }
              </div>
            ) : null}
            {(() => {
              try {
                return $state.formStep == 2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__rduuF)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aeiK5
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "✅" +
                          $state.selfRegisterForm.value.name +
                          " " +
                          $state.selfRegisterForm.value.lastName +
                          " عزیز، " +
                          $state.selfRegisterForm.value.propertyName +
                          " با موفقیت ثبت شد."
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0627\u0632 \u062a\u0642\u0648\u06cc\u0645 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.formStep == 3;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aSeaT
                )}
              >
                {
                  "\u0646\u062d\u0648\u0647 \u06a9\u0627\u0631 \u0628\u0627 \u062a\u0642\u0648\u06cc\u0645"
                }
              </div>
            ) : null}
          </div>
          {(() => {
            const child$Props = {
              autoDisableWhileSubmitting: true,
              className: classNames("__wab_instance", sty.selfRegisterForm),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["selfRegisterForm", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["updateInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["input", "value"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue"] != null &&
                  typeof $steps["updateInputValue"] === "object" &&
                  typeof $steps["updateInputValue"].then === "function"
                ) {
                  $steps["updateInputValue"] = await $steps["updateInputValue"];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["selfRegisterForm", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["selfRegisterForm"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "selfRegisterForm.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "selfRegisterForm.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"selfRegisterForm"}
                data-plasmic-override={overrides.selfRegisterForm}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $state.formStep == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step0"}
                    data-plasmic-override={overrides.step0}
                    className={classNames(projectcss.all, sty.step0)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"name"}
                      data-plasmic-override={overrides.name}
                      className={classNames("__wab_instance", sty.name)}
                      label={""}
                      name={"name"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u0628\u062f\u0648\u0646 \u0627\u0633\u0645 \u06a9\u0647 \u0646\u0645\u06cc\u200c\u0634\u0647!"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u0646\u0627\u0645",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"lastName"}
                      data-plasmic-override={overrides.lastName}
                      className={classNames("__wab_instance", sty.lastName)}
                      label={""}
                      name={"lastName"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u0641\u0627\u0645\u06cc\u0644\u06cc\u062a \u0631\u0648 \u0647\u0645 \u0644\u0637\u0641\u0627 \u0628\u06af\u0648"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input2", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
                          size: hasVariant(globalVariants, "screen", "mobile")
                            ? "large"
                            : "large",
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <Checkbox
                      data-plasmic-name={"policiesCheckbox"}
                      data-plasmic-override={overrides.policiesCheckbox}
                      className={classNames(
                        "__wab_instance",
                        sty.policiesCheckbox
                      )}
                      isChecked={
                        generateStateValueProp($state, [
                          "policiesCheckbox",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "policiesCheckbox",
                            "isChecked"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={
                          "https://rentamon.com/%d9%82%d9%88%d8%a7%d9%86%db%8c%d9%86-%d8%b1%d9%86%d8%aa%d8%a7%d9%85%d9%88%d9%86/"
                        }
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        {
                          "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                        }
                      </PlasmicLink__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m08Pi
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#1F3546" }}
                          >
                            {
                              " \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0645\u06cc\u200c\u067e\u0630\u06cc\u0631\u0645"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </Checkbox>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__f1Jv)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__xqgLb
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] =
                            $state.selfRegisterForm.value.name !== "" &&
                            $state.selfRegisterForm.value.lastName !== "" &&
                            $state.policiesCheckbox.isChecked
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["formStep"]
                                    },
                                    operation: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue + 1
                                    );
                                    return oldValue + 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lCyaZ
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FCFCFC" }}
                            >
                              {"\u062b\u0628\u062a \u0648\u06cc\u0644\u0627"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.formStep == 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step1"}
                    data-plasmic-override={overrides.step1}
                    className={classNames(projectcss.all, sty.step1)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"propertyName"}
                      data-plasmic-override={overrides.propertyName}
                      className={classNames("__wab_instance", sty.propertyName)}
                      label={""}
                      name={"propertyName"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u067e\u0633 \u0627\u0633\u0645\u0634\u0648 \u0686\u06cc \u0635\u062f\u0627 \u0628\u0632\u0646\u06cc\u0645\u061f"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input3", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0646\u0627\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"phoneNumber"}
                      data-plasmic-override={overrides.phoneNumber}
                      className={classNames("__wab_instance", sty.phoneNumber)}
                      hidden={false}
                      label={""}
                      name={"phoneNumber"}
                      rules={[
                        { ruleType: "required", message: `` },

                        { ruleType: "min", length: 11, message: `` },

                        {
                          ruleType: "advanced",
                          message:
                            "\u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a!",
                          custom: (rule, value) => {
                            return /^09/.test($state.form.value.phoneNumber);
                          }
                        }
                      ]}
                      validateTrigger={["onBlur"]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___24O8D
                      )}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button___333Mv
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] =
                            $state.selfRegisterForm.value.propertyName.length >
                            1
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["formStep"]
                                    },
                                    operation: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue + 1
                                    );
                                    return oldValue + 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }

                          $steps["invokeGlobalAction"] =
                            $state.selfRegisterForm.value.propertyName !== ""
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/register",
                                      undefined,
                                      (() => {
                                        try {
                                          return $state.selfRegisterForm.value;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded"
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8SQjB
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FCFCFC" }}
                            >
                              {
                                "\u062b\u0628\u062a \u0646\u0647\u0627\u06cc\u06cc"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__jHcIi
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["formStep"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jrhB4
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-8nedppYkGVaH)" }}
                            >
                              {"\u0642\u0628\u0644\u06cc"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.formStep == 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step2"}
                    data-plasmic-override={overrides.step2}
                    className={classNames(projectcss.all, sty.step2)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"jajigaPpid"}
                      data-plasmic-override={overrides.jajigaPpid}
                      className={classNames("__wab_instance", sty.jajigaPpid)}
                      label={""}
                      name={"jajigaPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `کد ${$state.selfRegisterForm.value.propertyName} در جاجیگا`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"shabPpid"}
                      data-plasmic-override={overrides.shabPpid}
                      className={classNames("__wab_instance", sty.shabPpid)}
                      label={""}
                      name={"shabPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input7", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `کد ${$state.selfRegisterForm.value.propertyName} در شب`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"otaghakPpid"}
                      data-plasmic-override={overrides.otaghakPpid}
                      className={classNames("__wab_instance", sty.otaghakPpid)}
                      label={""}
                      name={"otaghakPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input9),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input9", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `کد ${$state.selfRegisterForm.value.propertyName} در اتاقک`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input9.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input9"}
                            data-plasmic-override={overrides.input9}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"mihmanshoPpid"}
                      data-plasmic-override={overrides.mihmanshoPpid}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshoPpid
                      )}
                      label={""}
                      name={"mihmanshoPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input10),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input10", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `کد ${$state.selfRegisterForm.value.propertyName} در میهمان‌شو`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input10.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input10"}
                            data-plasmic-override={overrides.input10}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"homsaPpid"}
                      data-plasmic-override={overrides.homsaPpid}
                      className={classNames("__wab_instance", sty.homsaPpid)}
                      label={""}
                      name={"homsaPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input11),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input11", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `کد ${$state.selfRegisterForm.value.propertyName} در هومسا`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input11",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input11.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input11"}
                            data-plasmic-override={overrides.input11}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"mizboonPpid"}
                      data-plasmic-override={overrides.mizboonPpid}
                      className={classNames("__wab_instance", sty.mizboonPpid)}
                      label={""}
                      name={"mizboonPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input8),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `کد ${$state.selfRegisterForm.value.propertyName} در میزبون`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"jabamaPpid"}
                      data-plasmic-override={overrides.jabamaPpid}
                      className={classNames("__wab_instance", sty.jabamaPpid)}
                      label={""}
                      name={"jabamaPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input5),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input5", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return `لینک ${$state.selfRegisterForm.value.propertyName} در جاباما`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xaF)}
                    >
                      <AntdButton
                        data-plasmic-name={"submitButton"}
                        data-plasmic-override={overrides.submitButton}
                        className={classNames(
                          "__wab_instance",
                          sty.submitButton
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["invokeGlobalActionToast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f!",
                                    "bottom-center",
                                    4000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalActionToast"] != null &&
                            typeof $steps["invokeGlobalActionToast"] ===
                              "object" &&
                            typeof $steps["invokeGlobalActionToast"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalActionToast"] = await $steps[
                              "invokeGlobalActionToast"
                            ];
                          }

                          $steps["goToHttpsRentamonComPanels"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: "https://rentamon.com/panels/"
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToHttpsRentamonComPanels"] != null &&
                            typeof $steps["goToHttpsRentamonComPanels"] ===
                              "object" &&
                            typeof $steps["goToHttpsRentamonComPanels"].then ===
                              "function"
                          ) {
                            $steps["goToHttpsRentamonComPanels"] = await $steps[
                              "goToHttpsRentamonComPanels"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__om8Of
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FCFCFC" }}
                            >
                              {
                                "\u0648\u0631\u0648\u062f \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__jGqui
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["formStep"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ugfax
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-8nedppYkGVaH)" }}
                            >
                              {"\u0642\u0628\u0644\u06cc"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"step3"}
                  data-plasmic-override={overrides.step3}
                  className={classNames(projectcss.all, sty.step3)}
                >
                  <Video
                    data-plasmic-name={"htmlVideo"}
                    data-plasmic-override={overrides.htmlVideo}
                    autoPlay={true}
                    className={classNames("__wab_instance", sty.htmlVideo)}
                    controls={false}
                    loop={true}
                    muted={true}
                    poster={"/plasmic/website_starter/images/loadingGif.gif"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/11/Demo-GIF.mp4"
                    }
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__bNoyr)}
                  >
                    <AntdButton
                      data-plasmic-name={"enterButton"}
                      data-plasmic-override={overrides.enterButton}
                      className={classNames("__wab_instance", sty.enterButton)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "https://rentamon.com/panels";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      submitsForm={false}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__djxyH
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FCFCFC" }}
                          >
                            {
                              "\u0648\u0631\u0648\u062f \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"backButton"}
                      data-plasmic-override={overrides.backButton}
                      className={classNames("__wab_instance", sty.backButton)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateFormStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["formStep"]
                                },
                                operation: 3
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue - 1);
                                return oldValue - 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFormStep"] != null &&
                          typeof $steps["updateFormStep"] === "object" &&
                          typeof $steps["updateFormStep"].then === "function"
                        ) {
                          $steps["updateFormStep"] = await $steps[
                            "updateFormStep"
                          ];
                        }
                      }}
                      submitsForm={false}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7W1Zt
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-8nedppYkGVaH)" }}
                          >
                            {"\u0642\u0628\u0644\u06cc"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdButton>
                  </div>
                </div>
              </FormWrapper>
            );
          })()}
          <div
            data-plasmic-name={"guide2"}
            data-plasmic-override={overrides.guide2}
            className={classNames(projectcss.all, sty.guide2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c5ApU
              )}
            >
              {
                "\u0634\u0631\u0648\u0639 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632  \u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k8Jom
              )}
            >
              {"\u0645\u0634\u062e\u0635\u0627\u062a \u0648\u06cc\u0644\u0627"}
            </div>
            {(() => {
              try {
                return $state.formStep == 2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__aiqtL)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0HnY
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0648\u0644\u06cc \u0642\u0628\u0644\u0634 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627 \u0631\u0648 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0645\u062a\u0635\u0644 \u06a9\u0646"
                      }
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kJ79W
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {""}
                    </span>
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__upJs)}>
                  <AntdButton
                    data-plasmic-name={"submitButton2"}
                    data-plasmic-override={overrides.submitButton2}
                    className={classNames("__wab_instance", sty.submitButton2)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goToHttpsAppRentamonComActive"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://app.rentamon.com/active"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsAppRentamonComActive"] != null &&
                        typeof $steps["goToHttpsAppRentamonComActive"] ===
                          "object" &&
                        typeof $steps["goToHttpsAppRentamonComActive"].then ===
                          "function"
                      ) {
                        $steps["goToHttpsAppRentamonComActive"] = await $steps[
                          "goToHttpsAppRentamonComActive"
                        ];
                      }
                    }}
                    submitsForm={false}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fonm4
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FCFCFC" }}
                        >
                          {
                            "\u0627\u062a\u0635\u0627\u0644 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdButton>
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.formStep == 3;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cSmIw
                )}
              >
                {
                  "\u0646\u062d\u0648\u0647 \u06a9\u0627\u0631 \u0628\u0627 \u062a\u0642\u0648\u06cc\u0645"
                }
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "html",
    "goftino",
    "clarity",
    "openReplay",
    "favIcon",
    "guide",
    "selfRegisterForm",
    "step0",
    "name",
    "input",
    "lastName",
    "input2",
    "policiesCheckbox",
    "link",
    "step1",
    "propertyName",
    "input3",
    "phoneNumber",
    "input4",
    "step2",
    "jajigaPpid",
    "input6",
    "shabPpid",
    "input7",
    "otaghakPpid",
    "input9",
    "mihmanshoPpid",
    "input10",
    "homsaPpid",
    "input11",
    "mizboonPpid",
    "input8",
    "jabamaPpid",
    "input5",
    "submitButton",
    "step3",
    "htmlVideo",
    "enterButton",
    "backButton",
    "guide2",
    "submitButton2"
  ],
  img: ["img"],
  html: ["html", "goftino", "clarity", "openReplay", "favIcon"],
  goftino: ["goftino"],
  clarity: ["clarity"],
  openReplay: ["openReplay"],
  favIcon: ["favIcon"],
  guide: ["guide"],
  selfRegisterForm: [
    "selfRegisterForm",
    "step0",
    "name",
    "input",
    "lastName",
    "input2",
    "policiesCheckbox",
    "link",
    "step1",
    "propertyName",
    "input3",
    "phoneNumber",
    "input4",
    "step2",
    "jajigaPpid",
    "input6",
    "shabPpid",
    "input7",
    "otaghakPpid",
    "input9",
    "mihmanshoPpid",
    "input10",
    "homsaPpid",
    "input11",
    "mizboonPpid",
    "input8",
    "jabamaPpid",
    "input5",
    "submitButton",
    "step3",
    "htmlVideo",
    "enterButton",
    "backButton"
  ],
  step0: [
    "step0",
    "name",
    "input",
    "lastName",
    "input2",
    "policiesCheckbox",
    "link"
  ],
  name: ["name", "input"],
  input: ["input"],
  lastName: ["lastName", "input2"],
  input2: ["input2"],
  policiesCheckbox: ["policiesCheckbox", "link"],
  link: ["link"],
  step1: ["step1", "propertyName", "input3", "phoneNumber", "input4"],
  propertyName: ["propertyName", "input3"],
  input3: ["input3"],
  phoneNumber: ["phoneNumber", "input4"],
  input4: ["input4"],
  step2: [
    "step2",
    "jajigaPpid",
    "input6",
    "shabPpid",
    "input7",
    "otaghakPpid",
    "input9",
    "mihmanshoPpid",
    "input10",
    "homsaPpid",
    "input11",
    "mizboonPpid",
    "input8",
    "jabamaPpid",
    "input5",
    "submitButton"
  ],
  jajigaPpid: ["jajigaPpid", "input6"],
  input6: ["input6"],
  shabPpid: ["shabPpid", "input7"],
  input7: ["input7"],
  otaghakPpid: ["otaghakPpid", "input9"],
  input9: ["input9"],
  mihmanshoPpid: ["mihmanshoPpid", "input10"],
  input10: ["input10"],
  homsaPpid: ["homsaPpid", "input11"],
  input11: ["input11"],
  mizboonPpid: ["mizboonPpid", "input8"],
  input8: ["input8"],
  jabamaPpid: ["jabamaPpid", "input5"],
  input5: ["input5"],
  submitButton: ["submitButton"],
  step3: ["step3", "htmlVideo", "enterButton", "backButton"],
  htmlVideo: ["htmlVideo"],
  enterButton: ["enterButton"],
  backButton: ["backButton"],
  guide2: ["guide2", "submitButton2"],
  submitButton2: ["submitButton2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  html: "div";
  goftino: typeof Embed;
  clarity: typeof Embed;
  openReplay: typeof Embed;
  favIcon: typeof Embed;
  guide: "div";
  selfRegisterForm: typeof FormWrapper;
  step0: "div";
  name: typeof FormItemWrapper;
  input: typeof AntdInput;
  lastName: typeof FormItemWrapper;
  input2: typeof AntdInput;
  policiesCheckbox: typeof Checkbox;
  link: "a";
  step1: "div";
  propertyName: typeof FormItemWrapper;
  input3: typeof AntdInput;
  phoneNumber: typeof FormItemWrapper;
  input4: typeof AntdInput;
  step2: "div";
  jajigaPpid: typeof FormItemWrapper;
  input6: typeof AntdInput;
  shabPpid: typeof FormItemWrapper;
  input7: typeof AntdInput;
  otaghakPpid: typeof FormItemWrapper;
  input9: typeof AntdInput;
  mihmanshoPpid: typeof FormItemWrapper;
  input10: typeof AntdInput;
  homsaPpid: typeof FormItemWrapper;
  input11: typeof AntdInput;
  mizboonPpid: typeof FormItemWrapper;
  input8: typeof AntdInput;
  jabamaPpid: typeof FormItemWrapper;
  input5: typeof AntdInput;
  submitButton: typeof AntdButton;
  step3: "div";
  htmlVideo: typeof Video;
  enterButton: typeof AntdButton;
  backButton: typeof AntdButton;
  guide2: "div";
  submitButton2: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfRegister__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfRegister__VariantsArgs;
    args?: PlasmicSelfRegister__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfRegister__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfRegister__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfRegister__ArgProps,
          internalVariantPropNames: PlasmicSelfRegister__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfRegister__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfRegister";
  } else {
    func.displayName = `PlasmicSelfRegister.${nodeName}`;
  }
  return func;
}

export const PlasmicSelfRegister = Object.assign(
  // Top-level PlasmicSelfRegister renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    html: makeNodeComponent("html"),
    goftino: makeNodeComponent("goftino"),
    clarity: makeNodeComponent("clarity"),
    openReplay: makeNodeComponent("openReplay"),
    favIcon: makeNodeComponent("favIcon"),
    guide: makeNodeComponent("guide"),
    selfRegisterForm: makeNodeComponent("selfRegisterForm"),
    step0: makeNodeComponent("step0"),
    _name: makeNodeComponent("name"),
    input: makeNodeComponent("input"),
    lastName: makeNodeComponent("lastName"),
    input2: makeNodeComponent("input2"),
    policiesCheckbox: makeNodeComponent("policiesCheckbox"),
    link: makeNodeComponent("link"),
    step1: makeNodeComponent("step1"),
    propertyName: makeNodeComponent("propertyName"),
    input3: makeNodeComponent("input3"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    input4: makeNodeComponent("input4"),
    step2: makeNodeComponent("step2"),
    jajigaPpid: makeNodeComponent("jajigaPpid"),
    input6: makeNodeComponent("input6"),
    shabPpid: makeNodeComponent("shabPpid"),
    input7: makeNodeComponent("input7"),
    otaghakPpid: makeNodeComponent("otaghakPpid"),
    input9: makeNodeComponent("input9"),
    mihmanshoPpid: makeNodeComponent("mihmanshoPpid"),
    input10: makeNodeComponent("input10"),
    homsaPpid: makeNodeComponent("homsaPpid"),
    input11: makeNodeComponent("input11"),
    mizboonPpid: makeNodeComponent("mizboonPpid"),
    input8: makeNodeComponent("input8"),
    jabamaPpid: makeNodeComponent("jabamaPpid"),
    input5: makeNodeComponent("input5"),
    submitButton: makeNodeComponent("submitButton"),
    step3: makeNodeComponent("step3"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    enterButton: makeNodeComponent("enterButton"),
    backButton: makeNodeComponent("backButton"),
    guide2: makeNodeComponent("guide2"),
    submitButton2: makeNodeComponent("submitButton2"),

    // Metadata about props expected for PlasmicSelfRegister
    internalVariantProps: PlasmicSelfRegister__VariantProps,
    internalArgProps: PlasmicSelfRegister__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfRegister;
/* prettier-ignore-end */
