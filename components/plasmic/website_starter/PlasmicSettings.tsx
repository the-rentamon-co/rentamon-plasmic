/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: Gu50HL8TWrKF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import Switch from "../../Switch"; // plasmic-import: XDOKoC2AhwWH/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSettings.module.css"; // plasmic-import: Gu50HL8TWrKF/css

createPlasmicElementProxy;

export type PlasmicSettings__VariantMembers = {};
export type PlasmicSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettings__VariantsArgs;
export const PlasmicSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicSettings__ArgsType = {};
type ArgPropType = keyof PlasmicSettings__ArgsType;
export const PlasmicSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicSettings__OverridesType = {
  settings?: Flex__<"div">;
  header3?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile?: Flex__<typeof ApiRequest>;
  main?: Flex__<"div">;
  title?: Flex__<"div">;
  intro?: Flex__<"div">;
  _2nd?: Flex__<"div">;
  titleRow?: Flex__<"div">;
  opt15?: Flex__<"div">;
  p14?: Flex__<"div">;
  p25?: Flex__<"div">;
  p35?: Flex__<"div">;
  p44?: Flex__<"div">;
  optionsButtons?: Flex__<"div">;
  options?: Flex__<"div">;
  opt1?: Flex__<"div">;
  p1?: Flex__<"div">;
  p2?: Flex__<"div">;
  p3?: Flex__<"div">;
  apiRequest2?: Flex__<typeof ApiRequest>;
  p4?: Flex__<"div">;
  switch1?: Flex__<typeof Switch>;
  options2?: Flex__<"div">;
  opt12?: Flex__<"div">;
  p12?: Flex__<"div">;
  p22?: Flex__<"div">;
  p32?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  p42?: Flex__<"div">;
  switch2?: Flex__<typeof Switch>;
  options3?: Flex__<"div">;
  opt13?: Flex__<"div">;
  p13?: Flex__<"div">;
  p23?: Flex__<"div">;
  p33?: Flex__<"div">;
  p43?: Flex__<"div">;
  switch3?: Flex__<typeof Switch>;
  modalActivateAutosync?: Flex__<typeof AntdModal>;
  buttons?: Flex__<"div">;
  active?: Flex__<"div">;
  deactive?: Flex__<"div">;
  modalActivateReservations?: Flex__<typeof AntdModal>;
  buttons3?: Flex__<"div">;
  active3?: Flex__<"div">;
  cancel?: Flex__<"div">;
  modalDEactivateAutosync?: Flex__<typeof AntdModal>;
  buttons2?: Flex__<"div">;
  deactive5?: Flex__<"div">;
  deactive2?: Flex__<"div">;
  modalDEactivateReservations?: Flex__<typeof AntdModal>;
  buttons4?: Flex__<"div">;
  active4?: Flex__<"div">;
  deactive4?: Flex__<"div">;
  opt14?: Flex__<"div">;
  p24?: Flex__<"div">;
  p34?: Flex__<"div">;
  apiRequestSetting?: Flex__<typeof ApiRequest>;
  _2nd2?: Flex__<"div">;
  returnButton?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  html?: Flex__<"div">;
  clarity2?: Flex__<typeof Embed>;
  goftino?: Flex__<typeof Embed>;
};

export interface DefaultSettingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettings__RenderFunc(props: {
  variants: PlasmicSettings__VariantsArgs;
  args: PlasmicSettings__ArgsType;
  overrides: PlasmicSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "switch1.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const data = $state.apiRequestSetting.data;
                const reservationItems = data.filter(
                  item => item.feature_name === "auto_sync"
                );
                if (reservationItems.length === 0) {
                  return false;
                }
                const allReservationsTrue = reservationItems.every(
                  item => item.is_active === true
                );
                return allReservationsTrue;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "switch3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalActivateAutosync.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : false
      },
      {
        path: "modalDEactivateAutosync.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "modalActivateReservations.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : false
      },
      {
        path: "modalDEactivateReservations.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "switch2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const data = $state.apiRequestSetting.data;
                const reservationItems = data.filter(
                  item => item.feature_name === "reservations"
                );
                if (reservationItems.length === 0) {
                  return false;
                }
                const allReservationsTrue = reservationItems.every(
                  item => item.is_active === true
                );
                return allReservationsTrue;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequestSetting.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestSetting"
      },
      {
        path: "apiRequestSetting.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestSetting"
      },
      {
        path: "apiRequestSetting.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestSetting"
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSettings.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSettings.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSettings.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"settings"}
          data-plasmic-override={overrides.settings}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.settings
          )}
        >
          <div
            data-plasmic-name={"header3"}
            data-plasmic-override={overrides.header3}
            className={classNames(projectcss.all, sty.header3)}
          >
            <SideBar2
              data-plasmic-name={"sideBar2"}
              data-plasmic-override={overrides.sideBar2}
              className={classNames("__wab_instance", sty.sideBar2)}
              isOpen={false}
              userData={(() => {
                try {
                  return $state.profile.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div className={classNames(projectcss.all, sty.freeBox__uNqwy)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6TAnx
                )}
              >
                {
                  "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                }
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames("__wab_instance", sty.profile)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            />

            <div
              data-plasmic-name={"intro"}
              data-plasmic-override={overrides.intro}
              className={classNames(projectcss.all, sty.intro)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xsjRy)}>
                <div
                  data-plasmic-name={"_2nd"}
                  data-plasmic-override={overrides._2nd}
                  className={classNames(projectcss.all, sty._2nd)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wxCeh
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0633\u0627\u062f\u0647\u200c\u062a\u0631 \u0648 \u0633\u0631\u06cc\u0639\u200c\u062a\u0631 \u0628\u0634\u0647. \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0648\u06cc\u0698\u06af\u06cc \u0641\u0639\u0627\u0644\u060c \u0627\u0632 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a\u06cc \u06a9\u0627\u0631\u0645\u0632\u062f \u06a9\u0633\u0631 \u0645\u06cc\u200c\u0634\u0647."
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0633\u0627\u062f\u0647\u200c\u062a\u0631 \u0648 \u0633\u0631\u06cc\u0639\u200c\u062a\u0631 \u0628\u0634\u0647. \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0648\u06cc\u0698\u06af\u06cc \u0641\u0639\u0627\u0644\u060c \u0627\u0632 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a\u06cc \u06a9\u0627\u0631\u0645\u0632\u062f \u06a9\u0633\u0631 \u0645\u06cc\u200c\u0634\u0647."
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? "\u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0633\u0627\u062f\u0647\u200c\u062a\u0631 \u0648 \u0633\u0631\u06cc\u0639\u200c\u062a\u0631 \u0628\u0634\u0647. \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0648\u06cc\u0698\u06af\u06cc \u0641\u0639\u0627\u0644\u060c \u0627\u0632 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a\u06cc \u06a9\u0627\u0631\u0645\u0632\u062f \u06a9\u0633\u0631 \u0645\u06cc\u200c\u0634\u0647."
                      : "\u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0633\u0627\u062f\u0647\u200c\u062a\u0631 \u0648 \u0633\u0631\u06cc\u0639\u200c\u062a\u0631 \u0628\u0634\u0647. \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0648\u06cc\u0698\u06af\u06cc \u0641\u0639\u0627\u0644\u060c \u0627\u0632 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a\u06cc \u06a9\u0627\u0631\u0645\u0632\u062f \u06a9\u0633\u0631 \u0645\u06cc\u200c\u0634\u0647."}
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"titleRow"}
              data-plasmic-override={overrides.titleRow}
              className={classNames(projectcss.all, sty.titleRow)}
            >
              <div
                data-plasmic-name={"opt15"}
                data-plasmic-override={overrides.opt15}
                className={classNames(projectcss.all, sty.opt15)}
              >
                <div
                  data-plasmic-name={"p14"}
                  data-plasmic-override={overrides.p14}
                  className={classNames(projectcss.all, sty.p14)}
                />

                <div
                  data-plasmic-name={"p25"}
                  data-plasmic-override={overrides.p25}
                  className={classNames(projectcss.all, sty.p25)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zleIg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0639\u0646\u0648\u0627\u0646 \u0648\u06cc\u0698\u06af\u06cc"
                      : "\u0639\u0646\u0648\u0627\u0646 \u0648\u06cc\u0698\u06af\u06cc"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"p35"}
                  data-plasmic-override={overrides.p35}
                  className={classNames(projectcss.all, sty.p35)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vxcPf
                    )}
                  >
                    {
                      "\u06a9\u0627\u0631\u0645\u0632\u062f (\u062f\u0631\u0635\u062f)"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"p44"}
                  data-plasmic-override={overrides.p44}
                  className={classNames(projectcss.all, sty.p44, "ltr")}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"optionsButtons"}
              data-plasmic-override={overrides.optionsButtons}
              className={classNames(projectcss.all, sty.optionsButtons)}
            >
              <div
                data-plasmic-name={"options"}
                data-plasmic-override={overrides.options}
                className={classNames(projectcss.all, sty.options)}
              >
                <div
                  data-plasmic-name={"opt1"}
                  data-plasmic-override={overrides.opt1}
                  className={classNames(projectcss.all, sty.opt1)}
                >
                  <div
                    data-plasmic-name={"p1"}
                    data-plasmic-override={overrides.p1}
                    className={classNames(projectcss.all, sty.p1)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__xPWw)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image78.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"p2"}
                    data-plasmic-override={overrides.p2}
                    className={classNames(projectcss.all, sty.p2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q9AmZ
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "\u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627"
                        : "\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"p3"}
                    data-plasmic-override={overrides.p3}
                    className={classNames(projectcss.all, sty.p3)}
                  >
                    <ApiRequest
                      data-plasmic-name={"apiRequest2"}
                      data-plasmic-override={overrides.apiRequest2}
                      className={classNames("__wab_instance", sty.apiRequest2)}
                      errorDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7NU3G
                          )}
                        >
                          {"Error fetching data"}
                        </div>
                      }
                      loadingDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xNEm
                          )}
                        >
                          {
                            "\u062f\u0631 \u062d\u0627\u0644 \u0645\u062d\u0627\u0633\u0628\u0647"
                          }
                        </div>
                      }
                      method={"GET"}
                      onError={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest2",
                          "error"
                        ]).apply(null, eventArgs);
                      }}
                      onLoading={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest2",
                          "loading"
                        ]).apply(null, eventArgs);
                      }}
                      onSuccess={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest2",
                          "data"
                        ]).apply(null, eventArgs);
                      }}
                      ref={ref => {
                        $refs["apiRequest2"] = ref;
                      }}
                      url={
                        "https://gateway.rentamon.com/webhook/get_commition?feature_name=auto_sync"
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uz7N
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function convertToPersianNumber(number) {
                                  const persianNumbers = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return number
                                    .toString()
                                    .replace(
                                      /\d/g,
                                      digit => persianNumbers[digit]
                                    );
                                }
                                const number =
                                  $state.apiRequest2.data[0].default_rate;
                                const persianNumber = convertToPersianNumber(
                                  number.toLocaleString()
                                );
                                return persianNumber;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </ApiRequest>
                  </div>
                  <div
                    data-plasmic-name={"p4"}
                    data-plasmic-override={overrides.p4}
                    className={classNames(projectcss.all, sty.p4, "ltr")}
                  >
                    <Switch
                      data-plasmic-name={"switch1"}
                      data-plasmic-override={overrides.switch1}
                      className={classNames("__wab_instance", sty.switch1)}
                      isSelected={generateStateValueProp($state, [
                        "switch1",
                        "isSelected"
                      ])}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Bl0U
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "switch1",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["updateModalOpen"] =
                            $state.switch1.isSelected == true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "modalActivateAutosync",
                                        "open"
                                      ]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }

                          $steps["updateModalDEactivateOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "modalDEactivateAutosync",
                                      "open"
                                    ]
                                  },
                                  operation: 0,
                                  value: $state.switch1.isSelected == false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalDEactivateOpen"] != null &&
                            typeof $steps["updateModalDEactivateOpen"] ===
                              "object" &&
                            typeof $steps["updateModalDEactivateOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalDEactivateOpen"] = await $steps[
                              "updateModalDEactivateOpen"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      showLabel={false}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"options2"}
                data-plasmic-override={overrides.options2}
                className={classNames(projectcss.all, sty.options2)}
              >
                <div
                  data-plasmic-name={"opt12"}
                  data-plasmic-override={overrides.opt12}
                  className={classNames(projectcss.all, sty.opt12)}
                >
                  <div
                    data-plasmic-name={"p12"}
                    data-plasmic-override={overrides.p12}
                    className={classNames(projectcss.all, sty.p12)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__jtpne)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image70.svg",
                        fullWidth: 23,
                        fullHeight: 20,
                        aspectRatio: 1.15
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"p22"}
                    data-plasmic-override={overrides.p22}
                    className={classNames(projectcss.all, sty.p22)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kgxw2
                      )}
                    >
                      {
                        "\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"p32"}
                    data-plasmic-override={overrides.p32}
                    className={classNames(projectcss.all, sty.p32)}
                  >
                    <ApiRequest
                      data-plasmic-name={"apiRequest"}
                      data-plasmic-override={overrides.apiRequest}
                      className={classNames("__wab_instance", sty.apiRequest)}
                      errorDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yFkt6
                          )}
                        >
                          {"Error fetching data"}
                        </div>
                      }
                      loadingDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p8D9
                          )}
                        >
                          {
                            "\u062f\u0631\u062d\u0627\u0644 \u0645\u062d\u0627\u0633\u0628\u0647 "
                          }
                        </div>
                      }
                      method={"GET"}
                      onError={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest",
                          "error"
                        ]).apply(null, eventArgs);
                      }}
                      onLoading={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest",
                          "loading"
                        ]).apply(null, eventArgs);
                      }}
                      onSuccess={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "apiRequest",
                          "data"
                        ]).apply(null, eventArgs);
                      }}
                      ref={ref => {
                        $refs["apiRequest"] = ref;
                      }}
                      url={
                        "https://gateway.rentamon.com/webhook/get_commition?feature_name=reservations"
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fbF23
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function convertToPersianNumber(number) {
                                  const persianNumbers = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return number
                                    .toString()
                                    .replace(
                                      /\d/g,
                                      digit => persianNumbers[digit]
                                    );
                                }
                                const number =
                                  $state.apiRequest.data[0].default_rate;
                                const persianNumber = convertToPersianNumber(
                                  number.toLocaleString()
                                );
                                return persianNumber;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </ApiRequest>
                  </div>
                  <div
                    data-plasmic-name={"p42"}
                    data-plasmic-override={overrides.p42}
                    className={classNames(projectcss.all, sty.p42, "ltr")}
                  >
                    <Switch
                      data-plasmic-name={"switch2"}
                      data-plasmic-override={overrides.switch2}
                      className={classNames("__wab_instance", sty.switch2)}
                      isSelected={generateStateValueProp($state, [
                        "switch2",
                        "isSelected"
                      ])}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h7PQq
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "switch2",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["updateModalOpen"] =
                            $state.switch2.isSelected == true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "modalActivateReservations",
                                        "open"
                                      ]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }

                          $steps["updateModalDEactivateOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "modalDEactivateReservations",
                                      "open"
                                    ]
                                  },
                                  operation: 0,
                                  value: $state.switch2.isSelected == false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalDEactivateOpen"] != null &&
                            typeof $steps["updateModalDEactivateOpen"] ===
                              "object" &&
                            typeof $steps["updateModalDEactivateOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModalDEactivateOpen"] = await $steps[
                              "updateModalDEactivateOpen"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      showLabel={false}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"options3"}
                data-plasmic-override={overrides.options3}
                className={classNames(projectcss.all, sty.options3)}
              >
                <div
                  data-plasmic-name={"opt13"}
                  data-plasmic-override={overrides.opt13}
                  className={classNames(projectcss.all, sty.opt13)}
                >
                  <div
                    data-plasmic-name={"p13"}
                    data-plasmic-override={overrides.p13}
                    className={classNames(projectcss.all, sty.p13)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__sm3Ko)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image71.svg",
                        fullWidth: 26,
                        fullHeight: 26,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"p23"}
                    data-plasmic-override={overrides.p23}
                    className={classNames(projectcss.all, sty.p23)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__faHZa
                      )}
                    >
                      {
                        "\u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0628\u0647\u062a\u0631\u06cc\u0646 \u0642\u06cc\u0645\u062a (\u0628\u0632\u0648\u062f\u06cc)"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"p33"}
                    data-plasmic-override={overrides.p33}
                    className={classNames(projectcss.all, sty.p33)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qjVuC
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tablet")
                        ? "\u06f0/\u06f5"
                        : " "}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"p43"}
                    data-plasmic-override={overrides.p43}
                    className={classNames(projectcss.all, sty.p43, "ltr")}
                  >
                    <Switch
                      data-plasmic-name={"switch3"}
                      data-plasmic-override={overrides.switch3}
                      className={classNames("__wab_instance", sty.switch3)}
                      isSelected={generateStateValueProp($state, [
                        "switch3",
                        "isSelected"
                      ])}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qWGmc
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "switch3",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      readOnly={true}
                      showLabel={false}
                    />
                  </div>
                </div>
              </div>
              <AntdModal
                data-plasmic-name={"modalActivateAutosync"}
                data-plasmic-override={overrides.modalActivateAutosync}
                className={classNames(
                  "__wab_instance",
                  sty.modalActivateAutosync
                )}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={false}
                modalContentClassName={classNames({
                  [sty["pcls_Gd1exZqbaJW4"]]: true
                })}
                modalScopeClassName={sty["modalActivateAutosync__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "modalActivateAutosync",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, [
                  "modalActivateAutosync",
                  "open"
                ])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a1Ly4
                    )}
                  >
                    {
                      "\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627"
                    }
                  </div>
                }
                trigger={null}
                wrapClassName={classNames({ [sty["pcls_gtKIMoah3QK_"]]: true })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vBeht)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__waPKm
                    )}
                  >
                    {
                      "\u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u06f2\u06f4 \u0633\u0627\u0639\u062a\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0631\u0648 \u062f\u0631 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0631\u0635\u062f \u0645\u06cc\u200c\u06a9\u0646\u0647. \u062f\u0631 \u0635\u0648\u0631\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u0627\u0632 \u06cc\u06a9\u06cc\u060c \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0633\u0627\u06cc\u0631 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627 \u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u06a9\u0646\u0647.\n"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ztXba)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gDeAg
                    )}
                  >
                    {
                      "\u0628\u0627 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u060c \u0631\u0648\u06cc \u00ab\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a\u06cc \u0627\u0632 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u00bb \u06a9\u0627\u0631\u0645\u0632\u062f \u0644\u062d\u0627\u0638 \u0645\u06cc\u200c\u0634\u0647."
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"buttons"}
                  data-plasmic-override={overrides.buttons}
                  className={classNames(projectcss.all, sty.buttons)}
                >
                  <div
                    data-plasmic-name={"active"}
                    data-plasmic-override={overrides.active}
                    className={classNames(projectcss.all, sty.active)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/auto-sync-activate",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      feature_name: "auto_sync",
                                      is_active: true
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateModalActivateAutosyncOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalActivateAutosync", "open"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalActivateAutosyncOpen"] != null &&
                        typeof $steps["updateModalActivateAutosyncOpen"] ===
                          "object" &&
                        typeof $steps["updateModalActivateAutosyncOpen"]
                          .then === "function"
                      ) {
                        $steps["updateModalActivateAutosyncOpen"] =
                          await $steps["updateModalActivateAutosyncOpen"];
                      }

                      $steps["updateSwitch1IsSelected"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["switch1", "isSelected"]
                              },
                              operation: 0,
                              value: ($state.switch1.isSelected =
                                $steps.invokeGlobalAction.data.status)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSwitch1IsSelected"] != null &&
                        typeof $steps["updateSwitch1IsSelected"] === "object" &&
                        typeof $steps["updateSwitch1IsSelected"].then ===
                          "function"
                      ) {
                        $steps["updateSwitch1IsSelected"] = await $steps[
                          "updateSwitch1IsSelected"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.status == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0641\u0639\u0627\u0644 \u0634\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $steps.invokeGlobalAction.data.status == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u0627\u0641\u06cc \u0646\u06cc\u0633\u062a",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return $state.loading == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (() => {
                                if ($state.apiRequestSetting.data == true) {
                                  return true;
                                } else {
                                  return false;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__k6Uei)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={
                          "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                        }
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__huWHj
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      {"\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"deactive"}
                    data-plasmic-override={overrides.deactive}
                    className={classNames(projectcss.all, sty.deactive)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yMyB
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSwitch1IsSelected"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["switch1", "isSelected"]
                                },
                                operation: 0,
                                value: $state.switch1.isSelected == false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitch1IsSelected"] != null &&
                          typeof $steps["updateSwitch1IsSelected"] ===
                            "object" &&
                          typeof $steps["updateSwitch1IsSelected"].then ===
                            "function"
                        ) {
                          $steps["updateSwitch1IsSelected"] = await $steps[
                            "updateSwitch1IsSelected"
                          ];
                        }

                        $steps["updateModalActivateOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "modalActivateAutosync",
                                    "open"
                                  ]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalActivateOpen"] != null &&
                          typeof $steps["updateModalActivateOpen"] ===
                            "object" &&
                          typeof $steps["updateModalActivateOpen"].then ===
                            "function"
                        ) {
                          $steps["updateModalActivateOpen"] = await $steps[
                            "updateModalActivateOpen"
                          ];
                        }
                      }}
                    >
                      {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                    </div>
                  </div>
                </div>
              </AntdModal>
              <AntdModal
                data-plasmic-name={"modalActivateReservations"}
                data-plasmic-override={overrides.modalActivateReservations}
                className={classNames(
                  "__wab_instance",
                  sty.modalActivateReservations
                )}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={false}
                modalScopeClassName={sty["modalActivateReservations__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "modalActivateReservations",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, [
                  "modalActivateReservations",
                  "open"
                ])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2QvB
                    )}
                  >
                    {
                      "\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"
                    }
                  </div>
                }
                trigger={null}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qizG5)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sx7U5
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627 \u0628\u0647 \u0628\u0631\u0646\u0627\u0645\u0647\u200c \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0646:"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627 \u0628\u0647 \u0628\u0631\u0646\u0627\u0645\u0647 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0646:"
                      : "\u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627 \u0628\u0647 \u0628\u0631\u0646\u0627\u0645\u0647 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0646:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qx4BL
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u06f0 \u0646\u0645\u0627\u06cc\u0634 \u062a\u0645\u0627\u0645 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u06af\u0630\u0634\u062a\u0647 \u0648 \u0622\u06cc\u0646\u062f\u0647 \r\n\u06f0 \u0627\u0645\u06a9\u0627\u0646 \u062a\u0627\u06cc\u06cc\u062f \u06cc\u0627 \u0631\u062f \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \r\n\u06f0 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646 \u0645\u0647\u0645\u0627\u0646\u0627\u0646\r\n\u06f0 \u0630\u062e\u06cc\u0631\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0647\u0645\u0627\u0646\u200c\u0647\u0627 \u062f\u0631 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646\r"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u06f0 \u0646\u0645\u0627\u06cc\u0634 \u062a\u0645\u0627\u0645 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u06af\u0630\u0634\u062a\u0647 \u0648 \u0622\u06cc\u0646\u062f\u0647 \r\n\u06f0 \u0627\u0645\u06a9\u0627\u0646 \u062a\u0627\u06cc\u06cc\u062f \u06cc\u0627 \u0631\u062f \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \r\n\u06f0 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646 \u0645\u0647\u0645\u0627\u0646\u0627\u0646\r\n\u06f0 \u0630\u062e\u06cc\u0631\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0647\u0645\u0627\u0646\u200c\u0647\u0627 \u062f\u0631 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646\r"
                      : "\u06f0 \u062a\u0627\u0631\u06cc\u062e\u0686\u0647\u200c\u06cc \u0645\u0647\u0645\u0627\u0646\u200c\u0647\u0627\r\n\u06f0 \u0627\u0645\u06a9\u0627\u0646 \u062a\u0627\u06cc\u06cc\u062f \u06cc\u0627 \u0631\u062f \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \r\n\u06f0 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646 \u0645\u0647\u0645\u0627\u0646\u0627\u0646\r\n\u06f0 \u0630\u062e\u06cc\u0631\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0647\u0645\u0627\u0646\u200c\u0647\u0627 \u062f\u0631 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646\n\u06f0 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a\u200c\u06af\u0630\u0627\u0631\u06cc \u0631\u0648\u06cc \u062a\u0642\u0648\u06cc\u0645\n\r"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__e0XaI)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__byiWh
                    )}
                  >
                    {
                      "\u0628\u0627 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u060c \u0631\u0648\u06cc \u00ab\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a\u06cc \u0627\u0632 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u00bb \u06a9\u0627\u0631\u0645\u0632\u062f \u0644\u062d\u0627\u0638 \u0645\u06cc\u200c\u0634\u0647."
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"buttons3"}
                  data-plasmic-override={overrides.buttons3}
                  className={classNames(projectcss.all, sty.buttons3)}
                >
                  <div
                    data-plasmic-name={"active3"}
                    data-plasmic-override={overrides.active3}
                    className={classNames(projectcss.all, sty.active3)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/auto-sync-activate",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      feature_name: "reservations",
                                      is_active: true
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateSwitch2IsSelected"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["switch2", "isSelected"]
                              },
                              operation: 0,
                              value: ($state.switch2.isSelected =
                                $steps.invokeGlobalAction.data.status)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSwitch2IsSelected"] != null &&
                        typeof $steps["updateSwitch2IsSelected"] === "object" &&
                        typeof $steps["updateSwitch2IsSelected"].then ===
                          "function"
                      ) {
                        $steps["updateSwitch2IsSelected"] = await $steps[
                          "updateSwitch2IsSelected"
                        ];
                      }

                      $steps["updateModalActivateReservationsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "modalActivateReservations",
                                  "open"
                                ]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalActivateReservationsOpen"] != null &&
                        typeof $steps["updateModalActivateReservationsOpen"] ===
                          "object" &&
                        typeof $steps["updateModalActivateReservationsOpen"]
                          .then === "function"
                      ) {
                        $steps["updateModalActivateReservationsOpen"] =
                          await $steps["updateModalActivateReservationsOpen"];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.status == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0641\u0639\u0627\u0644 \u0634\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $steps.invokeGlobalAction.data.status == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u0627\u0641\u06cc \u0646\u06cc\u0633\u062a",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }
                    }}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return $state.loading == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : false
                    ) ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___67Ivb)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={
                          "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                        }
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__swGq5
                      )}
                    >
                      {"\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"cancel"}
                    data-plasmic-override={overrides.cancel}
                    className={classNames(projectcss.all, sty.cancel)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jlwrs
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSwitch2IsSelected"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["switch2", "isSelected"]
                                },
                                operation: 0,
                                value: $state.switch2.isSelected == false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitch2IsSelected"] != null &&
                          typeof $steps["updateSwitch2IsSelected"] ===
                            "object" &&
                          typeof $steps["updateSwitch2IsSelected"].then ===
                            "function"
                        ) {
                          $steps["updateSwitch2IsSelected"] = await $steps[
                            "updateSwitch2IsSelected"
                          ];
                        }

                        $steps["updateModalActivateOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "modalActivateReservations",
                                    "open"
                                  ]
                                },
                                operation: 0,
                                value:
                                  $state.modalActivateReservations.open == false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalActivateOpen"] != null &&
                          typeof $steps["updateModalActivateOpen"] ===
                            "object" &&
                          typeof $steps["updateModalActivateOpen"].then ===
                            "function"
                        ) {
                          $steps["updateModalActivateOpen"] = await $steps[
                            "updateModalActivateOpen"
                          ];
                        }
                      }}
                    >
                      {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                    </div>
                  </div>
                </div>
              </AntdModal>
              <AntdModal
                data-plasmic-name={"modalDEactivateAutosync"}
                data-plasmic-override={overrides.modalDEactivateAutosync}
                className={classNames(
                  "__wab_instance",
                  sty.modalDEactivateAutosync
                )}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={false}
                modalScopeClassName={sty["modalDEactivateAutosync__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "modalDEactivateAutosync",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, [
                  "modalDEactivateAutosync",
                  "open"
                ])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nbEt
                    )}
                  >
                    {
                      "\u063a\u06cc\u0631 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631"
                    }
                  </div>
                }
                trigger={null}
              >
                <div className={classNames(projectcss.all, sty.freeBox__wlTfp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mc9FR
                    )}
                  >
                    {
                      "\u063a\u06cc\u0631 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0628\u0627\u0639\u062b \u0645\u06cc\u200c\u0634\u0647 \u062f\u06cc\u06af\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0634\u0645\u0627 \u062f\u0631 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0631\u0648 \u0631\u0635\u062f \u0646\u06a9\u0646\u0647!\n\u0648 \u062f\u0631\u0635\u0648\u0631\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u062c\u062f\u06cc\u062f\u060c \u0644\u0627\u0632\u0645\u0647 \u062e\u0648\u062f\u062a \u0645\u0631\u0627\u0642\u0628 \u062a\u0642\u0648\u06cc\u0645 \u0647\u0645\u0647\u200c\u06cc \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0628\u0627\u0634\u06cc!"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"buttons2"}
                  data-plasmic-override={overrides.buttons2}
                  className={classNames(projectcss.all, sty.buttons2)}
                >
                  <div
                    data-plasmic-name={"deactive5"}
                    data-plasmic-override={overrides.deactive5}
                    className={classNames(projectcss.all, sty.deactive5)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/auto-sync-activate",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      feature_name: "auto_sync",
                                      is_active: false
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateModalDEactivateAutosyncOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "modalDEactivateAutosync",
                                  "open"
                                ]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalDEactivateAutosyncOpen"] != null &&
                        typeof $steps["updateModalDEactivateAutosyncOpen"] ===
                          "object" &&
                        typeof $steps["updateModalDEactivateAutosyncOpen"]
                          .then === "function"
                      ) {
                        $steps["updateModalDEactivateAutosyncOpen"] =
                          await $steps["updateModalDEactivateAutosyncOpen"];
                      }

                      $steps["updateSwitch1IsSelected"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["switch1", "isSelected"]
                              },
                              operation: 0,
                              value: ($state.switch1.isSelected = false)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSwitch1IsSelected"] != null &&
                        typeof $steps["updateSwitch1IsSelected"] === "object" &&
                        typeof $steps["updateSwitch1IsSelected"].then ===
                          "function"
                      ) {
                        $steps["updateSwitch1IsSelected"] = await $steps[
                          "updateSwitch1IsSelected"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.status == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0634\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return $state.loading == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : false
                    ) ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__g0TMq)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={
                          "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                        }
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9LPT
                      )}
                    >
                      {"\u063a\u06cc\u0631\u0641\u0639\u0627\u0644"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"deactive2"}
                    data-plasmic-override={overrides.deactive2}
                    className={classNames(projectcss.all, sty.deactive2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___00Z3
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSwitch1IsSelected"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["switch1", "isSelected"]
                                },
                                operation: 0,
                                value: $state.switch1.isSelected == false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitch1IsSelected"] != null &&
                          typeof $steps["updateSwitch1IsSelected"] ===
                            "object" &&
                          typeof $steps["updateSwitch1IsSelected"].then ===
                            "function"
                        ) {
                          $steps["updateSwitch1IsSelected"] = await $steps[
                            "updateSwitch1IsSelected"
                          ];
                        }

                        $steps["updateSwitch1IsSelected2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "modalDEactivateAutosync",
                                    "open"
                                  ]
                                },
                                operation: 0,
                                value:
                                  $state.modalDEactivateAutosync.open == false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitch1IsSelected2"] != null &&
                          typeof $steps["updateSwitch1IsSelected2"] ===
                            "object" &&
                          typeof $steps["updateSwitch1IsSelected2"].then ===
                            "function"
                        ) {
                          $steps["updateSwitch1IsSelected2"] = await $steps[
                            "updateSwitch1IsSelected2"
                          ];
                        }
                      }}
                    >
                      {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                    </div>
                  </div>
                </div>
              </AntdModal>
              <AntdModal
                data-plasmic-name={"modalDEactivateReservations"}
                data-plasmic-override={overrides.modalDEactivateReservations}
                className={classNames(
                  "__wab_instance",
                  sty.modalDEactivateReservations
                )}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={false}
                modalScopeClassName={sty["modalDEactivateReservations__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "modalDEactivateReservations",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, [
                  "modalDEactivateReservations",
                  "open"
                ])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kxL1E
                    )}
                  >
                    {
                      "\u063a\u06cc\u0631 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"
                    }
                  </div>
                }
                trigger={null}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xe5B3)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nrISn
                    )}
                  >
                    {
                      "\u0628\u0627 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u060c \u0647\u0645\u0647\u200c\u06cc \u0627\u06cc\u0646\u200c\u0647\u0627 \u0642\u0637\u0639 \u0645\u06cc\u200c\u0634\u0646:"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h1JAd
                    )}
                  >
                    {
                      "\u06f0 \u062b\u0628\u062a \u062a\u0627\u0631\u06cc\u062e\u0686\u0647\u200c\u06cc \u0645\u0647\u0645\u0627\u0646\u200c\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f\r\n\u06f0 \u0627\u0645\u06a9\u0627\u0646 \u062a\u0627\u06cc\u06cc\u062f \u06cc\u0627 \u0631\u062f \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \r\n\u06f0 \u0630\u062e\u06cc\u0631\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0647\u0645\u0627\u0646\u200c\u0647\u0627 \u062f\u0631 \u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646\n\u06f0 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a\u200c\u06af\u0630\u0627\u0631\u06cc \u0631\u0648\u06cc \u062a\u0642\u0648\u06cc\u0645\n\r"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"buttons4"}
                  data-plasmic-override={overrides.buttons4}
                  className={classNames(projectcss.all, sty.buttons4)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"active4"}
                    data-plasmic-override={overrides.active4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.active4)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/auto-sync-activate",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      feature_name: "reservations",
                                      is_active: false
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateModalDEactivateReservationsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "modalDEactivateReservations",
                                  "open"
                                ]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalDEactivateReservationsOpen"] !=
                          null &&
                        typeof $steps[
                          "updateModalDEactivateReservationsOpen"
                        ] === "object" &&
                        typeof $steps["updateModalDEactivateReservationsOpen"]
                          .then === "function"
                      ) {
                        $steps["updateModalDEactivateReservationsOpen"] =
                          await $steps["updateModalDEactivateReservationsOpen"];
                      }

                      $steps["updateSwitch2IsSelected"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["switch2", "isSelected"]
                              },
                              operation: 0,
                              value: ($state.switch2.isSelected = false)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSwitch2IsSelected"] != null &&
                        typeof $steps["updateSwitch2IsSelected"] === "object" &&
                        typeof $steps["updateSwitch2IsSelected"].then ===
                          "function"
                      ) {
                        $steps["updateSwitch2IsSelected"] = await $steps[
                          "updateSwitch2IsSelected"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.status == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0634\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return $state.loading == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : false
                    ) ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__la2M2)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"45px"}
                        loading={"lazy"}
                        src={
                          "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                        }
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wMEjm
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      {"\u063a\u06cc\u0631\u0641\u0639\u0627\u0644"}
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"deactive4"}
                    data-plasmic-override={overrides.deactive4}
                    className={classNames(projectcss.all, sty.deactive4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9V6C2
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSwitch2IsSelected"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["switch2", "isSelected"]
                                },
                                operation: 0,
                                value: $state.switch2.isSelected == false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitch2IsSelected"] != null &&
                          typeof $steps["updateSwitch2IsSelected"] ===
                            "object" &&
                          typeof $steps["updateSwitch2IsSelected"].then ===
                            "function"
                        ) {
                          $steps["updateSwitch2IsSelected"] = await $steps[
                            "updateSwitch2IsSelected"
                          ];
                        }

                        $steps["updateSwitch1IsSelected2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "modalDEactivateReservations",
                                    "open"
                                  ]
                                },
                                operation: 0,
                                value:
                                  $state.modalDEactivateReservations.open ==
                                  false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSwitch1IsSelected2"] != null &&
                          typeof $steps["updateSwitch1IsSelected2"] ===
                            "object" &&
                          typeof $steps["updateSwitch1IsSelected2"].then ===
                            "function"
                        ) {
                          $steps["updateSwitch1IsSelected2"] = await $steps[
                            "updateSwitch1IsSelected2"
                          ];
                        }
                      }}
                    >
                      {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                    </div>
                  </div>
                </div>
              </AntdModal>
            </div>
            <div
              data-plasmic-name={"opt14"}
              data-plasmic-override={overrides.opt14}
              className={classNames(projectcss.all, sty.opt14)}
            >
              <div
                data-plasmic-name={"p24"}
                data-plasmic-override={overrides.p24}
                className={classNames(projectcss.all, sty.p24)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nIm2M
                  )}
                >
                  {
                    "\u06a9\u0627\u0631\u0645\u0632\u062f \u0641\u0639\u0644\u06cc \u0634\u0645\u0627"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"p34"}
                data-plasmic-override={overrides.p34}
                className={classNames(projectcss.all, sty.p34)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ifHFd
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          let sum = 0;
                          if ($state.switch1.isSelected === true) {
                            sum += parseFloat(
                              $state.apiRequest2.data[0].default_rate
                            );
                          }
                          if ($state.switch2.isSelected === true) {
                            sum += parseFloat(
                              $state.apiRequest.data[0].default_rate
                            );
                          }
                          if ($state.switch3.isSelected === true) {
                            sum += 0.5;
                          }
                          return `${new Intl.NumberFormat("fa-IR").format(
                            sum
                          )} %`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u06a9\u0627\u0631\u0645\u0632\u062f: \u06f1\u066a";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"apiRequestSetting"}
              data-plasmic-override={overrides.apiRequestSetting}
              className={classNames("__wab_instance", sty.apiRequestSetting)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hAza
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Error fetching data";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequestSetting",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequestSetting",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequestSetting",
                  "data"
                ]).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["apiRequestSetting"] = ref;
              }}
              url={"https://gateway.rentamon.com/webhook/fetch-setting-from-db"}
            />

            <div
              data-plasmic-name={"_2nd2"}
              data-plasmic-override={overrides._2nd2}
              className={classNames(projectcss.all, sty._2Nd2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vl2CS
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u06af\u0632\u06cc\u0646\u0647\u200c\u0647\u0627\u06cc \u0628\u0627\u0644\u0627\u060c \u06cc\u0639\u0646\u06cc \u0622\u0632\u0627\u062f \u06a9\u0631\u062f\u0646 \u0648\u0642\u062a. \u0627\u0632 \u0642\u062f\u06cc\u0645 \u06af\u0641\u062a\u0646 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"\u0648\u0642\u062a \u0637\u0644\u0627\u0633\u062a"}
                    </span>
                    <React.Fragment>{"!"}</React.Fragment>
                  </React.Fragment>
                ) : hasVariant(globalVariants, "screen", "mobile") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u06af\u0632\u06cc\u0646\u0647\u200c\u0647\u0627\u06cc \u0628\u0627\u0644\u0627\u060c \u06cc\u0639\u0646\u06cc \u0622\u0632\u0627\u062f \u06a9\u0631\u062f\u0646 \u0648\u0642\u062a. \u0627\u0632 \u0642\u062f\u06cc\u0645 \u06af\u0641\u062a\u0646 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"\u0648\u0642\u062a \u0637\u0644\u0627\u0633\u062a"}
                    </span>
                    <React.Fragment>{"!"}</React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u0647\u0631 \u0648\u06cc\u0698\u06af\u06cc\u060c \u06cc\u0639\u0646\u06cc \u0622\u0632\u0627\u062f \u06a9\u0631\u062f\u0646 \u0648\u0642\u062a. \u0627\u0632 \u0642\u062f\u06cc\u0645 \u06af\u0641\u062a\u0646 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"\u0648\u0642\u062a \u0637\u0644\u0627\u0633\u062a"}
                    </span>
                    <React.Fragment>{"!"}</React.Fragment>
                  </React.Fragment>
                )}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__lXyXj)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gY7S2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["variable"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariable"] != null &&
                    typeof $steps["updateVariable"] === "object" &&
                    typeof $steps["updateVariable"].then === "function"
                  ) {
                    $steps["updateVariable"] = await $steps["updateVariable"];
                  }
                }}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"clarity2"}
              data-plasmic-override={overrides.clarity2}
              className={classNames("__wab_instance", sty.clarity2)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  settings: [
    "settings",
    "header3",
    "sideBar2",
    "profile",
    "main",
    "title",
    "intro",
    "_2nd",
    "titleRow",
    "opt15",
    "p14",
    "p25",
    "p35",
    "p44",
    "optionsButtons",
    "options",
    "opt1",
    "p1",
    "p2",
    "p3",
    "apiRequest2",
    "p4",
    "switch1",
    "options2",
    "opt12",
    "p12",
    "p22",
    "p32",
    "apiRequest",
    "p42",
    "switch2",
    "options3",
    "opt13",
    "p13",
    "p23",
    "p33",
    "p43",
    "switch3",
    "modalActivateAutosync",
    "buttons",
    "active",
    "deactive",
    "modalActivateReservations",
    "buttons3",
    "active3",
    "cancel",
    "modalDEactivateAutosync",
    "buttons2",
    "deactive5",
    "deactive2",
    "modalDEactivateReservations",
    "buttons4",
    "active4",
    "deactive4",
    "opt14",
    "p24",
    "p34",
    "apiRequestSetting",
    "_2nd2",
    "returnButton",
    "sideEffect",
    "html",
    "clarity2",
    "goftino"
  ],
  header3: ["header3", "sideBar2", "profile"],
  sideBar2: ["sideBar2"],
  profile: ["profile"],
  main: [
    "main",
    "title",
    "intro",
    "_2nd",
    "titleRow",
    "opt15",
    "p14",
    "p25",
    "p35",
    "p44",
    "optionsButtons",
    "options",
    "opt1",
    "p1",
    "p2",
    "p3",
    "apiRequest2",
    "p4",
    "switch1",
    "options2",
    "opt12",
    "p12",
    "p22",
    "p32",
    "apiRequest",
    "p42",
    "switch2",
    "options3",
    "opt13",
    "p13",
    "p23",
    "p33",
    "p43",
    "switch3",
    "modalActivateAutosync",
    "buttons",
    "active",
    "deactive",
    "modalActivateReservations",
    "buttons3",
    "active3",
    "cancel",
    "modalDEactivateAutosync",
    "buttons2",
    "deactive5",
    "deactive2",
    "modalDEactivateReservations",
    "buttons4",
    "active4",
    "deactive4",
    "opt14",
    "p24",
    "p34",
    "apiRequestSetting",
    "_2nd2"
  ],
  title: ["title"],
  intro: ["intro", "_2nd"],
  _2nd: ["_2nd"],
  titleRow: ["titleRow", "opt15", "p14", "p25", "p35", "p44"],
  opt15: ["opt15", "p14", "p25", "p35", "p44"],
  p14: ["p14"],
  p25: ["p25"],
  p35: ["p35"],
  p44: ["p44"],
  optionsButtons: [
    "optionsButtons",
    "options",
    "opt1",
    "p1",
    "p2",
    "p3",
    "apiRequest2",
    "p4",
    "switch1",
    "options2",
    "opt12",
    "p12",
    "p22",
    "p32",
    "apiRequest",
    "p42",
    "switch2",
    "options3",
    "opt13",
    "p13",
    "p23",
    "p33",
    "p43",
    "switch3",
    "modalActivateAutosync",
    "buttons",
    "active",
    "deactive",
    "modalActivateReservations",
    "buttons3",
    "active3",
    "cancel",
    "modalDEactivateAutosync",
    "buttons2",
    "deactive5",
    "deactive2",
    "modalDEactivateReservations",
    "buttons4",
    "active4",
    "deactive4"
  ],
  options: [
    "options",
    "opt1",
    "p1",
    "p2",
    "p3",
    "apiRequest2",
    "p4",
    "switch1"
  ],
  opt1: ["opt1", "p1", "p2", "p3", "apiRequest2", "p4", "switch1"],
  p1: ["p1"],
  p2: ["p2"],
  p3: ["p3", "apiRequest2"],
  apiRequest2: ["apiRequest2"],
  p4: ["p4", "switch1"],
  switch1: ["switch1"],
  options2: [
    "options2",
    "opt12",
    "p12",
    "p22",
    "p32",
    "apiRequest",
    "p42",
    "switch2"
  ],
  opt12: ["opt12", "p12", "p22", "p32", "apiRequest", "p42", "switch2"],
  p12: ["p12"],
  p22: ["p22"],
  p32: ["p32", "apiRequest"],
  apiRequest: ["apiRequest"],
  p42: ["p42", "switch2"],
  switch2: ["switch2"],
  options3: ["options3", "opt13", "p13", "p23", "p33", "p43", "switch3"],
  opt13: ["opt13", "p13", "p23", "p33", "p43", "switch3"],
  p13: ["p13"],
  p23: ["p23"],
  p33: ["p33"],
  p43: ["p43", "switch3"],
  switch3: ["switch3"],
  modalActivateAutosync: [
    "modalActivateAutosync",
    "buttons",
    "active",
    "deactive"
  ],
  buttons: ["buttons", "active", "deactive"],
  active: ["active"],
  deactive: ["deactive"],
  modalActivateReservations: [
    "modalActivateReservations",
    "buttons3",
    "active3",
    "cancel"
  ],
  buttons3: ["buttons3", "active3", "cancel"],
  active3: ["active3"],
  cancel: ["cancel"],
  modalDEactivateAutosync: [
    "modalDEactivateAutosync",
    "buttons2",
    "deactive5",
    "deactive2"
  ],
  buttons2: ["buttons2", "deactive5", "deactive2"],
  deactive5: ["deactive5"],
  deactive2: ["deactive2"],
  modalDEactivateReservations: [
    "modalDEactivateReservations",
    "buttons4",
    "active4",
    "deactive4"
  ],
  buttons4: ["buttons4", "active4", "deactive4"],
  active4: ["active4"],
  deactive4: ["deactive4"],
  opt14: ["opt14", "p24", "p34"],
  p24: ["p24"],
  p34: ["p34"],
  apiRequestSetting: ["apiRequestSetting"],
  _2nd2: ["_2nd2"],
  returnButton: ["returnButton"],
  sideEffect: ["sideEffect"],
  html: ["html", "clarity2", "goftino"],
  clarity2: ["clarity2"],
  goftino: ["goftino"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  settings: "div";
  header3: "div";
  sideBar2: typeof SideBar2;
  profile: typeof ApiRequest;
  main: "div";
  title: "div";
  intro: "div";
  _2nd: "div";
  titleRow: "div";
  opt15: "div";
  p14: "div";
  p25: "div";
  p35: "div";
  p44: "div";
  optionsButtons: "div";
  options: "div";
  opt1: "div";
  p1: "div";
  p2: "div";
  p3: "div";
  apiRequest2: typeof ApiRequest;
  p4: "div";
  switch1: typeof Switch;
  options2: "div";
  opt12: "div";
  p12: "div";
  p22: "div";
  p32: "div";
  apiRequest: typeof ApiRequest;
  p42: "div";
  switch2: typeof Switch;
  options3: "div";
  opt13: "div";
  p13: "div";
  p23: "div";
  p33: "div";
  p43: "div";
  switch3: typeof Switch;
  modalActivateAutosync: typeof AntdModal;
  buttons: "div";
  active: "div";
  deactive: "div";
  modalActivateReservations: typeof AntdModal;
  buttons3: "div";
  active3: "div";
  cancel: "div";
  modalDEactivateAutosync: typeof AntdModal;
  buttons2: "div";
  deactive5: "div";
  deactive2: "div";
  modalDEactivateReservations: typeof AntdModal;
  buttons4: "div";
  active4: "div";
  deactive4: "div";
  opt14: "div";
  p24: "div";
  p34: "div";
  apiRequestSetting: typeof ApiRequest;
  _2nd2: "div";
  returnButton: "div";
  sideEffect: typeof SideEffect;
  html: "div";
  clarity2: typeof Embed;
  goftino: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettings__VariantsArgs;
    args?: PlasmicSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettings__ArgProps,
          internalVariantPropNames: PlasmicSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "settings") {
    func.displayName = "PlasmicSettings";
  } else {
    func.displayName = `PlasmicSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicSettings = Object.assign(
  // Top-level PlasmicSettings renders the root element
  makeNodeComponent("settings"),
  {
    // Helper components rendering sub-elements
    header3: makeNodeComponent("header3"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile: makeNodeComponent("profile"),
    main: makeNodeComponent("main"),
    title: makeNodeComponent("title"),
    intro: makeNodeComponent("intro"),
    _2nd: makeNodeComponent("_2nd"),
    titleRow: makeNodeComponent("titleRow"),
    opt15: makeNodeComponent("opt15"),
    p14: makeNodeComponent("p14"),
    p25: makeNodeComponent("p25"),
    p35: makeNodeComponent("p35"),
    p44: makeNodeComponent("p44"),
    optionsButtons: makeNodeComponent("optionsButtons"),
    options: makeNodeComponent("options"),
    opt1: makeNodeComponent("opt1"),
    p1: makeNodeComponent("p1"),
    p2: makeNodeComponent("p2"),
    p3: makeNodeComponent("p3"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    p4: makeNodeComponent("p4"),
    switch1: makeNodeComponent("switch1"),
    options2: makeNodeComponent("options2"),
    opt12: makeNodeComponent("opt12"),
    p12: makeNodeComponent("p12"),
    p22: makeNodeComponent("p22"),
    p32: makeNodeComponent("p32"),
    apiRequest: makeNodeComponent("apiRequest"),
    p42: makeNodeComponent("p42"),
    switch2: makeNodeComponent("switch2"),
    options3: makeNodeComponent("options3"),
    opt13: makeNodeComponent("opt13"),
    p13: makeNodeComponent("p13"),
    p23: makeNodeComponent("p23"),
    p33: makeNodeComponent("p33"),
    p43: makeNodeComponent("p43"),
    switch3: makeNodeComponent("switch3"),
    modalActivateAutosync: makeNodeComponent("modalActivateAutosync"),
    buttons: makeNodeComponent("buttons"),
    active: makeNodeComponent("active"),
    deactive: makeNodeComponent("deactive"),
    modalActivateReservations: makeNodeComponent("modalActivateReservations"),
    buttons3: makeNodeComponent("buttons3"),
    active3: makeNodeComponent("active3"),
    cancel: makeNodeComponent("cancel"),
    modalDEactivateAutosync: makeNodeComponent("modalDEactivateAutosync"),
    buttons2: makeNodeComponent("buttons2"),
    deactive5: makeNodeComponent("deactive5"),
    deactive2: makeNodeComponent("deactive2"),
    modalDEactivateReservations: makeNodeComponent(
      "modalDEactivateReservations"
    ),
    buttons4: makeNodeComponent("buttons4"),
    active4: makeNodeComponent("active4"),
    deactive4: makeNodeComponent("deactive4"),
    opt14: makeNodeComponent("opt14"),
    p24: makeNodeComponent("p24"),
    p34: makeNodeComponent("p34"),
    apiRequestSetting: makeNodeComponent("apiRequestSetting"),
    _2nd2: makeNodeComponent("_2nd2"),
    returnButton: makeNodeComponent("returnButton"),
    sideEffect: makeNodeComponent("sideEffect"),
    html: makeNodeComponent("html"),
    clarity2: makeNodeComponent("clarity2"),
    goftino: makeNodeComponent("goftino"),

    // Metadata about props expected for PlasmicSettings
    internalVariantProps: PlasmicSettings__VariantProps,
    internalArgProps: PlasmicSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تنظیمات",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettings;
/* prettier-ignore-end */
