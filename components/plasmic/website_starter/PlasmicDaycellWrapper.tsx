// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: gvvFSjX--a-Y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DayCell from "../../DayCell"; // plasmic-import: cU6Nt4MA6DXT/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicDaycellWrapper.module.css"; // plasmic-import: gvvFSjX--a-Y/css

createPlasmicElementProxy;

export type PlasmicDaycellWrapper__VariantMembers = {};
export type PlasmicDaycellWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicDaycellWrapper__VariantsArgs;
export const PlasmicDaycellWrapper__VariantProps = new Array<VariantPropType>();

export type PlasmicDaycellWrapper__ArgsType = {
  apiRequestData?: any;
  dateProps?: any;
};
type ArgPropType = keyof PlasmicDaycellWrapper__ArgsType;
export const PlasmicDaycellWrapper__ArgProps = new Array<ArgPropType>(
  "apiRequestData",
  "dateProps"
);

export type PlasmicDaycellWrapper__OverridesType = {
  root?: Flex__<typeof DayCell>;
};

export interface DefaultDaycellWrapperProps {
  apiRequestData?: any;
  dateProps?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDaycellWrapper__RenderFunc(props: {
  variants: PlasmicDaycellWrapper__VariantsArgs;
  args: PlasmicDaycellWrapper__ArgsType;
  overrides: PlasmicDaycellWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <DayCell
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      dayNumber={(() => {
        try {
          return (() => {
            function convertEnglishNumbersToPersian(str) {
              const englishNumbers = [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ];

              const persianNumbers = [
                "۰",
                "۱",
                "۲",
                "۳",
                "۴",
                "۵",
                "۶",
                "۷",
                "۸",
                "۹"
              ];

              return str
                .toString()
                .replace(
                  /[0-9]/g,
                  char => persianNumbers[englishNumbers.indexOf(char)] || char
                );
            }
            const englishNumber = $props.dateProps.date.day;
            const persianNumber = convertEnglishNumbersToPersian(englishNumber);
            return persianNumber;
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      dayStatus={
        hasVariant(globalVariants, "screen", "mobile")
          ? (() => {
              try {
                return (() => {
                  function convertPersianNumbersToEnglish(str) {
                    const persianNumbers = "۰۱۲۳۴۵۶۷۸۹";
                    return str.replace(/[۰-۹]/g, char =>
                      persianNumbers.indexOf(char)
                    );
                  }
                  function isPastDate(
                    targetY,
                    targetM,
                    targetD,
                    currentY,
                    currentM,
                    currentD
                  ) {
                    if (targetY < currentY) return true;
                    if (targetY === currentY && targetM < currentM) return true;
                    if (
                      targetY === currentY &&
                      targetM === currentM &&
                      targetD < currentD
                    )
                      return true;
                    return false;
                  }
                  function isOutOfNextMonthRange(
                    targetY,
                    targetM,
                    nextY,
                    nextM
                  ) {
                    if (targetY > nextY) return true;
                    if (targetY === nextY && targetM > nextM) return true;
                    return false;
                  }
                  const currentDate = new Date();
                  const nextMonthDate = new Date(currentDate);
                  nextMonthDate.setMonth(currentDate.getMonth() + 1);
                  const [currentYear, currentMonth, currentDay] = currentDate
                    .toLocaleDateString("fa")
                    .split("/")
                    .map(val => parseInt(convertPersianNumbersToEnglish(val)));
                  const [nextMonthYear, nextMonth] = nextMonthDate
                    .toLocaleDateString("fa")
                    .split("/")
                    .slice(0, 2)
                    .map(val => parseInt(convertPersianNumbersToEnglish(val)));
                  function getDayClass(dateProps, calendarData) {
                    const targetDate = new Date(dateProps.unix * 1000);
                    const [targetYear, targetMonth, targetDay] = targetDate
                      .toLocaleDateString("fa")
                      .split("/")
                      .map(val =>
                        parseInt(convertPersianNumbersToEnglish(val))
                      );
                    const dayIndex = dateProps.date.day - 1;
                    const calendarItem = calendarData[dayIndex] || {};
                    if (
                      isPastDate(
                        targetYear,
                        targetMonth,
                        targetDay,
                        currentYear,
                        currentMonth,
                        currentDay
                      ) ||
                      isOutOfNextMonthRange(
                        targetYear,
                        targetMonth,
                        nextMonthYear,
                        nextMonth
                      )
                    ) {
                      return "disabled";
                    }
                    if (dateProps.isSelected) return "selected";
                    if (calendarItem.status === "reserved") return "reserved";
                    if (calendarItem.status === "blocked") return "blocked";
                    if (
                      calendarItem.discount_percentage &&
                      calendarItem.discount_percentage > 0
                    )
                      return "discount";
                    return calendarItem.status || "";
                    return calendarItem.status || "";
                  }
                  const className = getDayClass(
                    dateProps,
                    $state.apiRequest.data.calendar
                  );
                  return className;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          : (() => {
              try {
                return (() => {
                  if ($props.dateProps.isSelected) return "selected";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
      }
      holidays={(() => {
        try {
          return undefined;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={(() => {
        try {
          return (() => {
            const websiteNames = {
              host: "رزرو",
              jajiga: "جاجیگا",
              jabama: "جاباما",
              shab: "شب",
              homsa: "هومسا",
              mihmansho: "مهمانشو",
              otaghak: "اتاقک",
              mizboon: "میزبون"
            };
            const dayIndex = $props.dateProps.date.day - 1;
            const calendarData = $props.apiRequestData.data.calendar[dayIndex];
            const status =
              calendarData?.status === "reserved"
                ? websiteNames[calendarData.website] || ""
                : "";
            return status;
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      price={
        hasVariant(globalVariants, "screen", "mobile")
          ? (() => {
              try {
                return (() => {
                  const calendarItem =
                    $state.apiRequest.data.calendar[dateProps.date.day - 1];
                  if (calendarItem) {
                    const {
                      price = 0,
                      discount_percentage: discountPercentage = 0
                    } = calendarItem;
                    const finalPrice = price * (1 - discountPercentage / 100);
                    const roundedPrice = Math.round(finalPrice / 1000);
                    const formattedPersianPrice = roundedPrice
                      ? new Intl.NumberFormat("fa-IR").format(roundedPrice)
                      : null;
                    return formattedPersianPrice;
                  } else {
                    return null;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          : (() => {
              try {
                return (() => {
                  const calendarItem =
                    $props.apiRequestData.data.calendar[
                      $props.dateProps.date.day - 1
                    ];
                  if (calendarItem) {
                    const {
                      price = 0,
                      discount_percentage: discountPercentage = 0
                    } = calendarItem;
                    const finalPrice = price * (1 - discountPercentage / 100);
                    const roundedPrice = Math.round(finalPrice / 1000);
                    const formattedPersianPrice = roundedPrice
                      ? new Intl.NumberFormat("fa-IR").format(roundedPrice)
                      : null;
                    return formattedPersianPrice;
                  } else {
                    return null;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
      }
      selected={(() => {
        try {
          return $props.dateProps.isSelected;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return [];
          }
          throw e;
        }
      })()}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof DayCell;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDaycellWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDaycellWrapper__VariantsArgs;
    args?: PlasmicDaycellWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDaycellWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDaycellWrapper__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDaycellWrapper__ArgProps,
          internalVariantPropNames: PlasmicDaycellWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDaycellWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDaycellWrapper";
  } else {
    func.displayName = `PlasmicDaycellWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicDaycellWrapper = Object.assign(
  // Top-level PlasmicDaycellWrapper renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDaycellWrapper
    internalVariantProps: PlasmicDaycellWrapper__VariantProps,
    internalArgProps: PlasmicDaycellWrapper__ArgProps
  }
);

export default PlasmicDaycellWrapper;
/* prettier-ignore-end */
