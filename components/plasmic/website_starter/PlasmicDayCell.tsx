/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: cU6Nt4MA6DXT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicDayCell.module.css"; // plasmic-import: cU6Nt4MA6DXT/css

createPlasmicElementProxy;

export type PlasmicDayCell__VariantMembers = {
  selected: "selected";
  dayStatus:
    | "reserved"
    | "discount"
    | "disabled"
    | "blocked"
    | "selected"
    | "firstDayReserve"
    | "lastDayReserve"
    | "midDayReserve"
    | "passedFirstDayReserve"
    | "passedMidDayReserve"
    | "passedLastDayReserve"
    | "passedSingleReserve";
};
export type PlasmicDayCell__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  dayStatus?: SingleChoiceArg<
    | "reserved"
    | "discount"
    | "disabled"
    | "blocked"
    | "selected"
    | "firstDayReserve"
    | "lastDayReserve"
    | "midDayReserve"
    | "passedFirstDayReserve"
    | "passedMidDayReserve"
    | "passedLastDayReserve"
    | "passedSingleReserve"
  >;
};
type VariantPropType = keyof PlasmicDayCell__VariantsArgs;
export const PlasmicDayCell__VariantProps = new Array<VariantPropType>(
  "selected",
  "dayStatus"
);

export type PlasmicDayCell__ArgsType = {
  dayNumber?: string;
  platform?: string;
  price?: string;
  holidays?: string;
  note?: boolean;
};
type ArgPropType = keyof PlasmicDayCell__ArgsType;
export const PlasmicDayCell__ArgProps = new Array<ArgPropType>(
  "dayNumber",
  "platform",
  "price",
  "holidays",
  "note"
);

export type PlasmicDayCell__OverridesType = {
  root?: Flex__<"div">;
  cell?: Flex__<"div">;
  holidays2?: Flex__<"div">;
  p?: Flex__<"p">;
};

export interface DefaultDayCellProps {
  dayNumber?: string;
  platform?: string;
  price?: string;
  holidays?: string;
  note?: boolean;
  selected?: SingleBooleanChoiceArg<"selected">;
  dayStatus?: SingleChoiceArg<
    | "reserved"
    | "discount"
    | "disabled"
    | "blocked"
    | "selected"
    | "firstDayReserve"
    | "lastDayReserve"
    | "midDayReserve"
    | "passedFirstDayReserve"
    | "passedMidDayReserve"
    | "passedLastDayReserve"
    | "passedSingleReserve"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDayCell__RenderFunc(props: {
  variants: PlasmicDayCell__VariantsArgs;
  args: PlasmicDayCell__ArgsType;
  overrides: PlasmicDayCell__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          holidays: "false",
          note: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      },
      {
        path: "dayStatus",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dayStatus
      },
      {
        path: "test",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        hasVariant($state, "dayStatus", "disabled")
          ? "disablebutton"
          : undefined,
        {
          [sty.rootdayStatus_blocked]: hasVariant(
            $state,
            "dayStatus",
            "blocked"
          ),
          [sty.rootdayStatus_disabled]: hasVariant(
            $state,
            "dayStatus",
            "disabled"
          ),
          [sty.rootdayStatus_discount]: hasVariant(
            $state,
            "dayStatus",
            "discount"
          ),
          [sty.rootdayStatus_firstDayReserve]: hasVariant(
            $state,
            "dayStatus",
            "firstDayReserve"
          ),
          [sty.rootdayStatus_lastDayReserve]: hasVariant(
            $state,
            "dayStatus",
            "lastDayReserve"
          ),
          [sty.rootdayStatus_midDayReserve]: hasVariant(
            $state,
            "dayStatus",
            "midDayReserve"
          ),
          [sty.rootdayStatus_passedFirstDayReserve]: hasVariant(
            $state,
            "dayStatus",
            "passedFirstDayReserve"
          ),
          [sty.rootdayStatus_passedSingleReserve]: hasVariant(
            $state,
            "dayStatus",
            "passedSingleReserve"
          ),
          [sty.rootdayStatus_reserved]: hasVariant(
            $state,
            "dayStatus",
            "reserved"
          ),
          [sty.rootdayStatus_selected]: hasVariant(
            $state,
            "dayStatus",
            "selected"
          ),
          [sty.rootselected]: hasVariant($state, "selected", "selected")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__jPegP, {
          [sty.freeBoxdayStatus_disabled__jPegPokz0Z]: hasVariant(
            $state,
            "dayStatus",
            "disabled"
          ),
          [sty.freeBoxdayStatus_lastDayReserve__jPegPvreYs]: hasVariant(
            $state,
            "dayStatus",
            "lastDayReserve"
          ),
          [sty.freeBoxdayStatus_passedFirstDayReserve__jPegPohsA4]: hasVariant(
            $state,
            "dayStatus",
            "passedFirstDayReserve"
          ),
          [sty.freeBoxdayStatus_passedLastDayReserve__jPegPMjPP]: hasVariant(
            $state,
            "dayStatus",
            "passedLastDayReserve"
          ),
          [sty.freeBoxdayStatus_passedMidDayReserve__jPegPo7Nt2]: hasVariant(
            $state,
            "dayStatus",
            "passedMidDayReserve"
          ),
          [sty.freeBoxdayStatus_passedSingleReserve__jPegPfNqAx]: hasVariant(
            $state,
            "dayStatus",
            "passedSingleReserve"
          )
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"cell"}
          data-plasmic-override={overrides.cell}
          hasGap={true}
          className={classNames(projectcss.all, sty.cell, "noteEffect", {
            [sty.celldayStatus_blocked]: hasVariant(
              $state,
              "dayStatus",
              "blocked"
            ),
            [sty.celldayStatus_disabled]: hasVariant(
              $state,
              "dayStatus",
              "disabled"
            ),
            [sty.celldayStatus_discount]: hasVariant(
              $state,
              "dayStatus",
              "discount"
            ),
            [sty.celldayStatus_firstDayReserve]: hasVariant(
              $state,
              "dayStatus",
              "firstDayReserve"
            ),
            [sty.celldayStatus_lastDayReserve]: hasVariant(
              $state,
              "dayStatus",
              "lastDayReserve"
            ),
            [sty.celldayStatus_midDayReserve]: hasVariant(
              $state,
              "dayStatus",
              "midDayReserve"
            ),
            [sty.celldayStatus_passedFirstDayReserve]: hasVariant(
              $state,
              "dayStatus",
              "passedFirstDayReserve"
            ),
            [sty.celldayStatus_passedLastDayReserve]: hasVariant(
              $state,
              "dayStatus",
              "passedLastDayReserve"
            ),
            [sty.celldayStatus_passedMidDayReserve]: hasVariant(
              $state,
              "dayStatus",
              "passedMidDayReserve"
            ),
            [sty.celldayStatus_passedSingleReserve]: hasVariant(
              $state,
              "dayStatus",
              "passedSingleReserve"
            ),
            [sty.celldayStatus_reserved]: hasVariant(
              $state,
              "dayStatus",
              "reserved"
            ),
            [sty.celldayStatus_selected]: hasVariant(
              $state,
              "dayStatus",
              "selected"
            ),
            [sty.cellselected]: hasVariant($state, "selected", "selected")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__aE9Ge, {
              [sty.freeBoxdayStatus_disabled__aE9GeOkz0Z]: hasVariant(
                $state,
                "dayStatus",
                "disabled"
              ),
              [sty.freeBoxdayStatus_midDayReserve__aE9GexrGdN]: hasVariant(
                $state,
                "dayStatus",
                "midDayReserve"
              ),
              [sty.freeBoxdayStatus_reserved__aE9Ge6WcTl]: hasVariant(
                $state,
                "dayStatus",
                "reserved"
              ),
              [sty.freeBoxselected__aE9Ge2Pr1U]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })}
          >
            {(() => {
              try {
                return (() => {
                  if ($props.holidays === "true") {
                    return false;
                  } else {
                    return true;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sLeDq,
                  {
                    [sty.textdayStatus_disabled__sLeDqOkz0Z]: hasVariant(
                      $state,
                      "dayStatus",
                      "disabled"
                    ),
                    [sty.textdayStatus_discount__sLeDq2ON9H]: hasVariant(
                      $state,
                      "dayStatus",
                      "discount"
                    ),
                    [sty.textdayStatus_passedFirstDayReserve__sLeDqohsA4]:
                      hasVariant($state, "dayStatus", "passedFirstDayReserve"),
                    [sty.textdayStatus_passedLastDayReserve__sLeDqMjPP]:
                      hasVariant($state, "dayStatus", "passedLastDayReserve"),
                    [sty.textdayStatus_passedMidDayReserve__sLeDqo7Nt2]:
                      hasVariant($state, "dayStatus", "passedMidDayReserve"),
                    [sty.textdayStatus_passedSingleReserve__sLeDqfNqAx]:
                      hasVariant($state, "dayStatus", "passedSingleReserve"),
                    [sty.textdayStatus_reserved__sLeDq6WcTl]: hasVariant(
                      $state,
                      "dayStatus",
                      "reserved"
                    ),
                    [sty.textdayStatus_selected__sLeDqmbNkx]: hasVariant(
                      $state,
                      "dayStatus",
                      "selected"
                    ),
                    [sty.textselected__sLeDq2Pr1U]: hasVariant(
                      $state,
                      "selected",
                      "selected"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.dayNumber;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
            {(() => {
              try {
                return (() => {
                  if ($props.holidays == "true") {
                    return true;
                  } else {
                    return false;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"holidays2"}
                data-plasmic-override={overrides.holidays2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.holidays2,
                  {
                    [sty.holidays2dayStatus_disabled]: hasVariant(
                      $state,
                      "dayStatus",
                      "disabled"
                    ),
                    [sty.holidays2dayStatus_discount]: hasVariant(
                      $state,
                      "dayStatus",
                      "discount"
                    ),
                    [sty.holidays2dayStatus_passedFirstDayReserve]: hasVariant(
                      $state,
                      "dayStatus",
                      "passedFirstDayReserve"
                    ),
                    [sty.holidays2dayStatus_passedLastDayReserve]: hasVariant(
                      $state,
                      "dayStatus",
                      "passedLastDayReserve"
                    ),
                    [sty.holidays2dayStatus_passedMidDayReserve]: hasVariant(
                      $state,
                      "dayStatus",
                      "passedMidDayReserve"
                    ),
                    [sty.holidays2dayStatus_passedSingleReserve]: hasVariant(
                      $state,
                      "dayStatus",
                      "passedSingleReserve"
                    ),
                    [sty.holidays2dayStatus_reserved]: hasVariant(
                      $state,
                      "dayStatus",
                      "reserved"
                    ),
                    [sty.holidays2dayStatus_selected]: hasVariant(
                      $state,
                      "dayStatus",
                      "selected"
                    ),
                    [sty.holidays2selected]: hasVariant(
                      $state,
                      "selected",
                      "selected"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.dayNumber;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__gKj3, {
              [sty.freeBoxdayStatus_disabled__gKj3Okz0Z]: hasVariant(
                $state,
                "dayStatus",
                "disabled"
              ),
              [sty.freeBoxdayStatus_midDayReserve__gKj3XrGdN]: hasVariant(
                $state,
                "dayStatus",
                "midDayReserve"
              ),
              [sty.freeBoxdayStatus_passedFirstDayReserve__gKj3OhsA4]:
                hasVariant($state, "dayStatus", "passedFirstDayReserve"),
              [sty.freeBoxdayStatus_passedLastDayReserve__gKj3MjPP]: hasVariant(
                $state,
                "dayStatus",
                "passedLastDayReserve"
              ),
              [sty.freeBoxdayStatus_passedMidDayReserve__gKj3O7Nt2]: hasVariant(
                $state,
                "dayStatus",
                "passedMidDayReserve"
              ),
              [sty.freeBoxdayStatus_passedSingleReserve__gKj3FNqAx]: hasVariant(
                $state,
                "dayStatus",
                "passedSingleReserve"
              ),
              [sty.freeBoxdayStatus_reserved__gKj36WcTl]: hasVariant(
                $state,
                "dayStatus",
                "reserved"
              ),
              [sty.freeBoxselected__gKj32Pr1U]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kqTC,
                {
                  [sty.textdayStatus_disabled__kqTCokz0Z]: hasVariant(
                    $state,
                    "dayStatus",
                    "disabled"
                  ),
                  [sty.textdayStatus_discount__kqTC2ON9H]: hasVariant(
                    $state,
                    "dayStatus",
                    "discount"
                  ),
                  [sty.textdayStatus_passedFirstDayReserve__kqTCohsA4]:
                    hasVariant($state, "dayStatus", "passedFirstDayReserve"),
                  [sty.textdayStatus_passedLastDayReserve__kqTCMjPP]:
                    hasVariant($state, "dayStatus", "passedLastDayReserve"),
                  [sty.textdayStatus_passedMidDayReserve__kqTCo7Nt2]:
                    hasVariant($state, "dayStatus", "passedMidDayReserve"),
                  [sty.textdayStatus_passedSingleReserve__kqTCfNqAx]:
                    hasVariant($state, "dayStatus", "passedSingleReserve"),
                  [sty.textdayStatus_reserved__kqTC6WcTl]: hasVariant(
                    $state,
                    "dayStatus",
                    "reserved"
                  ),
                  [sty.textselected__kqTC2Pr1U]: hasVariant(
                    $state,
                    "selected",
                    "selected"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "smallMobile") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.platform;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0631\u0632\u0648\u0631 ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : hasVariant(globalVariants, "screen", "mobile") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.platform;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0631\u0632\u0648\u0631 ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.platform;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0631\u0632\u0648\u0631 ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__cD9Fr, {
              [sty.freeBoxdayStatus_firstDayReserve__cD9Fryp11Q]: hasVariant(
                $state,
                "dayStatus",
                "firstDayReserve"
              ),
              [sty.freeBoxdayStatus_passedMidDayReserve__cD9Fro7Nt2]:
                hasVariant($state, "dayStatus", "passedMidDayReserve"),
              [sty.freeBoxdayStatus_reserved__cD9Fr6WcTl]: hasVariant(
                $state,
                "dayStatus",
                "reserved"
              ),
              [sty.freeBoxselected__cD9Fr2Pr1U]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ltKp2,
                {
                  [sty.textdayStatus_blocked__ltKp277F30]: hasVariant(
                    $state,
                    "dayStatus",
                    "blocked"
                  ),
                  [sty.textdayStatus_disabled__ltKp2Okz0Z]: hasVariant(
                    $state,
                    "dayStatus",
                    "disabled"
                  ),
                  [sty.textdayStatus_discount__ltKp22ON9H]: hasVariant(
                    $state,
                    "dayStatus",
                    "discount"
                  ),
                  [sty.textdayStatus_firstDayReserve__ltKp2Yp11Q]: hasVariant(
                    $state,
                    "dayStatus",
                    "firstDayReserve"
                  ),
                  [sty.textdayStatus_passedFirstDayReserve__ltKp2OhsA4]:
                    hasVariant($state, "dayStatus", "passedFirstDayReserve"),
                  [sty.textdayStatus_passedLastDayReserve__ltKp2MjPP]:
                    hasVariant($state, "dayStatus", "passedLastDayReserve"),
                  [sty.textdayStatus_passedMidDayReserve__ltKp2O7Nt2]:
                    hasVariant($state, "dayStatus", "passedMidDayReserve"),
                  [sty.textdayStatus_passedSingleReserve__ltKp2FNqAx]:
                    hasVariant($state, "dayStatus", "passedSingleReserve"),
                  [sty.textdayStatus_reserved__ltKp26WcTl]: hasVariant(
                    $state,
                    "dayStatus",
                    "reserved"
                  ),
                  [sty.textdayStatus_selected__ltKp2MbNkx]: hasVariant(
                    $state,
                    "dayStatus",
                    "selected"
                  ),
                  [sty.textselected__ltKp22Pr1U]: hasVariant(
                    $state,
                    "selected",
                    "selected"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.price;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </Stack__>
      </div>
      {(
        hasVariant($state, "dayStatus", "disabled")
          ? (() => {
              try {
                return $props.note;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : (() => {
              try {
                return $props.note;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <p
          data-plasmic-name={"p"}
          data-plasmic-override={overrides.p}
          className={classNames(
            projectcss.all,
            projectcss.p,
            sty.p,
            hasVariant($state, "dayStatus", "passedFirstDayReserve")
              ? "2"
              : hasVariant($state, "dayStatus", "disabled")
              ? "2"
              : undefined,
            {
              [sty.pdayStatus_disabled]: hasVariant(
                $state,
                "dayStatus",
                "disabled"
              ),
              [sty.pdayStatus_passedFirstDayReserve]: hasVariant(
                $state,
                "dayStatus",
                "passedFirstDayReserve"
              ),
              [sty.pdayStatus_reserved]: hasVariant(
                $state,
                "dayStatus",
                "reserved"
              )
            }
          )}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cell", "holidays2", "p"],
  cell: ["cell", "holidays2"],
  holidays2: ["holidays2"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  cell: "div";
  holidays2: "div";
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDayCell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDayCell__VariantsArgs;
    args?: PlasmicDayCell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDayCell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDayCell__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDayCell__ArgProps,
          internalVariantPropNames: PlasmicDayCell__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDayCell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDayCell";
  } else {
    func.displayName = `PlasmicDayCell.${nodeName}`;
  }
  return func;
}

export const PlasmicDayCell = Object.assign(
  // Top-level PlasmicDayCell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cell: makeNodeComponent("cell"),
    holidays2: makeNodeComponent("holidays2"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicDayCell
    internalVariantProps: PlasmicDayCell__VariantProps,
    internalArgProps: PlasmicDayCell__ArgProps
  }
);

export default PlasmicDayCell;
/* prettier-ignore-end */
