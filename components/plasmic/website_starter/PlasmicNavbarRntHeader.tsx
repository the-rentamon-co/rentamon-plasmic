/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: gWac1FMbIJat

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNavbarRntHeader.module.css"; // plasmic-import: gWac1FMbIJat/css

createPlasmicElementProxy;

export type PlasmicNavbarRntHeader__VariantMembers = {};
export type PlasmicNavbarRntHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbarRntHeader__VariantsArgs;
export const PlasmicNavbarRntHeader__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavbarRntHeader__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarRntHeader__ArgsType;
export const PlasmicNavbarRntHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarRntHeader__OverridesType = {
  navBarFaghih?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
};

export interface DefaultNavbarRntHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbarRntHeader__RenderFunc(props: {
  variants: PlasmicNavbarRntHeader__VariantsArgs;
  args: PlasmicNavbarRntHeader__ArgsType;
  overrides: PlasmicNavbarRntHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"navBarFaghih"}
      data-plasmic-override={overrides.navBarFaghih}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.navBarFaghih,
        hasVariant(globalVariants, "screen", "smallMobile")
          ? ``
          : hasVariant(globalVariants, "screen", "mobile")
          ? ``
          : ``
      )}
    >
      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__uJuXj
            )}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(
                sty.img__iP1Vn,
                hasVariant(globalVariants, "screen", "mobile")
                  ? "clickable"
                  : "clickable"
              )}
              displayHeight={"36px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              src={{
                src: "/plasmic/website_starter/images/rentamonFaLowPng.png",
                fullWidth: 200,
                fullHeight: 99,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={
          <PlasmicImg__
            alt={""}
            className={classNames(
              sty.img__p1R3F,
              hasVariant(globalVariants, "screen", "mobile")
                ? "clickabe"
                : undefined
            )}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "22px" : "auto"
            }
            src={
              hasVariant(globalVariants, "screen", "mobile")
                ? {
                    src: "/plasmic/website_starter/images/image150.svg",
                    fullWidth: 64,
                    fullHeight: 64,
                    aspectRatio: undefined
                  }
                : "https://static1.plasmic.app/close.svg"
            }
          />
        }
        itemsGap={8}
        menuItems={
          <React.Fragment>
            <div className={classNames(projectcss.all, sty.freeBox__qrXoX, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___1StDi,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "clickable"
                    : undefined
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["createCookie"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function setCookie(name, value, hours) {
                                let expires = "";
                                if (hours) {
                                  const date = new Date();
                                  date.setTime(
                                    date.getTime() + hours * 60 * 60 * 1000
                                  );
                                  expires = "; expires=" + date.toUTCString();
                                }
                                document.cookie =
                                  name +
                                  "=" +
                                  (value || "") +
                                  expires +
                                  "; path=/";
                              }
                              return setCookie("source", "web", 12);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["createCookie"] != null &&
                    typeof $steps["createCookie"] === "object" &&
                    typeof $steps["createCookie"].then === "function"
                  ) {
                    $steps["createCookie"] = await $steps["createCookie"];
                  }

                  $steps["goToHttpsRentamonComSplashSrcWeb"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://rentamon.com/splash?src=web"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsRentamonComSplashSrcWeb"] != null &&
                    typeof $steps["goToHttpsRentamonComSplashSrcWeb"] ===
                      "object" &&
                    typeof $steps["goToHttpsRentamonComSplashSrcWeb"].then ===
                      "function"
                  ) {
                    $steps["goToHttpsRentamonComSplashSrcWeb"] = await $steps[
                      "goToHttpsRentamonComSplashSrcWeb"
                    ];
                  }
                }}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qiqR
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? `/splash`
                      : "/"
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = false
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                function setCookie(name, value, hours) {
                                  let expires = "";
                                  if (hours) {
                                    const date = new Date();
                                    date.setTime(
                                      date.getTime() + hours * 60 * 60 * 1000
                                    );
                                    expires = "; expires=" + date.toUTCString();
                                  }
                                  document.cookie =
                                    name +
                                    "=" +
                                    (value || "") +
                                    expires +
                                    "; path=/";
                                }
                                return setCookie("source", "web", 12);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"\u0648\u0631\u0648\u062f"}
                </PlasmicLink__>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__cwZwa
                )}
                component={Link}
                href={`/download`}
                platform={"nextjs"}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646"
                }
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__g7Rl3,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToتعرفهخدمات"] = true
                    ? (() => {
                        const actionArgs = { destination: `/pricing` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToتعرفهخدمات"] != null &&
                    typeof $steps["goToتعرفهخدمات"] === "object" &&
                    typeof $steps["goToتعرفهخدمات"].then === "function"
                  ) {
                    $steps["goToتعرفهخدمات"] = await $steps["goToتعرفهخدمات"];
                  }
                }}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__kh6Yr
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"\u062a\u0639\u0631\u0641\u0647"}
                </PlasmicLink__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__uzdNm,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToدانلوداپلیکیشن"] = true
                    ? (() => {
                        const actionArgs = { destination: `/download` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToدانلوداپلیکیشن"] != null &&
                    typeof $steps["goToدانلوداپلیکیشن"] === "object" &&
                    typeof $steps["goToدانلوداپلیکیشن"].then === "function"
                  ) {
                    $steps["goToدانلوداپلیکیشن"] = await $steps[
                      "goToدانلوداپلیکیشن"
                    ];
                  }
                }}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___9Ui3
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {
                    "\u062f\u0627\u0646\u0644\u0648\u062f \u0628\u0631\u0646\u0627\u0645\u0647"
                  }
                </PlasmicLink__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___5WeAb,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToAboutUs"] = true
                    ? (() => {
                        const actionArgs = { destination: `/about-us` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAboutUs"] != null &&
                    typeof $steps["goToAboutUs"] === "object" &&
                    typeof $steps["goToAboutUs"].then === "function"
                  ) {
                    $steps["goToAboutUs"] = await $steps["goToAboutUs"];
                  }
                }}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vseFw
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
                </PlasmicLink__>
              </div>
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ryWoj
              )}
              component={Link}
              href={"https://rentamon.com/splash?src=web"}
              onClick={async event => {
                const $steps = {};

                $steps["createCookie"] = false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function setCookie(name, value, hours) {
                              let expires = "";
                              if (hours) {
                                const date = new Date();
                                date.setTime(
                                  date.getTime() + hours * 60 * 60 * 1000
                                );
                                expires = "; expires=" + date.toUTCString();
                              }
                              document.cookie =
                                name +
                                "=" +
                                (value || "") +
                                expires +
                                "; path=/";
                            }
                            return setCookie("source", "web", 12);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["createCookie"] != null &&
                  typeof $steps["createCookie"] === "object" &&
                  typeof $steps["createCookie"].then === "function"
                ) {
                  $steps["createCookie"] = await $steps["createCookie"];
                }
              }}
              platform={"nextjs"}
            >
              {"\u0648\u0631\u0648\u062f"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ytkiw
              )}
              component={Link}
              href={`/download`}
              platform={"nextjs"}
            >
              {
                "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646"
              }
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__jRxEo
              )}
              component={Link}
              href={`/pricing`}
              platform={"nextjs"}
            >
              {"\u062a\u0639\u0631\u0641\u0647"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4LkUn
              )}
              component={Link}
              href={`/download`}
              platform={"nextjs"}
            >
              {
                "\u062f\u0627\u0646\u0644\u0648\u062f \u0628\u0631\u0646\u0627\u0645\u0647"
              }
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___01Gak
              )}
              component={Link}
              href={`/about-us`}
              platform={"nextjs"}
            >
              {"\u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0627"}
            </PlasmicLink__>
          </React.Fragment>
        }
        openButton={
          <PlasmicImg__
            alt={""}
            className={classNames(
              sty.img__xdJvU,
              hasVariant(globalVariants, "screen", "mobile")
                ? "clickable"
                : undefined
            )}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "26px" : "none"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "100%" : "auto"
            }
            src={
              hasVariant(globalVariants, "screen", "mobile")
                ? {
                    src: "/plasmic/website_starter/images/image144.svg",
                    fullWidth: 24,
                    fullHeight: 24,
                    aspectRatio: 1
                  }
                : "https://static1.plasmic.app/menu.svg"
            }
          />
        }
        responsiveBreakpoint={768}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navBarFaghih: ["navBarFaghih", "navigationBar"],
  navigationBar: ["navigationBar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navBarFaghih: "div";
  navigationBar: typeof NavigationBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarRntHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarRntHeader__VariantsArgs;
    args?: PlasmicNavbarRntHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarRntHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarRntHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbarRntHeader__ArgProps,
          internalVariantPropNames: PlasmicNavbarRntHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarRntHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navBarFaghih") {
    func.displayName = "PlasmicNavbarRntHeader";
  } else {
    func.displayName = `PlasmicNavbarRntHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarRntHeader = Object.assign(
  // Top-level PlasmicNavbarRntHeader renders the root element
  makeNodeComponent("navBarFaghih"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),

    // Metadata about props expected for PlasmicNavbarRntHeader
    internalVariantProps: PlasmicNavbarRntHeader__VariantProps,
    internalArgProps: PlasmicNavbarRntHeader__ArgProps
  }
);

export default PlasmicNavbarRntHeader;
/* prettier-ignore-end */
