// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: ErG8wzgBVki3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicComparison.module.css"; // plasmic-import: ErG8wzgBVki3/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicComparison__VariantMembers = {};
export type PlasmicComparison__VariantsArgs = {};
type VariantPropType = keyof PlasmicComparison__VariantsArgs;
export const PlasmicComparison__VariantProps = new Array<VariantPropType>();

export type PlasmicComparison__ArgsType = {};
type ArgPropType = keyof PlasmicComparison__ArgsType;
export const PlasmicComparison__ArgProps = new Array<ArgPropType>();

export type PlasmicComparison__OverridesType = {
  comparison?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  img?: Flex__<typeof PlasmicImg__>;
  linkbtn?: Flex__<typeof AntdButton>;
  linkbtn2?: Flex__<typeof AntdButton>;
  survey?: Flex__<"div">;
  selectAccess?: Flex__<typeof Select>;
  selectSpeed?: Flex__<typeof Select>;
  supportJudgment?: Flex__<typeof Select>;
  submit?: Flex__<typeof Button>;
};

export interface DefaultComparisonProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComparison__RenderFunc(props: {
  variants: PlasmicComparison__VariantsArgs;
  args: PlasmicComparison__ArgsType;
  overrides: PlasmicComparison__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectAccess.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sur",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "surveyform",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "selectSpeed.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "supportJudgment.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"comparison"}
          data-plasmic-override={overrides.comparison}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.comparison
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<script>\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        function convertNumbersInPage() {\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    setTimeout(convertNumbersInPage, 1000);\r\n    </script>"
            }
          />

          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{ "xc-token": "ty7cwczW_JDC0VQq8sEBJtu6E1e3_mX-kpa4d9TJ" }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://app.nocodb.com/api/v2/tables/myvdl0qfd44y12p/records?where=where%3D%28platformId%2Ceq%2C" +
                  $ctx.query.pid +
                  "%29&limit=25&shuffle=0&offset=0"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__hpsSi)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lvEfm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jUr9U)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___35Dxn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ofkrN
                          )}
                        >
                          {
                            "\u0645\u0642\u0627\u06cc\u0633\u0647 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627"
                          }
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5SAb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cNz0X
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelectAccessValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectAccess", "value"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectAccessValue"] != null &&
                          typeof $steps["updateSelectAccessValue"] ===
                            "object" &&
                          typeof $steps["updateSelectAccessValue"].then ===
                            "function"
                        ) {
                          $steps["updateSelectAccessValue"] = await $steps[
                            "updateSelectAccessValue"
                          ];
                        }
                      }}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return ">> " + $ctx.fetchedData.list[0].tagline;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "\u0627\u06af\u0647 \u0645\u06cc\u0632\u0628\u0627\u0646 \u06cc\u0627 \u0635\u0627\u062d\u0628 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0647\u0633\u062a\u06cc \u0648 \u062f\u0646\u0628\u0627\u0644 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0633\u0627\u06cc\u062a (\u067e\u0644\u062a\u0641\u0631\u0645) \u0628\u0631\u0627\u06cc \u06af\u0630\u0627\u0634\u062a\u0646 \u0622\u06af\u0647\u06cc \u0648\u06cc\u0644\u0627 \u0645\u06cc\u200c\u06af\u0631\u062f\u06cc\u060c \u0627\u062d\u062a\u0645\u0627\u0644\u0627\u064b \u0628\u0627 \u06af\u0632\u06cc\u0646\u0647\u200c\u0647\u0627\u06cc \u0632\u06cc\u0627\u062f\u06cc \u0631\u0648\u0628\u0631\u0648 \u0634\u062f\u06cc. \u0628\u0627 \u062c\u0633\u062a\u062c\u0648 \u062f\u0631 \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u067e\u062a\u0644\u0641\u0631\u0645\u200c\u0647\u0627\u06cc\u06cc \u0645\u062b\u0644 \u0634\u0628\u060c \u062c\u0627\u062c\u06cc\u06af\u0627\u060c \u0627\u062a\u0627\u0642\u06a9\u060c \u062c\u0627\u0628\u0627\u0645\u0627\u060c \u0647\u0648\u0645\u0633\u0627\u060c \u0645\u06cc\u0632\u0628\u0648\u0646\u060c \u0627\u0633\u0646\u067e\u200c\u062a\u0631\u06cc\u067e\u060c \u0622\u0646\u06cc\u200c\u062c\u0627\u060c \u0644\u06cc\u062f\u0648\u0645\u0627\u062a\u0631\u06cc\u067e \u0648 \u0645\u06cc\u0647\u0645\u0627\u0646\u0634\u0648 \u0631\u0648 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc \u0648 \u0644\u06cc\u0633\u062a\u06cc \u06a9\u0647 \u0647\u0645\u0686\u0646\u0627\u0646 \u0627\u062f\u0627\u0645\u0647 \u062f\u0627\u0631\u0647. \u06af\u06cc\u062c\u200c\u06a9\u0646\u0646\u062f\u0647 \u0646\u06cc\u0633\u062a\u061f"
                      )}
                    </div>
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/websitesDeskJpg.jpg",
                        fullWidth: 900,
                        fullHeight: 562,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qTf4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "شعار: " + $ctx.fetchedData.list[0].tagline
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "\u0648\u06cc\u0644\u0627\u0645\u0648 \u06a9\u062c\u0627 \u0622\u06af\u0647\u06cc \u06a9\u0646\u0645\u061f \u0628\u0627 \u0645\u0642\u0627\u06cc\u0633\u0647 \u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0634\u0631\u06cc\u06a9 \u06a9\u0633\u0628\u200c\u0648\u06a9\u0627\u0631\u062a \u0631\u0648 \u0647\u0648\u0634\u0645\u0646\u062f\u0627\u0646\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc. \u0627\u06cc\u0646\u062c\u0627 \u0641\u0627\u06a9\u062a\u0648\u0631\u0647\u0627\u06cc \u06a9\u0644\u06cc\u062f\u06cc \u0645\u062b\u0644 \u0645\u06cc\u0632\u0627\u0646 \u06a9\u0645\u06cc\u0633\u06cc\u0648\u0646\u060c \u0632\u0645\u0627\u0646 \u0645\u0639\u0637\u0644\u06cc \u0628\u0631\u0627\u06cc \u0648\u0627\u0631\u06cc\u0632 \u0648\u062c\u0647\u060c \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0648\u2026 \u0647\u0631 \u06a9\u062f\u0648\u0645 \u0631\u0648 \u0628\u0631\u0631\u0633\u06cc \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645."
                      )}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a6LB)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___28Yku
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "رزرو در ماه: 🧳 " +
                                    $ctx.fetchedData.list[0].reserves +
                                    " روز"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u2b50\ufe0f\u06f4";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    " رزرو در ماه:🧳" +
                                    $ctx.fetchedData.list[0].reserves +
                                    " روز"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u2b50\ufe0f\u06f4";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.columns__xtZul)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__j855M
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nx1At
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u067e\u0644\u062a\u0641\u0631\u0645"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__b2HdS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nzf8W
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u067e\u0644\u062a\u0641\u0631\u0645"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__ouhaY
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cxITo
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u067e\u0644\u062a\u0641\u0631\u0645"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___69P6D
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ygXG
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u067e\u0644\u062a\u0641\u0631\u0645"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__yUSfV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ybRx6
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u067e\u0644\u062a\u0641\u0631\u0645"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__moSHw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__amskb
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u067e\u0644\u062a\u0641\u0631\u0645"
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rYb34)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__esXk3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1VcJg
                            )}
                          >
                            {"\u067e\u0644\u062a\u0641\u0631\u0645"}
                          </div>
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Idg1
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vyzte
                          )}
                        >
                          {"\u067e\u0644\u062a\u0641\u0631\u0645"}
                        </div>
                      </div>
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6AQj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dWcH8
                            )}
                          >
                            {"\u067e\u0644\u062a\u0641\u0631\u0645"}
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wsCzt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p05X
                            )}
                          >
                            {"\u067e\u0644\u062a\u0641\u0631\u0645"}
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m2ZHn)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8SiIn
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.list[0].description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k4EXa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rpIqX
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "کیفیت پشتیبانی: ⭐️ " +
                                $ctx.fetchedData.list[0].supportScore
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06a9\u06cc\u0641\u06cc\u062a \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc:";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yxhPk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.list[0]
                                .supportDescription;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__d8PBj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cpEn9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "انتظار واریز درآمد: ⏰ " +
                                $ctx.fetchedData.list[0].declaration
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0646\u062a\u0638\u0627\u0631 \u0648\u0627\u0631\u06cc\u0632 \u062f\u0631\u0622\u0645\u062f:";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uc0UR
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.list[0]
                                .declarationDescription;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7KOvY
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eeG7
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "کمیسیون: % " +
                                $ctx.fetchedData.list[0].commissionRate
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06a9\u0645\u06cc\u0633\u06cc\u0648\u0646:";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ropCe
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.list[0]
                                .commissionDescription;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <AntdButton
                    data-plasmic-name={"linkbtn"}
                    data-plasmic-override={overrides.linkbtn}
                    className={classNames("__wab_instance", sty.linkbtn)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return (
                                    "https://" + $ctx.fetchedData.list[0].url
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    submitsForm={false}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0BIEg
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "برای ثبت اقامتگاه در " +
                              $ctx.fetchedData.list[0].name +
                              " اینجا بزنید"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645\u060c \u0627\u06cc\u0646\u062c\u0627 \u0628\u0632\u0646\u06cc\u062f";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </AntdButton>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___15ESv
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kebSq
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " پشتیبانی: ⭐️ " +
                                  $ctx.fetchedData.list[0].supportScore
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u2b50\ufe0f\u06f4";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "امتیاز پشتیبانی: ⭐️ " +
                                  $ctx.fetchedData.list[0].supportScore
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u2b50\ufe0f\u06f4";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gXtmj
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " کارمزد: % " +
                                  $ctx.fetchedData.list[0].commissionRate
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u06cc\u0632\u0627\u0646 \u06a9\u0645\u06cc\u0633\u06cc\u0648\u0646: X%";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "نرخ کمیسیون: % " +
                                  $ctx.fetchedData.list[0].commissionRate
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u06cc\u0632\u0627\u0646 \u06a9\u0645\u06cc\u0633\u06cc\u0648\u0646: X%";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      <AntdButton
                        data-plasmic-name={"linkbtn2"}
                        data-plasmic-override={overrides.linkbtn2}
                        className={classNames("__wab_instance", sty.linkbtn2)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return (
                                        "https://" +
                                        $ctx.fetchedData.list[0].url
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vw7IA
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "برای ثبت اقامتگاه در " +
                                  $ctx.fetchedData.list[0].name +
                                  " اینجا بزنید"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645\u060c \u0627\u06cc\u0646\u062c\u0627 \u0628\u0632\u0646\u06cc\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"survey"}
                    data-plasmic-override={overrides.survey}
                    className={classNames(projectcss.all, sty.survey)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o7SAe
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "به پشتیبانی «" +
                              $ctx.fetchedData.list[0].name +
                              "» امتیاز دهید"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0647 \u067e\u0644\u062a\u0641\u0631\u0645 x \u0627\u0645\u062a\u06cc\u0627\u0632 \u062f\u0647\u06cc\u062f\n\u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0627 \u062b\u0628\u062a \u0646\u0638\u0631 \u062e\u0648\u062f\u060c \u062f\u06cc\u06af\u0631\u0627\u0646 \u0631\u0627 \u062f\u0631 \u0634\u0646\u0627\u062e\u062a \u0628\u0647\u062a\u0631 \u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u06a9\u0646\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__javvd
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0628\u0627\u0632\u062e\u0648\u0631\u062f \u0634\u0645\u0627 \u0628\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u0648 \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc \u0628\u0647\u062a\u0631 \u0633\u0627\u06cc\u0632 \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627 \u062f\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0631\u06cc\u06a9 \u06a9\u0633\u0628\u200c\u0648\u06a9\u0627\u0631\u0634\u0648\u0646 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647."
                        : "\u0628\u0627\u0632\u062e\u0648\u0631\u062f \u0634\u0645\u0627 \u0628\u0647 \u062f\u06cc\u06af\u0631\u0627\u0646 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u062f \u062a\u0627 \u0634\u0631\u06cc\u06a9 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647\u062a\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u0646\u062f."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9KrYm
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__dxCmi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__ywB8W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bPcD1
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tkuOc
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u0633\u0647\u0648\u0644\u062a \u062f\u0633\u062a\u0631\u0633\u06cc"
                                : "\u0633\u0647\u0648\u0644\u062a \u062f\u0633\u062a\u0631\u0633\u06cc"}
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__xl51M
                          )}
                        >
                          <Select
                            data-plasmic-name={"selectAccess"}
                            data-plasmic-override={overrides.selectAccess}
                            className={classNames(
                              "__wab_instance",
                              sty.selectAccess
                            )}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "selectAccess",
                                  "value"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null }
                              ];
                              __composite["0"]["value"] = "5";
                              __composite["0"]["label"] =
                                "\u06f5 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646";
                              __composite["1"]["value"] = "4";
                              __composite["1"]["label"] = "\u06f4";
                              __composite["2"]["value"] = "3";
                              __composite["2"]["label"] = "\u06f3";
                              __composite["3"]["value"] = "2";
                              __composite["3"]["label"] = "\u06f2";
                              __composite["4"]["value"] = "1";
                              __composite["4"]["label"] =
                                "\u06f1  \u06a9\u0645\u062a\u0631\u06cc\u0646";
                              return __composite;
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mycVq
                                )}
                              >
                                {
                                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                                }
                              </div>
                            }
                            value={generateStateValueProp($state, [
                              "selectAccess",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__qWinm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__sZlM
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ikwxj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qaOvo
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u0633\u0631\u0639\u062a \u067e\u06cc\u06af\u06cc\u0631\u06cc"
                                : "\u0633\u0631\u0639\u062a \u067e\u06cc\u06af\u06cc\u0631\u06cc"}
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__jHayC
                          )}
                        >
                          <Select
                            data-plasmic-name={"selectSpeed"}
                            data-plasmic-override={overrides.selectSpeed}
                            className={classNames(
                              "__wab_instance",
                              sty.selectSpeed
                            )}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "selectSpeed",
                                  "value"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null }
                              ];
                              __composite["0"]["value"] = "5";
                              __composite["0"]["label"] =
                                "\u06f5 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646";
                              __composite["1"]["value"] = "4";
                              __composite["1"]["label"] = "\u06f4";
                              __composite["2"]["value"] = "3";
                              __composite["2"]["label"] = "\u06f3";
                              __composite["3"]["value"] = "2";
                              __composite["3"]["label"] = "\u06f2";
                              __composite["4"]["value"] = "1";
                              __composite["4"]["label"] =
                                "\u06f1  \u06a9\u0645\u062a\u0631\u06cc\u0646";
                              return __composite;
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__p864
                                )}
                              >
                                {
                                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                                }
                              </div>
                            }
                            value={generateStateValueProp($state, [
                              "selectSpeed",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__lcnzh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__f5X8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__icqtO
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mbZVu
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u0642\u0636\u0627\u0648\u062a \u0645\u0646\u0635\u0641\u0627\u0646\u0647"
                                : "\u0642\u0636\u0627\u0648\u062a \u0645\u0646\u0635\u0641\u0627\u0646\u0647"}
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__yl2Hu
                          )}
                        >
                          <Select
                            data-plasmic-name={"supportJudgment"}
                            data-plasmic-override={overrides.supportJudgment}
                            className={classNames(
                              "__wab_instance",
                              sty.supportJudgment
                            )}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "supportJudgment",
                                  "value"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null }
                              ];
                              __composite["0"]["value"] = "5";
                              __composite["0"]["label"] =
                                "\u06f5 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646";
                              __composite["1"]["value"] = "4";
                              __composite["1"]["label"] = "\u06f4";
                              __composite["2"]["value"] = "3";
                              __composite["2"]["label"] = "\u06f3";
                              __composite["3"]["value"] = "2";
                              __composite["3"]["label"] = "\u06f2";
                              __composite["4"]["value"] = "1";
                              __composite["4"]["label"] =
                                "\u06f1  \u06a9\u0645\u062a\u0631\u06cc\u0646";
                              return __composite;
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rUoC
                                )}
                              >
                                {
                                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                                }
                              </div>
                            }
                            value={generateStateValueProp($state, [
                              "supportJudgment",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                    </div>
                    <Button
                      data-plasmic-name={"submit"}
                      data-plasmic-override={overrides.submit}
                      className={classNames("__wab_instance", sty.submit)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://app.nocodb.com/api/v2/tables/m13p0qumldon4j4/records",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        Title: "string",
                                        platformId: $ctx.query.pid,
                                        supportAccess:
                                          $state.selectAccess.value,
                                        supportSpeed: $state.selectSpeed.value,
                                        supportJudgment:
                                          $state.selectAccess.value,
                                        userId: 122
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          accept: "application/json",
                                          "xc-token":
                                            "ty7cwczW_JDC0VQq8sEBJtu6E1e3_mX-kpa4d9TJ",
                                          "Content-Type": "application/json"
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0638\u0631 \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f. \u0645\u062a\u0634\u06a9\u0631\u06cc\u0645",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }
                      }}
                      submitsForm={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dlcYu
                        )}
                      >
                        {
                          "\u0627\u0631\u0633\u0627\u0644 \u0628\u0627\u0632\u062e\u0648\u0631\u062f"
                        }
                      </div>
                    </Button>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uSadn)}
                    onClick={async event => {
                      const $steps = {};

                      $steps[
                        "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                      ] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://rentamon.com/%D8%B3%D8%A7%DB%8C%D8%AA-%D8%A7%D8%AC%D8%A7%D8%B1%D9%87-%D9%88%DB%8C%D9%84%D8%A7/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ] != null &&
                        typeof $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ] === "object" &&
                        typeof $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ].then === "function"
                      ) {
                        $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ] = await $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jxwOu
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-8nedppYkGVaH)" }}
                        >
                          {
                            "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0645\u0642\u0627\u06cc\u0633\u0647"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              )}
            </DataCtxReader__>
          </DataFetcher>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox__pGpfb)} />
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox__y4WKa)} />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  comparison: [
    "comparison",
    "embedHtml",
    "httpRestApiFetcher",
    "img",
    "linkbtn",
    "linkbtn2",
    "survey",
    "selectAccess",
    "selectSpeed",
    "supportJudgment",
    "submit"
  ],
  embedHtml: ["embedHtml"],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "img",
    "linkbtn",
    "linkbtn2",
    "survey",
    "selectAccess",
    "selectSpeed",
    "supportJudgment",
    "submit"
  ],
  img: ["img"],
  linkbtn: ["linkbtn"],
  linkbtn2: ["linkbtn2"],
  survey: [
    "survey",
    "selectAccess",
    "selectSpeed",
    "supportJudgment",
    "submit"
  ],
  selectAccess: ["selectAccess"],
  selectSpeed: ["selectSpeed"],
  supportJudgment: ["supportJudgment"],
  submit: ["submit"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  comparison: "div";
  embedHtml: typeof Embed;
  httpRestApiFetcher: typeof DataFetcher;
  img: typeof PlasmicImg__;
  linkbtn: typeof AntdButton;
  linkbtn2: typeof AntdButton;
  survey: "div";
  selectAccess: typeof Select;
  selectSpeed: typeof Select;
  supportJudgment: typeof Select;
  submit: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComparison__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComparison__VariantsArgs;
    args?: PlasmicComparison__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComparison__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComparison__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComparison__ArgProps,
          internalVariantPropNames: PlasmicComparison__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComparison__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "comparison") {
    func.displayName = "PlasmicComparison";
  } else {
    func.displayName = `PlasmicComparison.${nodeName}`;
  }
  return func;
}

export const PlasmicComparison = Object.assign(
  // Top-level PlasmicComparison renders the root element
  makeNodeComponent("comparison"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    img: makeNodeComponent("img"),
    linkbtn: makeNodeComponent("linkbtn"),
    linkbtn2: makeNodeComponent("linkbtn2"),
    survey: makeNodeComponent("survey"),
    selectAccess: makeNodeComponent("selectAccess"),
    selectSpeed: makeNodeComponent("selectSpeed"),
    supportJudgment: makeNodeComponent("supportJudgment"),
    submit: makeNodeComponent("submit"),

    // Metadata about props expected for PlasmicComparison
    internalVariantProps: PlasmicComparison__VariantProps,
    internalArgProps: PlasmicComparison__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicComparison;
/* prettier-ignore-end */
