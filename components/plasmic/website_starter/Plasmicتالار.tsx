/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: awYJCWS6HouC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import NavigationRntFooter from "../../NavigationRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./Plasmicتالار.module.css"; // plasmic-import: awYJCWS6HouC/css

import Icon66Icon from "./icons/PlasmicIcon__Icon66"; // plasmic-import: n1MUhjxn9v4m/icon
import Icon74Icon from "./icons/PlasmicIcon__Icon74"; // plasmic-import: 8KZpBYIvE0K7/icon
import Icon80Icon from "./icons/PlasmicIcon__Icon80"; // plasmic-import: aDrwOfA5XwKS/icon
import Icon70Icon from "./icons/PlasmicIcon__Icon70"; // plasmic-import: A-bs_J5BMn_p/icon
import Icon71Icon from "./icons/PlasmicIcon__Icon71"; // plasmic-import: DdEZyyc0OzIH/icon
import Icon78Icon from "./icons/PlasmicIcon__Icon78"; // plasmic-import: z2I2p-YJGmt6/icon
import Icon73Icon from "./icons/PlasmicIcon__Icon73"; // plasmic-import: 2w7kXiGQZLrZ/icon
import Icon72Icon from "./icons/PlasmicIcon__Icon72"; // plasmic-import: 6p_Ix64MAZ-d/icon

createPlasmicElementProxy;

export type Plasmicتالار__VariantMembers = {};
export type Plasmicتالار__VariantsArgs = {};
type VariantPropType = keyof Plasmicتالار__VariantsArgs;
export const Plasmicتالار__VariantProps = new Array<VariantPropType>();

export type Plasmicتالار__ArgsType = {};
type ArgPropType = keyof Plasmicتالار__ArgsType;
export const Plasmicتالار__ArgProps = new Array<ArgPropType>();

export type Plasmicتالار__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  headerTitle?: Flex__<"div">;
  profile2?: Flex__<typeof ApiRequest>;
  menu?: Flex__<"div">;
  topProfile?: Flex__<"div">;
  image?: Flex__<"div">;
  info?: Flex__<"div">;
  name?: Flex__<"div">;
  number?: Flex__<"div">;
  editIcon?: Flex__<"div">;
  wallet?: Flex__<"div">;
  walletInfo?: Flex__<"div">;
  right2?: Flex__<"div">;
  mid2?: Flex__<"div">;
  items8?: Flex__<"div">;
  items?: Flex__<"div">;
  right?: Flex__<"div">;
  mid?: Flex__<"div">;
  left?: Flex__<"div">;
  items2?: Flex__<"div">;
  right3?: Flex__<"div">;
  mid3?: Flex__<"div">;
  left2?: Flex__<"div">;
  items9?: Flex__<"div">;
  right9?: Flex__<"div">;
  mid9?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  left8?: Flex__<"div">;
  items10?: Flex__<"div">;
  right10?: Flex__<"div">;
  mid10?: Flex__<"div">;
  left9?: Flex__<"div">;
  items3?: Flex__<"div">;
  right4?: Flex__<"div">;
  mid4?: Flex__<"div">;
  left3?: Flex__<"div">;
  items4?: Flex__<"div">;
  right5?: Flex__<"div">;
  mid5?: Flex__<"div">;
  left4?: Flex__<"div">;
  items5?: Flex__<"div">;
  right6?: Flex__<"div">;
  mid6?: Flex__<"div">;
  left5?: Flex__<"div">;
  items7?: Flex__<"div">;
  right8?: Flex__<"div">;
  mid8?: Flex__<"div">;
  left7?: Flex__<"div">;
  items6?: Flex__<"div">;
  right7?: Flex__<"div">;
  mid7?: Flex__<"div">;
  left6?: Flex__<"div">;
  navigationRntFooter?: Flex__<typeof NavigationRntFooter>;
  sideEffect?: Flex__<typeof SideEffect>;
  clarity?: Flex__<typeof Embed>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultتالارProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmicتالار__RenderFunc(props: {
  variants: Plasmicتالار__VariantsArgs;
  args: Plasmicتالار__ArgsType;
  overrides: Plasmicتالار__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{Plasmicتالار.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={Plasmicتالار.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={Plasmicتالار.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"headerTitle"}
              data-plasmic-override={overrides.headerTitle}
              className={classNames(projectcss.all, sty.headerTitle)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sq3Dn
                )}
              >
                {"\u062a\u0627\u0644\u0627\u0631"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cr3Y7)}>
              <ApiRequest
                data-plasmic-name={"profile2"}
                data-plasmic-override={overrides.profile2}
                className={classNames("__wab_instance", sty.profile2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile2"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames(
              projectcss.all,
              sty.menu,
              hasVariant(globalVariants, "screen", "mobile") ? `` : undefined
            )}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <div
                data-plasmic-name={"topProfile"}
                data-plasmic-override={overrides.topProfile}
                className={classNames(projectcss.all, sty.topProfile, "fadein")}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <div
                    data-plasmic-name={"image"}
                    data-plasmic-override={overrides.image}
                    className={classNames(projectcss.all, sty.image, "shine")}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__sDsaW, "shine")}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.profile2.data.user_info.profile_image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/website_starter/images/image120.svg",
                              fullWidth: 28,
                              fullHeight: 28,
                              aspectRatio: 1
                            };
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"info"}
                  data-plasmic-override={overrides.info}
                  className={classNames(projectcss.all, sty.info)}
                >
                  <div
                    data-plasmic-name={"name"}
                    data-plasmic-override={overrides.name}
                    className={classNames(projectcss.all, sty.name)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5FrEf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.profile2.data.user_info.first_name.concat(
                              " ",
                              $state.profile2.data.user_info.last_name
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"number"}
                    data-plasmic-override={overrides.number}
                    className={classNames(projectcss.all, sty.number)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q03Nc
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.profile2.data.user_info.phone_number;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"editIcon"}
                  data-plasmic-override={overrides.editIcon}
                  className={classNames(projectcss.all, sty.editIcon)}
                >
                  <Icon66Icon
                    className={classNames(projectcss.all, sty.svg__lAq0C)}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
            <div
              data-plasmic-name={"wallet"}
              data-plasmic-override={overrides.wallet}
              className={classNames(
                projectcss.all,
                sty.wallet,
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return (() => {
                          if ($state.userType == 1) {
                            return "display_block";
                          } else {
                            return "hidden";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"walletInfo"}
                  data-plasmic-override={overrides.walletInfo}
                  className={classNames(
                    projectcss.all,
                    sty.walletInfo,
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? (() => {
                          try {
                            return parseInt(
                              $state.profile2.data.user_info.balance_info
                            ) < 100000
                              ? "blinkBorderWallet"
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              // if ($props.isFirstVisit == true) {
                              //   return ""
                              // }
                              parseInt(
                                $state.profile2.data.user_info.balance_info
                              ) < 100000
                                ? "blinkBorderWallet clickable"
                                : "clickable"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToکیفپول"] = true
                      ? (() => {
                          const actionArgs = { destination: `/wallet` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToکیفپول"] != null &&
                      typeof $steps["goToکیفپول"] === "object" &&
                      typeof $steps["goToکیفپول"].then === "function"
                    ) {
                      $steps["goToکیفپول"] = await $steps["goToکیفپول"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pqB03)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : false
                    ) ? (
                      <div
                        data-plasmic-name={"right2"}
                        data-plasmic-override={overrides.right2}
                        className={classNames(projectcss.all, sty.right2)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__yqsVo)}
                          displayHeight={"32px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "smallMobile")
                              ? "32px"
                              : "36px"
                          }
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image83.svg",
                            fullWidth: 100,
                            fullHeight: 100,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                    ) : null}
                    <div
                      data-plasmic-name={"mid2"}
                      data-plasmic-override={overrides.mid2}
                      className={classNames(projectcss.all, sty.mid2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___58WW
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const balance_info =
                                  $state.profile2.data.user_info.balance_info;
                                const reducedBalance = Math.floor(
                                  balance_info.balance / 10
                                );
                                const formattedBalance = new Intl.NumberFormat(
                                  "fa-IR"
                                ).format(reducedBalance);
                                return `کیف پول: ${formattedBalance} تومان`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={"items8"}
              data-plasmic-override={overrides.items8}
              className={classNames(
                projectcss.all,
                sty.items8,
                hasVariant(globalVariants, "screen", "mobile")
                  ? "fadeinf"
                  : undefined
              )}
            >
              <div
                data-plasmic-name={"items"}
                data-plasmic-override={overrides.items}
                className={classNames(
                  projectcss.all,
                  sty.items,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return (() => {
                            if ($state.userType == 1) {
                              return "display_block clickable";
                            } else {
                              return "hidden clickable";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : `hidden${undefined}`
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToChannelManager"] = true
                    ? (() => {
                        const actionArgs = { destination: `/channel-manager` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToChannelManager"] != null &&
                    typeof $steps["goToChannelManager"] === "object" &&
                    typeof $steps["goToChannelManager"].then === "function"
                  ) {
                    $steps["goToChannelManager"] = await $steps[
                      "goToChannelManager"
                    ];
                  }
                }}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <div
                    data-plasmic-name={"right"}
                    data-plasmic-override={overrides.right}
                    className={classNames(projectcss.all, sty.right)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___8Nxz)}
                      displayHeight={"32px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"32px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image78.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"mid"}
                  data-plasmic-override={overrides.mid}
                  className={classNames(projectcss.all, sty.mid)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qoJwp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kOXp
                      )}
                    >
                      {
                        "\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627"
                      }
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                >
                  <Icon74Icon
                    className={classNames(projectcss.all, sty.svg__xgS23)}
                    role={"img"}
                  />
                </div>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items2"}
                  data-plasmic-override={overrides.items2}
                  className={classNames(
                    projectcss.all,
                    sty.items2,
                    "clickable"
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToContacts"] = true
                      ? (() => {
                          const actionArgs = { destination: `/contacts` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToContacts"] != null &&
                      typeof $steps["goToContacts"] === "object" &&
                      typeof $steps["goToContacts"].then === "function"
                    ) {
                      $steps["goToContacts"] = await $steps["goToContacts"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right3"}
                      data-plasmic-override={overrides.right3}
                      className={classNames(projectcss.all, sty.right3)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__gKll)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image123.svg",
                          fullWidth: 24,
                          fullHeight: 24,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid3"}
                    data-plasmic-override={overrides.mid3}
                    className={classNames(projectcss.all, sty.mid3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__slcuH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__grKFw
                        )}
                      >
                        {"\u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left2"}
                    data-plasmic-override={overrides.left2}
                    className={classNames(projectcss.all, sty.left2)}
                  >
                    <Icon74Icon
                      className={classNames(projectcss.all, sty.svg__qtzyl)}
                      role={"img"}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items9"}
                  data-plasmic-override={overrides.items9}
                  className={classNames(
                    projectcss.all,
                    sty.items9,
                    (() => {
                      try {
                        return (() => {
                          if ($state.userType != 1) {
                            return "display_block clickable";
                          } else {
                            return "hidden clickable";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.open(`tel:02191096227`);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right9"}
                      data-plasmic-override={overrides.right9}
                      className={classNames(projectcss.all, sty.right9)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__bfPoC)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"30px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image118.svg",
                          fullWidth: 29,
                          fullHeight: 29,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid9"}
                    data-plasmic-override={overrides.mid9}
                    className={classNames(projectcss.all, sty.mid9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wnIo2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4HoA
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#444444", fontWeight: 600 }}
                          >
                            {""}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <PlasmicLink__
                              data-plasmic-name={"link"}
                              data-plasmic-override={overrides.link}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link
                              )}
                              component={Link}
                              platform={"nextjs"}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#444444", fontWeight: 600 }}
                                >
                                  {
                                    "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u062a\u0644\u0641\u0646\u06cc: \u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7"
                                  }
                                </span>
                              </React.Fragment>
                            </PlasmicLink__>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left8"}
                    data-plasmic-override={overrides.left8}
                    className={classNames(projectcss.all, sty.left8)}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items10"}
                  data-plasmic-override={overrides.items10}
                  className={classNames(
                    projectcss.all,
                    sty.items10,
                    (() => {
                      try {
                        return (() => {
                          if ($state.userType != 1) {
                            return "display_block clickable";
                          } else {
                            return "hidden clickable";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.open(
                                  "https://goftino.com/c/WgsGXv",
                                  "_blank"
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right10"}
                      data-plasmic-override={overrides.right10}
                      className={classNames(projectcss.all, sty.right10)}
                    >
                      <Icon80Icon
                        className={classNames(projectcss.all, sty.svg__vw10J)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid10"}
                    data-plasmic-override={overrides.mid10}
                    className={classNames(projectcss.all, sty.mid10)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5Ng1C
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rvtFp
                        )}
                      >
                        {"\u0686\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left9"}
                    data-plasmic-override={overrides.left9}
                    className={classNames(projectcss.all, sty.left9)}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items3"}
                  data-plasmic-override={overrides.items3}
                  className={classNames(
                    projectcss.all,
                    sty.items3,
                    (() => {
                      try {
                        return (() => {
                          if ($state.userType == 1) {
                            return "display_block clickable";
                          } else {
                            return "hidden clickable";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToInstantReserve"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/instant-reserve`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToInstantReserve"] != null &&
                      typeof $steps["goToInstantReserve"] === "object" &&
                      typeof $steps["goToInstantReserve"].then === "function"
                    ) {
                      $steps["goToInstantReserve"] = await $steps[
                        "goToInstantReserve"
                      ];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right4"}
                      data-plasmic-override={overrides.right4}
                      className={classNames(projectcss.all, sty.right4)}
                    >
                      <Icon70Icon
                        className={classNames(projectcss.all, sty.svg__esVgu)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid4"}
                    data-plasmic-override={overrides.mid4}
                    className={classNames(projectcss.all, sty.mid4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9SPft
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mjqj0
                        )}
                      >
                        {"\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left3"}
                    data-plasmic-override={overrides.left3}
                    className={classNames(projectcss.all, sty.left3)}
                  >
                    <Icon74Icon
                      className={classNames(projectcss.all, sty.svg__b9Mr)}
                      role={"img"}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items4"}
                  data-plasmic-override={overrides.items4}
                  className={classNames(
                    projectcss.all,
                    sty.items4,
                    (() => {
                      try {
                        return (() => {
                          if ($state.userType == 1) {
                            return "display_block clickable";
                          } else {
                            return "hidden clickable";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToSettings"] = true
                      ? (() => {
                          const actionArgs = { destination: `/settings` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSettings"] != null &&
                      typeof $steps["goToSettings"] === "object" &&
                      typeof $steps["goToSettings"].then === "function"
                    ) {
                      $steps["goToSettings"] = await $steps["goToSettings"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right5"}
                      data-plasmic-override={overrides.right5}
                      className={classNames(projectcss.all, sty.right5)}
                    >
                      <Icon71Icon
                        className={classNames(projectcss.all, sty.svg__zQElm)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid5"}
                    data-plasmic-override={overrides.mid5}
                    className={classNames(projectcss.all, sty.mid5)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vX8Ws)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sG2Yf
                        )}
                      >
                        {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left4"}
                    data-plasmic-override={overrides.left4}
                    className={classNames(projectcss.all, sty.left4)}
                  >
                    <Icon74Icon
                      className={classNames(projectcss.all, sty.svg__aZFzr)}
                      role={"img"}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items5"}
                  data-plasmic-override={overrides.items5}
                  className={classNames(
                    projectcss.all,
                    sty.items5,
                    (() => {
                      try {
                        return (() => {
                          if ($state.userType == 1) {
                            return "display_block clickable";
                          } else {
                            return "hidden clickable";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToSupport"] = true
                      ? (() => {
                          const actionArgs = { destination: `/support` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSupport"] != null &&
                      typeof $steps["goToSupport"] === "object" &&
                      typeof $steps["goToSupport"].then === "function"
                    ) {
                      $steps["goToSupport"] = await $steps["goToSupport"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right6"}
                      data-plasmic-override={overrides.right6}
                      className={classNames(projectcss.all, sty.right6)}
                    >
                      <Icon78Icon
                        className={classNames(projectcss.all, sty.svg___77W2)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid6"}
                    data-plasmic-override={overrides.mid6}
                    className={classNames(projectcss.all, sty.mid6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__z97Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__duD
                        )}
                      >
                        {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left5"}
                    data-plasmic-override={overrides.left5}
                    className={classNames(projectcss.all, sty.left5)}
                  >
                    <Icon74Icon
                      className={classNames(projectcss.all, sty.svg___9TRUe)}
                      role={"img"}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"items7"}
                  data-plasmic-override={overrides.items7}
                  className={classNames(
                    projectcss.all,
                    sty.items7,
                    (() => {
                      try {
                        return (() => {
                          if ($state.userType == 1) {
                            return "display_block clickable";
                          } else {
                            return "hidden clickable";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"right8"}
                      data-plasmic-override={overrides.right8}
                      className={classNames(projectcss.all, sty.right8)}
                    >
                      <Icon73Icon
                        className={classNames(projectcss.all, sty.svg___1BebJ)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"mid8"}
                    data-plasmic-override={overrides.mid8}
                    className={classNames(projectcss.all, sty.mid8)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lCZuj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qmM8W
                        )}
                      >
                        {
                          "\u0635\u0641\u062d\u0647\u200c\u06cc \u0627\u0635\u0644\u06cc \u0633\u0627\u06cc\u062a"
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left7"}
                    data-plasmic-override={overrides.left7}
                    className={classNames(projectcss.all, sty.left7)}
                  >
                    <Icon74Icon
                      className={classNames(projectcss.all, sty.svg__mwDF)}
                      role={"img"}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"items6"}
                  data-plasmic-override={overrides.items6}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.items6,
                    "clickable"
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return (window.location.href =
                                  "https://sso.rentamon.com/auth/logout?callback=https://rentamon.com/panel");
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"right7"}
                      data-plasmic-override={overrides.right7}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.right7)}
                    >
                      <Icon72Icon
                        className={classNames(projectcss.all, sty.svg__eJx3R)}
                        role={"img"}
                      />
                    </Stack__>
                  ) : null}
                  <div
                    data-plasmic-name={"mid7"}
                    data-plasmic-override={overrides.mid7}
                    className={classNames(projectcss.all, sty.mid7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zAsHi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rZeHq
                        )}
                      >
                        {"\u062e\u0631\u0648\u062c"}
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"left6"}
                    data-plasmic-override={overrides.left6}
                    className={classNames(projectcss.all, sty.left6)}
                  />
                </Stack__>
              ) : null}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sgL9C)} />

          <NavigationRntFooter
            data-plasmic-name={"navigationRntFooter"}
            data-plasmic-override={overrides.navigationRntFooter}
            className={classNames("__wab_instance", sty.navigationRntFooter)}
            navPage={"menu"}
            userType={(() => {
              try {
                return $state.userType;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://api-v2.rentamon.com/api/is_user_old"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.userType = $steps.invokeGlobalAction.data.flag;
                          return console.log($state.userType);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }
              }}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__hieAx)}>
            <Embed
              data-plasmic-name={"clarity"}
              data-plasmic-override={overrides.clarity}
              className={classNames("__wab_instance", sty.clarity)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"favicon"}
              data-plasmic-override={overrides.favicon}
              className={classNames("__wab_instance", sty.favicon)}
              code={
                '<script>\r\n  // \u0633\u0627\u062e\u062a\u0646 \u0644\u06cc\u0646\u06a9 favicon\r\n  const faviconLink = document.createElement("link");\r\n  faviconLink.rel = "icon";\r\n  faviconLink.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  faviconLink.sizes = "192x192";\r\n  document.head.appendChild(faviconLink);\r\n\r\n  // // \u0633\u0627\u062e\u062a\u0646 \u0644\u06cc\u0646\u06a9 apple-touch-icon \u0628\u0631\u0627\u06cc iOS\r\n  // const appleTouchIcon = document.createElement("link");\r\n  // appleTouchIcon.rel = "apple-touch-icon";\r\n  // appleTouchIcon.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  // appleTouchIcon.sizes = "180x180";\r\n  // document.head.appendChild(appleTouchIcon);\r\n\r\n  // // \u062a\u0646\u0638\u06cc\u0645\u0627\u062a PWA\r\n  // const themeColorMeta = document.createElement("meta");\r\n  // themeColorMeta.name = "theme-color";\r\n  // themeColorMeta.content = "#8165D6";\r\n  // document.head.appendChild(themeColorMeta);\r\n\r\n  // const appleWebAppMeta = document.createElement("meta");\r\n  // appleWebAppMeta.name = "apple-mobile-web-app-capable";\r\n  // appleWebAppMeta.content = "yes";\r\n  // document.head.appendChild(appleWebAppMeta);\r\n\r\n  // const appleWebAppTitle = document.createElement("meta");\r\n  // appleWebAppTitle.name = "apple-mobile-web-app-title";\r\n  // appleWebAppTitle.content = "\u0645\u062f\u06cc\u0631\u06cc\u062a \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647";\r\n  // document.head.appendChild(appleWebAppTitle);\r\n\r\n  // // \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 manifest.json\r\n  // const manifestLink = document.createElement("link");\r\n  // manifestLink.rel = "manifest";\r\n  // document.head.appendChild(manifestLink);\r\n\r\n  // // \u0633\u0627\u062e\u062a \u0648 \u062b\u0628\u062a manifest.json \u062f\u0627\u062e\u0644 \u0635\u0641\u062d\u0647\r\n  // const manifestContent = {\r\n  //   name: "Rentamon",\r\n  //   short_name: "\u0631\u0646\u062a\u0627\u0645\u0648\u0646",\r\n  //   icons: [\r\n  //     {\r\n  //       src: "https://rentamon-files.storage.iran.liara.space/icon/icon.svg",\r\n  //       sizes: "192x192",\r\n  //       type: "image/png"\r\n  //     },\r\n  //     {\r\n  //       src: "https://rentamon-files.storage.iran.liara.space/icon/icon.svg",\r\n  //       sizes: "512x512",\r\n  //       type: "image/png"\r\n  //     }\r\n  //   ],\r\n  //   theme_color: "#8165D6",\r\n  //   background_color: "#8165D6",\r\n  //   display: "standalone",\r\n  //   start_url: "/"\r\n  // };\r\n\r\n  // // \u0627\u06cc\u062c\u0627\u062f \u0641\u0627\u06cc\u0644 \u0648 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0628\u0647 \u0645\u0631\u0648\u0631\u06af\u0631\r\n  // const manifestBlob = new Blob([JSON.stringify(manifestContent)], { type: "application/json" });\r\n  // const manifestURL = URL.createObjectURL(manifestBlob);\r\n  // manifestLink.href = manifestURL;\r\n\r\n  // // \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 Splash Screen \u0628\u0631\u0627\u06cc iOS\r\n  // const splashScreen = document.createElement("link");\r\n  // splashScreen.rel = "apple-touch-startup-image";\r\n  // splashScreen.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  // document.head.appendChild(splashScreen);\r\n</script>\r\n'
              }
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "headerTitle",
    "profile2",
    "menu",
    "topProfile",
    "image",
    "info",
    "name",
    "number",
    "editIcon",
    "wallet",
    "walletInfo",
    "right2",
    "mid2",
    "items8",
    "items",
    "right",
    "mid",
    "left",
    "items2",
    "right3",
    "mid3",
    "left2",
    "items9",
    "right9",
    "mid9",
    "link",
    "left8",
    "items10",
    "right10",
    "mid10",
    "left9",
    "items3",
    "right4",
    "mid4",
    "left3",
    "items4",
    "right5",
    "mid5",
    "left4",
    "items5",
    "right6",
    "mid6",
    "left5",
    "items7",
    "right8",
    "mid8",
    "left7",
    "items6",
    "right7",
    "mid7",
    "left6",
    "navigationRntFooter",
    "sideEffect",
    "clarity",
    "favicon"
  ],
  header: ["header", "headerTitle", "profile2"],
  headerTitle: ["headerTitle"],
  profile2: ["profile2"],
  menu: [
    "menu",
    "topProfile",
    "image",
    "info",
    "name",
    "number",
    "editIcon",
    "wallet",
    "walletInfo",
    "right2",
    "mid2",
    "items8",
    "items",
    "right",
    "mid",
    "left",
    "items2",
    "right3",
    "mid3",
    "left2",
    "items9",
    "right9",
    "mid9",
    "link",
    "left8",
    "items10",
    "right10",
    "mid10",
    "left9",
    "items3",
    "right4",
    "mid4",
    "left3",
    "items4",
    "right5",
    "mid5",
    "left4",
    "items5",
    "right6",
    "mid6",
    "left5",
    "items7",
    "right8",
    "mid8",
    "left7",
    "items6",
    "right7",
    "mid7",
    "left6"
  ],
  topProfile: ["topProfile", "image", "info", "name", "number", "editIcon"],
  image: ["image"],
  info: ["info", "name", "number"],
  name: ["name"],
  number: ["number"],
  editIcon: ["editIcon"],
  wallet: ["wallet", "walletInfo", "right2", "mid2"],
  walletInfo: ["walletInfo", "right2", "mid2"],
  right2: ["right2"],
  mid2: ["mid2"],
  items8: [
    "items8",
    "items",
    "right",
    "mid",
    "left",
    "items2",
    "right3",
    "mid3",
    "left2",
    "items9",
    "right9",
    "mid9",
    "link",
    "left8",
    "items10",
    "right10",
    "mid10",
    "left9",
    "items3",
    "right4",
    "mid4",
    "left3",
    "items4",
    "right5",
    "mid5",
    "left4",
    "items5",
    "right6",
    "mid6",
    "left5",
    "items7",
    "right8",
    "mid8",
    "left7",
    "items6",
    "right7",
    "mid7",
    "left6"
  ],
  items: ["items", "right", "mid", "left"],
  right: ["right"],
  mid: ["mid"],
  left: ["left"],
  items2: ["items2", "right3", "mid3", "left2"],
  right3: ["right3"],
  mid3: ["mid3"],
  left2: ["left2"],
  items9: ["items9", "right9", "mid9", "link", "left8"],
  right9: ["right9"],
  mid9: ["mid9", "link"],
  link: ["link"],
  left8: ["left8"],
  items10: ["items10", "right10", "mid10", "left9"],
  right10: ["right10"],
  mid10: ["mid10"],
  left9: ["left9"],
  items3: ["items3", "right4", "mid4", "left3"],
  right4: ["right4"],
  mid4: ["mid4"],
  left3: ["left3"],
  items4: ["items4", "right5", "mid5", "left4"],
  right5: ["right5"],
  mid5: ["mid5"],
  left4: ["left4"],
  items5: ["items5", "right6", "mid6", "left5"],
  right6: ["right6"],
  mid6: ["mid6"],
  left5: ["left5"],
  items7: ["items7", "right8", "mid8", "left7"],
  right8: ["right8"],
  mid8: ["mid8"],
  left7: ["left7"],
  items6: ["items6", "right7", "mid7", "left6"],
  right7: ["right7"],
  mid7: ["mid7"],
  left6: ["left6"],
  navigationRntFooter: ["navigationRntFooter"],
  sideEffect: ["sideEffect"],
  clarity: ["clarity"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  headerTitle: "div";
  profile2: typeof ApiRequest;
  menu: "div";
  topProfile: "div";
  image: "div";
  info: "div";
  name: "div";
  number: "div";
  editIcon: "div";
  wallet: "div";
  walletInfo: "div";
  right2: "div";
  mid2: "div";
  items8: "div";
  items: "div";
  right: "div";
  mid: "div";
  left: "div";
  items2: "div";
  right3: "div";
  mid3: "div";
  left2: "div";
  items9: "div";
  right9: "div";
  mid9: "div";
  link: "a";
  left8: "div";
  items10: "div";
  right10: "div";
  mid10: "div";
  left9: "div";
  items3: "div";
  right4: "div";
  mid4: "div";
  left3: "div";
  items4: "div";
  right5: "div";
  mid5: "div";
  left4: "div";
  items5: "div";
  right6: "div";
  mid6: "div";
  left5: "div";
  items7: "div";
  right8: "div";
  mid8: "div";
  left7: "div";
  items6: "div";
  right7: "div";
  mid7: "div";
  left6: "div";
  navigationRntFooter: typeof NavigationRntFooter;
  sideEffect: typeof SideEffect;
  clarity: typeof Embed;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmicتالار__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmicتالار__VariantsArgs;
    args?: Plasmicتالار__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmicتالار__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmicتالار__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicتالار__ArgProps,
          internalVariantPropNames: Plasmicتالار__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicتالار__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic\u062a\u0627\u0644\u0627\u0631";
  } else {
    func.displayName = `Plasmicتالار.${nodeName}`;
  }
  return func;
}

export const Plasmicتالار = Object.assign(
  // Top-level Plasmicتالار renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    headerTitle: makeNodeComponent("headerTitle"),
    profile2: makeNodeComponent("profile2"),
    menu: makeNodeComponent("menu"),
    topProfile: makeNodeComponent("topProfile"),
    image: makeNodeComponent("image"),
    info: makeNodeComponent("info"),
    _name: makeNodeComponent("name"),
    number: makeNodeComponent("number"),
    editIcon: makeNodeComponent("editIcon"),
    wallet: makeNodeComponent("wallet"),
    walletInfo: makeNodeComponent("walletInfo"),
    right2: makeNodeComponent("right2"),
    mid2: makeNodeComponent("mid2"),
    items8: makeNodeComponent("items8"),
    items: makeNodeComponent("items"),
    right: makeNodeComponent("right"),
    mid: makeNodeComponent("mid"),
    left: makeNodeComponent("left"),
    items2: makeNodeComponent("items2"),
    right3: makeNodeComponent("right3"),
    mid3: makeNodeComponent("mid3"),
    left2: makeNodeComponent("left2"),
    items9: makeNodeComponent("items9"),
    right9: makeNodeComponent("right9"),
    mid9: makeNodeComponent("mid9"),
    link: makeNodeComponent("link"),
    left8: makeNodeComponent("left8"),
    items10: makeNodeComponent("items10"),
    right10: makeNodeComponent("right10"),
    mid10: makeNodeComponent("mid10"),
    left9: makeNodeComponent("left9"),
    items3: makeNodeComponent("items3"),
    right4: makeNodeComponent("right4"),
    mid4: makeNodeComponent("mid4"),
    left3: makeNodeComponent("left3"),
    items4: makeNodeComponent("items4"),
    right5: makeNodeComponent("right5"),
    mid5: makeNodeComponent("mid5"),
    left4: makeNodeComponent("left4"),
    items5: makeNodeComponent("items5"),
    right6: makeNodeComponent("right6"),
    mid6: makeNodeComponent("mid6"),
    left5: makeNodeComponent("left5"),
    items7: makeNodeComponent("items7"),
    right8: makeNodeComponent("right8"),
    mid8: makeNodeComponent("mid8"),
    left7: makeNodeComponent("left7"),
    items6: makeNodeComponent("items6"),
    right7: makeNodeComponent("right7"),
    mid7: makeNodeComponent("mid7"),
    left6: makeNodeComponent("left6"),
    navigationRntFooter: makeNodeComponent("navigationRntFooter"),
    sideEffect: makeNodeComponent("sideEffect"),
    clarity: makeNodeComponent("clarity"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for Plasmicتالار
    internalVariantProps: Plasmicتالار__VariantProps,
    internalArgProps: Plasmicتالار__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تالار",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmicتالار;
/* prettier-ignore-end */
