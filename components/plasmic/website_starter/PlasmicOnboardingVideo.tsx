/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: wLy6Qx2J0ci-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import NavbarRentamonComponent from "../../NavbarRentamonComponent"; // plasmic-import: gWac1FMbIJat/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicOnboardingVideo.module.css"; // plasmic-import: wLy6Qx2J0ci-/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicOnboardingVideo__VariantMembers = {};
export type PlasmicOnboardingVideo__VariantsArgs = {};
type VariantPropType = keyof PlasmicOnboardingVideo__VariantsArgs;
export const PlasmicOnboardingVideo__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOnboardingVideo__ArgsType = {};
type ArgPropType = keyof PlasmicOnboardingVideo__ArgsType;
export const PlasmicOnboardingVideo__ArgProps = new Array<ArgPropType>();

export type PlasmicOnboardingVideo__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  navbarRentamonComponent?: Flex__<typeof NavbarRentamonComponent>;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
  iframe?: Flex__<typeof Iframe>;
  embedHtml?: Flex__<typeof Embed>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
};

export interface DefaultOnboardingVideoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOnboardingVideo__RenderFunc(props: {
  variants: PlasmicOnboardingVideo__VariantsArgs;
  args: PlasmicOnboardingVideo__ArgsType;
  overrides: PlasmicOnboardingVideo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showToggle",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["updateShowToggle"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["showToggle"]
                      },
                      operation: 0,
                      value: (() => {
                        return setTimeout(() => {
                          $state.showToggle = !$state.showToggle;
                        }, 3000);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShowToggle"] != null &&
                typeof $steps["updateShowToggle"] === "object" &&
                typeof $steps["updateShowToggle"].then === "function"
              ) {
                $steps["updateShowToggle"] = await $steps["updateShowToggle"];
              }
            }}
          />

          <NavbarRentamonComponent
            data-plasmic-name={"navbarRentamonComponent"}
            data-plasmic-override={overrides.navbarRentamonComponent}
            className={classNames(
              "__wab_instance",
              sty.navbarRentamonComponent
            )}
          />

          {(() => {
            try {
              return $state.showToggle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cn8R7)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"76px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rLw2K
                )}
              >
                {
                  "\u062f\u0631 \u062d\u0627\u0644 \u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0634\u0645\u0627"
                }
              </div>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return !$state.showToggle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rNjTb)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sxI4Y
                )}
              >
                {
                  "\u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0634\u0645\u0627 \u0622\u0645\u0627\u062f\u0647 \u0634\u062f"
                }
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                {
                  "\u0648\u0631\u0648\u062f \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                }
              </Button>
            </Stack__>
          ) : null}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nepg6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vqRx4
              )}
            >
              {
                "\u062a\u0642\u0648\u06cc\u0645 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0686\u0637\u0648\u0631 \u06a9\u0627\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647\u061f"
              }
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__yiK3J)}>
            <Iframe
              data-plasmic-name={"iframe"}
              data-plasmic-override={overrides.iframe}
              className={classNames("__wab_instance", sty.iframe)}
              src={``}
            />

            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                '<div id="19987570163"><script type="text/JavaScript" src="https://www.aparat.com/embed/dnu9g57?data[rnddiv]=19987570163&data[responsive]=yes"></script></div>'
              }
            />
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "navbarRentamonComponent",
    "img",
    "button",
    "iframe",
    "embedHtml",
    "rentamonFooter"
  ],
  sideEffect: ["sideEffect"],
  navbarRentamonComponent: ["navbarRentamonComponent"],
  img: ["img"],
  button: ["button"],
  iframe: ["iframe"],
  embedHtml: ["embedHtml"],
  rentamonFooter: ["rentamonFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  navbarRentamonComponent: typeof NavbarRentamonComponent;
  img: typeof PlasmicImg__;
  button: typeof Button;
  iframe: typeof Iframe;
  embedHtml: typeof Embed;
  rentamonFooter: typeof RentamonFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnboardingVideo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnboardingVideo__VariantsArgs;
    args?: PlasmicOnboardingVideo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnboardingVideo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnboardingVideo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOnboardingVideo__ArgProps,
          internalVariantPropNames: PlasmicOnboardingVideo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOnboardingVideo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOnboardingVideo";
  } else {
    func.displayName = `PlasmicOnboardingVideo.${nodeName}`;
  }
  return func;
}

export const PlasmicOnboardingVideo = Object.assign(
  // Top-level PlasmicOnboardingVideo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    navbarRentamonComponent: makeNodeComponent("navbarRentamonComponent"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    iframe: makeNodeComponent("iframe"),
    embedHtml: makeNodeComponent("embedHtml"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),

    // Metadata about props expected for PlasmicOnboardingVideo
    internalVariantProps: PlasmicOnboardingVideo__VariantProps,
    internalArgProps: PlasmicOnboardingVideo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOnboardingVideo;
/* prettier-ignore-end */
