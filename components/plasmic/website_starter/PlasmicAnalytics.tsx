/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: 8d3uvVUzIbi1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Chart } from "@/fragment/components/chart"; // plasmic-import: AKmMZITDmA8F/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicAnalytics.module.css"; // plasmic-import: 8d3uvVUzIbi1/css

createPlasmicElementProxy;

export type PlasmicAnalytics__VariantMembers = {};
export type PlasmicAnalytics__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalytics__VariantsArgs;
export const PlasmicAnalytics__VariantProps = new Array<VariantPropType>();

export type PlasmicAnalytics__ArgsType = {};
type ArgPropType = keyof PlasmicAnalytics__ArgsType;
export const PlasmicAnalytics__ArgProps = new Array<ArgPropType>();

export type PlasmicAnalytics__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  freeBox?: Flex__<"div">;
  profile2?: Flex__<typeof ApiRequest>;
  mainContents?: Flex__<"div">;
  introduction?: Flex__<"div">;
  teamImage?: Flex__<"div">;
  introCalendarLeft?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  sectionTitle3?: Flex__<"div">;
  monthlyIncome?: Flex__<"div">;
  fragmentChart?: Flex__<typeof Chart>;
  apiRequest?: Flex__<typeof ApiRequest>;
  sources?: Flex__<"div">;
  occupancyRate?: Flex__<"div">;
  avgDailyRate?: Flex__<"div">;
  html?: Flex__<"div">;
  clarity2?: Flex__<typeof Embed>;
  goftino?: Flex__<typeof Embed>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
};

export interface DefaultAnalyticsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnalytics__RenderFunc(props: {
  variants: PlasmicAnalytics__VariantsArgs;
  args: PlasmicAnalytics__ArgsType;
  overrides: PlasmicAnalytics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAnalytics.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAnalytics.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAnalytics.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <SideBar2
              data-plasmic-name={"sideBar2"}
              data-plasmic-override={overrides.sideBar2}
              className={classNames("__wab_instance", sty.sideBar2)}
              isOpen={
                hasVariant(globalVariants, "screen", "mobile") ? false : false
              }
              userData={(() => {
                try {
                  return $state.profile2.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Wp8N
                )}
              >
                {
                  "\u06af\u0632\u0627\u0631\u0634\u0627\u062a \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                }
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"profile2"}
              data-plasmic-override={overrides.profile2}
              className={classNames("__wab_instance", sty.profile2)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "profile2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile2"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <div
            data-plasmic-name={"mainContents"}
            data-plasmic-override={overrides.mainContents}
            className={classNames(projectcss.all, sty.mainContents)}
          >
            <div
              data-plasmic-name={"introduction"}
              data-plasmic-override={overrides.introduction}
              className={classNames(projectcss.all, sty.introduction)}
            >
              <div
                data-plasmic-name={"teamImage"}
                data-plasmic-override={overrides.teamImage}
                className={classNames(projectcss.all, sty.teamImage)}
              >
                <div
                  data-plasmic-name={"introCalendarLeft"}
                  data-plasmic-override={overrides.introCalendarLeft}
                  className={classNames(projectcss.all, sty.introCalendarLeft)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "220px"
                        : "320px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image101.png",
                      fullWidth: 705,
                      fullHeight: 466,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"sectionTitle3"}
                data-plasmic-override={overrides.sectionTitle3}
                className={classNames(projectcss.all, sty.sectionTitle3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yE2Gm
                  )}
                >
                  {
                    "\u0628\u0631\u0631\u0633\u06cc \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0634\u0646\u0627\u062e\u062a \u0628\u0647\u062a\u0631\u06cc \u0646\u0633\u0628\u062a \u0628\u0647 \u0634\u0631\u0627\u06cc\u0637 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0628\u0647 \u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc \u0648 \u062f\u0631 \u0622\u06cc\u0646\u062f\u0647 \u062a\u0635\u0645\u06cc\u0645\u200c\u0647\u0627\u06cc \u0628\u0647\u062a\u0631\u06cc \u0628\u06af\u06cc\u0631\u06cc."
                  }
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"monthlyIncome"}
              data-plasmic-override={overrides.monthlyIncome}
              className={classNames(projectcss.all, sty.monthlyIncome)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j8U01
                )}
              >
                {
                  "\u0645\u0639\u062f\u0644 \u062f\u0631\u0622\u0645\u062f \u0647\u0631\u0645\u0627\u0647"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9ALu0
                )}
              >
                {
                  "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646: \u06f9\u06f2 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a: \u06f8\u06f9 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u062e\u0631\u062f\u0627\u062f: \u06f1\u06f0\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"
                }
              </div>
              <Chart
                data-plasmic-name={"fragmentChart"}
                data-plasmic-override={overrides.fragmentChart}
                cartesianGrid={[]}
                chartConfig={(() => {
                  const __composite = [
                    {
                      color: "#000000",
                      type: "natural",
                      dot: false,
                      key: null,
                      label: null
                    },
                    { color: "#000000", type: "natural", dot: false, key: null }
                  ];
                  __composite["0"]["key"] = "month";
                  __composite["0"]["label"] = "Month";
                  __composite["1"]["key"] = "income";
                  return __composite;
                })()}
                className={classNames("__wab_instance", sty.fragmentChart)}
                data={(() => {
                  try {
                    return [
                      { month: "فروردین", income: 92000000 },
                      { month: "اردیبهشت", income: 79000000 },
                      { month: "خرداد", income: 10000000 },
                      { month: "تیر", income: 6000000 },
                      { month: "مرداد", income: 105000000 }
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={true}
                layout={"horizontal"}
                legend={true}
                stack={false}
                type={"bar"}
              />

              <ApiRequest
                data-plasmic-name={"apiRequest"}
                data-plasmic-override={overrides.apiRequest}
                className={classNames("__wab_instance", sty.apiRequest)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mIo8S
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aje3J
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiRequest"] = ref;
                }}
                url={"https://gateway.rentamon.com/webhook/get_transactions"}
              />
            </div>
            <div
              data-plasmic-name={"sources"}
              data-plasmic-override={overrides.sources}
              className={classNames(projectcss.all, sty.sources)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gkfL8
                )}
              >
                {
                  "\u0645\u06cc\u0632\u0627\u0646 \u062f\u0631\u0622\u0645\u062f \u0627\u0632 \u0647\u0631 \u0633\u0627\u06cc\u062a"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ajUQs
                )}
              >
                {
                  "\u062c\u0627\u0628\u0627\u0645\u0627: \u06f2\u06f0 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u062c\u0627\u062c\u06cc\u06af\u0627: \u06f1\u06f4 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u0634\u0628: \u06f7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u0627\u062a\u0627\u0642\u06a9: \u06f4 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u0647\u0648\u0645\u0633\u0627: \u06f1.\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"occupancyRate"}
              data-plasmic-override={overrides.occupancyRate}
              className={classNames(projectcss.all, sty.occupancyRate)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vMzey
                )}
              >
                {
                  "\u062a\u0639\u062f\u0627\u062f \u0634\u0628\u200c\u0647\u0627\u06cc \u067e\u0631 \u0634\u062f\u0647"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g1We
                )}
              >
                {
                  "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646: \u06f2\u06f4 \u0634\u0628\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a: \u06f2\u06f0 \u0634\u0628\n\u062e\u0631\u062f\u0627\u062f: \u06f2\u06f8 \u0634\u0628"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"avgDailyRate"}
              data-plasmic-override={overrides.avgDailyRate}
              className={classNames(projectcss.all, sty.avgDailyRate)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Nn1C
                )}
              >
                {
                  "\u0645\u0639\u062f\u0644 \u0646\u0631\u062e \u0627\u062c\u0627\u0631\u0647"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ztAop
                )}
              >
                {
                  "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646: \u06f3 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a: \u06f2.\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u062e\u0631\u062f\u0627\u062f: \u06f2.\u06f7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"
                }
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"clarity2"}
              data-plasmic-override={overrides.clarity2}
              className={classNames("__wab_instance", sty.clarity2)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "freeBox",
    "profile2",
    "mainContents",
    "introduction",
    "teamImage",
    "introCalendarLeft",
    "img",
    "sectionTitle3",
    "monthlyIncome",
    "fragmentChart",
    "apiRequest",
    "sources",
    "occupancyRate",
    "avgDailyRate",
    "html",
    "clarity2",
    "goftino",
    "rentamonFooter"
  ],
  header: ["header", "sideBar2", "freeBox", "profile2"],
  sideBar2: ["sideBar2"],
  freeBox: ["freeBox"],
  profile2: ["profile2"],
  mainContents: [
    "mainContents",
    "introduction",
    "teamImage",
    "introCalendarLeft",
    "img",
    "sectionTitle3",
    "monthlyIncome",
    "fragmentChart",
    "apiRequest",
    "sources",
    "occupancyRate",
    "avgDailyRate"
  ],
  introduction: [
    "introduction",
    "teamImage",
    "introCalendarLeft",
    "img",
    "sectionTitle3"
  ],
  teamImage: ["teamImage", "introCalendarLeft", "img"],
  introCalendarLeft: ["introCalendarLeft", "img"],
  img: ["img"],
  sectionTitle3: ["sectionTitle3"],
  monthlyIncome: ["monthlyIncome", "fragmentChart", "apiRequest"],
  fragmentChart: ["fragmentChart"],
  apiRequest: ["apiRequest"],
  sources: ["sources"],
  occupancyRate: ["occupancyRate"],
  avgDailyRate: ["avgDailyRate"],
  html: ["html", "clarity2", "goftino"],
  clarity2: ["clarity2"],
  goftino: ["goftino"],
  rentamonFooter: ["rentamonFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  freeBox: "div";
  profile2: typeof ApiRequest;
  mainContents: "div";
  introduction: "div";
  teamImage: "div";
  introCalendarLeft: "div";
  img: typeof PlasmicImg__;
  sectionTitle3: "div";
  monthlyIncome: "div";
  fragmentChart: typeof Chart;
  apiRequest: typeof ApiRequest;
  sources: "div";
  occupancyRate: "div";
  avgDailyRate: "div";
  html: "div";
  clarity2: typeof Embed;
  goftino: typeof Embed;
  rentamonFooter: typeof RentamonFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalytics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalytics__VariantsArgs;
    args?: PlasmicAnalytics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalytics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAnalytics__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnalytics__ArgProps,
          internalVariantPropNames: PlasmicAnalytics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnalytics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnalytics";
  } else {
    func.displayName = `PlasmicAnalytics.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalytics = Object.assign(
  // Top-level PlasmicAnalytics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    freeBox: makeNodeComponent("freeBox"),
    profile2: makeNodeComponent("profile2"),
    mainContents: makeNodeComponent("mainContents"),
    introduction: makeNodeComponent("introduction"),
    teamImage: makeNodeComponent("teamImage"),
    introCalendarLeft: makeNodeComponent("introCalendarLeft"),
    img: makeNodeComponent("img"),
    sectionTitle3: makeNodeComponent("sectionTitle3"),
    monthlyIncome: makeNodeComponent("monthlyIncome"),
    fragmentChart: makeNodeComponent("fragmentChart"),
    apiRequest: makeNodeComponent("apiRequest"),
    sources: makeNodeComponent("sources"),
    occupancyRate: makeNodeComponent("occupancyRate"),
    avgDailyRate: makeNodeComponent("avgDailyRate"),
    html: makeNodeComponent("html"),
    clarity2: makeNodeComponent("clarity2"),
    goftino: makeNodeComponent("goftino"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),

    // Metadata about props expected for PlasmicAnalytics
    internalVariantProps: PlasmicAnalytics__VariantProps,
    internalArgProps: PlasmicAnalytics__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "گزارشات پیشرفته اقامتگاه",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAnalytics;
/* prettier-ignore-end */
