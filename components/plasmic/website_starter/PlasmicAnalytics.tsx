/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: 8d3uvVUzIbi1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Chart } from "@/fragment/components/chart"; // plasmic-import: AKmMZITDmA8F/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicAnalytics.module.css"; // plasmic-import: 8d3uvVUzIbi1/css

createPlasmicElementProxy;

export type PlasmicAnalytics__VariantMembers = {};
export type PlasmicAnalytics__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalytics__VariantsArgs;
export const PlasmicAnalytics__VariantProps = new Array<VariantPropType>();

export type PlasmicAnalytics__ArgsType = {};
type ArgPropType = keyof PlasmicAnalytics__ArgsType;
export const PlasmicAnalytics__ArgProps = new Array<ArgPropType>();

export type PlasmicAnalytics__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  mainContents?: Flex__<"div">;
  introduction?: Flex__<"div">;
  image?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  caption?: Flex__<"div">;
  monthlyIncome2?: Flex__<"div">;
  monthlyIncome?: Flex__<"div">;
  apiRequestMonthlyIncome?: Flex__<typeof ApiRequest>;
  sourcesOfReserves2?: Flex__<"div">;
  sourcesOfReserves?: Flex__<"div">;
  apiRequestSourceOfReserves?: Flex__<typeof ApiRequest>;
  occupancyRate2?: Flex__<"div">;
  occupancyRate?: Flex__<"div">;
  apiRequestOccupancyRate?: Flex__<typeof ApiRequest>;
  avgDailyRate2?: Flex__<"div">;
  apiRequestAvgDailyRate?: Flex__<typeof ApiRequest>;
  avgDailyRate?: Flex__<"div">;
  html?: Flex__<"div">;
  goftino?: Flex__<typeof Embed>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
};

export interface DefaultAnalyticsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnalytics__RenderFunc(props: {
  variants: PlasmicAnalytics__VariantsArgs;
  args: PlasmicAnalytics__ArgsType;
  overrides: PlasmicAnalytics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "apiRequestMonthlyIncome.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestMonthlyIncome"
      },
      {
        path: "apiRequestMonthlyIncome.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestMonthlyIncome"
      },
      {
        path: "apiRequestMonthlyIncome.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestMonthlyIncome"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequestSourceOfReserves.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestSourceOfReserves"
      },
      {
        path: "apiRequestSourceOfReserves.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestSourceOfReserves"
      },
      {
        path: "apiRequestSourceOfReserves.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestSourceOfReserves"
      },
      {
        path: "apiRequestOccupancyRate.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestOccupancyRate"
      },
      {
        path: "apiRequestOccupancyRate.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestOccupancyRate"
      },
      {
        path: "apiRequestOccupancyRate.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestOccupancyRate"
      },
      {
        path: "apiRequestAvgDailyRate.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestAvgDailyRate"
      },
      {
        path: "apiRequestAvgDailyRate.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestAvgDailyRate"
      },
      {
        path: "apiRequestAvgDailyRate.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequestAvgDailyRate"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAnalytics.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAnalytics.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAnalytics.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <SideBar2
              data-plasmic-name={"sideBar2"}
              data-plasmic-override={overrides.sideBar2}
              className={classNames("__wab_instance", sty.sideBar2)}
              isOpen={
                hasVariant(globalVariants, "screen", "mobile") ? false : false
              }
              userData={(() => {
                try {
                  return $state.profile2.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div className={classNames(projectcss.all, sty.freeBox__ihhXu)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Wp8N
                )}
              >
                {
                  "\u06af\u0632\u0627\u0631\u0634\u0627\u062a \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 (\u0622\u0632\u0645\u0627\u06cc\u0634\u06cc)"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yvNig
                )}
              >
                {
                  "\u062f\u0631\u0635\u0648\u0631\u062a \u0627\u0628\u0647\u0627\u0645 \u0648 \u06cc\u0627 \u0645\u0634\u0627\u0647\u062f\u0647 \u062e\u0637\u0627\u06cc \u0645\u062d\u0627\u0633\u0628\u0627\u062a\u06cc\u060c \u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639 \u0628\u062f\u0647"
                }
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"profile2"}
              data-plasmic-override={overrides.profile2}
              className={classNames("__wab_instance", sty.profile2)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "profile2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile2"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <div
            data-plasmic-name={"mainContents"}
            data-plasmic-override={overrides.mainContents}
            className={classNames(projectcss.all, sty.mainContents)}
          >
            <div
              data-plasmic-name={"introduction"}
              data-plasmic-override={overrides.introduction}
              className={classNames(projectcss.all, sty.introduction)}
            >
              <div
                data-plasmic-name={"image"}
                data-plasmic-override={overrides.image}
                className={classNames(projectcss.all, sty.image)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "220px"
                      : "320px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image101.png",
                    fullWidth: 705,
                    fullHeight: 466,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                data-plasmic-name={"caption"}
                data-plasmic-override={overrides.caption}
                className={classNames(projectcss.all, sty.caption)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yE2Gm
                  )}
                >
                  {
                    "\u0628\u0631\u0631\u0633\u06cc \u06af\u0632\u0627\u0631\u0634\u0627\u062a \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0634\u0646\u0627\u062e\u062a \u0628\u0647\u062a\u0631\u06cc \u0646\u0633\u0628\u062a \u0628\u0647 \u0634\u0631\u0627\u06cc\u0637 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0628\u0647 \u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc \u0648 \u062f\u0631 \u0622\u06cc\u0646\u062f\u0647 \u062a\u0635\u0645\u06cc\u0645\u200c\u0647\u0627\u06cc \u0628\u0647\u062a\u0631\u06cc \u0628\u06af\u06cc\u0631\u06cc."
                  }
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"monthlyIncome2"}
              data-plasmic-override={overrides.monthlyIncome2}
              className={classNames(projectcss.all, sty.monthlyIncome2)}
            >
              <div
                data-plasmic-name={"monthlyIncome"}
                data-plasmic-override={overrides.monthlyIncome}
                className={classNames(projectcss.all, sty.monthlyIncome)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__w3Dif)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j8U01
                    )}
                  >
                    {
                      "\u062f\u0631\u0622\u0645\u062f \u0645\u0627\u0647\u06cc\u0627\u0646\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eVtAr)}>
                  <Chart
                    cartesianGrid={[]}
                    chartConfig={(() => {
                      const __composite = [
                        {
                          color: null,
                          type: "natural",
                          dot: false,
                          key: null,
                          label: null
                        }
                      ];
                      __composite["0"]["color"] = "var(--token-8nedppYkGVaH)";
                      __composite["0"]["key"] = "income";
                      __composite["0"]["label"] =
                        "\u062f\u0631\u0622\u0645\u062f \u0645\u0627\u0647\u0627\u0646\u0647";
                      return __composite;
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentChart__uBw5I
                    )}
                    data={(() => {
                      try {
                        return $state.apiRequestMonthlyIncome.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    }
                    layout={"horizontal"}
                    legend={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? false
                        : false
                    }
                    stack={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? false
                        : true
                    }
                    tooltip={(() => {
                      const __composite = {
                        enabled: null,
                        indicator: null,
                        hideLabel: null
                      };
                      __composite["enabled"] = false;
                      __composite["indicator"] = "dashed";
                      __composite["hideLabel"] = false;
                      return __composite;
                    })()}
                    type={"bar"}
                    xAxis={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            const __composite = { enabled: null, key: null };
                            __composite["enabled"] = true;
                            __composite["key"] = "month";
                            return __composite;
                          })()
                        : (() => {
                            const __composite = {
                              enabled: null,
                              key: null,
                              type: null,
                              tickLine: null,
                              tickMargin: null,
                              axisLine: null
                            };
                            __composite["enabled"] = true;
                            __composite["key"] = "month";
                            __composite["type"] = "category";
                            __composite["tickLine"] = false;
                            __composite["tickMargin"] = 4;
                            __composite["axisLine"] = true;
                            return __composite;
                          })()
                    }
                    yAxis={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            const __composite = {
                              key: null,
                              enabled: null,
                              type: null,
                              tickLine: null,
                              axisLine: null
                            };
                            __composite["key"] = "income";
                            __composite["enabled"] = false;
                            __composite["type"] = "number";
                            __composite["tickLine"] = false;
                            __composite["axisLine"] = false;
                            return __composite;
                          })()
                        : (() => {
                            const __composite = { enabled: null };
                            __composite["enabled"] = false;
                            return __composite;
                          })()
                    }
                  />
                </div>
              </div>
              <ApiRequest
                data-plasmic-name={"apiRequestMonthlyIncome"}
                data-plasmic-override={overrides.apiRequestMonthlyIncome}
                className={classNames(
                  "__wab_instance",
                  sty.apiRequestMonthlyIncome
                )}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mIo8S
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aje3J
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestMonthlyIncome",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestMonthlyIncome",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestMonthlyIncome",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiRequestMonthlyIncome"] = ref;
                }}
                url={"https://gateway.rentamon.com/webhook/monthly-income"}
              />
            </div>
            <div
              data-plasmic-name={"sourcesOfReserves2"}
              data-plasmic-override={overrides.sourcesOfReserves2}
              className={classNames(projectcss.all, sty.sourcesOfReserves2)}
            >
              <div
                data-plasmic-name={"sourcesOfReserves"}
                data-plasmic-override={overrides.sourcesOfReserves}
                className={classNames(projectcss.all, sty.sourcesOfReserves)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qbSdR)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gkfL8
                    )}
                  >
                    {
                      "\u062a\u0639\u062f\u0627\u062f \u0631\u0632\u0631\u0648  \u0627\u0632 \u0647\u0631 \u0633\u0627\u06cc\u062a"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__z02AS)}>
                  <Chart
                    cartesianGrid={[]}
                    chartConfig={(() => {
                      const __composite = [
                        { color: null, type: "natural", dot: false, key: null }
                      ];
                      __composite["0"]["color"] = "#3F5673";
                      __composite["0"]["key"] = "transaction_count";
                      return __composite;
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentChart___5Y0CB
                    )}
                    data={(() => {
                      try {
                        return $state.apiRequestSourceOfReserves.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    }
                    layout={"horizontal"}
                    legend={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? false
                        : undefined
                    }
                    stack={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? false
                        : false
                    }
                    tooltip={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            const __composite = { enabled: null };
                            __composite["enabled"] = false;
                            return __composite;
                          })()
                        : undefined
                    }
                    type={"bar"}
                    xAxis={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            const __composite = {
                              enabled: null,
                              key: null,
                              type: null,
                              axisLine: null
                            };
                            __composite["enabled"] = true;
                            __composite["key"] = "website_name";
                            __composite["type"] = "category";
                            __composite["axisLine"] = false;
                            return __composite;
                          })()
                        : (() => {
                            const __composite = { enabled: null, key: null };
                            __composite["enabled"] = true;
                            __composite["key"] = "website_name";
                            return __composite;
                          })()
                    }
                    yAxis={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            const __composite = {
                              key: null,
                              enabled: null,
                              axisLine: null,
                              tickLine: null,
                              type: null
                            };
                            __composite["key"] = "transaction_count";
                            __composite["enabled"] = false;
                            __composite["axisLine"] = false;
                            __composite["tickLine"] = false;
                            __composite["type"] = "number";
                            return __composite;
                          })()
                        : (() => {
                            const __composite = {
                              key: null,
                              enabled: null,
                              axisLine: null
                            };
                            __composite["key"] = "transaction_count";
                            __composite["enabled"] = false;
                            __composite["axisLine"] = false;
                            return __composite;
                          })()
                    }
                  />
                </div>
              </div>
              <ApiRequest
                data-plasmic-name={"apiRequestSourceOfReserves"}
                data-plasmic-override={overrides.apiRequestSourceOfReserves}
                className={classNames(
                  "__wab_instance",
                  sty.apiRequestSourceOfReserves
                )}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Bu1C
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wQdKd
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestSourceOfReserves",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestSourceOfReserves",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestSourceOfReserves",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiRequestSourceOfReserves"] = ref;
                }}
                url={"https://gateway.rentamon.com/webhook/reserves-source"}
              />
            </div>
            <div
              data-plasmic-name={"occupancyRate2"}
              data-plasmic-override={overrides.occupancyRate2}
              className={classNames(projectcss.all, sty.occupancyRate2)}
            >
              <div
                data-plasmic-name={"occupancyRate"}
                data-plasmic-override={overrides.occupancyRate}
                className={classNames(projectcss.all, sty.occupancyRate)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vMzey
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u062a\u0639\u062f\u0627\u062f \u0634\u0628\u200c\u0647\u0627\u06cc \u067e\u0631 \u0634\u062f\u0647 \u062f\u0631 \u0647\u0631 \u0645\u0627\u0647"
                    : "\u062a\u0639\u062f\u0627\u062f \u0634\u0628\u200c\u0647\u0627\u06cc \u067e\u0631 \u0634\u062f\u0647"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__lQmRi)}>
                  <Chart
                    cartesianGrid={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? []
                        : undefined
                    }
                    chartConfig={(() => {
                      const __composite = [
                        { color: null, type: "natural", dot: false, key: null }
                      ];
                      __composite["0"]["color"] = "var(--token-8nedppYkGVaH)";
                      __composite["0"]["key"] = "reserved_nights";
                      return __composite;
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentChart__pUo5B
                    )}
                    data={(() => {
                      try {
                        return $state.apiRequestOccupancyRate.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? true
                        : true
                    }
                    layout={"horizontal"}
                    legend={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? false
                        : undefined
                    }
                    stack={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? true
                        : true
                    }
                    type={"bar"}
                    xAxis={(() => {
                      const __composite = {
                        key: null,
                        type: null,
                        enabled: null,
                        tickLine: null,
                        axisLine: null
                      };
                      __composite["key"] = "shamsi_month";
                      __composite["type"] = "category";
                      __composite["enabled"] = true;
                      __composite["tickLine"] = false;
                      __composite["axisLine"] = false;
                      return __composite;
                    })()}
                  />
                </div>
              </div>
              <ApiRequest
                data-plasmic-name={"apiRequestOccupancyRate"}
                data-plasmic-override={overrides.apiRequestOccupancyRate}
                className={classNames(
                  "__wab_instance",
                  sty.apiRequestOccupancyRate
                )}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hbhrg
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Cikn
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestOccupancyRate",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestOccupancyRate",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestOccupancyRate",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiRequestOccupancyRate"] = ref;
                }}
                url={"https://gateway.rentamon.com/webhook/cccupancy-rate"}
              />
            </div>
            <div
              data-plasmic-name={"avgDailyRate2"}
              data-plasmic-override={overrides.avgDailyRate2}
              className={classNames(projectcss.all, sty.avgDailyRate2)}
            >
              <ApiRequest
                data-plasmic-name={"apiRequestAvgDailyRate"}
                data-plasmic-override={overrides.apiRequestAvgDailyRate}
                className={classNames(
                  "__wab_instance",
                  sty.apiRequestAvgDailyRate
                )}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wkQm1
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rj7E
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestAvgDailyRate",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestAvgDailyRate",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequestAvgDailyRate",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiRequestAvgDailyRate"] = ref;
                }}
                url={"https://gateway.rentamon.com/webhook/avg-daily-rate"}
              />

              <div
                data-plasmic-name={"avgDailyRate"}
                data-plasmic-override={overrides.avgDailyRate}
                className={classNames(projectcss.all, sty.avgDailyRate)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Nn1C
                  )}
                >
                  {
                    "\u0645\u0639\u062f\u0644 \u0646\u0631\u062e \u0627\u062c\u0627\u0631\u0647 \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0634\u0628 (\u062a\u0648\u0645\u0627\u0646):"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ztAop
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequestAvgDailyRate.data
                          .map(item => {
                            const months = {
                              "01": "فروردین",
                              "02": "اردیبهشت",
                              "03": "خرداد",
                              "04": "تیر",
                              "05": "مرداد",
                              "06": "شهریور",
                              "07": "مهر",
                              "08": "آبان",
                              "09": "آذر",
                              "10": "دی",
                              "11": "بهمن",
                              "12": "اسفند"
                            };
                            const jalaliMonth =
                              months[item.jalali_month.slice(5)];
                            const persianPrice = new Intl.NumberFormat(
                              "fa-IR"
                            ).format(item.average_price_per_night);
                            return `${jalaliMonth} : ${persianPrice}`;
                          })
                          .join("\n");
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646: \u06f3 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a: \u06f2.\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646\n\u062e\u0631\u062f\u0627\u062f: \u06f2.\u06f7 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__k3H9Z)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile2",
    "mainContents",
    "introduction",
    "image",
    "img",
    "caption",
    "monthlyIncome2",
    "monthlyIncome",
    "apiRequestMonthlyIncome",
    "sourcesOfReserves2",
    "sourcesOfReserves",
    "apiRequestSourceOfReserves",
    "occupancyRate2",
    "occupancyRate",
    "apiRequestOccupancyRate",
    "avgDailyRate2",
    "apiRequestAvgDailyRate",
    "avgDailyRate",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent",
    "rentamonFooter"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  mainContents: [
    "mainContents",
    "introduction",
    "image",
    "img",
    "caption",
    "monthlyIncome2",
    "monthlyIncome",
    "apiRequestMonthlyIncome",
    "sourcesOfReserves2",
    "sourcesOfReserves",
    "apiRequestSourceOfReserves",
    "occupancyRate2",
    "occupancyRate",
    "apiRequestOccupancyRate",
    "avgDailyRate2",
    "apiRequestAvgDailyRate",
    "avgDailyRate"
  ],
  introduction: ["introduction", "image", "img", "caption"],
  image: ["image", "img"],
  img: ["img"],
  caption: ["caption"],
  monthlyIncome2: [
    "monthlyIncome2",
    "monthlyIncome",
    "apiRequestMonthlyIncome"
  ],
  monthlyIncome: ["monthlyIncome"],
  apiRequestMonthlyIncome: ["apiRequestMonthlyIncome"],
  sourcesOfReserves2: [
    "sourcesOfReserves2",
    "sourcesOfReserves",
    "apiRequestSourceOfReserves"
  ],
  sourcesOfReserves: ["sourcesOfReserves"],
  apiRequestSourceOfReserves: ["apiRequestSourceOfReserves"],
  occupancyRate2: [
    "occupancyRate2",
    "occupancyRate",
    "apiRequestOccupancyRate"
  ],
  occupancyRate: ["occupancyRate"],
  apiRequestOccupancyRate: ["apiRequestOccupancyRate"],
  avgDailyRate2: ["avgDailyRate2", "apiRequestAvgDailyRate", "avgDailyRate"],
  apiRequestAvgDailyRate: ["apiRequestAvgDailyRate"],
  avgDailyRate: ["avgDailyRate"],
  html: ["html", "goftino", "clarityRntComponent", "faviconRntComponent"],
  goftino: ["goftino"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  rentamonFooter: ["rentamonFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  mainContents: "div";
  introduction: "div";
  image: "div";
  img: typeof PlasmicImg__;
  caption: "div";
  monthlyIncome2: "div";
  monthlyIncome: "div";
  apiRequestMonthlyIncome: typeof ApiRequest;
  sourcesOfReserves2: "div";
  sourcesOfReserves: "div";
  apiRequestSourceOfReserves: typeof ApiRequest;
  occupancyRate2: "div";
  occupancyRate: "div";
  apiRequestOccupancyRate: typeof ApiRequest;
  avgDailyRate2: "div";
  apiRequestAvgDailyRate: typeof ApiRequest;
  avgDailyRate: "div";
  html: "div";
  goftino: typeof Embed;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  rentamonFooter: typeof RentamonFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalytics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalytics__VariantsArgs;
    args?: PlasmicAnalytics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalytics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAnalytics__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnalytics__ArgProps,
          internalVariantPropNames: PlasmicAnalytics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnalytics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnalytics";
  } else {
    func.displayName = `PlasmicAnalytics.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalytics = Object.assign(
  // Top-level PlasmicAnalytics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    mainContents: makeNodeComponent("mainContents"),
    introduction: makeNodeComponent("introduction"),
    image: makeNodeComponent("image"),
    img: makeNodeComponent("img"),
    caption: makeNodeComponent("caption"),
    monthlyIncome2: makeNodeComponent("monthlyIncome2"),
    monthlyIncome: makeNodeComponent("monthlyIncome"),
    apiRequestMonthlyIncome: makeNodeComponent("apiRequestMonthlyIncome"),
    sourcesOfReserves2: makeNodeComponent("sourcesOfReserves2"),
    sourcesOfReserves: makeNodeComponent("sourcesOfReserves"),
    apiRequestSourceOfReserves: makeNodeComponent("apiRequestSourceOfReserves"),
    occupancyRate2: makeNodeComponent("occupancyRate2"),
    occupancyRate: makeNodeComponent("occupancyRate"),
    apiRequestOccupancyRate: makeNodeComponent("apiRequestOccupancyRate"),
    avgDailyRate2: makeNodeComponent("avgDailyRate2"),
    apiRequestAvgDailyRate: makeNodeComponent("apiRequestAvgDailyRate"),
    avgDailyRate: makeNodeComponent("avgDailyRate"),
    html: makeNodeComponent("html"),
    goftino: makeNodeComponent("goftino"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),

    // Metadata about props expected for PlasmicAnalytics
    internalVariantProps: PlasmicAnalytics__VariantProps,
    internalArgProps: PlasmicAnalytics__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "گزارشات پیشرفته اقامتگاه",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAnalytics;
/* prettier-ignore-end */
