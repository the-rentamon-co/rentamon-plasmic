/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: MCY7hgSl3pBE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./Plasmic_404.module.css"; // plasmic-import: MCY7hgSl3pBE/css

createPlasmicElementProxy;

export type Plasmic_404__VariantMembers = {};
export type Plasmic_404__VariantsArgs = {};
type VariantPropType = keyof Plasmic_404__VariantsArgs;
export const Plasmic_404__VariantProps = new Array<VariantPropType>();

export type Plasmic_404__ArgsType = {};
type ArgPropType = keyof Plasmic_404__ArgsType;
export const Plasmic_404__ArgProps = new Array<ArgPropType>();

export type Plasmic_404__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  mainContents?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface Default_404Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_404__RenderFunc(props: {
  variants: Plasmic_404__VariantsArgs;
  args: Plasmic_404__ArgsType;
  overrides: Plasmic_404__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{Plasmic_404.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={Plasmic_404.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={Plasmic_404.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__meGr5)}>
              <SideBar2
                data-plasmic-name={"sideBar2"}
                data-plasmic-override={overrides.sideBar2}
                className={classNames("__wab_instance", sty.sideBar2)}
                isOpen={
                  hasVariant(globalVariants, "screen", "mobile") ? false : false
                }
                userData={(() => {
                  try {
                    return $state.profile2.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pYvYj)} />

            <ApiRequest
              data-plasmic-name={"profile2"}
              data-plasmic-override={overrides.profile2}
              className={classNames("__wab_instance", sty.profile2)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "profile2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile2"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <div
            data-plasmic-name={"mainContents"}
            data-plasmic-override={overrides.mainContents}
            className={classNames(projectcss.all, sty.mainContents)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cBplt)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/_404Png2.png",
                  fullWidth: 442,
                  fullHeight: 299,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dgbbL)}>
              <div className={classNames(projectcss.all, sty.freeBox__oXrIp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nnxTo
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0631\u0648 \u0646\u062f\u0627\u0631\u06cc\u0645!"
                    : "\u0645\u062b\u0644 \u0627\u06cc\u0646\u06a9\u0647 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0631\u0648 \u0646\u062f\u0627\u0631\u06cc\u0645!"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__lLSpK,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__unMnq
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0646\u0645\u0627\u06cc\u0634 \u0635\u0641\u062d\u0647\u200c\u06cc \u0627\u0635\u0644\u06cc"
                    : "\u0646\u0645\u0627\u06cc\u0634 \u0635\u0641\u062d\u0647\u200c\u06cc \u0627\u0635\u0644\u06cc"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__my6Xn)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__hESl, ``)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToمقایسهبهترینسایتاجارهویلا"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/best-villa-rental-sites`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToمقایسهبهترینسایتاجارهویلا"] != null &&
                    typeof $steps["goToمقایسهبهترینسایتاجارهویلا"] ===
                      "object" &&
                    typeof $steps["goToمقایسهبهترینسایتاجارهویلا"].then ===
                      "function"
                  ) {
                    $steps["goToمقایسهبهترینسایتاجارهویلا"] = await $steps[
                      "goToمقایسهبهترینسایتاجارهویلا"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oEa27,
                    "clickable"
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\ud83d\udd17 \u0645\u0642\u0627\u06cc\u0633\u0647 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627\r"
                    : "\ud83d\udd17 \u0645\u0642\u0627\u06cc\u0633\u0647 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627"}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__uuj9S, ``)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToراهنمایجامعدرآمدازاجارهویلا"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/vacation-rental-income`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToراهنمایجامعدرآمدازاجارهویلا"] != null &&
                    typeof $steps["goToراهنمایجامعدرآمدازاجارهویلا"] ===
                      "object" &&
                    typeof $steps["goToراهنمایجامعدرآمدازاجارهویلا"].then ===
                      "function"
                  ) {
                    $steps["goToراهنمایجامعدرآمدازاجارهویلا"] = await $steps[
                      "goToراهنمایجامعدرآمدازاجارهویلا"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qFge,
                    "clickable"
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\ud83d\udd17 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u062c\u0627\u0645\u0639 \u06a9\u0633\u0628 \u062f\u0631\u0622\u0645\u062f \u0627\u0632 \u0627\u062c\u0627\u0631\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\r"
                    : "\ud83d\udd17 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u062c\u0627\u0645\u0639 \u06a9\u0633\u0628 \u062f\u0631\u0622\u0645\u062f \u0627\u0632 \u0627\u062c\u0627\u0631\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ajAll, ``)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToقوانیناجارهروزانه"] = true
                    ? (() => {
                        const actionArgs = { destination: `/rental-rules` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToقوانیناجارهروزانه"] != null &&
                    typeof $steps["goToقوانیناجارهروزانه"] === "object" &&
                    typeof $steps["goToقوانیناجارهروزانه"].then === "function"
                  ) {
                    $steps["goToقوانیناجارهروزانه"] = await $steps[
                      "goToقوانیناجارهروزانه"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Fi4P,
                    "clickable"
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\ud83d\udd17 \u0642\u0648\u0627\u0646\u06cc\u0646 \u0627\u062c\u0627\u0631\u0647 \u0631\u0648\u0632\u0627\u0646\u0647"
                    : "\ud83d\udd17 \u0642\u0648\u0627\u0646\u06cc\u0646 \u0627\u062c\u0627\u0631\u0647 \u0631\u0648\u0632\u0627\u0646\u0647"}
                </div>
              </div>
            </div>
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />

          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__mmxHh)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile2",
    "mainContents",
    "img",
    "rentamonFooter",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  mainContents: ["mainContents", "img"],
  img: ["img"],
  rentamonFooter: ["rentamonFooter"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  mainContents: "div";
  img: typeof PlasmicImg__;
  rentamonFooter: typeof RentamonFooter;
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_404__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_404__VariantsArgs;
    args?: Plasmic_404__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_404__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_404__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_404__ArgProps,
          internalVariantPropNames: Plasmic_404__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_404__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_404";
  } else {
    func.displayName = `Plasmic_404.${nodeName}`;
  }
  return func;
}

export const Plasmic_404 = Object.assign(
  // Top-level Plasmic_404 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    mainContents: makeNodeComponent("mainContents"),
    img: makeNodeComponent("img"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for Plasmic_404
    internalVariantProps: Plasmic_404__VariantProps,
    internalArgProps: Plasmic_404__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "404",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_404;
/* prettier-ignore-end */
