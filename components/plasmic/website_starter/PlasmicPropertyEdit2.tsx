/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: dehhsrjP1Mnr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import VilaType from "../../VilaType"; // plasmic-import: Ovb_QdBC9YkI/component
import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicPropertyEdit2.module.css"; // plasmic-import: dehhsrjP1Mnr/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon

createPlasmicElementProxy;

export type PlasmicPropertyEdit2__VariantMembers = {};
export type PlasmicPropertyEdit2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPropertyEdit2__VariantsArgs;
export const PlasmicPropertyEdit2__VariantProps = new Array<VariantPropType>();

export type PlasmicPropertyEdit2__ArgsType = {};
type ArgPropType = keyof PlasmicPropertyEdit2__ArgsType;
export const PlasmicPropertyEdit2__ArgProps = new Array<ArgPropType>();

export type PlasmicPropertyEdit2__OverridesType = {
  ویرایشاقامتگاه?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  type?: Flex__<"div">;
  name?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  newButtons?: Flex__<"div">;
  next?: Flex__<"div">;
  privious?: Flex__<"div">;
  pic?: Flex__<"div">;
  title?: Flex__<"div">;
  imageFrame?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  embedHtml?: Flex__<typeof Embed>;
  newButtons2?: Flex__<"div">;
  next2?: Flex__<"div">;
  privious2?: Flex__<"div">;
  back?: Flex__<"div">;
  propGuide5?: Flex__<"div">;
  propGuide6?: Flex__<"div">;
  propGuide4?: Flex__<"div">;
  propGuide?: Flex__<"div">;
  propGuide2?: Flex__<"div">;
  propGuide3?: Flex__<"div">;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultPropertyEdit2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPropertyEdit2__RenderFunc(props: {
  variants: PlasmicPropertyEdit2__VariantsArgs;
  args: PlasmicPropertyEdit2__ArgsType;
  overrides: PlasmicPropertyEdit2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 2
      },
      {
        path: "hostType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "propTour",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={
            "\u0648\u06cc\u0631\u0627\u06cc\u0634\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
          }
          data-plasmic-override={overrides.ویرایشاقامتگاه}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.ویرایشاقامتگاه
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vfJai
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e7TL
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
          />

          {(() => {
            try {
              return $state.step == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"type"}
              data-plasmic-override={overrides.type}
              className={classNames(projectcss.all, sty.type)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nTUhy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oqxU
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.propTour
                          ? "ایجاد اقامتگاه"
                          : "ویرایش اقامتگاه";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wCrL)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zASdl
                  )}
                >
                  {
                    "\u0646\u0648\u0639 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0686\u06cc\u0647\u061f"
                  }
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jYWd,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHostType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hostType"]
                          },
                          operation: 0,
                          value: (() => {
                            return "villa_cottage";
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHostType"] != null &&
                    typeof $steps["updateHostType"] === "object" &&
                    typeof $steps["updateHostType"].then === "function"
                  ) {
                    $steps["updateHostType"] = await $steps["updateHostType"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/property_type",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    prop_id: $ctx.params.id,
                                    host_type: $state.hostType
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["wait"] = true
                    ? (() => {
                        const actionArgs = { args: [200] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["wait"] != null &&
                    typeof $steps["wait"] === "object" &&
                    typeof $steps["wait"].then === "function"
                  ) {
                    $steps["wait"] = await $steps["wait"];
                  }

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <VilaType
                  className={classNames("__wab_instance", sty.vilaType___4OYpn)}
                  text={
                    "\u0648\u06cc\u0644\u0627/\u0648\u06cc\u0644\u0627\u06cc\u06cc"
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dli37
                  )}
                >
                  {
                    "\u0648\u06cc\u0644\u0627/\u0648\u06cc\u0644\u0627\u06cc\u06cc"
                  }
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___88Okp,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHostType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hostType"]
                          },
                          operation: 0,
                          value: (() => {
                            return "apartment_suite";
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHostType"] != null &&
                    typeof $steps["updateHostType"] === "object" &&
                    typeof $steps["updateHostType"].then === "function"
                  ) {
                    $steps["updateHostType"] = await $steps["updateHostType"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/property_type",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    prop_id: $ctx.params.id,
                                    host_type: $state.hostType
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["wait"] = true
                    ? (() => {
                        const actionArgs = { args: [200] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["wait"] != null &&
                    typeof $steps["wait"] === "object" &&
                    typeof $steps["wait"].then === "function"
                  ) {
                    $steps["wait"] = await $steps["wait"];
                  }

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <VilaType
                  className={classNames("__wab_instance", sty.vilaType__xl9Y)}
                  select={(() => {
                    try {
                      return $state.hostType == "apartment_suite";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={
                    "\u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646/\u0633\u0648\u06cc\u06cc\u062a"
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gQcpV
                  )}
                >
                  {
                    "\u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646/\u0633\u0648\u06cc\u06cc\u062a"
                  }
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__ryNGm,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHostType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hostType"]
                          },
                          operation: 0,
                          value: (() => {
                            return "hotel_ecolodge";
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHostType"] != null &&
                    typeof $steps["updateHostType"] === "object" &&
                    typeof $steps["updateHostType"].then === "function"
                  ) {
                    $steps["updateHostType"] = await $steps["updateHostType"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/property_type",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    prop_id: $ctx.params.id,
                                    host_type: $state.hostType
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["wait"] = true
                    ? (() => {
                        const actionArgs = { args: [200] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["wait"] != null &&
                    typeof $steps["wait"] === "object" &&
                    typeof $steps["wait"].then === "function"
                  ) {
                    $steps["wait"] = await $steps["wait"];
                  }

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <VilaType
                  className={classNames("__wab_instance", sty.vilaType__o9QP5)}
                  select={(() => {
                    try {
                      return $state.hostType == "hotel_ecolodge";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={
                    "\u0628\u0648\u0645\u06af\u0631\u062f\u06cc/\u0647\u0627\u0633\u062a\u0644"
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w7AmI
                  )}
                >
                  {
                    "\u0628\u0648\u0645\u06af\u0631\u062f\u06cc/\u0647\u0627\u0633\u062a\u0644"
                  }
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___6Mdx7)}>
            {(() => {
              try {
                return $state.step == 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                className={classNames(projectcss.all, sty.name)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iaWw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__umwM1
                    )}
                  >
                    {
                      "\u0646\u0627\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__g6RBh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ckEz2
                    )}
                  >
                    {
                      "\u0627\u0633\u0645 \u062c\u062f\u06cc\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0686\u06cc \u0628\u0627\u0634\u0647\u061f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ewPkl
                    )}
                  >
                    {
                      "\u0627\u06cc\u0646 \u0627\u0633\u0645 \u0631\u0648 \u0641\u0642\u0637 \u062e\u0648\u062f\u062a \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xvStS)}>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    placeholder={(() => {
                      try {
                        return $state.apiRequest.data.properties[
                          $ctx.params.id - 1
                        ].property_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  {(() => {
                    try {
                      return (
                        $state.textInput &&
                        $state.textInput.value.trim().split(/\s+/).length > 4
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ibgBx
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u06cc\u0647 \u0627\u0633\u0645 \u06a9\u0648\u062a\u0627\u0647\u200c\u062a\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      }
                    </div>
                  ) : null}
                </div>
                <div
                  data-plasmic-name={"newButtons"}
                  data-plasmic-override={overrides.newButtons}
                  className={classNames(projectcss.all, sty.newButtons)}
                >
                  <div
                    data-plasmic-name={"next"}
                    data-plasmic-override={overrides.next}
                    className={classNames(
                      projectcss.all,
                      sty.next,
                      "clickable"
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: ($state.loading = true)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["updateStep"] =
                        $state.textInput &&
                        $state.textInput.value.trim().split(/\s+/).length <= 4
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: ($state.loading = false)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.textInput.value != ""
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/change_property_name",
                                  undefined,
                                  (() => {
                                    try {
                                      return (() => {
                                        let a = {
                                          prop_id: $ctx.params.id,
                                          property_name: $state.textInput.value
                                        };
                                        return a;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToLiteCalendar"] = false
                        ? (() => {
                            const actionArgs = { destination: `/calendar` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToLiteCalendar"] != null &&
                        typeof $steps["goToLiteCalendar"] === "object" &&
                        typeof $steps["goToLiteCalendar"].then === "function"
                      ) {
                        $steps["goToLiteCalendar"] = await $steps[
                          "goToLiteCalendar"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oaT6M
                      )}
                    >
                      {"\u0628\u0639\u062f\u06cc"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__y54Tv)}
                      displayHeight={"37px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image140.gif",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"privious"}
                    data-plasmic-override={overrides.privious}
                    className={classNames(
                      projectcss.all,
                      sty.privious,
                      "clickable"
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dqj00
                      )}
                    >
                      {"\u0642\u0628\u0644"}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
          </div>
          {(() => {
            try {
              return $state.step == 2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"pic"}
              data-plasmic-override={overrides.pic}
              className={classNames(projectcss.all, sty.pic)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__feAt6
                  )}
                >
                  {
                    "\u062a\u0635\u0648\u06cc\u0631 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"imageFrame"}
                data-plasmic-override={overrides.imageFrame}
                className={classNames(projectcss.all, sty.imageFrame)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__goRoy)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jIaaE
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `برای «${
                            $state.textInput.value
                              ? $state.textInput.value
                              : $state.apiRequest.data.properties[
                                  $ctx.params.id - 1
                                ].property_name
                          }» یه عکس بذار`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lNYcy
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0641\u0642\u0637 \u062e\u0648\u062f\u062a \u0639\u06a9\u0633 \u0631\u0648 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc"
                      : "\u0641\u0642\u0637 \u062e\u0648\u062f\u062a \u0639\u06a9\u0633 \u0631\u0648 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Zjw2)}
                >
                  <UploadWrapper
                    data-plasmic-name={"upload"}
                    data-plasmic-override={overrides.upload}
                    accept={"image/*"}
                    className={classNames("__wab_instance", sty.upload)}
                    dragAndDropFiles={false}
                    files={[]}
                    listType={"picture"}
                    maxCount={500}
                    onFilesChange={async files => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if ($state.upload.files.length > 1) {
                                    const files = [...$state.upload.files];
                                    files[0] = files[1];
                                    files.splice(1, 1);
                                    console.log(files);
                                    return files;
                                  } else {
                                    return console.log("ok");
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    showUploadList={true}
                  >
                    {(() => {
                      try {
                        return $state.upload.files[0] != null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tVbRw,
                          "clickable"
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ye5HK)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          height={"100%"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (
                                "data:image/png;base64," +
                                $state.upload.files[0].contents
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/website_starter/images/group698Png.png",
                                  fullWidth: 200,
                                  fullHeight: 150,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={"100%"}
                        />
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.upload.files[0] == null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tDrvP,
                          "clickable"
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__uSijg)}
                          displayHeight={"55px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image112.svg",
                            fullWidth: 30,
                            fullHeight: 30,
                            aspectRatio: 1
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__giCpm
                          )}
                        >
                          {
                            "\u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc \u062a\u0635\u0648\u06cc\u0631"
                          }
                        </div>
                      </div>
                    ) : null}
                  </UploadWrapper>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wgAa0)}
                  >
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={
                        '<script src="https://unpkg.com/browser-image-compression@2.0.2/dist/browser-image-compression.js"></script>\r\n\r\n<div class="plasmic_default__all plasmic_default__div FirstPropertyEditTest2__freeBox__nmOuz">\r\n  <span class="ant-upload-wrapper __wab_instance FirstPropertyEditTest2__upload__scmdc css-10hmd9l">\r\n    <div class="ant-upload ant-upload-select">\r\n      <span class="ant-upload">\r\n        <input id="profile-upload" type="file" accept="image/*" style="display: none;" />\r\n        <label for="profile-upload" style="cursor: pointer;">\r\n          <div id="upload-container" style="display: flex; flex-direction: column; align-items: center; justify-content: center;">\r\n            <div class="FirstPropertyEditTest2__img__see5C __wab_img-wrapper">\r\n              <!-- <img id="preview-img" alt="" \r\n                src="https://media.rentamon.com/icon%2Fclipicon.svg"\r\n                style="width: 50px; height: 50px; object-fit: cover; border-radius: 6px;" /> -->\r\n            </div>\r\n            <div id="upload-text" style="font-size: 16px; margin-top: 4px; text-align: center;">\r\n              \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc \u062a\u0635\u0648\u06cc\u0631\r\n            </div>\r\n          </div>\r\n        </label>\r\n      </span>\r\n    </div>\r\n    <div class="ant-upload-list ant-upload-list-picture"></div>\r\n  </span>\r\n</div>\r\n\r\n<script>\r\n  const input = document.getElementById(\'profile-upload\');\r\n  const previewImg = document.getElementById(\'preview-img\');\r\n  const uploadText = document.getElementById(\'upload-text\');\r\n\r\n  input.addEventListener(\'change\', async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    const options = {\r\n      maxSizeMB: 0.3,\r\n      maxWidthOrHeight: 800,\r\n      useWebWorker: true,\r\n    };\r\n\r\n    try {\r\n      uploadText.textContent = "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc...";\r\n      uploadText.style.fontSize = "16px";\r\n\r\n      const compressedFile = await imageCompression(file, options);\r\n\r\n      const base64Full = await new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(compressedFile);\r\n      });\r\n\r\n      const base64Content = base64Full.split(\',\')[1];\r\n\r\n      // \u062a\u063a\u06cc\u06cc\u0631 \u0633\u0627\u06cc\u0632 \u062a\u0635\u0648\u06cc\u0631 \u067e\u06cc\u0634\u200c\u0646\u0645\u0627\u06cc\u0634 \u0628\u0639\u062f \u0627\u0632 \u0622\u067e\u0644\u0648\u062f\r\n      previewImg.src = base64Full;\r\n      previewImg.style.width = "200px";\r\n      previewImg.style.height = "110px";\r\n\r\n      const payload = {\r\n        property_pic: {\r\n          uid: `rc-upload-${Date.now()}-${file.name}`,\r\n          name: file.name,\r\n          size: compressedFile.size,\r\n          type: compressedFile.type,\r\n          lastModified: file.lastModified,\r\n          contents: base64Content\r\n        }\r\n      };\r\n\r\n      await fetch(\'https://gateway.rentamon.com/webhook/change_property_pic\', {\r\n        method: \'POST\',\r\n        headers: {\r\n          \'Content-Type\': \'application/json\',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      uploadText.textContent = "\u2705";\r\n      uploadText.style.color = "#0C9D61";\r\n      uploadText.style.fontSize = "16px";\r\n    } catch (error) {\r\n      console.error(\'Upload error:\', error);\r\n      uploadText.textContent = "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc!";\r\n      uploadText.style.color = "#EC2D30";\r\n      uploadText.style.fontSize = "16px";\r\n    }\r\n  });\r\n</script>\r\n'
                      }
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___9Vhve)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return undefined;
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      src={{
                        src: "/plasmic/website_starter/images/photo20240812104446Jpg.jpg",
                        fullWidth: 1280,
                        fullHeight: 721,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"newButtons2"}
                  data-plasmic-override={overrides.newButtons2}
                  className={classNames(projectcss.all, sty.newButtons2)}
                >
                  <div
                    data-plasmic-name={"next2"}
                    data-plasmic-override={overrides.next2}
                    className={classNames(
                      projectcss.all,
                      sty.next2,
                      "clickable"
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: ($state.loading = true)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["goToPanel"] = true
                        ? (() => {
                            const actionArgs = { destination: `/panel` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPanel"] != null &&
                        typeof $steps["goToPanel"] === "object" &&
                        typeof $steps["goToPanel"].then === "function"
                      ) {
                        $steps["goToPanel"] = await $steps["goToPanel"];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: ($state.loading = false)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                  >
                    {(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hI3A4)}
                        displayHeight={"37px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image140.gif",
                          fullWidth: 500,
                          fullHeight: 500,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yfjnp
                      )}
                    >
                      {"\u0630\u062e\u06cc\u0631\u0647"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"privious2"}
                    data-plasmic-override={overrides.privious2}
                    className={classNames(
                      projectcss.all,
                      sty.privious2,
                      "clickable"
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i1D7K
                      )}
                    >
                      {"\u0642\u0628\u0644"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          <div
            data-plasmic-name={"back"}
            data-plasmic-override={overrides.back}
            className={classNames(projectcss.all, sty.back)}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__dNhfj,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wvUcy
                )}
              >
                {"\u0627\u0646\u0635\u0631\u0627\u0641"}
              </div>
            </div>
            {(() => {
              try {
                return $state.propTour === true && $state.step === 2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__ewnz9)}>
                {(
                  hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : (() => {
                        try {
                          return $state.propTour === true && $state.step === 2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    data-plasmic-name={"propGuide5"}
                    data-plasmic-override={overrides.propGuide5}
                    className={classNames(projectcss.all, sty.propGuide5)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iqh9J)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aeGn
                        )}
                      >
                        {
                          "\u06cc\u0647 \u0639\u06a9\u0633 \u0647\u0645 \u0628\u0631\u0627\u06cc \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\n\u0627\u06cc\u0646 \u0639\u06a9\u0633 \u0631\u0648 \u0641\u0642\u0637 \u062e\u0648\u062f\u062a \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc"
                        }
                      </div>
                    </div>
                    {false ? (
                      <div
                        data-plasmic-name={"propGuide6"}
                        data-plasmic-override={overrides.propGuide6}
                        className={classNames(projectcss.all, sty.propGuide6)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3Am5M
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4URr
                            )}
                          >
                            {
                              "\u06cc\u0647 \u0639\u06a9\u0633 \u0628\u0627 \u062d\u062c\u0645 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f2 \u0645\u06af\u0627\u0628\u0627\u06cc\u062a \u0628\u0631\u0627\u06cc \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                            }
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : (() => {
                  try {
                    return $state.propTour === true && $state.step === 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"propGuide4"}
              data-plasmic-override={overrides.propGuide4}
              className={classNames(projectcss.all, sty.propGuide4)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___3B93)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qbYjo
                  )}
                >
                  {
                    "\u062d\u0627\u0644\u0627 \u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633\n\u0627\u06cc\u0646 \u0627\u0633\u0645 \u0631\u0648 \u0641\u0642\u0637 \u062e\u0648\u062f\u062a \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc"
                  }
                </div>
              </div>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return $state.propTour === true && $state.step === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $state.propTour === true && $state.step === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"propGuide"}
              data-plasmic-override={overrides.propGuide}
              className={classNames(projectcss.all, sty.propGuide)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mvVff)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mhreA
                  )}
                >
                  {
                    "\u0627\u0648\u0644 \u0627\u06cc\u0646\u062c\u0627 \u0628\u06af\u0648 \u0646\u0648\u0639 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0686\u06cc\u0647"
                  }
                </div>
              </div>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return $state.propTour === true && $state.step === 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : false
          ) ? (
            <div
              data-plasmic-name={"propGuide2"}
              data-plasmic-override={overrides.propGuide2}
              className={classNames(projectcss.all, sty.propGuide2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hS9Bc)}>
                {(
                  hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : (() => {
                        try {
                          return $state.step === 1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kQceh
                    )}
                  >
                    {
                      "\u062d\u0627\u0644\u0627 \u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u06a9\u0647 \u0642\u0631\u0627\u0631\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0628\u06cc\u0646\u06cc \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                    }
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return $state.propTour === true && $state.step === 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : false
          ) ? (
            <div
              data-plasmic-name={"propGuide3"}
              data-plasmic-override={overrides.propGuide3}
              className={classNames(projectcss.all, sty.propGuide3)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hmj99)}>
                {(
                  hasVariant(globalVariants, "screen", "mobile")
                    ? true
                    : (() => {
                        try {
                          return $state.step === 2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y7T9
                    )}
                  >
                    {
                      "\u06cc\u0647 \u0639\u06a9\u0633 \u0628\u0627 \u062d\u062c\u0645 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f2 \u0645\u06af\u0627\u0628\u0627\u06cc\u062a \u0628\u0631\u0627\u06cc \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                    }
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__dyIfN)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["checkPropTourCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          if (document.cookie.includes("prop_tour")) {
                            console.log("in the visit");
                            const prop_tour = getCookieValue("prop_tour");
                            if (prop_tour != null) {
                              $state.propTour = true;
                            }
                            return console.log("prop_tour:", $state.propTour);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkPropTourCookie"] != null &&
                typeof $steps["checkPropTourCookie"] === "object" &&
                typeof $steps["checkPropTourCookie"].then === "function"
              ) {
                $steps["checkPropTourCookie"] = await $steps[
                  "checkPropTourCookie"
                ];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ویرایشاقامتگاه: [
    "\u0648\u06cc\u0631\u0627\u06cc\u0634\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647",
    "apiRequest",
    "type",
    "name",
    "textInput",
    "newButtons",
    "next",
    "privious",
    "pic",
    "title",
    "imageFrame",
    "upload",
    "embedHtml",
    "newButtons2",
    "next2",
    "privious2",
    "back",
    "propGuide5",
    "propGuide6",
    "propGuide4",
    "propGuide",
    "propGuide2",
    "propGuide3",
    "clarityRntComponent",
    "faviconRntComponent",
    "sideEffect"
  ],
  apiRequest: ["apiRequest"],
  type: ["type"],
  name: ["name", "textInput", "newButtons", "next", "privious"],
  textInput: ["textInput"],
  newButtons: ["newButtons", "next", "privious"],
  next: ["next"],
  privious: ["privious"],
  pic: [
    "pic",
    "title",
    "imageFrame",
    "upload",
    "embedHtml",
    "newButtons2",
    "next2",
    "privious2"
  ],
  title: ["title"],
  imageFrame: [
    "imageFrame",
    "upload",
    "embedHtml",
    "newButtons2",
    "next2",
    "privious2"
  ],
  upload: ["upload"],
  embedHtml: ["embedHtml"],
  newButtons2: ["newButtons2", "next2", "privious2"],
  next2: ["next2"],
  privious2: ["privious2"],
  back: ["back", "propGuide5", "propGuide6"],
  propGuide5: ["propGuide5", "propGuide6"],
  propGuide6: ["propGuide6"],
  propGuide4: ["propGuide4"],
  propGuide: ["propGuide"],
  propGuide2: ["propGuide2"],
  propGuide3: ["propGuide3"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ویرایشاقامتگاه: "div";
  apiRequest: typeof ApiRequest;
  type: "div";
  name: "div";
  textInput: typeof TextInput;
  newButtons: "div";
  next: "div";
  privious: "div";
  pic: "div";
  title: "div";
  imageFrame: "div";
  upload: typeof UploadWrapper;
  embedHtml: typeof Embed;
  newButtons2: "div";
  next2: "div";
  privious2: "div";
  back: "div";
  propGuide5: "div";
  propGuide6: "div";
  propGuide4: "div";
  propGuide: "div";
  propGuide2: "div";
  propGuide3: "div";
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPropertyEdit2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPropertyEdit2__VariantsArgs;
    args?: PlasmicPropertyEdit2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPropertyEdit2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPropertyEdit2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPropertyEdit2__ArgProps,
          internalVariantPropNames: PlasmicPropertyEdit2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPropertyEdit2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (
    nodeName ===
    "\u0648\u06cc\u0631\u0627\u06cc\u0634\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
  ) {
    func.displayName = "PlasmicPropertyEdit2";
  } else {
    func.displayName = `PlasmicPropertyEdit2.${nodeName}`;
  }
  return func;
}

export const PlasmicPropertyEdit2 = Object.assign(
  // Top-level PlasmicPropertyEdit2 renders the root element
  makeNodeComponent(
    "\u0648\u06cc\u0631\u0627\u06cc\u0634\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
  ),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    type: makeNodeComponent("type"),
    _name: makeNodeComponent("name"),
    textInput: makeNodeComponent("textInput"),
    newButtons: makeNodeComponent("newButtons"),
    next: makeNodeComponent("next"),
    privious: makeNodeComponent("privious"),
    pic: makeNodeComponent("pic"),
    title: makeNodeComponent("title"),
    imageFrame: makeNodeComponent("imageFrame"),
    upload: makeNodeComponent("upload"),
    embedHtml: makeNodeComponent("embedHtml"),
    newButtons2: makeNodeComponent("newButtons2"),
    next2: makeNodeComponent("next2"),
    privious2: makeNodeComponent("privious2"),
    back: makeNodeComponent("back"),
    propGuide5: makeNodeComponent("propGuide5"),
    propGuide6: makeNodeComponent("propGuide6"),
    propGuide4: makeNodeComponent("propGuide4"),
    propGuide: makeNodeComponent("propGuide"),
    propGuide2: makeNodeComponent("propGuide2"),
    propGuide3: makeNodeComponent("propGuide3"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicPropertyEdit2
    internalVariantProps: PlasmicPropertyEdit2__VariantProps,
    internalArgProps: PlasmicPropertyEdit2__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPropertyEdit2;
/* prettier-ignore-end */
