/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: y37kcAs9RXYg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNavigationRntFooter.module.css"; // plasmic-import: y37kcAs9RXYg/css

import Icon65Icon from "./icons/PlasmicIcon__Icon65"; // plasmic-import: C7Sh85EuwDPm/icon
import Icon64Icon from "./icons/PlasmicIcon__Icon64"; // plasmic-import: tMkEMYJMQb4Q/icon
import Icon59Icon from "./icons/PlasmicIcon__Icon59"; // plasmic-import: zKz1KhV3axdj/icon
import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: P-t6G5Dmr-Fr/icon
import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: AjM0LMNvB3b9/icon
import Icon57Icon from "./icons/PlasmicIcon__Icon57"; // plasmic-import: bkD7B2qxVCwE/icon

createPlasmicElementProxy;

export type PlasmicNavigationRntFooter__VariantMembers = {};
export type PlasmicNavigationRntFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationRntFooter__VariantsArgs;
export const PlasmicNavigationRntFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationRntFooter__ArgsType = {
  navPage?: string;
  userType?: string;
};
type ArgPropType = keyof PlasmicNavigationRntFooter__ArgsType;
export const PlasmicNavigationRntFooter__ArgProps = new Array<ArgPropType>(
  "navPage",
  "userType"
);

export type PlasmicNavigationRntFooter__OverridesType = {
  navFoot?: Flex__<"div">;
  top?: Flex__<"div">;
  menu?: Flex__<"div">;
  top4?: Flex__<"div">;
  backMenu?: Flex__<"div">;
  normMenu?: Flex__<"div">;
  cal?: Flex__<"div">;
  top1?: Flex__<"div">;
  backCal?: Flex__<"div">;
  normCal?: Flex__<"div">;
  res?: Flex__<"div">;
  top2?: Flex__<"div">;
  backRes?: Flex__<"div">;
  normRes?: Flex__<"div">;
  props?: Flex__<"div">;
  top3?: Flex__<"div">;
  backProps?: Flex__<"div">;
  normProps?: Flex__<"div">;
};

export interface DefaultNavigationRntFooterProps {
  navPage?: string;
  userType?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigationRntFooter__RenderFunc(props: {
  variants: PlasmicNavigationRntFooter__VariantsArgs;
  args: PlasmicNavigationRntFooter__ArgsType;
  overrides: PlasmicNavigationRntFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
      <div
        data-plasmic-name={"navFoot"}
        data-plasmic-override={overrides.navFoot}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.navFoot,
          "fix"
        )}
      >
        <div
          data-plasmic-name={"top"}
          data-plasmic-override={overrides.top}
          className={classNames(projectcss.all, sty.top)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            hasGap={true}
            className={classNames(projectcss.all, sty.menu)}
            onClick={async event => {
              const $steps = {};

              $steps["goToتالار"] =
                $props.navPage != "menu"
                  ? (() => {
                      const actionArgs = { destination: `/menu` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToتالار"] != null &&
                typeof $steps["goToتالار"] === "object" &&
                typeof $steps["goToتالار"].then === "function"
              ) {
                $steps["goToتالار"] = await $steps["goToتالار"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "smallMobile")
                ? (() => {
                    try {
                      return $props.navPage == "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top4"}
                data-plasmic-override={overrides.top4}
                className={classNames(projectcss.all, sty.top4)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"backMenu"}
                  data-plasmic-override={overrides.backMenu}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.backMenu)}
                >
                  <Icon65Icon
                    className={classNames(projectcss.all, sty.svg___6PDfU)}
                    role={"img"}
                  />
                </Stack__>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "smallMobile")
                ? (() => {
                    try {
                      return $props.navPage !== "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"normMenu"}
                data-plasmic-override={overrides.normMenu}
                hasGap={true}
                className={classNames(projectcss.all, sty.normMenu)}
              >
                <Icon64Icon
                  className={classNames(projectcss.all, sty.svg__y8AJf)}
                  role={"img"}
                />
              </Stack__>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__n9Wh1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7A8Zo
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u062a\u0627\u0644\u0627\u0631"
                  : "\u062a\u0627\u0644\u0627\u0631"}
              </div>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"cal"}
            data-plasmic-override={overrides.cal}
            className={classNames(projectcss.all, sty.cal)}
            onClick={async event => {
              const $steps = {};

              $steps["goToLiteCalendar"] =
                $props.userType == "2"
                  ? (() => {
                      const actionArgs = { destination: `/calendar` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToLiteCalendar"] != null &&
                typeof $steps["goToLiteCalendar"] === "object" &&
                typeof $steps["goToLiteCalendar"].then === "function"
              ) {
                $steps["goToLiteCalendar"] = await $steps["goToLiteCalendar"];
              }

              $steps["goToProCalendar"] =
                $props.userType == "1"
                  ? (() => {
                      const actionArgs = { destination: `/panel` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToProCalendar"] != null &&
                typeof $steps["goToProCalendar"] === "object" &&
                typeof $steps["goToProCalendar"].then === "function"
              ) {
                $steps["goToProCalendar"] = await $steps["goToProCalendar"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return console.log("$props.userType", $props.userType);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction"] =
                $props.userType == null
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://api-v2.rentamon.com/api/is_user_old"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["goToPanelCalendar"] =
                $steps.invokeGlobalAction.data.flag == 1 &&
                $props.navPage != "calendar" &&
                $props.userType != null
                  ? (() => {
                      const actionArgs = { destination: `/panel` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToPanelCalendar"] != null &&
                typeof $steps["goToPanelCalendar"] === "object" &&
                typeof $steps["goToPanelCalendar"].then === "function"
              ) {
                $steps["goToPanelCalendar"] = await $steps["goToPanelCalendar"];
              }

              $steps["goToLitePanel"] =
                $steps.invokeGlobalAction.data.flag == 2 &&
                $props.userType != null &&
                $props.navPage != "calendar"
                  ? (() => {
                      const actionArgs = { destination: `/calendar` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToLitePanel"] != null &&
                typeof $steps["goToLitePanel"] === "object" &&
                typeof $steps["goToLitePanel"].then === "function"
              ) {
                $steps["goToLitePanel"] = await $steps["goToLitePanel"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "calendar";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top1"}
                data-plasmic-override={overrides.top1}
                className={classNames(projectcss.all, sty.top1)}
              >
                <div
                  data-plasmic-name={"backCal"}
                  data-plasmic-override={overrides.backCal}
                  className={classNames(projectcss.all, sty.backCal)}
                >
                  <Icon59Icon
                    className={classNames(projectcss.all, sty.svg___5FnM)}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "calendar";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"normCal"}
                data-plasmic-override={overrides.normCal}
                className={classNames(projectcss.all, sty.normCal)}
              >
                <Icon52Icon
                  className={classNames(projectcss.all, sty.svg__aZ9Q4)}
                  role={"img"}
                />
              </div>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ubiag)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lJohS
                )}
              >
                {"\u062a\u0642\u0648\u06cc\u0645"}
              </div>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"res"}
            data-plasmic-override={overrides.res}
            hasGap={true}
            className={classNames(projectcss.all, sty.res, "side_bar_border")}
            onClick={async event => {
              const $steps = {};

              $steps["goToReservations"] =
                $props.navPage != "reservations"
                  ? (() => {
                      const actionArgs = { destination: `/reservations` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToReservations"] != null &&
                typeof $steps["goToReservations"] === "object" &&
                typeof $steps["goToReservations"].then === "function"
              ) {
                $steps["goToReservations"] = await $steps["goToReservations"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "reservations";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top2"}
                data-plasmic-override={overrides.top2}
                className={classNames(projectcss.all, sty.top2)}
              >
                <div
                  data-plasmic-name={"backRes"}
                  data-plasmic-override={overrides.backRes}
                  className={classNames(projectcss.all, sty.backRes)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___2MPaI)}
                    displayHeight={"22px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"28px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image117.svg",
                      fullWidth: 23,
                      fullHeight: 19,
                      aspectRatio: 1.210526
                    }}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "reservations";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"normRes"}
                data-plasmic-override={overrides.normRes}
                hasGap={true}
                className={classNames(projectcss.all, sty.normRes)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jYzcK)}
                  displayHeight={"24px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"30px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image119.svg",
                    fullWidth: 23,
                    fullHeight: 19,
                    aspectRatio: 1.210526
                  }}
                />
              </Stack__>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__e0Sqm)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4RjZj
                )}
              >
                {"\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"props"}
            data-plasmic-override={overrides.props}
            hasGap={true}
            className={classNames(projectcss.all, sty.props)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] =
                $props.navPage != "properties"
                  ? (() => {
                      const actionArgs = { destination: `/properties` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "properties";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top3"}
                data-plasmic-override={overrides.top3}
                className={classNames(projectcss.all, sty.top3)}
              >
                <div
                  data-plasmic-name={"backProps"}
                  data-plasmic-override={overrides.backProps}
                  className={classNames(projectcss.all, sty.backProps)}
                >
                  <Icon58Icon
                    className={classNames(projectcss.all, sty.svg__cpVuT)}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "properties";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"normProps"}
                data-plasmic-override={overrides.normProps}
                hasGap={true}
                className={classNames(projectcss.all, sty.normProps)}
              >
                <Icon57Icon
                  className={classNames(projectcss.all, sty.svg___3Yheu)}
                  role={"img"}
                />
              </Stack__>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jY1W2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ybLty
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                  : "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u200c\u0647\u0627"}
              </div>
            </Stack__>
          </Stack__>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navFoot: [
    "navFoot",
    "top",
    "menu",
    "top4",
    "backMenu",
    "normMenu",
    "cal",
    "top1",
    "backCal",
    "normCal",
    "res",
    "top2",
    "backRes",
    "normRes",
    "props",
    "top3",
    "backProps",
    "normProps"
  ],
  top: [
    "top",
    "menu",
    "top4",
    "backMenu",
    "normMenu",
    "cal",
    "top1",
    "backCal",
    "normCal",
    "res",
    "top2",
    "backRes",
    "normRes",
    "props",
    "top3",
    "backProps",
    "normProps"
  ],
  menu: ["menu", "top4", "backMenu", "normMenu"],
  top4: ["top4", "backMenu"],
  backMenu: ["backMenu"],
  normMenu: ["normMenu"],
  cal: ["cal", "top1", "backCal", "normCal"],
  top1: ["top1", "backCal"],
  backCal: ["backCal"],
  normCal: ["normCal"],
  res: ["res", "top2", "backRes", "normRes"],
  top2: ["top2", "backRes"],
  backRes: ["backRes"],
  normRes: ["normRes"],
  props: ["props", "top3", "backProps", "normProps"],
  top3: ["top3", "backProps"],
  backProps: ["backProps"],
  normProps: ["normProps"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navFoot: "div";
  top: "div";
  menu: "div";
  top4: "div";
  backMenu: "div";
  normMenu: "div";
  cal: "div";
  top1: "div";
  backCal: "div";
  normCal: "div";
  res: "div";
  top2: "div";
  backRes: "div";
  normRes: "div";
  props: "div";
  top3: "div";
  backProps: "div";
  normProps: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationRntFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationRntFooter__VariantsArgs;
    args?: PlasmicNavigationRntFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationRntFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationRntFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationRntFooter__ArgProps,
          internalVariantPropNames: PlasmicNavigationRntFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigationRntFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navFoot") {
    func.displayName = "PlasmicNavigationRntFooter";
  } else {
    func.displayName = `PlasmicNavigationRntFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationRntFooter = Object.assign(
  // Top-level PlasmicNavigationRntFooter renders the root element
  makeNodeComponent("navFoot"),
  {
    // Helper components rendering sub-elements
    top: makeNodeComponent("top"),
    menu: makeNodeComponent("menu"),
    top4: makeNodeComponent("top4"),
    backMenu: makeNodeComponent("backMenu"),
    normMenu: makeNodeComponent("normMenu"),
    cal: makeNodeComponent("cal"),
    top1: makeNodeComponent("top1"),
    backCal: makeNodeComponent("backCal"),
    normCal: makeNodeComponent("normCal"),
    res: makeNodeComponent("res"),
    top2: makeNodeComponent("top2"),
    backRes: makeNodeComponent("backRes"),
    normRes: makeNodeComponent("normRes"),
    props: makeNodeComponent("props"),
    top3: makeNodeComponent("top3"),
    backProps: makeNodeComponent("backProps"),
    normProps: makeNodeComponent("normProps"),

    // Metadata about props expected for PlasmicNavigationRntFooter
    internalVariantProps: PlasmicNavigationRntFooter__VariantProps,
    internalArgProps: PlasmicNavigationRntFooter__ArgProps
  }
);

export default PlasmicNavigationRntFooter;
/* prettier-ignore-end */
