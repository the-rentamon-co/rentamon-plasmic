/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: y37kcAs9RXYg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNavigationRntFooter.module.css"; // plasmic-import: y37kcAs9RXYg/css

import Icon59Icon from "./icons/PlasmicIcon__Icon59"; // plasmic-import: zKz1KhV3axdj/icon
import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: P-t6G5Dmr-Fr/icon
import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: AjM0LMNvB3b9/icon
import Icon57Icon from "./icons/PlasmicIcon__Icon57"; // plasmic-import: bkD7B2qxVCwE/icon
import Icon60Icon from "./icons/PlasmicIcon__Icon60"; // plasmic-import: b0lwc3XVPJOU/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: EUsJ3MtRCJEN/icon

createPlasmicElementProxy;

export type PlasmicNavigationRntFooter__VariantMembers = {};
export type PlasmicNavigationRntFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationRntFooter__VariantsArgs;
export const PlasmicNavigationRntFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationRntFooter__ArgsType = { navPage?: string };
type ArgPropType = keyof PlasmicNavigationRntFooter__ArgsType;
export const PlasmicNavigationRntFooter__ArgProps = new Array<ArgPropType>(
  "navPage"
);

export type PlasmicNavigationRntFooter__OverridesType = {
  navFoot?: Flex__<"div">;
  top?: Flex__<"div">;
  cal?: Flex__<"div">;
  top1?: Flex__<"div">;
  backCal?: Flex__<"div">;
  spacerText7?: Flex__<"div">;
  spacerText8?: Flex__<"div">;
  normCal?: Flex__<"div">;
  res?: Flex__<"div">;
  top2?: Flex__<"div">;
  backRes?: Flex__<"div">;
  spacerText5?: Flex__<"div">;
  spacerText6?: Flex__<"div">;
  normRes?: Flex__<"div">;
  props?: Flex__<"div">;
  top3?: Flex__<"div">;
  backProps?: Flex__<"div">;
  spacerText3?: Flex__<"div">;
  spacerText4?: Flex__<"div">;
  normProps?: Flex__<"div">;
  sett?: Flex__<"div">;
  backSett?: Flex__<"div">;
  spacerText2?: Flex__<"div">;
  spacerText?: Flex__<"div">;
  normSett?: Flex__<"div">;
  bot?: Flex__<"div">;
};

export interface DefaultNavigationRntFooterProps {
  navPage?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigationRntFooter__RenderFunc(props: {
  variants: PlasmicNavigationRntFooter__VariantsArgs;
  args: PlasmicNavigationRntFooter__ArgsType;
  overrides: PlasmicNavigationRntFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
      <div
        data-plasmic-name={"navFoot"}
        data-plasmic-override={overrides.navFoot}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.navFoot,
          "fix"
        )}
      >
        <div
          data-plasmic-name={"top"}
          data-plasmic-override={overrides.top}
          className={classNames(projectcss.all, sty.top)}
        >
          <div
            data-plasmic-name={"cal"}
            data-plasmic-override={overrides.cal}
            className={classNames(projectcss.all, sty.cal)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <div
              data-plasmic-name={"top1"}
              data-plasmic-override={overrides.top1}
              className={classNames(projectcss.all, sty.top1)}
            >
              <div
                data-plasmic-name={"backCal"}
                data-plasmic-override={overrides.backCal}
                className={classNames(projectcss.all, sty.backCal)}
              >
                <Icon59Icon
                  className={classNames(projectcss.all, sty.svg___5FnM)}
                  role={"img"}
                />
              </div>
              <div
                data-plasmic-name={"spacerText7"}
                data-plasmic-override={overrides.spacerText7}
                className={classNames(projectcss.all, sty.spacerText7)}
              >
                <div
                  data-plasmic-name={"spacerText8"}
                  data-plasmic-override={overrides.spacerText8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.spacerText8
                  )}
                >
                  {" "}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"normCal"}
              data-plasmic-override={overrides.normCal}
              className={classNames(projectcss.all, sty.normCal)}
            >
              <Icon52Icon
                className={classNames(projectcss.all, sty.svg__aZ9Q4)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"res"}
            data-plasmic-override={overrides.res}
            className={classNames(projectcss.all, sty.res)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <div
              data-plasmic-name={"top2"}
              data-plasmic-override={overrides.top2}
              className={classNames(projectcss.all, sty.top2)}
            >
              <div
                data-plasmic-name={"backRes"}
                data-plasmic-override={overrides.backRes}
                className={classNames(projectcss.all, sty.backRes)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yCGi)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image117.svg",
                    fullWidth: 23,
                    fullHeight: 19,
                    aspectRatio: 1.210526
                  }}
                />
              </div>
              <div
                data-plasmic-name={"spacerText5"}
                data-plasmic-override={overrides.spacerText5}
                className={classNames(projectcss.all, sty.spacerText5)}
              >
                <div
                  data-plasmic-name={"spacerText6"}
                  data-plasmic-override={overrides.spacerText6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.spacerText6
                  )}
                >
                  {" "}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"normRes"}
              data-plasmic-override={overrides.normRes}
              className={classNames(projectcss.all, sty.normRes)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___9QcJa)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "28px"
                    : "30px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "100%"
                    : "100%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "34px"
                    : "36px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image115.svg",
                  fullWidth: 23,
                  fullHeight: 19,
                  aspectRatio: 1.210526
                }}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"props"}
            data-plasmic-override={overrides.props}
            className={classNames(projectcss.all, sty.props)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <div
              data-plasmic-name={"top3"}
              data-plasmic-override={overrides.top3}
              className={classNames(projectcss.all, sty.top3)}
            >
              <div
                data-plasmic-name={"backProps"}
                data-plasmic-override={overrides.backProps}
                className={classNames(projectcss.all, sty.backProps)}
              >
                <Icon58Icon
                  className={classNames(projectcss.all, sty.svg__cpVuT)}
                  role={"img"}
                />
              </div>
              <div
                data-plasmic-name={"spacerText3"}
                data-plasmic-override={overrides.spacerText3}
                className={classNames(projectcss.all, sty.spacerText3)}
              >
                <div
                  data-plasmic-name={"spacerText4"}
                  data-plasmic-override={overrides.spacerText4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.spacerText4
                  )}
                >
                  {" "}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"normProps"}
              data-plasmic-override={overrides.normProps}
              className={classNames(projectcss.all, sty.normProps)}
            >
              <Icon57Icon
                className={classNames(projectcss.all, sty.svg___3Yheu)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"sett"}
            data-plasmic-override={overrides.sett}
            className={classNames(projectcss.all, sty.sett)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"backSett"}
              data-plasmic-override={overrides.backSett}
              hasGap={true}
              className={classNames(projectcss.all, sty.backSett)}
            >
              <Icon60Icon
                className={classNames(projectcss.all, sty.svg__lpWk8)}
                role={"img"}
              />
            </Stack__>
            <div
              data-plasmic-name={"spacerText2"}
              data-plasmic-override={overrides.spacerText2}
              className={classNames(projectcss.all, sty.spacerText2)}
            >
              <div
                data-plasmic-name={"spacerText"}
                data-plasmic-override={overrides.spacerText}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.spacerText
                )}
              >
                {" "}
              </div>
            </div>
            <div
              data-plasmic-name={"normSett"}
              data-plasmic-override={overrides.normSett}
              className={classNames(projectcss.all, sty.normSett)}
            >
              <Icon48Icon
                className={classNames(projectcss.all, sty.svg__hDEeU)}
                role={"img"}
              />
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"bot"}
          data-plasmic-override={overrides.bot}
          className={classNames(projectcss.all, sty.bot)}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__bjtom)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPanelCalendar"] = true
                ? (() => {
                    const actionArgs = { destination: `/panel` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPanelCalendar"] != null &&
                typeof $steps["goToPanelCalendar"] === "object" &&
                typeof $steps["goToPanelCalendar"].then === "function"
              ) {
                $steps["goToPanelCalendar"] = await $steps["goToPanelCalendar"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ubiag)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lJohS
                )}
              >
                {"\u062a\u0642\u0648\u06cc\u0645"}
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___6SisB)}
            onClick={async event => {
              const $steps = {};

              $steps["goToReservations"] = true
                ? (() => {
                    const actionArgs = { destination: `/reservations` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToReservations"] != null &&
                typeof $steps["goToReservations"] === "object" &&
                typeof $steps["goToReservations"].then === "function"
              ) {
                $steps["goToReservations"] = await $steps["goToReservations"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__e0Sqm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4RjZj
                )}
              >
                {"\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___7Zx5B)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jY1W2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ybLty
                )}
              >
                {
                  "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u200c\u0647\u0627"
                }
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__jBF1)}
            onClick={async event => {
              const $steps = {};

              $steps["goToSettings"] = true
                ? (() => {
                    const actionArgs = { destination: `/settings` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToSettings"] != null &&
                typeof $steps["goToSettings"] === "object" &&
                typeof $steps["goToSettings"].then === "function"
              ) {
                $steps["goToSettings"] = await $steps["goToSettings"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__n9Wh1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7A8Zo
                )}
              >
                {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
              </div>
            </div>
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navFoot: [
    "navFoot",
    "top",
    "cal",
    "top1",
    "backCal",
    "spacerText7",
    "spacerText8",
    "normCal",
    "res",
    "top2",
    "backRes",
    "spacerText5",
    "spacerText6",
    "normRes",
    "props",
    "top3",
    "backProps",
    "spacerText3",
    "spacerText4",
    "normProps",
    "sett",
    "backSett",
    "spacerText2",
    "spacerText",
    "normSett",
    "bot"
  ],
  top: [
    "top",
    "cal",
    "top1",
    "backCal",
    "spacerText7",
    "spacerText8",
    "normCal",
    "res",
    "top2",
    "backRes",
    "spacerText5",
    "spacerText6",
    "normRes",
    "props",
    "top3",
    "backProps",
    "spacerText3",
    "spacerText4",
    "normProps",
    "sett",
    "backSett",
    "spacerText2",
    "spacerText",
    "normSett"
  ],
  cal: ["cal", "top1", "backCal", "spacerText7", "spacerText8", "normCal"],
  top1: ["top1", "backCal", "spacerText7", "spacerText8"],
  backCal: ["backCal"],
  spacerText7: ["spacerText7", "spacerText8"],
  spacerText8: ["spacerText8"],
  normCal: ["normCal"],
  res: ["res", "top2", "backRes", "spacerText5", "spacerText6", "normRes"],
  top2: ["top2", "backRes", "spacerText5", "spacerText6"],
  backRes: ["backRes"],
  spacerText5: ["spacerText5", "spacerText6"],
  spacerText6: ["spacerText6"],
  normRes: ["normRes"],
  props: [
    "props",
    "top3",
    "backProps",
    "spacerText3",
    "spacerText4",
    "normProps"
  ],
  top3: ["top3", "backProps", "spacerText3", "spacerText4"],
  backProps: ["backProps"],
  spacerText3: ["spacerText3", "spacerText4"],
  spacerText4: ["spacerText4"],
  normProps: ["normProps"],
  sett: ["sett", "backSett", "spacerText2", "spacerText", "normSett"],
  backSett: ["backSett"],
  spacerText2: ["spacerText2", "spacerText"],
  spacerText: ["spacerText"],
  normSett: ["normSett"],
  bot: ["bot"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navFoot: "div";
  top: "div";
  cal: "div";
  top1: "div";
  backCal: "div";
  spacerText7: "div";
  spacerText8: "div";
  normCal: "div";
  res: "div";
  top2: "div";
  backRes: "div";
  spacerText5: "div";
  spacerText6: "div";
  normRes: "div";
  props: "div";
  top3: "div";
  backProps: "div";
  spacerText3: "div";
  spacerText4: "div";
  normProps: "div";
  sett: "div";
  backSett: "div";
  spacerText2: "div";
  spacerText: "div";
  normSett: "div";
  bot: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationRntFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationRntFooter__VariantsArgs;
    args?: PlasmicNavigationRntFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationRntFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationRntFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationRntFooter__ArgProps,
          internalVariantPropNames: PlasmicNavigationRntFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigationRntFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navFoot") {
    func.displayName = "PlasmicNavigationRntFooter";
  } else {
    func.displayName = `PlasmicNavigationRntFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationRntFooter = Object.assign(
  // Top-level PlasmicNavigationRntFooter renders the root element
  makeNodeComponent("navFoot"),
  {
    // Helper components rendering sub-elements
    top: makeNodeComponent("top"),
    cal: makeNodeComponent("cal"),
    top1: makeNodeComponent("top1"),
    backCal: makeNodeComponent("backCal"),
    spacerText7: makeNodeComponent("spacerText7"),
    spacerText8: makeNodeComponent("spacerText8"),
    normCal: makeNodeComponent("normCal"),
    res: makeNodeComponent("res"),
    top2: makeNodeComponent("top2"),
    backRes: makeNodeComponent("backRes"),
    spacerText5: makeNodeComponent("spacerText5"),
    spacerText6: makeNodeComponent("spacerText6"),
    normRes: makeNodeComponent("normRes"),
    props: makeNodeComponent("props"),
    top3: makeNodeComponent("top3"),
    backProps: makeNodeComponent("backProps"),
    spacerText3: makeNodeComponent("spacerText3"),
    spacerText4: makeNodeComponent("spacerText4"),
    normProps: makeNodeComponent("normProps"),
    sett: makeNodeComponent("sett"),
    backSett: makeNodeComponent("backSett"),
    spacerText2: makeNodeComponent("spacerText2"),
    spacerText: makeNodeComponent("spacerText"),
    normSett: makeNodeComponent("normSett"),
    bot: makeNodeComponent("bot"),

    // Metadata about props expected for PlasmicNavigationRntFooter
    internalVariantProps: PlasmicNavigationRntFooter__VariantProps,
    internalArgProps: PlasmicNavigationRntFooter__ArgProps
  }
);

export default PlasmicNavigationRntFooter;
/* prettier-ignore-end */
