/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: y37kcAs9RXYg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNavigationRntFooter.module.css"; // plasmic-import: y37kcAs9RXYg/css

import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: P-t6G5Dmr-Fr/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: IFHAnQhrCbSe/icon

createPlasmicElementProxy;

export type PlasmicNavigationRntFooter__VariantMembers = {};
export type PlasmicNavigationRntFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationRntFooter__VariantsArgs;
export const PlasmicNavigationRntFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationRntFooter__ArgsType = {};
type ArgPropType = keyof PlasmicNavigationRntFooter__ArgsType;
export const PlasmicNavigationRntFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigationRntFooter__OverridesType = {
  navFoot?: Flex__<"div">;
  top?: Flex__<"div">;
  backCal?: Flex__<"div">;
  backRes?: Flex__<"div">;
  backProp?: Flex__<"div">;
  backSett?: Flex__<"div">;
  bot?: Flex__<"div">;
};

export interface DefaultNavigationRntFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigationRntFooter__RenderFunc(props: {
  variants: PlasmicNavigationRntFooter__VariantsArgs;
  args: PlasmicNavigationRntFooter__ArgsType;
  overrides: PlasmicNavigationRntFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
      <div
        data-plasmic-name={"navFoot"}
        data-plasmic-override={overrides.navFoot}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.navFoot,
          "fix"
        )}
      >
        <div
          data-plasmic-name={"top"}
          data-plasmic-override={overrides.top}
          className={classNames(projectcss.all, sty.top)}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__p6Kta)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPanelCalendar"] = true
                ? (() => {
                    const actionArgs = { destination: `/panel` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPanelCalendar"] != null &&
                typeof $steps["goToPanelCalendar"] === "object" &&
                typeof $steps["goToPanelCalendar"].then === "function"
              ) {
                $steps["goToPanelCalendar"] = await $steps["goToPanelCalendar"];
              }
            }}
          >
            <div
              data-plasmic-name={"backCal"}
              data-plasmic-override={overrides.backCal}
              className={classNames(projectcss.all, sty.backCal)}
            >
              <Icon52Icon
                className={classNames(projectcss.all, sty.svg___4Q6Ig)}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__vTYhv)}
            onClick={async event => {
              const $steps = {};

              $steps["goToReservations"] = true
                ? (() => {
                    const actionArgs = { destination: `/reservations` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToReservations"] != null &&
                typeof $steps["goToReservations"] === "object" &&
                typeof $steps["goToReservations"].then === "function"
              ) {
                $steps["goToReservations"] = await $steps["goToReservations"];
              }
            }}
          >
            <div
              data-plasmic-name={"backRes"}
              data-plasmic-override={overrides.backRes}
              className={classNames(projectcss.all, sty.backRes)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__j1Ww8)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "28px"
                    : "30px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "100%"
                    : "100%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "34px"
                    : "36px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image115.svg",
                  fullWidth: 23,
                  fullHeight: 19,
                  aspectRatio: 1.210526
                }}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__iITk)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <div
              data-plasmic-name={"backProp"}
              data-plasmic-override={overrides.backProp}
              className={classNames(projectcss.all, sty.backProp)}
            >
              <Icon55Icon
                className={classNames(projectcss.all, sty.svg__i3RY)}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__kyO1L)}
            onClick={async event => {
              const $steps = {};

              $steps["goToSettings"] = true
                ? (() => {
                    const actionArgs = { destination: `/settings` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToSettings"] != null &&
                typeof $steps["goToSettings"] === "object" &&
                typeof $steps["goToSettings"].then === "function"
              ) {
                $steps["goToSettings"] = await $steps["goToSettings"];
              }
            }}
          >
            <div
              data-plasmic-name={"backSett"}
              data-plasmic-override={overrides.backSett}
              className={classNames(projectcss.all, sty.backSett)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jFrG)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "28px"
                    : "30px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "100%"
                    : "100%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "34px"
                    : "36px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image116.svg",
                  fullWidth: 28,
                  fullHeight: 28,
                  aspectRatio: 1
                }}
              />
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"bot"}
          data-plasmic-override={overrides.bot}
          className={classNames(projectcss.all, sty.bot)}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__bjtom)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPanelCalendar"] = true
                ? (() => {
                    const actionArgs = { destination: `/panel` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPanelCalendar"] != null &&
                typeof $steps["goToPanelCalendar"] === "object" &&
                typeof $steps["goToPanelCalendar"].then === "function"
              ) {
                $steps["goToPanelCalendar"] = await $steps["goToPanelCalendar"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ubiag)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lJohS
                )}
              >
                {"\u062a\u0642\u0648\u06cc\u0645"}
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___6SisB)}
            onClick={async event => {
              const $steps = {};

              $steps["goToReservations"] = true
                ? (() => {
                    const actionArgs = { destination: `/reservations` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToReservations"] != null &&
                typeof $steps["goToReservations"] === "object" &&
                typeof $steps["goToReservations"].then === "function"
              ) {
                $steps["goToReservations"] = await $steps["goToReservations"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__e0Sqm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4RjZj
                )}
              >
                {"\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___7Zx5B)}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] = true
                ? (() => {
                    const actionArgs = { destination: `/properties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jY1W2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ybLty
                )}
              >
                {
                  "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u200c\u0647\u0627"
                }
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__jBF1)}
            onClick={async event => {
              const $steps = {};

              $steps["goToSettings"] = true
                ? (() => {
                    const actionArgs = { destination: `/settings` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToSettings"] != null &&
                typeof $steps["goToSettings"] === "object" &&
                typeof $steps["goToSettings"].then === "function"
              ) {
                $steps["goToSettings"] = await $steps["goToSettings"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__n9Wh1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7A8Zo
                )}
              >
                {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
              </div>
            </div>
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navFoot: [
    "navFoot",
    "top",
    "backCal",
    "backRes",
    "backProp",
    "backSett",
    "bot"
  ],
  top: ["top", "backCal", "backRes", "backProp", "backSett"],
  backCal: ["backCal"],
  backRes: ["backRes"],
  backProp: ["backProp"],
  backSett: ["backSett"],
  bot: ["bot"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navFoot: "div";
  top: "div";
  backCal: "div";
  backRes: "div";
  backProp: "div";
  backSett: "div";
  bot: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationRntFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationRntFooter__VariantsArgs;
    args?: PlasmicNavigationRntFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationRntFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigationRntFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationRntFooter__ArgProps,
          internalVariantPropNames: PlasmicNavigationRntFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigationRntFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navFoot") {
    func.displayName = "PlasmicNavigationRntFooter";
  } else {
    func.displayName = `PlasmicNavigationRntFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationRntFooter = Object.assign(
  // Top-level PlasmicNavigationRntFooter renders the root element
  makeNodeComponent("navFoot"),
  {
    // Helper components rendering sub-elements
    top: makeNodeComponent("top"),
    backCal: makeNodeComponent("backCal"),
    backRes: makeNodeComponent("backRes"),
    backProp: makeNodeComponent("backProp"),
    backSett: makeNodeComponent("backSett"),
    bot: makeNodeComponent("bot"),

    // Metadata about props expected for PlasmicNavigationRntFooter
    internalVariantProps: PlasmicNavigationRntFooter__VariantProps,
    internalArgProps: PlasmicNavigationRntFooter__ArgProps
  }
);

export default PlasmicNavigationRntFooter;
/* prettier-ignore-end */
