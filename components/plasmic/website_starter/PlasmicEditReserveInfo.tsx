/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: IxuDnIzMrMZF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Input } from "@/fragment/components/input"; // plasmic-import: fpBkcjHl6n0Y/codeComponent
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicEditReserveInfo.module.css"; // plasmic-import: IxuDnIzMrMZF/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicEditReserveInfo__VariantMembers = {};
export type PlasmicEditReserveInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditReserveInfo__VariantsArgs;
export const PlasmicEditReserveInfo__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEditReserveInfo__ArgsType = {
  isOpen?: boolean;
  localData?: boolean;
  data?: any;
  bookingId?: string;
};
type ArgPropType = keyof PlasmicEditReserveInfo__ArgsType;
export const PlasmicEditReserveInfo__ArgProps = new Array<ArgPropType>(
  "isOpen",
  "localData",
  "data",
  "bookingId"
);

export type PlasmicEditReserveInfo__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<"div">;
  title?: Flex__<"div">;
  p1?: Flex__<"div">;
  guestName?: Flex__<typeof TextInput>;
  p4?: Flex__<"div">;
  referrer?: Flex__<"div">;
  guestReferrer?: Flex__<typeof Select>;
  count2?: Flex__<"div">;
  guestCount?: Flex__<typeof AntdInputNumber>;
  p2?: Flex__<"div">;
  phoneNumber?: Flex__<typeof TextInput>;
  p3?: Flex__<"div">;
  amount2?: Flex__<typeof Input>;
  amount?: Flex__<typeof AntdInputNumber>;
  p5?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultEditReserveInfoProps {
  isOpen?: boolean;
  localData?: boolean;
  data?: any;
  bookingId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditReserveInfo__RenderFunc(props: {
  variants: PlasmicEditReserveInfo__VariantsArgs;
  args: PlasmicEditReserveInfo__ArgsType;
  overrides: PlasmicEditReserveInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isOpen: false,
          localData: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "guestName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.data.guest_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "guestReferrer.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                {
                  return (() => {
                    const map = {
                      دیوار: "divar",
                      واسطه: "Broker",
                      همکار: "colleague",
                      "مسافر قبلی": "Returning_Guest",
                      اینستاگرام: "instagram",
                      سایر: "other"
                    };
                    return map[$props.data.source] || "unknown";
                  })();
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "guestCount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                {
                  return (() => {
                    const raw = String($props.data.count || "");
                    const fa2en = {
                      "۰": "0",
                      "۱": "1",
                      "۲": "2",
                      "۳": "3",
                      "۴": "4",
                      "۵": "5",
                      "۶": "6",
                      "۷": "7",
                      "۸": "8",
                      "۹": "9"
                    };
                    const englishStr = raw
                      .replace(/[۰-۹]/g, ch => fa2en[ch])
                      .replace(/[٬,]/g, "");
                    return Number(englishStr);
                  })();
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "phoneNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.data.phone;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "amount2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                {
                  return (() => {
                    const raw = String($props.data.price || "");
                    const fa2en = {
                      "۰": "0",
                      "۱": "1",
                      "۲": "2",
                      "۳": "3",
                      "۴": "4",
                      "۵": "5",
                      "۶": "6",
                      "۷": "7",
                      "۸": "8",
                      "۹": "9"
                    };
                    const englishStr = raw
                      .replace(/[۰-۹]/g, ch => fa2en[ch])
                      .replace(/[٬,]/g, "");
                    return Number(englishStr);
                  })();
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "amount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"form"}
        data-plasmic-override={overrides.form}
        className={classNames(projectcss.all, sty.form)}
      >
        <div
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames(projectcss.all, sty.title)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nJt3A)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g32Dr
              )}
            >
              {
                "\u062b\u0628\u062a \u0645\u0634\u062e\u0635\u0627\u062a \u0631\u0632\u0631\u0648"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__slUjF)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xXx9
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      {
                        return (() => {
                          const [year, month, day] =
                            $props.data.check_in.split("/");
                          const monthNames = {
                            "۰۱": "فروردین",
                            "۰۲": "اردیبهشت",
                            "۰۳": "خرداد",
                            "۰۴": "تیر",
                            "۰۵": "مرداد",
                            "۰۶": "شهریور",
                            "۰۷": "مهر",
                            "۰۸": "آبان",
                            "۰۹": "آذر",
                            "۱۰": "دی",
                            "۱۱": "بهمن",
                            "۱۲": "اسفند"
                          };
                          const formattedDay = day.replace(/^۰/, "");
                          return `ورود:${formattedDay} ${monthNames[month]}-`;
                        })();
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0648\u0631\u0648\u062f: \u06f2\u06f1 \u0627\u0633\u0641\u0646\u062f  -";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__px26S
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      {
                        return (() => {
                          const [year, month, day] =
                            $props.data.check_out.split("/");
                          const monthNames = {
                            "۰۱": "فروردین",
                            "۰۲": "اردیبهشت",
                            "۰۳": "خرداد",
                            "۰۴": "تیر",
                            "۰۵": "مرداد",
                            "۰۶": "شهریور",
                            "۰۷": "مهر",
                            "۰۸": "آبان",
                            "۰۹": "آذر",
                            "۱۰": "دی",
                            "۱۱": "بهمن",
                            "۱۲": "اسفند"
                          };
                          const formattedDay = day.replace(/^۰/, "");
                          return `خروج:${formattedDay} ${monthNames[month]}`;
                        })();
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u062e\u0631\u0648\u062c: \u06f2\u06f3 \u0627\u0633\u0641\u0646\u062f";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"p1"}
          data-plasmic-override={overrides.p1}
          className={classNames(projectcss.all, sty.p1)}
        >
          <TextInput
            data-plasmic-name={"guestName"}
            data-plasmic-override={overrides.guestName}
            className={classNames("__wab_instance", sty.guestName)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["guestName", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={"\u0646\u0627\u0645 \u0645\u0647\u0645\u0627\u0646"}
            value={generateStateValueProp($state, ["guestName", "value"]) ?? ""}
          />
        </div>
        <div
          data-plasmic-name={"p4"}
          data-plasmic-override={overrides.p4}
          className={classNames(projectcss.all, sty.p4)}
        >
          <div
            data-plasmic-name={"referrer"}
            data-plasmic-override={overrides.referrer}
            className={classNames(projectcss.all, sty.referrer)}
          >
            <Select
              data-plasmic-name={"guestReferrer"}
              data-plasmic-override={overrides.guestReferrer}
              className={classNames("__wab_instance", sty.guestReferrer)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["guestReferrer", "value"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null, label: null },
                  { label: null, value: null },
                  { value: null, label: null }
                ];
                __composite["0"]["value"] = "divar";
                __composite["0"]["label"] = "\u062f\u06cc\u0648\u0627\u0631";
                __composite["1"]["value"] = "Broker";
                __composite["1"]["label"] = "\u0648\u0627\u0633\u0637\u0647";
                __composite["2"]["value"] = "Colleague";
                __composite["2"]["label"] = "\u0647\u0645\u06a9\u0627\u0631";
                __composite["3"]["value"] = "Returning_Guest";
                __composite["3"]["label"] =
                  "\u0645\u0633\u0627\u0641\u0631 \u0642\u0628\u0644\u06cc";
                __composite["4"]["label"] =
                  "\u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645";
                __composite["4"]["value"] = "instagram";
                __composite["5"]["value"] = "others";
                __composite["5"]["label"] = "\u0633\u0627\u06cc\u0631";
                return __composite;
              })()}
              placeholder={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qKu4W
                  )}
                >
                  {"\u0645\u0639\u0631\u0641 \u0645\u0647\u0645\u0627\u0646"}
                </div>
              }
              value={generateStateValueProp($state, ["guestReferrer", "value"])}
            />
          </div>
          <div
            data-plasmic-name={"count2"}
            data-plasmic-override={overrides.count2}
            className={classNames(projectcss.all, sty.count2)}
          >
            <AntdInputNumber
              data-plasmic-name={"guestCount"}
              data-plasmic-override={overrides.guestCount}
              className={classNames("__wab_instance", sty.guestCount)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "guestCount",
                  "value"
                ]).apply(null, eventArgs);
              }}
              placeholder={"\u0646\u0641\u0631\u0627\u062a"}
              type={"number"}
              value={generateStateValueProp($state, ["guestCount", "value"])}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"p2"}
          data-plasmic-override={overrides.p2}
          className={classNames(projectcss.all, sty.p2)}
        >
          <TextInput
            data-plasmic-name={"phoneNumber"}
            data-plasmic-override={overrides.phoneNumber}
            className={classNames("__wab_instance", sty.phoneNumber)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["phoneNumber", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={"\u0645\u0648\u0628\u0627\u06cc\u0644"}
            required={true}
            type={"text"}
            value={
              generateStateValueProp($state, ["phoneNumber", "value"]) ?? ""
            }
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__paWwX
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#DC2626" }}
              >
                {
                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0627\u062c\u0628\u0627\u0631\u06cc\u0633\u062a"
                }
              </span>
            </React.Fragment>
          </div>
        </div>
        <div
          data-plasmic-name={"p3"}
          data-plasmic-override={overrides.p3}
          className={classNames(projectcss.all, sty.p3)}
        >
          <Input
            data-plasmic-name={"amount2"}
            data-plasmic-override={overrides.amount2}
            className={classNames("__wab_instance", sty.amount2)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["amount2", "value"]).apply(
                null,
                eventArgs
              );
            }}
            placeholder={
              "\u0645\u0628\u0644\u063a (\u062a\u0648\u0645\u0627\u0646)"
            }
            type={"number"}
            value={generateStateValueProp($state, ["amount2", "value"])}
          />

          <AntdInputNumber
            data-plasmic-name={"amount"}
            data-plasmic-override={overrides.amount}
            className={classNames("__wab_instance", sty.amount)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["amount", "value"]).apply(
                null,
                eventArgs
              );
            }}
            placeholder={
              "\u0645\u0628\u0644\u063a (\u062a\u0648\u0645\u0627\u0646)"
            }
            type={"number"}
            value={generateStateValueProp($state, ["amount", "value"])}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wkIdZ
            )}
          >
            {""}
          </div>
        </div>
        <div
          data-plasmic-name={"p5"}
          data-plasmic-override={overrides.p5}
          className={classNames(projectcss.all, sty.p5)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__u5X5C)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/update_reservation_data",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                return {
                                  booking_id: $props.bookingId,
                                  guest_name: $state.guestName.value,
                                  count: $state.guestCount.value,
                                  amount: $state.amount2.value,
                                  source: $state.guestReferrer.value,
                                  phone_number: $state.phoneNumber.value
                                };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Bmut
                )}
              >
                {
                  "\u062b\u0628\u062a \u062f\u0631 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"
                }
              </div>
            </Button>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "title",
    "p1",
    "guestName",
    "p4",
    "referrer",
    "guestReferrer",
    "count2",
    "guestCount",
    "p2",
    "phoneNumber",
    "p3",
    "amount2",
    "amount",
    "p5",
    "button"
  ],
  form: [
    "form",
    "title",
    "p1",
    "guestName",
    "p4",
    "referrer",
    "guestReferrer",
    "count2",
    "guestCount",
    "p2",
    "phoneNumber",
    "p3",
    "amount2",
    "amount",
    "p5",
    "button"
  ],
  title: ["title"],
  p1: ["p1", "guestName"],
  guestName: ["guestName"],
  p4: ["p4", "referrer", "guestReferrer", "count2", "guestCount"],
  referrer: ["referrer", "guestReferrer"],
  guestReferrer: ["guestReferrer"],
  count2: ["count2", "guestCount"],
  guestCount: ["guestCount"],
  p2: ["p2", "phoneNumber"],
  phoneNumber: ["phoneNumber"],
  p3: ["p3", "amount2", "amount"],
  amount2: ["amount2"],
  amount: ["amount"],
  p5: ["p5", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: "div";
  title: "div";
  p1: "div";
  guestName: typeof TextInput;
  p4: "div";
  referrer: "div";
  guestReferrer: typeof Select;
  count2: "div";
  guestCount: typeof AntdInputNumber;
  p2: "div";
  phoneNumber: typeof TextInput;
  p3: "div";
  amount2: typeof Input;
  amount: typeof AntdInputNumber;
  p5: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditReserveInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditReserveInfo__VariantsArgs;
    args?: PlasmicEditReserveInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditReserveInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditReserveInfo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditReserveInfo__ArgProps,
          internalVariantPropNames: PlasmicEditReserveInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditReserveInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditReserveInfo";
  } else {
    func.displayName = `PlasmicEditReserveInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicEditReserveInfo = Object.assign(
  // Top-level PlasmicEditReserveInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    title: makeNodeComponent("title"),
    p1: makeNodeComponent("p1"),
    guestName: makeNodeComponent("guestName"),
    p4: makeNodeComponent("p4"),
    referrer: makeNodeComponent("referrer"),
    guestReferrer: makeNodeComponent("guestReferrer"),
    count2: makeNodeComponent("count2"),
    guestCount: makeNodeComponent("guestCount"),
    p2: makeNodeComponent("p2"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    p3: makeNodeComponent("p3"),
    amount2: makeNodeComponent("amount2"),
    amount: makeNodeComponent("amount"),
    p5: makeNodeComponent("p5"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicEditReserveInfo
    internalVariantProps: PlasmicEditReserveInfo__VariantProps,
    internalArgProps: PlasmicEditReserveInfo__ArgProps
  }
);

export default PlasmicEditReserveInfo;
/* prettier-ignore-end */
