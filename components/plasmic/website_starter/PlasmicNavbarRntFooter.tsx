/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: y37kcAs9RXYg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNavbarRntFooter.module.css"; // plasmic-import: y37kcAs9RXYg/css

import Icon65Icon from "./icons/PlasmicIcon__Icon65"; // plasmic-import: C7Sh85EuwDPm/icon
import Icon64Icon from "./icons/PlasmicIcon__Icon64"; // plasmic-import: tMkEMYJMQb4Q/icon
import Icon59Icon from "./icons/PlasmicIcon__Icon59"; // plasmic-import: zKz1KhV3axdj/icon
import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: P-t6G5Dmr-Fr/icon
import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: AjM0LMNvB3b9/icon
import Icon57Icon from "./icons/PlasmicIcon__Icon57"; // plasmic-import: bkD7B2qxVCwE/icon

createPlasmicElementProxy;

export type PlasmicNavbarRntFooter__VariantMembers = {};
export type PlasmicNavbarRntFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbarRntFooter__VariantsArgs;
export const PlasmicNavbarRntFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavbarRntFooter__ArgsType = {
  navPage?: string;
  userType?: string;
};
type ArgPropType = keyof PlasmicNavbarRntFooter__ArgsType;
export const PlasmicNavbarRntFooter__ArgProps = new Array<ArgPropType>(
  "navPage",
  "userType"
);

export type PlasmicNavbarRntFooter__OverridesType = {
  navFoot?: Flex__<"div">;
  mainStack?: Flex__<"div">;
  menu?: Flex__<"div">;
  notifStackFixator?: Flex__<"div">;
  notifBadge?: Flex__<"div">;
  stack?: Flex__<"div">;
  top4?: Flex__<"div">;
  backMenu?: Flex__<"div">;
  normMenu?: Flex__<"div">;
  cal?: Flex__<"div">;
  top1?: Flex__<"div">;
  backCal?: Flex__<"div">;
  normCal?: Flex__<"div">;
  res?: Flex__<"div">;
  notifStackFixator3?: Flex__<"div">;
  stack3?: Flex__<"div">;
  top2?: Flex__<"div">;
  backRes?: Flex__<"div">;
  normRes?: Flex__<"div">;
  props?: Flex__<"div">;
  top3?: Flex__<"div">;
  backProps?: Flex__<"div">;
  normProps?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  checkUserPendingReserve?: Flex__<typeof ApiRequest>;
};

export interface DefaultNavbarRntFooterProps {
  navPage?: string;
  userType?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbarRntFooter__RenderFunc(props: {
  variants: PlasmicNavbarRntFooter__VariantsArgs;
  args: PlasmicNavbarRntFooter__ArgsType;
  overrides: PlasmicNavbarRntFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userType2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isNotify",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return true;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkUserPendingReserve.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkUserPendingReserve"
      },
      {
        path: "checkUserPendingReserve.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkUserPendingReserve"
      },
      {
        path: "checkUserPendingReserve.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkUserPendingReserve"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
      <div
        data-plasmic-name={"navFoot"}
        data-plasmic-override={overrides.navFoot}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.navFoot,
          "fix"
        )}
      >
        <div
          data-plasmic-name={"mainStack"}
          data-plasmic-override={overrides.mainStack}
          className={classNames(projectcss.all, sty.mainStack)}
        >
          <div
            data-plasmic-name={"menu"}
            data-plasmic-override={overrides.menu}
            className={classNames(projectcss.all, sty.menu, "clickable")}
            onClick={async event => {
              const $steps = {};

              $steps["goToتالار"] =
                $props.navPage != "menu"
                  ? (() => {
                      const actionArgs = { destination: `/menu` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToتالار"] != null &&
                typeof $steps["goToتالار"] === "object" &&
                typeof $steps["goToتالار"].then === "function"
              ) {
                $steps["goToتالار"] = await $steps["goToتالار"];
              }
            }}
          >
            <div
              data-plasmic-name={"notifStackFixator"}
              data-plasmic-override={overrides.notifStackFixator}
              className={classNames(projectcss.all, sty.notifStackFixator)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return !$state.isNotify;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  data-plasmic-name={"notifBadge"}
                  data-plasmic-override={overrides.notifBadge}
                  className={classNames(projectcss.all, sty.notifBadge)}
                />
              ) : null}
              <div
                data-plasmic-name={"stack"}
                data-plasmic-override={overrides.stack}
                className={classNames(projectcss.all, sty.stack)}
              />
            </div>
            {(
              hasVariant(globalVariants, "screen", "smallMobile")
                ? (() => {
                    try {
                      return $props.navPage == "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top4"}
                data-plasmic-override={overrides.top4}
                className={classNames(projectcss.all, sty.top4)}
              >
                <div
                  data-plasmic-name={"backMenu"}
                  data-plasmic-override={overrides.backMenu}
                  className={classNames(projectcss.all, sty.backMenu)}
                >
                  <Icon65Icon
                    className={classNames(
                      projectcss.all,
                      sty.svg___6PDfU,
                      "fadeinf"
                    )}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "smallMobile")
                ? (() => {
                    try {
                      return $props.navPage !== "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "menu";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"normMenu"}
                data-plasmic-override={overrides.normMenu}
                className={classNames(projectcss.all, sty.normMenu)}
              >
                <Icon64Icon
                  className={classNames(projectcss.all, sty.svg__y8AJf)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__n9Wh1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7A8Zo
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u062a\u0627\u0644\u0627\u0631"
                  : "\u062a\u0627\u0644\u0627\u0631"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"cal"}
            data-plasmic-override={overrides.cal}
            className={classNames(projectcss.all, sty.cal, "clickable")}
            onClick={async event => {
              const $steps = {};

              $steps["goToLiteCalendar"] =
                $state.userType2 == "2"
                  ? (() => {
                      const actionArgs = { destination: `/calendar` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToLiteCalendar"] != null &&
                typeof $steps["goToLiteCalendar"] === "object" &&
                typeof $steps["goToLiteCalendar"].then === "function"
              ) {
                $steps["goToLiteCalendar"] = await $steps["goToLiteCalendar"];
              }

              $steps["goToProCalendar"] =
                $state.userType2 == "1"
                  ? (() => {
                      const actionArgs = { destination: `/panel` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToProCalendar"] != null &&
                typeof $steps["goToProCalendar"] === "object" &&
                typeof $steps["goToProCalendar"].then === "function"
              ) {
                $steps["goToProCalendar"] = await $steps["goToProCalendar"];
              }

              $steps["runCode"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return console.log("$props.userType", $props.userType);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://api-v2.rentamon.com/api/is_user_old"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["goToPanelCalendar"] = false
                ? (() => {
                    const actionArgs = { destination: `/panel` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPanelCalendar"] != null &&
                typeof $steps["goToPanelCalendar"] === "object" &&
                typeof $steps["goToPanelCalendar"].then === "function"
              ) {
                $steps["goToPanelCalendar"] = await $steps["goToPanelCalendar"];
              }

              $steps["goToLitePanel"] = false
                ? (() => {
                    const actionArgs = { destination: `/calendar` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToLitePanel"] != null &&
                typeof $steps["goToLitePanel"] === "object" &&
                typeof $steps["goToLitePanel"].then === "function"
              ) {
                $steps["goToLitePanel"] = await $steps["goToLitePanel"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "calendar";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top1"}
                data-plasmic-override={overrides.top1}
                className={classNames(projectcss.all, sty.top1)}
              >
                <div
                  data-plasmic-name={"backCal"}
                  data-plasmic-override={overrides.backCal}
                  className={classNames(projectcss.all, sty.backCal)}
                >
                  <Icon59Icon
                    className={classNames(
                      projectcss.all,
                      sty.svg___5FnM,
                      "fadeinf"
                    )}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "calendar";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"normCal"}
                data-plasmic-override={overrides.normCal}
                className={classNames(projectcss.all, sty.normCal)}
              >
                <Icon52Icon
                  className={classNames(projectcss.all, sty.svg__aZ9Q4)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__ubiag)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lJohS
                )}
              >
                {"\u062a\u0642\u0648\u06cc\u0645"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"res"}
            data-plasmic-override={overrides.res}
            className={classNames(
              projectcss.all,
              sty.res,
              "side_bar_border clickable"
            )}
            onClick={async event => {
              const $steps = {};

              $steps["goToReservations"] =
                $props.navPage != "reservations"
                  ? (() => {
                      const actionArgs = { destination: `/reservations` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToReservations"] != null &&
                typeof $steps["goToReservations"] === "object" &&
                typeof $steps["goToReservations"].then === "function"
              ) {
                $steps["goToReservations"] = await $steps["goToReservations"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return !(
                        $state.checkUserPendingReserve.data == null ||
                        $state.checkUserPendingReserve.loading == true
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"notifStackFixator3"}
                data-plasmic-override={overrides.notifStackFixator3}
                className={classNames(projectcss.all, sty.notifStackFixator3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__to7Y
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.checkUserPendingReserve.data[0].count_id.toLocaleString(
                          "fa"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"stack3"}
                  data-plasmic-override={overrides.stack3}
                  className={classNames(projectcss.all, sty.stack3)}
                />
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "reservations";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top2"}
                data-plasmic-override={overrides.top2}
                className={classNames(projectcss.all, sty.top2)}
              >
                <div
                  data-plasmic-name={"backRes"}
                  data-plasmic-override={overrides.backRes}
                  className={classNames(projectcss.all, sty.backRes)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___2MPaI, "fadeinf")}
                    displayHeight={"22px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"28px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image117.svg",
                      fullWidth: 23,
                      fullHeight: 19,
                      aspectRatio: 1.210526
                    }}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "reservations";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"normRes"}
                data-plasmic-override={overrides.normRes}
                className={classNames(projectcss.all, sty.normRes)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jYzcK)}
                  displayHeight={"24px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"30px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image119.svg",
                    fullWidth: 23,
                    fullHeight: 19,
                    aspectRatio: 1.210526
                  }}
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__e0Sqm)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4RjZj
                )}
              >
                {"\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"props"}
            data-plasmic-override={overrides.props}
            className={classNames(
              projectcss.all,
              sty.props,
              `clickable${
                $state.isTheFirstVisit == true
                  ? "blinkBorderTourGuide clickable"
                  : "clickable"
              }`
            )}
            onClick={async event => {
              const $steps = {};

              $steps["goToProperties"] =
                $props.navPage != "properties"
                  ? (() => {
                      const actionArgs = { destination: `/properties` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToProperties"] != null &&
                typeof $steps["goToProperties"] === "object" &&
                typeof $steps["goToProperties"].then === "function"
              ) {
                $steps["goToProperties"] = await $steps["goToProperties"];
              }
            }}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage == "properties";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"top3"}
                data-plasmic-override={overrides.top3}
                className={classNames(projectcss.all, sty.top3)}
              >
                <div
                  data-plasmic-name={"backProps"}
                  data-plasmic-override={overrides.backProps}
                  className={classNames(projectcss.all, sty.backProps, ``)}
                >
                  <Icon58Icon
                    className={classNames(
                      projectcss.all,
                      sty.svg__cpVuT,
                      "fadeinf"
                    )}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $props.navPage !== "properties";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                data-plasmic-name={"normProps"}
                data-plasmic-override={overrides.normProps}
                className={classNames(projectcss.all, sty.normProps)}
              >
                <Icon57Icon
                  className={classNames(projectcss.all, sty.svg___3Yheu)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__jY1W2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ybLty
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                  : "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u200c\u0647\u0627"}
              </div>
            </div>
          </div>
        </div>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          onMount={async () => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function getCookieValue(cookieName) {
                          const cookies = document.cookie
                            .split(";")
                            .map(cookie => cookie.trim());
                          for (const cookie of cookies) {
                            const [name, value] = cookie.split("=");
                            if (name === cookieName) {
                              return value;
                            }
                          }
                          return null;
                        }
                        let vt = null;
                        const vtRaw = getCookieValue("vt");
                        if (vtRaw !== null) {
                          vt = parseInt(vtRaw, 10);
                          return ($state.userType2 = vt);
                        } else {
                          return ($state.userType2 = null);
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://gateway.rentamon.com/webhook/get_user_segment"
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["runCode2"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function setCookie(name, value, hours) {
                          let expires = "";
                          if (hours) {
                            const date = new Date();
                            date.setTime(
                              date.getTime() + hours * 60 * 60 * 1000
                            );
                            expires = "; expires=" + date.toUTCString();
                          }
                          document.cookie =
                            name + "=" + (value || "") + expires + "; path=/";
                        }
                        const flag = $steps.invokeGlobalAction.data.flag;
                        const existing = $state.userType2;
                        if (
                          typeof existing === "undefined" ||
                          existing === null
                        ) {
                          $state.userType2 = flag;
                          return setCookie("vt", flag.toString(), 0.3333);
                        } else if (parseInt(existing, 10) !== flag) {
                          $state.userType2 = flag;
                          return setCookie("vt", flag.toString(), 0.3333);
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode2"] != null &&
              typeof $steps["runCode2"] === "object" &&
              typeof $steps["runCode2"].then === "function"
            ) {
              $steps["runCode2"] = await $steps["runCode2"];
            }
          }}
        />

        <ApiRequest
          data-plasmic-name={"checkUserPendingReserve"}
          data-plasmic-override={overrides.checkUserPendingReserve}
          className={classNames("__wab_instance", sty.checkUserPendingReserve)}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "checkUserPendingReserve",
              "error"
            ]).apply(null, eventArgs);
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "checkUserPendingReserve",
              "loading"
            ]).apply(null, eventArgs);
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "checkUserPendingReserve",
              "data"
            ]).apply(null, eventArgs);
          }}
          ref={ref => {
            $refs["checkUserPendingReserve"] = ref;
          }}
          url={
            "https://gateway.rentamon.com/webhook/check_user_pending_request"
          }
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navFoot: [
    "navFoot",
    "mainStack",
    "menu",
    "notifStackFixator",
    "notifBadge",
    "stack",
    "top4",
    "backMenu",
    "normMenu",
    "cal",
    "top1",
    "backCal",
    "normCal",
    "res",
    "notifStackFixator3",
    "stack3",
    "top2",
    "backRes",
    "normRes",
    "props",
    "top3",
    "backProps",
    "normProps",
    "sideEffect",
    "checkUserPendingReserve"
  ],
  mainStack: [
    "mainStack",
    "menu",
    "notifStackFixator",
    "notifBadge",
    "stack",
    "top4",
    "backMenu",
    "normMenu",
    "cal",
    "top1",
    "backCal",
    "normCal",
    "res",
    "notifStackFixator3",
    "stack3",
    "top2",
    "backRes",
    "normRes",
    "props",
    "top3",
    "backProps",
    "normProps"
  ],
  menu: [
    "menu",
    "notifStackFixator",
    "notifBadge",
    "stack",
    "top4",
    "backMenu",
    "normMenu"
  ],
  notifStackFixator: ["notifStackFixator", "notifBadge", "stack"],
  notifBadge: ["notifBadge"],
  stack: ["stack"],
  top4: ["top4", "backMenu"],
  backMenu: ["backMenu"],
  normMenu: ["normMenu"],
  cal: ["cal", "top1", "backCal", "normCal"],
  top1: ["top1", "backCal"],
  backCal: ["backCal"],
  normCal: ["normCal"],
  res: ["res", "notifStackFixator3", "stack3", "top2", "backRes", "normRes"],
  notifStackFixator3: ["notifStackFixator3", "stack3"],
  stack3: ["stack3"],
  top2: ["top2", "backRes"],
  backRes: ["backRes"],
  normRes: ["normRes"],
  props: ["props", "top3", "backProps", "normProps"],
  top3: ["top3", "backProps"],
  backProps: ["backProps"],
  normProps: ["normProps"],
  sideEffect: ["sideEffect"],
  checkUserPendingReserve: ["checkUserPendingReserve"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navFoot: "div";
  mainStack: "div";
  menu: "div";
  notifStackFixator: "div";
  notifBadge: "div";
  stack: "div";
  top4: "div";
  backMenu: "div";
  normMenu: "div";
  cal: "div";
  top1: "div";
  backCal: "div";
  normCal: "div";
  res: "div";
  notifStackFixator3: "div";
  stack3: "div";
  top2: "div";
  backRes: "div";
  normRes: "div";
  props: "div";
  top3: "div";
  backProps: "div";
  normProps: "div";
  sideEffect: typeof SideEffect;
  checkUserPendingReserve: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarRntFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarRntFooter__VariantsArgs;
    args?: PlasmicNavbarRntFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarRntFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarRntFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbarRntFooter__ArgProps,
          internalVariantPropNames: PlasmicNavbarRntFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarRntFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navFoot") {
    func.displayName = "PlasmicNavbarRntFooter";
  } else {
    func.displayName = `PlasmicNavbarRntFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarRntFooter = Object.assign(
  // Top-level PlasmicNavbarRntFooter renders the root element
  makeNodeComponent("navFoot"),
  {
    // Helper components rendering sub-elements
    mainStack: makeNodeComponent("mainStack"),
    menu: makeNodeComponent("menu"),
    notifStackFixator: makeNodeComponent("notifStackFixator"),
    notifBadge: makeNodeComponent("notifBadge"),
    stack: makeNodeComponent("stack"),
    top4: makeNodeComponent("top4"),
    backMenu: makeNodeComponent("backMenu"),
    normMenu: makeNodeComponent("normMenu"),
    cal: makeNodeComponent("cal"),
    top1: makeNodeComponent("top1"),
    backCal: makeNodeComponent("backCal"),
    normCal: makeNodeComponent("normCal"),
    res: makeNodeComponent("res"),
    notifStackFixator3: makeNodeComponent("notifStackFixator3"),
    stack3: makeNodeComponent("stack3"),
    top2: makeNodeComponent("top2"),
    backRes: makeNodeComponent("backRes"),
    normRes: makeNodeComponent("normRes"),
    props: makeNodeComponent("props"),
    top3: makeNodeComponent("top3"),
    backProps: makeNodeComponent("backProps"),
    normProps: makeNodeComponent("normProps"),
    sideEffect: makeNodeComponent("sideEffect"),
    checkUserPendingReserve: makeNodeComponent("checkUserPendingReserve"),

    // Metadata about props expected for PlasmicNavbarRntFooter
    internalVariantProps: PlasmicNavbarRntFooter__VariantProps,
    internalArgProps: PlasmicNavbarRntFooter__ArgProps
  }
);

export default PlasmicNavbarRntFooter;
/* prettier-ignore-end */
