/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: AFCQqK02hfZM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Testimonial from "../../Testimonial"; // plasmic-import: MWmH78o8OGcS/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicYalda.module.css"; // plasmic-import: AFCQqK02hfZM/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicYalda__VariantMembers = {};
export type PlasmicYalda__VariantsArgs = {};
type VariantPropType = keyof PlasmicYalda__VariantsArgs;
export const PlasmicYalda__VariantProps = new Array<VariantPropType>();

export type PlasmicYalda__ArgsType = {};
type ArgPropType = keyof PlasmicYalda__ArgsType;
export const PlasmicYalda__ArgProps = new Array<ArgPropType>();

export type PlasmicYalda__OverridesType = {
  yalda?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  button5?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  q1?: Flex__<typeof AntdAccordionItem>;
  q2?: Flex__<typeof AntdAccordionItem>;
  q3?: Flex__<typeof AntdAccordionItem>;
  q4?: Flex__<typeof AntdAccordionItem>;
  q5?: Flex__<typeof AntdAccordionItem>;
  testimonial?: Flex__<typeof Testimonial>;
  button?: Flex__<typeof Button>;
  html?: Flex__<"div">;
};

export interface DefaultYaldaProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicYalda__RenderFunc(props: {
  variants: PlasmicYalda__VariantsArgs;
  args: PlasmicYalda__ArgsType;
  overrides: PlasmicYalda__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sur",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "surveyform",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"yalda"}
          data-plasmic-override={overrides.yalda}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.yalda
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jzgX9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__et14
              )}
            >
              {hasVariant(globalVariants, "screen", "tablet")
                ? "\u062c\u0634\u0646\u0648\u0627\u0631\u0647 \u06cc\u0644\u062f\u0627 \u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632\n\u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                : "\u062c\u0634\u0646\u0648\u0627\u0631\u0647 \u06cc\u0644\u062f\u0627 \u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"}
            </div>
          </div>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml___2HyAg)}
            code={
              "<script>\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        function convertNumbersInPage() {\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    setTimeout(convertNumbersInPage, 1000);\r\n    </script>"
            }
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lpo8D
            )}
          >
            {
              "\u062a\u062e\u0641\u06cc\u0641\u200c\u0647\u0627\u06cc \u062f\u0627\u063a\u060c \u0627\u0632 \u06f2\u06f7 \u0622\u0630\u0631 \u062a\u0627 \u06f1 \u062f\u06cc "
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jmM3K)}>
            {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nkgvk)}
                displayHeight={"12px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image35.png",
                  fullWidth: 464,
                  fullHeight: 173,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rbfT0)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__lKbt2)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__jCjcs)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__qVlXl)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pgXp8)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___8Y03M)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__z5Kq)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hBCn)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__us1Lv)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___6F9Uc)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__tja38)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rjCyl
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__vlXvJ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b6RRy
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "لطفا صبر کنید";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0644\u0638\u0641\u0627 \u0635\u0628\u0631 \u06a9\u0646\u06cc\u062f";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__pg8Dn)}
                  displayHeight={"200px"}
                  displayMaxHeight={"200px"}
                  displayMaxWidth={"50%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                  }
                />
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={
              hasVariant(globalVariants, "screen", "mobile")
                ? "https://gateway.rentamon.com/webhook/b9529eda-6650-438b-88e0-ff5ce680a9c3"
                : "https://gateway.rentamon.com/webhook/b9529eda-6650-438b-88e0-ff5ce680a9c3"
            }
          />

          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.apiRequest.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__t8Bp8)}
                key={currentIndex}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___5Eo9V)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p2Vgj)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ytbos)}
                      displayHeight={"91px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "114px"
                          : "auto"
                      }
                      height={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "120"
                          : undefined
                      }
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "tablet")
                          ? (() => {
                              try {
                                return $state.apiRequest.data[currentIndex].pic;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {
                                    src: "/plasmic/website_starter/images/offPng.png",
                                    fullWidth: 100,
                                    fullHeight: 100,
                                    aspectRatio: undefined
                                  };
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return $state.apiRequest.data[currentIndex].pic;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {
                                    src: "/plasmic/website_starter/images/offPng.png",
                                    fullWidth: 100,
                                    fullHeight: 100,
                                    aspectRatio: undefined
                                  };
                                }
                                throw e;
                              }
                            })()
                      }
                      width={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "120"
                          : undefined
                      }
                    />

                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : false
                    ) ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hAap1)}
                        displayHeight={"91px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "114px"
                            : "auto"
                        }
                        height={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "120"
                            : undefined
                        }
                        loading={"lazy"}
                        src={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return $state.apiRequest.data[currentIndex]
                                    .pic;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      src: "/plasmic/website_starter/images/offPng.png",
                                      fullWidth: 100,
                                      fullHeight: 100,
                                      aspectRatio: undefined
                                    };
                                  }
                                  throw e;
                                }
                              })()
                            : hasVariant(globalVariants, "screen", "tablet")
                              ? {
                                  src: "/plasmic/website_starter/images/_13549867Png.png",
                                  fullWidth: 256,
                                  fullHeight: 256,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/website_starter/images/_13549867Png.png",
                                  fullWidth: 256,
                                  fullHeight: 256,
                                  aspectRatio: undefined
                                }
                        }
                        width={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "120"
                            : undefined
                        }
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nqQ96)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hdmux
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.apiRequest.data[currentIndex].title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u06f3\u06f0\u066a \u062a\u062e\u0641\u06cc\u0641 \u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wqpX6
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest.data[currentIndex].desc;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest.data[currentIndex].desc;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest.data[currentIndex].desc;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4SbGy)}
                >
                  <div
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.button5
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return (window.location.href = `${$state.apiRequest.data[currentIndex].link}`);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    {hasVariant(globalVariants, "screen", "tablet") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.apiRequest.data[currentIndex].button;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0645\u0646\u0645 \u062a\u062e\u0641\u06cc\u0641 \u0645\u06cc\u200c\u062e\u0648\u0627\u0645";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.apiRequest.data[currentIndex].button;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0632\u0646 \u0628\u0631\u06cc\u0645 \u062e\u0631\u06cc\u062f";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
          <div className={classNames(projectcss.all, sty.freeBox__olNiN)} />

          <div className={classNames(projectcss.all, sty.freeBox__eVub)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sHjOf
              )}
            >
              {
                "\u0633\u0648\u0627\u0644\u0627\u062a \u0645\u062a\u062f\u0627\u0648\u0644:"
              }
            </div>
            {(() => {
              const child$Props = {
                activeKey: generateStateValueProp($state, [
                  "accordion",
                  "activePanelId"
                ]),
                bordered: true,
                className: classNames("__wab_instance", sty.accordion),
                items: (
                  <React.Fragment>
                    <AntdAccordionItem
                      data-plasmic-name={"q1"}
                      data-plasmic-override={overrides.q1}
                      className={classNames("__wab_instance", sty.q1)}
                      id={1}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s3Dcx
                          )}
                        >
                          {
                            "\u062a\u0627 \u06a9\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u062f\u0631 \u062c\u0634\u0646\u0648\u0627\u0631\u0647 \u0634\u0631\u06a9\u062a \u06a9\u0646\u0645\u061f"
                          }
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zqYmL
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "فقط تا پایان ۱ دی ماه می‌تونی این تخفیف‌ها رو دریافت کنی. ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "First Children";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      data-plasmic-name={"q2"}
                      data-plasmic-override={overrides.q2}
                      className={classNames("__wab_instance", sty.q2)}
                      id={2}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___90OvE
                          )}
                        >
                          {
                            "\u062a\u0627 \u06a9\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u00ab\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0633\u0627\u06cc\u062a \u062c\u062f\u06cc\u062f\u00bb \u0628\u062f\u0645\u061f"
                          }
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dBuKb
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "اگه تا پایان تاریخ جشنواره تخفیف رو دریافت کنی یا به پشتیبانی رنتامون اطلاع بدی، بعد از این تاریخ هم قابل استفاده است.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Second Children";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      data-plasmic-name={"q3"}
                      data-plasmic-override={overrides.q3}
                      className={classNames("__wab_instance", sty.q3)}
                      id={"3"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6HdMs
                          )}
                        >
                          {
                            "\u062a\u062e\u0641\u06cc\u0641\u200c\u0647\u0627\u06cc \u00ab\u0627\u0639\u062a\u0628\u0627\u0631 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u00bb \u062a\u0627 \u06a9\u06cc \u0645\u0639\u062a\u0628\u0631\u0647\u061f"
                          }
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__byiMj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "تا پایان جشنواره فرصت داری تا اعتبار رو دریافت کنی. اما اعتبار بعد از جشنواره هم توی کیف پولت می‌مونه.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Second Children";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      data-plasmic-name={"q4"}
                      data-plasmic-override={overrides.q4}
                      className={classNames("__wab_instance", sty.q4)}
                      id={"4"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sQvIq
                          )}
                        >
                          {
                            "\u0628\u0631\u0627\u06cc \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u200c\u0647\u200c\u0647\u0627\u0645 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f"
                          }
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dii0Q
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "کافیه به پشتیبانی رنتامون اطلاع بدی. سه‌سوته همه‌ی کارها رو واست انجام می‌دیم.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Second Children";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      data-plasmic-name={"q5"}
                      data-plasmic-override={overrides.q5}
                      className={classNames("__wab_instance", sty.q5)}
                      id={"5"}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kpjjV
                          )}
                        >
                          {
                            "\u0686\u0637\u0648\u0631 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u0645 \u0631\u0648 \u062a\u0648\u06cc \u0628\u0642\u06cc\u0647\u200c\u06cc \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u062a\u062d\u062a \u067e\u0648\u0634\u0634 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u062b\u0628\u062a \u06a9\u0646\u0645\u061f"
                          }
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ojyBl
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "به پشتیبانی رنتامون اطلاع بده تا به‌جای شما همه کارها رو انجام بدیم. و تا فعال شدن اقامتگاه شما در سایت‌های مورد نظر پیگیری می‌کنیم.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Second Children";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </AntdAccordionItem>
                  </React.Fragment>
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "activePanelId",
                    ["accordion", "activePanelId"],
                    AntdAccordion_Helpers
                  ).apply(null, eventArgs);
                }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "activePanelId",
                    plasmicStateName: "accordion.activePanelId"
                  }
                ],
                [],
                AntdAccordion_Helpers ?? {},
                child$Props
              );

              return (
                <AntdAccordion
                  data-plasmic-name={"accordion"}
                  data-plasmic-override={overrides.accordion}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <Testimonial
            data-plasmic-name={"testimonial"}
            data-plasmic-override={overrides.testimonial}
            className={classNames("__wab_instance", sty.testimonial)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pA2So
            )}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return (window.location.href = "tel:02191096227");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            {
              "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__yswi5)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href =
                            "https://www.rentamon.com/");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lP5Gb
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a"}
              </div>
            </Button>
          </div>
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              className={classNames("__wab_instance", sty.embedHtml___6BcBe)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              className={classNames("__wab_instance", sty.embedHtml__oBhY2)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  yalda: [
    "yalda",
    "apiRequest",
    "button5",
    "accordion",
    "q1",
    "q2",
    "q3",
    "q4",
    "q5",
    "testimonial",
    "button",
    "html"
  ],
  apiRequest: ["apiRequest"],
  button5: ["button5"],
  accordion: ["accordion", "q1", "q2", "q3", "q4", "q5"],
  q1: ["q1"],
  q2: ["q2"],
  q3: ["q3"],
  q4: ["q4"],
  q5: ["q5"],
  testimonial: ["testimonial"],
  button: ["button"],
  html: ["html"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  yalda: "div";
  apiRequest: typeof ApiRequest;
  button5: "div";
  accordion: typeof AntdAccordion;
  q1: typeof AntdAccordionItem;
  q2: typeof AntdAccordionItem;
  q3: typeof AntdAccordionItem;
  q4: typeof AntdAccordionItem;
  q5: typeof AntdAccordionItem;
  testimonial: typeof Testimonial;
  button: typeof Button;
  html: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicYalda__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicYalda__VariantsArgs;
    args?: PlasmicYalda__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicYalda__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicYalda__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicYalda__ArgProps,
          internalVariantPropNames: PlasmicYalda__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicYalda__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "yalda") {
    func.displayName = "PlasmicYalda";
  } else {
    func.displayName = `PlasmicYalda.${nodeName}`;
  }
  return func;
}

export const PlasmicYalda = Object.assign(
  // Top-level PlasmicYalda renders the root element
  makeNodeComponent("yalda"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    button5: makeNodeComponent("button5"),
    accordion: makeNodeComponent("accordion"),
    q1: makeNodeComponent("q1"),
    q2: makeNodeComponent("q2"),
    q3: makeNodeComponent("q3"),
    q4: makeNodeComponent("q4"),
    q5: makeNodeComponent("q5"),
    testimonial: makeNodeComponent("testimonial"),
    button: makeNodeComponent("button"),
    html: makeNodeComponent("html"),

    // Metadata about props expected for PlasmicYalda
    internalVariantProps: PlasmicYalda__VariantProps,
    internalArgProps: PlasmicYalda__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicYalda;
/* prettier-ignore-end */
