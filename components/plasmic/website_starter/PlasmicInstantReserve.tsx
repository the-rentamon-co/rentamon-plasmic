/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: qnoSvk5APDQU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { Switch } from "@/fragment/components/switch"; // plasmic-import: fYS4AeYPi-91/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import NavigationRntFooter from "../../NavigationRntFooter"; // plasmic-import: y37kcAs9RXYg/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicInstantReserve.module.css"; // plasmic-import: qnoSvk5APDQU/css

createPlasmicElementProxy;

export type PlasmicInstantReserve__VariantMembers = {};
export type PlasmicInstantReserve__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstantReserve__VariantsArgs;
export const PlasmicInstantReserve__VariantProps = new Array<VariantPropType>();

export type PlasmicInstantReserve__ArgsType = {};
type ArgPropType = keyof PlasmicInstantReserve__ArgsType;
export const PlasmicInstantReserve__ArgProps = new Array<ArgPropType>();

export type PlasmicInstantReserve__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  topContainer?: Flex__<"section">;
  topContainer2?: Flex__<"section">;
  alertIcon?: Flex__<"div">;
  alertText?: Flex__<"div">;
  alertButton?: Flex__<"div">;
  button?: Flex__<"div">;
  mainSection?: Flex__<"section">;
  properties?: Flex__<typeof ApiRequest>;
  selectProperty?: Flex__<typeof Select>;
  shabContainer?: Flex__<"div">;
  shabSwitch?: Flex__<typeof Switch>;
  otaghakContainer?: Flex__<"div">;
  otaghakSwitch?: Flex__<typeof Switch>;
  jabamaContainer?: Flex__<"div">;
  fragmentSwitch3?: Flex__<typeof Switch>;
  jajigaContainer?: Flex__<"div">;
  fragmentSwitch5?: Flex__<typeof Switch>;
  mizboonContainer?: Flex__<"div">;
  fragmentSwitch6?: Flex__<typeof Switch>;
  mihmanshoContainer?: Flex__<"div">;
  fragmentSwitch7?: Flex__<typeof Switch>;
  homsaContainer?: Flex__<"div">;
  fragmentSwitch4?: Flex__<typeof Switch>;
  desc?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  returnButton?: Flex__<"div">;
  navigationRntFooter?: Flex__<typeof NavigationRntFooter>;
  clarity?: Flex__<typeof Embed>;
};

export interface DefaultInstantReserveProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstantReserve__RenderFunc(props: {
  variants: PlasmicInstantReserve__VariantsArgs;
  args: PlasmicInstantReserve__ArgsType;
  overrides: PlasmicInstantReserve__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "shabSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.properties.data
                .find(
                  property =>
                    property.property_name === $state.selectProperty.value
                )
                .website_ids.find(website => website.website_id === 4)
                .is_instant;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "selectProperty.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.properties.data[0].property_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch3.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch4.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "properties.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "properties.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "properties.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "fragmentSwitch5.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch6.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch7.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otaghakSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.properties.data
                .find(
                  property =>
                    property.property_name === $state.selectProperty.value
                )
                .website_ids.find(website => website.website_id === 6)
                .is_instant;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "isOld",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__sWlgm)}>
              {(() => {
                try {
                  return $state.isOld == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <SideBar2
                  data-plasmic-name={"sideBar2"}
                  data-plasmic-override={overrides.sideBar2}
                  className={classNames("__wab_instance", sty.sideBar2)}
                  isOpen={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? false
                      : false
                  }
                  userData={(() => {
                    try {
                      return $state.profile2.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__okh64)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__esBa
                )}
              >
                {
                  "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc\u26a1\ufe0f"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hxCw1)}>
              <ApiRequest
                data-plasmic-name={"profile2"}
                data-plasmic-override={overrides.profile2}
                className={classNames("__wab_instance", sty.profile2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile2"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <section
            data-plasmic-name={"topContainer"}
            data-plasmic-override={overrides.topContainer}
            className={classNames(projectcss.all, sty.topContainer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qkgw
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile") ? (
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062a\u063a\u06cc\u06cc\u0631 \u062d\u0627\u0644\u062a \u0631\u0632\u0631\u0648\u0647\u0627 \u0628\u0647 \u00ab\u0622\u0646\u06cc\u00bb \u062a\u0627 "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u06f3\u06f1 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a"
                    }
                  </span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062a\u063a\u06cc\u06cc\u0631 \u062d\u0627\u0644\u062a \u0631\u0632\u0631\u0648\u0647\u0627 \u0628\u0647 \u00ab\u0622\u0646\u06cc\u00bb \u062a\u0627 \u062a\u0627\u0631\u06cc\u062e "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {
                      "\u06f3\u06f1 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a"
                    }
                  </span>
                </React.Fragment>
              )}
            </div>
          </section>
          <section
            data-plasmic-name={"topContainer2"}
            data-plasmic-override={overrides.topContainer2}
            className={classNames(projectcss.all, sty.topContainer2)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pbFP)}>
              <div
                data-plasmic-name={"alertIcon"}
                data-plasmic-override={overrides.alertIcon}
                className={classNames(projectcss.all, sty.alertIcon)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mAxyx)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "20px"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "35px"
                      : "43px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image72.svg",
                    fullWidth: 42,
                    fullHeight: 42,
                    aspectRatio: 1
                  }}
                />
              </div>
              <div
                data-plasmic-name={"alertText"}
                data-plasmic-override={overrides.alertText}
                className={classNames(projectcss.all, sty.alertText)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rnDcz
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0634\u0628 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0627\u0637\u0644\u0627\u0639 \u0628\u062f\u0647"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"alertButton"}
                data-plasmic-override={overrides.alertButton}
                className={classNames(projectcss.all, sty.alertButton)}
              >
                <div
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(projectcss.all, sty.button)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToSetting"] = true
                      ? (() => {
                          const actionArgs = { destination: `/support` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSetting"] != null &&
                      typeof $steps["goToSetting"] === "object" &&
                      typeof $steps["goToSetting"].then === "function"
                    ) {
                      $steps["goToSetting"] = await $steps["goToSetting"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mg9Jn
                    )}
                  >
                    {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
                  </div>
                </div>
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <ApiRequest
              data-plasmic-name={"properties"}
              data-plasmic-override={overrides.properties}
              className={classNames("__wab_instance", sty.properties)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xsnPs
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yosUl
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "properties",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "properties",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["properties", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["properties"] = ref;
              }}
              url={"https://gateway.rentamon.com/webhook/property-status"}
            >
              <Select
                data-plasmic-name={"selectProperty"}
                data-plasmic-override={overrides.selectProperty}
                className={classNames("__wab_instance", sty.selectProperty)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "selectProperty",
                      "value"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={(() => {
                  try {
                    return $state.properties.data.map(
                      property => property.property_name
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__strx4
                    )}
                  >
                    {"\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647.."}
                  </div>
                }
                value={generateStateValueProp($state, [
                  "selectProperty",
                  "value"
                ])}
              />

              {(() => {
                try {
                  return $state.properties.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__gWfWp)}>
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 4);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"shabContainer"}
                      data-plasmic-override={overrides.shabContainer}
                      className={classNames(projectcss.all, sty.shabContainer)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sSoSg
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__mFudq)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image.png",
                            fullWidth: 88,
                            fullHeight: 88,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jbz7
                          )}
                        >
                          {"\u0634\u0628"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"shabSwitch"}
                        data-plasmic-override={overrides.shabSwitch}
                        checked={generateStateValueProp($state, [
                          "shabSwitch",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.shabSwitch)}
                        disabled={false}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "shabSwitch",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["apiRequestForInstant"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://gateway.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $state.shabSwitch.checked
                                            ? {
                                                action: "set_instant",
                                                property_id:
                                                  $state.properties.data.find(
                                                    property =>
                                                      property.property_name ===
                                                      $state.selectProperty
                                                        .value
                                                  ).property_id
                                              }
                                            : {
                                                action: "unset_instant",
                                                property_id:
                                                  $state.properties.data.find(
                                                    property =>
                                                      property.property_name ===
                                                      $state.selectProperty
                                                        .value
                                                  ).property_id
                                              };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {};
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["apiRequestForInstant"] != null &&
                              typeof $steps["apiRequestForInstant"] ===
                                "object" &&
                              typeof $steps["apiRequestForInstant"].then ===
                                "function"
                            ) {
                              $steps["apiRequestForInstant"] = await $steps[
                                "apiRequestForInstant"
                              ];
                            }

                            $steps["turnOnSuccessToast"] =
                              $steps.apiRequestForInstant.status === 200 &&
                              $state.shabSwitch.checked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "success",
                                        "\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0634\u0628 \u0631\u0648\u0634\u0646 \u0634\u062f",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["turnOnSuccessToast"] != null &&
                              typeof $steps["turnOnSuccessToast"] ===
                                "object" &&
                              typeof $steps["turnOnSuccessToast"].then ===
                                "function"
                            ) {
                              $steps["turnOnSuccessToast"] = await $steps[
                                "turnOnSuccessToast"
                              ];
                            }

                            $steps["turnOffSuccessMessage"] =
                              $steps.apiRequestForInstant.status === 200 &&
                              !$state.shabSwitch.checked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        "\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0634\u0628 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0634\u062f",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["turnOffSuccessMessage"] != null &&
                              typeof $steps["turnOffSuccessMessage"] ===
                                "object" &&
                              typeof $steps["turnOffSuccessMessage"].then ===
                                "function"
                            ) {
                              $steps["turnOffSuccessMessage"] = await $steps[
                                "turnOffSuccessMessage"
                              ];
                            }

                            $steps["failedToast"] =
                              $steps.apiRequestForInstant.status != 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0627\u0639\u0645\u0627\u0644 \u062a\u063a\u06cc\u06cc\u0631 \u0628\u0647 \u0645\u0634\u06a9\u0644 \u062e\u0648\u0631\u062f",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["failedToast"] != null &&
                              typeof $steps["failedToast"] === "object" &&
                              typeof $steps["failedToast"].then === "function"
                            ) {
                              $steps["failedToast"] = await $steps[
                                "failedToast"
                              ];
                            }

                            $steps["updateShabSwitchChecked"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["shabSwitch", "checked"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      if (
                                        $steps.apiRequestForInstant.status ===
                                        200
                                      ) {
                                        return ($state.properties.data
                                          .find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          )
                                          .website_ids.find(
                                            website => website.website_id === 4
                                          ).is_instant =
                                          $state.shabSwitch.checked);
                                      } else {
                                        return ($state.properties.data
                                          .find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          )
                                          .website_ids.find(
                                            website => website.website_id === 4
                                          ).is_instant =
                                          !$state.shabSwitch.checked);
                                      }
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateShabSwitchChecked"] != null &&
                              typeof $steps["updateShabSwitchChecked"] ===
                                "object" &&
                              typeof $steps["updateShabSwitchChecked"].then ===
                                "function"
                            ) {
                              $steps["updateShabSwitchChecked"] = await $steps[
                                "updateShabSwitchChecked"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 6);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"otaghakContainer"}
                      data-plasmic-override={overrides.otaghakContainer}
                      className={classNames(
                        projectcss.all,
                        sty.otaghakContainer
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fMwrK
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__yrAV)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/otaghakPng.png",
                            fullWidth: 140,
                            fullHeight: 140,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__txOIf
                          )}
                        >
                          {"\u0627\u062a\u0627\u0642\u06a9"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"otaghakSwitch"}
                        data-plasmic-override={overrides.otaghakSwitch}
                        checked={generateStateValueProp($state, [
                          "otaghakSwitch",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakSwitch
                        )}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "otaghakSwitch",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["apiRequestForOtaghakInstant"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://gateway.rentamon.com/webhook/otaghak-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $state.otaghakSwitch.checked
                                            ? {
                                                action: "set_instant",
                                                property_id:
                                                  $state.properties.data.find(
                                                    property =>
                                                      property.property_name ===
                                                      $state.selectProperty
                                                        .value
                                                  ).property_id
                                              }
                                            : {
                                                action: "unset_instant",
                                                property_id:
                                                  $state.properties.data.find(
                                                    property =>
                                                      property.property_name ===
                                                      $state.selectProperty
                                                        .value
                                                  ).property_id
                                              };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      {}
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["apiRequestForOtaghakInstant"] != null &&
                              typeof $steps["apiRequestForOtaghakInstant"] ===
                                "object" &&
                              typeof $steps["apiRequestForOtaghakInstant"]
                                .then === "function"
                            ) {
                              $steps["apiRequestForOtaghakInstant"] =
                                await $steps["apiRequestForOtaghakInstant"];
                            }

                            $steps["turnOnSuccessToast"] =
                              $steps.apiRequestForOtaghakInstant.status ===
                                200 && $state.otaghakSwitch.checked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        " \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0627\u062a\u0627\u0642\u06a9 \u0631\u0648\u0634\u0646 \u0634\u062f.",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["turnOnSuccessToast"] != null &&
                              typeof $steps["turnOnSuccessToast"] ===
                                "object" &&
                              typeof $steps["turnOnSuccessToast"].then ===
                                "function"
                            ) {
                              $steps["turnOnSuccessToast"] = await $steps[
                                "turnOnSuccessToast"
                              ];
                            }

                            $steps["turnOffSuccessToast"] =
                              $steps.apiRequestForOtaghakInstant.status ===
                                200 && !$state.otaghakSwitch.checked
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        " \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0627\u062a\u0627\u0642\u06a9 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0634\u062f",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["turnOffSuccessToast"] != null &&
                              typeof $steps["turnOffSuccessToast"] ===
                                "object" &&
                              typeof $steps["turnOffSuccessToast"].then ===
                                "function"
                            ) {
                              $steps["turnOffSuccessToast"] = await $steps[
                                "turnOffSuccessToast"
                              ];
                            }

                            $steps["updateOtaghakChecked"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["otaghakSwitch", "checked"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      if (
                                        $steps.apiRequestForOtaghakInstant
                                          .status === 200
                                      ) {
                                        return ($state.properties.data
                                          .find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          )
                                          .website_ids.find(
                                            website => website.website_id === 6
                                          ).is_instant =
                                          $state.otaghakSwitch.checked);
                                      } else {
                                        return ($state.properties.data
                                          .find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          )
                                          .website_ids.find(
                                            website => website.website_id === 6
                                          ).is_instant =
                                          !$state.otaghakSwitch.checked);
                                      }
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateOtaghakChecked"] != null &&
                              typeof $steps["updateOtaghakChecked"] ===
                                "object" &&
                              typeof $steps["updateOtaghakChecked"].then ===
                                "function"
                            ) {
                              $steps["updateOtaghakChecked"] = await $steps[
                                "updateOtaghakChecked"
                              ];
                            }

                            $steps["failedToast"] =
                              $steps.apiRequestForOtaghakInstant.status != 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0627\u0639\u0645\u0627\u0644 \u062a\u063a\u06cc\u06cc\u0631 \u0628\u0647 \u0645\u0634\u06a9\u0644 \u062e\u0648\u0631\u062f",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["failedToast"] != null &&
                              typeof $steps["failedToast"] === "object" &&
                              typeof $steps["failedToast"].then === "function"
                            ) {
                              $steps["failedToast"] = await $steps[
                                "failedToast"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 2);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"jabamaContainer"}
                      data-plasmic-override={overrides.jabamaContainer}
                      className={classNames(
                        projectcss.all,
                        sty.jabamaContainer
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bG0B
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__lelMq)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/jabamaWebp.webp",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ycA87
                          )}
                        >
                          {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"fragmentSwitch3"}
                        data-plasmic-override={overrides.fragmentSwitch3}
                        checked={generateStateValueProp($state, [
                          "fragmentSwitch3",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentSwitch3
                        )}
                        disabled={true}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentSwitch3",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "IsShabInstant",
                                        $state.fragmentSwitch3.checked
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $ctx.properties.find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          ).property_id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              dates: "1403-05-30",
                                              property_id: 1,
                                              action: "unset_instant"
                                            };
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded",
                                              Authorization: `Bearer ${
                                                document.cookie
                                                  .split("; ")
                                                  .find(row =>
                                                    row.startsWith(
                                                      "usso_access_token"
                                                    )
                                                  )
                                                  .split("=")[1]
                                              }`
                                            },
                                            withCredentials: true
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 3);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"jajigaContainer"}
                      data-plasmic-override={overrides.jajigaContainer}
                      className={classNames(
                        projectcss.all,
                        sty.jajigaContainer
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hp34R
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kh6GL)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/jajigaWebp.webp",
                            fullWidth: 192,
                            fullHeight: 192,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l6SX
                          )}
                        >
                          {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"fragmentSwitch5"}
                        data-plasmic-override={overrides.fragmentSwitch5}
                        checked={generateStateValueProp($state, [
                          "fragmentSwitch5",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentSwitch5
                        )}
                        disabled={true}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentSwitch5",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "IsShabInstant",
                                        $state.fragmentSwitch5.checked
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $ctx.properties.find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          ).property_id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              dates: "1403-05-30",
                                              property_id: 1,
                                              action: "unset_instant"
                                            };
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded",
                                              Authorization: `Bearer ${
                                                document.cookie
                                                  .split("; ")
                                                  .find(row =>
                                                    row.startsWith(
                                                      "usso_access_token"
                                                    )
                                                  )
                                                  .split("=")[1]
                                              }`
                                            },
                                            withCredentials: true
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 5);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"mizboonContainer"}
                      data-plasmic-override={overrides.mizboonContainer}
                      className={classNames(
                        projectcss.all,
                        sty.mizboonContainer
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ioy5M
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__iu45T)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/mizboonPng.png",
                            fullWidth: 140,
                            fullHeight: 140,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1UJkO
                          )}
                        >
                          {"\u0645\u06cc\u0632\u0628\u0648\u0646"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"fragmentSwitch6"}
                        data-plasmic-override={overrides.fragmentSwitch6}
                        checked={generateStateValueProp($state, [
                          "fragmentSwitch6",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentSwitch6
                        )}
                        disabled={true}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentSwitch6",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "IsShabInstant",
                                        $state.fragmentSwitch6.checked
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $ctx.properties.find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          ).property_id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              dates: "1403-05-30",
                                              property_id: 1,
                                              action: "unset_instant"
                                            };
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded",
                                              Authorization: `Bearer ${
                                                document.cookie
                                                  .split("; ")
                                                  .find(row =>
                                                    row.startsWith(
                                                      "usso_access_token"
                                                    )
                                                  )
                                                  .split("=")[1]
                                              }`
                                            },
                                            withCredentials: true
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 7);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"mihmanshoContainer"}
                      data-plasmic-override={overrides.mihmanshoContainer}
                      className={classNames(
                        projectcss.all,
                        sty.mihmanshoContainer
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wmdgx
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__p9Gnf)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/mihmanshoPng.png",
                            fullWidth: 140,
                            fullHeight: 140,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pwh3K
                          )}
                        >
                          {"\u0645\u06cc\u0647\u0645\u0627\u0646\u0634\u0648"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"fragmentSwitch7"}
                        data-plasmic-override={overrides.fragmentSwitch7}
                        checked={generateStateValueProp($state, [
                          "fragmentSwitch7",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentSwitch7
                        )}
                        disabled={true}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentSwitch7",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "IsShabInstant",
                                        $state.fragmentSwitch7.checked
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $ctx.properties.find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          ).property_id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              dates: "1403-05-30",
                                              property_id: 1,
                                              action: "unset_instant"
                                            };
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded",
                                              Authorization: `Bearer ${
                                                document.cookie
                                                  .split("; ")
                                                  .find(row =>
                                                    row.startsWith(
                                                      "usso_access_token"
                                                    )
                                                  )
                                                  .split("=")[1]
                                              }`
                                            },
                                            withCredentials: true
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.properties.data
                        .find(
                          property =>
                            property.property_name ===
                            $state.selectProperty.value
                        )
                        .website_ids.some(website => website.website_id === 8);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"homsaContainer"}
                      data-plasmic-override={overrides.homsaContainer}
                      className={classNames(projectcss.all, sty.homsaContainer)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dEi8S
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__oPsp5)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/homsaWebp.webp",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wuhmp
                          )}
                        >
                          {"\u0647\u0648\u0645\u0633\u0627"}
                        </div>
                      </div>
                      <Switch
                        data-plasmic-name={"fragmentSwitch4"}
                        data-plasmic-override={overrides.fragmentSwitch4}
                        checked={generateStateValueProp($state, [
                          "fragmentSwitch4",
                          "checked"
                        ])}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentSwitch4
                        )}
                        disabled={true}
                        onCheckedChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentSwitch4",
                            "checked"
                          ]).apply(null, eventArgs);

                          (async checked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "IsShabInstant",
                                        $state.fragmentSwitch4.checked
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $ctx.properties.find(
                                            property =>
                                              property.property_name ===
                                              $state.selectProperty.value
                                          ).property_id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              dates: "1403-05-30",
                                              property_id: 1,
                                              action: "unset_instant"
                                            };
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded",
                                              Authorization: `Bearer ${
                                                document.cookie
                                                  .split("; ")
                                                  .find(row =>
                                                    row.startsWith(
                                                      "usso_access_token"
                                                    )
                                                  )
                                                  .split("=")[1]
                                              }`
                                            },
                                            withCredentials: true
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </div>
                  ) : null}
                </div>
              ) : null}
            </ApiRequest>
          </section>
          <div
            className={classNames(projectcss.all, sty.freeBox___3NzG5)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return window.history.back();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uDvHu
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FCFCFC" }}
                >
                  {
                    "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                  }
                </span>
              </React.Fragment>
            </div>
          </div>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__epNe8)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />

          <div
            data-plasmic-name={"desc"}
            data-plasmic-override={overrides.desc}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.desc
            )}
          >
            {
              "\u00ab\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc\u00bb \u0628\u0647 \u0645\u0647\u0645\u0627\u0646 \u0627\u062c\u0627\u0632\u0647 \u0645\u06cc\u062f\u0647 \u06a9\u0647 \u0628\u062f\u0648\u0646 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062a\u0627\u06cc\u06cc\u062f \u0645\u06cc\u0632\u0628\u0627\u0646\u060c \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0631\u0648 \u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647 \u0631\u0632\u0631\u0648 \u06a9\u0646\u0647. \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0628\u0627\u0639\u062b \u0628\u06cc\u0634\u062a\u0631 \u0634\u062f\u0646 \u062a\u0639\u062f\u0627\u062f \u0631\u0632\u0631\u0648\u0647\u0627\u060c \u06a9\u0627\u0647\u0634 \u0632\u0645\u0627\u0646 \u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a\u200c\u0647\u0627 \u0648 \u0628\u0627\u0644\u0627\u062a\u0631 \u0631\u0641\u062a\u0646 \u062f\u0631 \u0646\u062a\u0627\u06cc\u062c \u062c\u0633\u062a\u062c\u0648\u06cc \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0622\u06af\u0647\u06cc \u0648\u06cc\u0644\u0627 \u0645\u06cc\u200c\u0634\u0647."
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__x7Fvp)} />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml___64Fi)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["checkOldUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://api-v2.rentamon.com/api/is_user_old"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["checkOldUser"] != null &&
                typeof $steps["checkOldUser"] === "object" &&
                typeof $steps["checkOldUser"].then === "function"
              ) {
                $steps["checkOldUser"] = await $steps["checkOldUser"];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        if ($steps.checkOldUser.data.flag == 3) {
                          $state.isOld = true;
                        } else {
                          $state.isOld = false;
                        }
                        return console.log($state.isOld);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          />

          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___0QIg)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e1Gx7
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <NavigationRntFooter
            data-plasmic-name={"navigationRntFooter"}
            data-plasmic-override={overrides.navigationRntFooter}
            className={classNames("__wab_instance", sty.navigationRntFooter)}
          />

          <Embed
            data-plasmic-name={"clarity"}
            data-plasmic-override={overrides.clarity}
            className={classNames("__wab_instance", sty.clarity)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile2",
    "topContainer",
    "topContainer2",
    "alertIcon",
    "alertText",
    "alertButton",
    "button",
    "mainSection",
    "properties",
    "selectProperty",
    "shabContainer",
    "shabSwitch",
    "otaghakContainer",
    "otaghakSwitch",
    "jabamaContainer",
    "fragmentSwitch3",
    "jajigaContainer",
    "fragmentSwitch5",
    "mizboonContainer",
    "fragmentSwitch6",
    "mihmanshoContainer",
    "fragmentSwitch7",
    "homsaContainer",
    "fragmentSwitch4",
    "desc",
    "sideEffect",
    "returnButton",
    "navigationRntFooter",
    "clarity"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  topContainer: ["topContainer"],
  topContainer2: [
    "topContainer2",
    "alertIcon",
    "alertText",
    "alertButton",
    "button"
  ],
  alertIcon: ["alertIcon"],
  alertText: ["alertText"],
  alertButton: ["alertButton", "button"],
  button: ["button"],
  mainSection: [
    "mainSection",
    "properties",
    "selectProperty",
    "shabContainer",
    "shabSwitch",
    "otaghakContainer",
    "otaghakSwitch",
    "jabamaContainer",
    "fragmentSwitch3",
    "jajigaContainer",
    "fragmentSwitch5",
    "mizboonContainer",
    "fragmentSwitch6",
    "mihmanshoContainer",
    "fragmentSwitch7",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  properties: [
    "properties",
    "selectProperty",
    "shabContainer",
    "shabSwitch",
    "otaghakContainer",
    "otaghakSwitch",
    "jabamaContainer",
    "fragmentSwitch3",
    "jajigaContainer",
    "fragmentSwitch5",
    "mizboonContainer",
    "fragmentSwitch6",
    "mihmanshoContainer",
    "fragmentSwitch7",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  selectProperty: ["selectProperty"],
  shabContainer: ["shabContainer", "shabSwitch"],
  shabSwitch: ["shabSwitch"],
  otaghakContainer: ["otaghakContainer", "otaghakSwitch"],
  otaghakSwitch: ["otaghakSwitch"],
  jabamaContainer: ["jabamaContainer", "fragmentSwitch3"],
  fragmentSwitch3: ["fragmentSwitch3"],
  jajigaContainer: ["jajigaContainer", "fragmentSwitch5"],
  fragmentSwitch5: ["fragmentSwitch5"],
  mizboonContainer: ["mizboonContainer", "fragmentSwitch6"],
  fragmentSwitch6: ["fragmentSwitch6"],
  mihmanshoContainer: ["mihmanshoContainer", "fragmentSwitch7"],
  fragmentSwitch7: ["fragmentSwitch7"],
  homsaContainer: ["homsaContainer", "fragmentSwitch4"],
  fragmentSwitch4: ["fragmentSwitch4"],
  desc: ["desc"],
  sideEffect: ["sideEffect"],
  returnButton: ["returnButton"],
  navigationRntFooter: ["navigationRntFooter"],
  clarity: ["clarity"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  topContainer: "section";
  topContainer2: "section";
  alertIcon: "div";
  alertText: "div";
  alertButton: "div";
  button: "div";
  mainSection: "section";
  properties: typeof ApiRequest;
  selectProperty: typeof Select;
  shabContainer: "div";
  shabSwitch: typeof Switch;
  otaghakContainer: "div";
  otaghakSwitch: typeof Switch;
  jabamaContainer: "div";
  fragmentSwitch3: typeof Switch;
  jajigaContainer: "div";
  fragmentSwitch5: typeof Switch;
  mizboonContainer: "div";
  fragmentSwitch6: typeof Switch;
  mihmanshoContainer: "div";
  fragmentSwitch7: typeof Switch;
  homsaContainer: "div";
  fragmentSwitch4: typeof Switch;
  desc: "div";
  sideEffect: typeof SideEffect;
  returnButton: "div";
  navigationRntFooter: typeof NavigationRntFooter;
  clarity: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstantReserve__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstantReserve__VariantsArgs;
    args?: PlasmicInstantReserve__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstantReserve__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstantReserve__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstantReserve__ArgProps,
          internalVariantPropNames: PlasmicInstantReserve__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstantReserve__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstantReserve";
  } else {
    func.displayName = `PlasmicInstantReserve.${nodeName}`;
  }
  return func;
}

export const PlasmicInstantReserve = Object.assign(
  // Top-level PlasmicInstantReserve renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    topContainer: makeNodeComponent("topContainer"),
    topContainer2: makeNodeComponent("topContainer2"),
    alertIcon: makeNodeComponent("alertIcon"),
    alertText: makeNodeComponent("alertText"),
    alertButton: makeNodeComponent("alertButton"),
    button: makeNodeComponent("button"),
    mainSection: makeNodeComponent("mainSection"),
    properties: makeNodeComponent("properties"),
    selectProperty: makeNodeComponent("selectProperty"),
    shabContainer: makeNodeComponent("shabContainer"),
    shabSwitch: makeNodeComponent("shabSwitch"),
    otaghakContainer: makeNodeComponent("otaghakContainer"),
    otaghakSwitch: makeNodeComponent("otaghakSwitch"),
    jabamaContainer: makeNodeComponent("jabamaContainer"),
    fragmentSwitch3: makeNodeComponent("fragmentSwitch3"),
    jajigaContainer: makeNodeComponent("jajigaContainer"),
    fragmentSwitch5: makeNodeComponent("fragmentSwitch5"),
    mizboonContainer: makeNodeComponent("mizboonContainer"),
    fragmentSwitch6: makeNodeComponent("fragmentSwitch6"),
    mihmanshoContainer: makeNodeComponent("mihmanshoContainer"),
    fragmentSwitch7: makeNodeComponent("fragmentSwitch7"),
    homsaContainer: makeNodeComponent("homsaContainer"),
    fragmentSwitch4: makeNodeComponent("fragmentSwitch4"),
    desc: makeNodeComponent("desc"),
    sideEffect: makeNodeComponent("sideEffect"),
    returnButton: makeNodeComponent("returnButton"),
    navigationRntFooter: makeNodeComponent("navigationRntFooter"),
    clarity: makeNodeComponent("clarity"),

    // Metadata about props expected for PlasmicInstantReserve
    internalVariantProps: PlasmicInstantReserve__VariantProps,
    internalArgProps: PlasmicInstantReserve__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstantReserve;
/* prettier-ignore-end */
