/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: qnoSvk5APDQU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicInstantReserve.module.css"; // plasmic-import: qnoSvk5APDQU/css

createPlasmicElementProxy;

export type PlasmicInstantReserve__VariantMembers = {};
export type PlasmicInstantReserve__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstantReserve__VariantsArgs;
export const PlasmicInstantReserve__VariantProps = new Array<VariantPropType>();

export type PlasmicInstantReserve__ArgsType = {};
type ArgPropType = keyof PlasmicInstantReserve__ArgsType;
export const PlasmicInstantReserve__ArgProps = new Array<ArgPropType>();

export type PlasmicInstantReserve__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  topContainer?: Flex__<"section">;
  topContainer2?: Flex__<"section">;
  alertIcon?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  alertText?: Flex__<"div">;
  alertButton?: Flex__<"div">;
  button?: Flex__<"div">;
  mainSection?: Flex__<"section">;
  properties?: Flex__<typeof ApiRequest>;
  desc?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  returnButton?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultInstantReserveProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstantReserve__RenderFunc(props: {
  variants: PlasmicInstantReserve__VariantsArgs;
  args: PlasmicInstantReserve__ArgsType;
  overrides: PlasmicInstantReserve__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "properties.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "properties.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "properties.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "isOld",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__sWlgm)}>
              {(() => {
                try {
                  return $state.isOld == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <SideBar2
                  data-plasmic-name={"sideBar2"}
                  data-plasmic-override={overrides.sideBar2}
                  className={classNames("__wab_instance", sty.sideBar2)}
                  isOpen={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? false
                      : false
                  }
                  userData={(() => {
                    try {
                      return $state.profile2.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__okh64)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__esBa,
                  "fadeinf"
                )}
              >
                {
                  "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc\u26a1\ufe0f"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hxCw1)}>
              <ApiRequest
                data-plasmic-name={"profile2"}
                data-plasmic-override={overrides.profile2}
                className={classNames("__wab_instance", sty.profile2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile2"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <section
            data-plasmic-name={"topContainer"}
            data-plasmic-override={overrides.topContainer}
            className={classNames(projectcss.all, sty.topContainer, "fadeinf")}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qkgw
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile") ? (
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062a\u063a\u06cc\u06cc\u0631 \u062d\u0627\u0644\u062a \u0631\u0632\u0631\u0648\u0647\u0627 \u0628\u0647 \u00ab\u0622\u0646\u06cc\u00bb \u062a\u0627 "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u06f3\u06f1 \u062e\u0631\u062f\u0627\u062f"}
                  </span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062a\u063a\u06cc\u06cc\u0631 \u062d\u0627\u0644\u062a \u0631\u0632\u0631\u0648\u0647\u0627 \u0628\u0647 \u00ab\u0622\u0646\u06cc\u00bb \u062a\u0627 \u062a\u0627\u0631\u06cc\u062e "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u06f3\u06f1 \u0634\u0647\u0631\u06cc\u0648\u0631"}
                  </span>
                </React.Fragment>
              )}
            </div>
          </section>
          <section
            data-plasmic-name={"topContainer2"}
            data-plasmic-override={overrides.topContainer2}
            className={classNames(projectcss.all, sty.topContainer2)}
          >
            {false ? (
              <div className={classNames(projectcss.all, sty.freeBox__pbFP)}>
                <div
                  data-plasmic-name={"alertIcon"}
                  data-plasmic-override={overrides.alertIcon}
                  className={classNames(projectcss.all, sty.alertIcon)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? "100%"
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? "35px"
                        : "43px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image72.svg",
                      fullWidth: 42,
                      fullHeight: 42,
                      aspectRatio: 1
                    }}
                  />
                </div>
                <div
                  data-plasmic-name={"alertText"}
                  data-plasmic-override={overrides.alertText}
                  className={classNames(projectcss.all, sty.alertText)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rnDcz
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0628\u0647\u200c\u062f\u0644\u06cc\u0644 \u0627\u062e\u062a\u0644\u0627\u0644\u0627\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0645\u0648\u0642\u062a\u0627 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0646\u06cc\u0633\u062a."
                      : "\u0628\u0647 \u062f\u0644\u06cc\u0644 \u0627\u062e\u062a\u0644\u0627\u0644\u0627\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u060c \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0645\u0648\u0642\u062a\u0627 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0646\u06cc\u0633\u062a."}
                  </div>
                </div>
                <div
                  data-plasmic-name={"alertButton"}
                  data-plasmic-override={overrides.alertButton}
                  className={classNames(projectcss.all, sty.alertButton)}
                >
                  <div
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(projectcss.all, sty.button)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToSetting"] = true
                        ? (() => {
                            const actionArgs = { destination: `/support` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToSetting"] != null &&
                        typeof $steps["goToSetting"] === "object" &&
                        typeof $steps["goToSetting"].then === "function"
                      ) {
                        $steps["goToSetting"] = await $steps["goToSetting"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mg9Jn
                      )}
                    >
                      {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
          </section>
          {false ? (
            <section
              data-plasmic-name={"mainSection"}
              data-plasmic-override={overrides.mainSection}
              className={classNames(projectcss.all, sty.mainSection, "fadein")}
            >
              <ApiRequest
                data-plasmic-name={"properties"}
                data-plasmic-override={overrides.properties}
                children={null}
                className={classNames("__wab_instance", sty.properties)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xsnPs
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yosUl
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "properties",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "properties",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "properties",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["properties"] = ref;
                }}
                url={"https://gateway.rentamon.com/webhook/na-instant"}
              />
            </section>
          ) : null}
          <div
            className={classNames(projectcss.all, sty.freeBox___3NzG5)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return window.history.back();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uDvHu
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FCFCFC" }}
                >
                  {
                    "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                  }
                </span>
              </React.Fragment>
            </div>
          </div>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__epNe8)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__ddIf3)}>
            <div
              data-plasmic-name={"desc"}
              data-plasmic-override={overrides.desc}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.desc
              )}
            >
              {
                "\u00ab\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc\u00bb \u0628\u0647 \u0645\u0647\u0645\u0627\u0646 \u0627\u062c\u0627\u0632\u0647 \u0645\u06cc\u062f\u0647 \u06a9\u0647 \u0628\u062f\u0648\u0646 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062a\u0627\u06cc\u06cc\u062f \u0645\u06cc\u0632\u0628\u0627\u0646\u060c \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0631\u0648 \u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647 \u0631\u0632\u0631\u0648 \u06a9\u0646\u0647. \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0628\u0627\u0639\u062b \u0628\u06cc\u0634\u062a\u0631 \u0634\u062f\u0646 \u062a\u0639\u062f\u0627\u062f \u0631\u0632\u0631\u0648\u0647\u0627\u060c \u06a9\u0627\u0647\u0634 \u0632\u0645\u0627\u0646 \u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a\u200c\u0647\u0627 \u0648 \u0628\u0627\u0644\u0627\u062a\u0631 \u0631\u0641\u062a\u0646 \u062f\u0631 \u0646\u062a\u0627\u06cc\u062c \u062c\u0633\u062a\u062c\u0648\u06cc \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0622\u06af\u0647\u06cc \u0648\u06cc\u0644\u0627 \u0645\u06cc\u200c\u0634\u0647."
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__x7Fvp)} />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml___64Fi)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["checkOldUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://api-v2.rentamon.com/api/is_user_old"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["checkOldUser"] != null &&
                typeof $steps["checkOldUser"] === "object" &&
                typeof $steps["checkOldUser"].then === "function"
              ) {
                $steps["checkOldUser"] = await $steps["checkOldUser"];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        if ($steps.checkOldUser.data.flag == 3) {
                          $state.isOld = true;
                        } else {
                          $state.isOld = false;
                        }
                        return console.log($state.isOld);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          />

          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___0QIg,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e1Gx7
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            userType={(() => {
              try {
                return (() => {
                  return null;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__hf61W)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile2",
    "topContainer",
    "topContainer2",
    "alertIcon",
    "img",
    "alertText",
    "alertButton",
    "button",
    "mainSection",
    "properties",
    "desc",
    "sideEffect",
    "returnButton",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  topContainer: ["topContainer"],
  topContainer2: [
    "topContainer2",
    "alertIcon",
    "img",
    "alertText",
    "alertButton",
    "button"
  ],
  alertIcon: ["alertIcon", "img"],
  img: ["img"],
  alertText: ["alertText"],
  alertButton: ["alertButton", "button"],
  button: ["button"],
  mainSection: ["mainSection", "properties"],
  properties: ["properties"],
  desc: ["desc"],
  sideEffect: ["sideEffect"],
  returnButton: ["returnButton"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  topContainer: "section";
  topContainer2: "section";
  alertIcon: "div";
  img: typeof PlasmicImg__;
  alertText: "div";
  alertButton: "div";
  button: "div";
  mainSection: "section";
  properties: typeof ApiRequest;
  desc: "div";
  sideEffect: typeof SideEffect;
  returnButton: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstantReserve__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstantReserve__VariantsArgs;
    args?: PlasmicInstantReserve__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstantReserve__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstantReserve__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstantReserve__ArgProps,
          internalVariantPropNames: PlasmicInstantReserve__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstantReserve__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstantReserve";
  } else {
    func.displayName = `PlasmicInstantReserve.${nodeName}`;
  }
  return func;
}

export const PlasmicInstantReserve = Object.assign(
  // Top-level PlasmicInstantReserve renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    topContainer: makeNodeComponent("topContainer"),
    topContainer2: makeNodeComponent("topContainer2"),
    alertIcon: makeNodeComponent("alertIcon"),
    img: makeNodeComponent("img"),
    alertText: makeNodeComponent("alertText"),
    alertButton: makeNodeComponent("alertButton"),
    button: makeNodeComponent("button"),
    mainSection: makeNodeComponent("mainSection"),
    properties: makeNodeComponent("properties"),
    desc: makeNodeComponent("desc"),
    sideEffect: makeNodeComponent("sideEffect"),
    returnButton: makeNodeComponent("returnButton"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicInstantReserve
    internalVariantProps: PlasmicInstantReserve__VariantProps,
    internalArgProps: PlasmicInstantReserve__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstantReserve;
/* prettier-ignore-end */
