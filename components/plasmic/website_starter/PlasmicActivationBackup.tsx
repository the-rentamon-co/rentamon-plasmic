// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: ljf1ITNaB8Ae

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import Checkbox from "../../Checkbox"; // plasmic-import: kNwK3iA1B39P/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicActivationBackup.module.css"; // plasmic-import: ljf1ITNaB8Ae/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicActivationBackup__VariantMembers = {};
export type PlasmicActivationBackup__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationBackup__VariantsArgs;
export const PlasmicActivationBackup__VariantProps =
  new Array<VariantPropType>();

export type PlasmicActivationBackup__ArgsType = {};
type ArgPropType = keyof PlasmicActivationBackup__ArgsType;
export const PlasmicActivationBackup__ArgProps = new Array<ArgPropType>();

export type PlasmicActivationBackup__OverridesType = {
  root?: Flex__<"div">;
  html?: Flex__<"div">;
  clarity?: Flex__<typeof Embed>;
  goftino?: Flex__<typeof Embed>;
  favIcon?: Flex__<typeof Embed>;
  apiRequest?: Flex__<typeof ApiRequest>;
  form?: Flex__<typeof FormWrapper>;
  platforms?: Flex__<typeof FormItemWrapper>;
  policiesCheckbox?: Flex__<typeof Checkbox>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  submitButton?: Flex__<typeof AntdButton>;
  input26?: Flex__<typeof AntdInput>;
  jabamasend2?: Flex__<typeof AntdButton>;
  back?: Flex__<typeof AntdButton>;
  skip?: Flex__<typeof AntdButton>;
  input8?: Flex__<typeof AntdInput>;
  jabamaverify?: Flex__<typeof AntdButton>;
  jabamaverify2?: Flex__<typeof AntdButton>;
  input7?: Flex__<typeof AntdInput>;
  jajigasend?: Flex__<typeof AntdButton>;
  jajigasend2?: Flex__<typeof AntdButton>;
  jajigasend4?: Flex__<typeof AntdButton>;
  input6?: Flex__<typeof AntdInput>;
  jajigaverify?: Flex__<typeof AntdButton>;
  jajigaverify2?: Flex__<typeof AntdButton>;
  input9?: Flex__<typeof AntdInput>;
  shabsend?: Flex__<typeof AntdButton>;
  shabsend2?: Flex__<typeof AntdButton>;
  shabsend4?: Flex__<typeof AntdButton>;
  input10?: Flex__<typeof AntdInput>;
  shabverify?: Flex__<typeof AntdButton>;
  shabverify3?: Flex__<typeof AntdButton>;
  input11?: Flex__<typeof AntdInput>;
  otaghaksend?: Flex__<typeof AntdButton>;
  otaghaksend4?: Flex__<typeof AntdButton>;
  otaghaksend5?: Flex__<typeof AntdButton>;
  input12?: Flex__<typeof AntdInput>;
  otaghakverify?: Flex__<typeof AntdButton>;
  otaghakverify5?: Flex__<typeof AntdButton>;
  input13?: Flex__<typeof AntdInput>;
  mihmanshosend?: Flex__<typeof AntdButton>;
  mihmanshosend6?: Flex__<typeof AntdButton>;
  input14?: Flex__<typeof AntdInput>;
  mihmanshoverify?: Flex__<typeof AntdButton>;
  mihmanshoverify7?: Flex__<typeof AntdButton>;
  input15?: Flex__<typeof AntdInput>;
  input16?: Flex__<typeof AntdInput>;
  homsaVerify?: Flex__<typeof AntdButton>;
  homsaBack?: Flex__<typeof AntdButton>;
  homsaSkip?: Flex__<typeof AntdButton>;
  input17?: Flex__<typeof AntdInput>;
  mizboonsend?: Flex__<typeof AntdButton>;
  mizboonsend3?: Flex__<typeof AntdButton>;
  input18?: Flex__<typeof AntdInput>;
  mizboonverify?: Flex__<typeof AntdButton>;
  mizboonverify4?: Flex__<typeof AntdButton>;
  platformpropertyIds?: Flex__<"div">;
  jajigapp?: Flex__<"div">;
  input19?: Flex__<typeof AntdInput>;
  shabpp?: Flex__<"div">;
  input20?: Flex__<typeof AntdInput>;
  otaghakpp?: Flex__<"div">;
  input21?: Flex__<typeof AntdInput>;
  mihmanshopp?: Flex__<"div">;
  input22?: Flex__<typeof AntdInput>;
  homsapp?: Flex__<"div">;
  input23?: Flex__<typeof AntdInput>;
  mizboonpp?: Flex__<"div">;
  input24?: Flex__<typeof AntdInput>;
  jabamapp?: Flex__<"div">;
  input27?: Flex__<typeof AntdInput>;
  platformpropertyButton?: Flex__<typeof AntdButton>;
  platformpropertyButton2?: Flex__<typeof AntdButton>;
  platformStatus?: Flex__<"div">;
  jajiga?: Flex__<"div">;
  paltform?: Flex__<typeof PlasmicImg__>;
  _true?: Flex__<typeof PlasmicImg__>;
  _false?: Flex__<typeof PlasmicImg__>;
  jabama?: Flex__<"div">;
  paltform2?: Flex__<typeof PlasmicImg__>;
  true2?: Flex__<typeof PlasmicImg__>;
  false2?: Flex__<typeof PlasmicImg__>;
  otaghak?: Flex__<"div">;
  paltform3?: Flex__<typeof PlasmicImg__>;
  true3?: Flex__<typeof PlasmicImg__>;
  false3?: Flex__<typeof PlasmicImg__>;
  shab?: Flex__<"div">;
  paltform4?: Flex__<typeof PlasmicImg__>;
  true4?: Flex__<typeof PlasmicImg__>;
  false4?: Flex__<typeof PlasmicImg__>;
  mizbon?: Flex__<"div">;
  paltform5?: Flex__<typeof PlasmicImg__>;
  true5?: Flex__<typeof PlasmicImg__>;
  false5?: Flex__<typeof PlasmicImg__>;
  homsa?: Flex__<"div">;
  paltform6?: Flex__<typeof PlasmicImg__>;
  true6?: Flex__<typeof PlasmicImg__>;
  false6?: Flex__<typeof PlasmicImg__>;
  mehmansho?: Flex__<"div">;
  paltform7?: Flex__<typeof PlasmicImg__>;
  true7?: Flex__<typeof PlasmicImg__>;
  false7?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultActivationBackupProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationBackup__RenderFunc(props: {
  variants: PlasmicActivationBackup__VariantsArgs;
  args: PlasmicActivationBackup__ArgsType;
  overrides: PlasmicActivationBackup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "input27.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "policiesCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"clarity"}
              data-plasmic-override={overrides.clarity}
              className={classNames("__wab_instance", sty.clarity)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"favIcon"}
              data-plasmic-override={overrides.favIcon}
              className={classNames("__wab_instance", sty.favIcon)}
              code={
                "(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n// icon address\r\n    link.href = 'https://rentamon.com/wp-content/uploads/2024/03/cropped-Logo-2024-fav-icon-1.png';\r\n})();\r\n</script>"
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mdpIp)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bjjLh
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return (() => {
                              return (window.location.href =
                                "https://rentamon.com/panels/?prop_id=1");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              {"x"}
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sFXqM)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jHNg)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___2Cbeo)}
                displayHeight={"49px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"108px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHttpsRentamonCom"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://rentamon.com/"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsRentamonCom"] != null &&
                    typeof $steps["goToHttpsRentamonCom"] === "object" &&
                    typeof $steps["goToHttpsRentamonCom"].then === "function"
                  ) {
                    $steps["goToHttpsRentamonCom"] = await $steps[
                      "goToHttpsRentamonCom"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/website_starter/images/rentamonFaPng.png",
                  fullWidth: 684,
                  fullHeight: 306,
                  aspectRatio: undefined
                }}
              />

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__tUyl9)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__ztG6
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__qvKXb)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__t7OAq)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__mua56)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qHi6I
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </Stack__>
          </Stack__>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            children={null}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mbWnn
                )}
              >
                {
                  "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a  \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627"
                }
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qeJt9
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "...در حال پردازش";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Loading...";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={"https://gateway.rentamon.com/webhook/user-registration"}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["form", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $state.step == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    data-plasmic-name={"platforms"}
                    data-plasmic-override={overrides.platforms}
                    className={classNames("__wab_instance", sty.platforms)}
                    initialValue={(() => {
                      try {
                        return $state.apiRequest.data[0].phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Iyi2
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    name={"platforms"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1FpTu
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__twWuH
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{
                              fontWeight: 700,
                              color: "var(--token-8nedppYkGVaH)"
                            }}
                          >
                            {
                              "\u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc"
                            }
                          </span>
                          <React.Fragment>
                            {
                              "\n\u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0634\u0645\u0627\u060c \u0644\u0627\u0632\u0645\u0647 \u0627\u0628\u062a\u062f\u0627 \u0628\u0647 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0645\u062a\u0635\u0644 \u0628\u0634\u0647."
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nhM3E)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9KaZg
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fzjHy
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sCk7Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__noSqw
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dSwQw
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o2CYj)}
                    >
                      <Checkbox
                        data-plasmic-name={"policiesCheckbox"}
                        data-plasmic-override={overrides.policiesCheckbox}
                        className={classNames(
                          "__wab_instance",
                          sty.policiesCheckbox
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "policiesCheckbox",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "policiesCheckbox",
                              "isChecked"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <PlasmicLink__
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link
                          )}
                          component={Link}
                          href={
                            "https://rentamon.com/%d9%82%d9%88%d8%a7%d9%86%db%8c%d9%86-%d8%b1%d9%86%d8%aa%d8%a7%d9%85%d9%88%d9%86/"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {
                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                          }
                        </PlasmicLink__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qmj3L
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#1F3546" }}
                            >
                              {
                                " \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0645\u06cc\u200c\u067e\u0630\u06cc\u0631\u0645"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                      </Checkbox>
                    </div>
                    <AntdButton
                      data-plasmic-name={"submitButton"}
                      data-plasmic-override={overrides.submitButton}
                      className={classNames("__wab_instance", sty.submitButton)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = (
                          $state.policiesCheckbox.isChecked
                            ? $state.step++
                            : undefined
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zbXer
                        )}
                      >
                        {"\u0628\u0631\u06cc\u0645"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__q16So
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yaAyk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bhDRz
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__pivFh)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"70%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "114px"
                                : "auto"
                            }
                            height={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                            loading={"lazy"}
                            src={
                              "https://rentamon.com/wp-content/uploads/2024/02/jabama.png"
                            }
                            width={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__s3R1Y
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3ENqC
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.list[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gLgEh
                            )}
                          >
                            {
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627:"
                            }
                          </div>
                        </div>
                      </div>
                    }
                    name={"jabamaphone"}
                    rules={[{ ruleType: "required" }]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input26),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input26", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input26",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input26.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input26"}
                          data-plasmic-override={overrides.input26}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gcyj9)}
                    >
                      <AntdButton
                        data-plasmic-name={"jabamasend2"}
                        data-plasmic-override={overrides.jabamasend2}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamasend2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jabama-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jabamaphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fPqYw
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"back"}
                        data-plasmic-override={overrides.back}
                        className={classNames("__wab_instance", sty.back)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3,
                                  value: $state.step + 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f7RsM
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v8D72)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ouAcf
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"skip"}
                          data-plasmic-override={overrides.skip}
                          className={classNames("__wab_instance", sty.skip)}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__joRja
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645   "
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__oB1R5
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__do4Zm
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u0628\u0627\u0645\u0627 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"jabamaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input8),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input8", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input8",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input8.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input8"}
                          data-plasmic-override={overrides.input8}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__doouq)}
                    >
                      <AntdButton
                        data-plasmic-name={"jabamaverify"}
                        data-plasmic-override={overrides.jabamaverify}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamaverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["jabamaVerify"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jabama-verify-test",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jabamaphone,
                                          otp: $state.form.value.jabamaOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jabamaVerify"] != null &&
                            typeof $steps["jabamaVerify"] === "object" &&
                            typeof $steps["jabamaVerify"].then === "function"
                          ) {
                            $steps["jabamaVerify"] = await $steps[
                              "jabamaVerify"
                            ];
                          }

                          $steps["jabamaContact"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jabamacontact",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jabamaContact"] != null &&
                            typeof $steps["jabamaContact"] === "object" &&
                            typeof $steps["jabamaContact"].then === "function"
                          ) {
                            $steps["jabamaContact"] = await $steps[
                              "jabamaContact"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__soSUw
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"jabamaverify2"}
                        data-plasmic-override={overrides.jabamaverify2}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamaverify2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wkFqd
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__jblC
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Dlq0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uRfRs
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___0L0Cx)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"70%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "114px"
                                : "auto"
                            }
                            height={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                            loading={"lazy"}
                            src={
                              "https://rentamon.com/wp-content/uploads/2024/02/jajiga.png"
                            }
                            width={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__opuSi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rQmhy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.list[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__reXvq
                            )}
                          >
                            {
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                            }
                          </div>
                        </div>
                      </div>
                    }
                    name={"jajigaphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input7),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input7", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input7",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input7.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input7"}
                          data-plasmic-override={overrides.input7}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eBzDw)}
                    >
                      <AntdButton
                        data-plasmic-name={"jajigasend"}
                        data-plasmic-override={overrides.jajigasend}
                        className={classNames("__wab_instance", sty.jajigasend)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jajiga-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jajigaphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ao3Cu
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"jajigasend2"}
                        data-plasmic-override={overrides.jajigasend2}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigasend2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step - 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lujKf
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ainwQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2AlJz
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"jajigasend4"}
                          data-plasmic-override={overrides.jajigasend4}
                          className={classNames(
                            "__wab_instance",
                            sty.jajigasend4
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__q5VZ
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645   "
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__v3Tn
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5RffQ
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u062c\u06cc\u06af\u0627 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"jajigaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input6),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input6", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input6",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input6.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input6"}
                          data-plasmic-override={overrides.input6}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cyOtm)}
                    >
                      <AntdButton
                        data-plasmic-name={"jajigaverify"}
                        data-plasmic-override={overrides.jajigaverify}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["jajigaVerify"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jajiga-verify-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jajigaphone,
                                          otp: $state.form.value.jajigaOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jajigaVerify"] != null &&
                            typeof $steps["jajigaVerify"] === "object" &&
                            typeof $steps["jajigaVerify"].then === "function"
                          ) {
                            $steps["jajigaVerify"] = await $steps[
                              "jajigaVerify"
                            ];
                          }

                          $steps["jajigacontact"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jajigacontact",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jajigacontact"] != null &&
                            typeof $steps["jajigacontact"] === "object" &&
                            typeof $steps["jajigacontact"].then === "function"
                          ) {
                            $steps["jajigacontact"] = await $steps[
                              "jajigacontact"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uyn68
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"jajigaverify2"}
                        data-plasmic-override={overrides.jajigaverify2}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaverify2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__peKqX
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 5;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__cSwXu
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nY3Ix
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zZu4U
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__imFor)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"70%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "114px"
                                : "auto"
                            }
                            height={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                            loading={"lazy"}
                            src={
                              "https://rentamon.com/wp-content/uploads/2024/02/shab.png"
                            }
                            width={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xmAt2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__idNq0
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.list[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__t70K4
                            )}
                          >
                            {
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0634\u0628:"
                            }
                          </div>
                        </div>
                      </div>
                    }
                    name={"shabphone"}
                  >
                    {(() => {
                      const child$Props = {
                        autoFocus: true,
                        className: classNames("__wab_instance", sty.input9),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input9", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input9",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input9.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input9"}
                          data-plasmic-override={overrides.input9}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__flEn)}
                    >
                      <AntdButton
                        data-plasmic-name={"shabsend"}
                        data-plasmic-override={overrides.shabsend}
                        className={classNames("__wab_instance", sty.shabsend)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["shabSend"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/shabnewsend",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.shabphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["shabSend"] != null &&
                            typeof $steps["shabSend"] === "object" &&
                            typeof $steps["shabSend"].then === "function"
                          ) {
                            $steps["shabSend"] = await $steps["shabSend"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v2Wi
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"shabsend2"}
                        data-plasmic-override={overrides.shabsend2}
                        className={classNames("__wab_instance", sty.shabsend2)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step - 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4SSJe
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yvVuX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9RgSh
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"shabsend4"}
                          data-plasmic-override={overrides.shabsend4}
                          className={classNames(
                            "__wab_instance",
                            sty.shabsend4
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ppzD4
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 6;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__cSdHr
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__igldC
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0634\u0628 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"shabOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input10),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input10", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input10",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input10.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input10"}
                          data-plasmic-override={overrides.input10}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__f13Rj)}
                    >
                      <AntdButton
                        data-plasmic-name={"shabverify"}
                        data-plasmic-override={overrides.shabverify}
                        className={classNames("__wab_instance", sty.shabverify)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["shabVerify"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/shabnewverify",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.shabphone,
                                          otp: $state.form.value.shabOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["shabVerify"] != null &&
                            typeof $steps["shabVerify"] === "object" &&
                            typeof $steps["shabVerify"].then === "function"
                          ) {
                            $steps["shabVerify"] = await $steps["shabVerify"];
                          }

                          $steps["shabContact"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/shabcontact",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["shabContact"] != null &&
                            typeof $steps["shabContact"] === "object" &&
                            typeof $steps["shabContact"].then === "function"
                          ) {
                            $steps["shabContact"] = await $steps["shabContact"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r85GO
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"shabverify3"}
                        data-plasmic-override={overrides.shabverify3}
                        className={classNames(
                          "__wab_instance",
                          sty.shabverify3
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tLo4I
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 7;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__aFcfx
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nwovK
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cZnxx
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__aiMNc)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"70%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "114px"
                                : "auto"
                            }
                            height={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                            loading={"lazy"}
                            src={
                              "https://rentamon.com/wp-content/uploads/2024/02/otaghak-1.png"
                            }
                            width={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "120"
                                : "120"
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__psB87
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ex4Pj
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.list[0].url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___20Bf
                            )}
                          >
                            {
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0627\u062a\u0627\u0642\u06a9:"
                            }
                          </div>
                        </div>
                      </div>
                    }
                    name={"otaghakphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input11),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input11", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input11",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input11.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input11"}
                          data-plasmic-override={overrides.input11}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3Uk99
                      )}
                    >
                      <AntdButton
                        data-plasmic-name={"otaghaksend"}
                        data-plasmic-override={overrides.otaghaksend}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghaksend
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["otaghakSend"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/otaghak-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.otaghakphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["otaghakSend"] != null &&
                            typeof $steps["otaghakSend"] === "object" &&
                            typeof $steps["otaghakSend"].then === "function"
                          ) {
                            $steps["otaghakSend"] = await $steps["otaghakSend"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r58FG
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"otaghaksend4"}
                        data-plasmic-override={overrides.otaghaksend4}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghaksend4
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step - 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___18Jut
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Fgxp
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jDhmj
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"otaghaksend5"}
                          data-plasmic-override={overrides.otaghaksend5}
                          className={classNames(
                            "__wab_instance",
                            sty.otaghaksend5
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sIjiZ
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 8;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__aQmTj
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pgJz1
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0627\u062a\u0627\u0642\u06a9 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"otaghakOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input12),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input12", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input12",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input12.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input12"}
                          data-plasmic-override={overrides.input12}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v8DHj)}
                    >
                      <AntdButton
                        data-plasmic-name={"otaghakverify"}
                        data-plasmic-override={overrides.otaghakverify}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["otaghakVerify"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/otaghak-verify-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.otaghakphone,
                                          otp: $state.form.value.otaghakOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["otaghakVerify"] != null &&
                            typeof $steps["otaghakVerify"] === "object" &&
                            typeof $steps["otaghakVerify"].then === "function"
                          ) {
                            $steps["otaghakVerify"] = await $steps[
                              "otaghakVerify"
                            ];
                          }

                          $steps["otaghakContact"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/otaghakcontact",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["otaghakContact"] != null &&
                            typeof $steps["otaghakContact"] === "object" &&
                            typeof $steps["otaghakContact"].then === "function"
                          ) {
                            $steps["otaghakContact"] = await $steps[
                              "otaghakContact"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__moE3
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"otaghakverify5"}
                        data-plasmic-override={overrides.otaghakverify5}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakverify5
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ghj2V
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                <FormItemWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.formField___7DxZi
                  )}
                  initialValue={(() => {
                    try {
                      return $state.apiRequest.data[0].phone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2W87G
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0645\u06cc\u0647\u0645\u0627\u0646\u0634\u0648:"
                      }
                    </div>
                  }
                  name={"mihmanshophone"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input13),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input13", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      onPressEnter: async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  undefined,
                                  undefined,
                                  (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      },
                      placeholder: ``,
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input13",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input13.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input13"}
                        data-plasmic-override={overrides.input13}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Fb2E)}
                  >
                    <AntdButton
                      data-plasmic-name={"mihmanshosend"}
                      data-plasmic-override={overrides.mihmanshosend}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshosend
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["mihmanshoSend"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://nazanintest.app.n8n.cloud/webhook-test/mihmansho-send-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.mihmanshophone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["mihmanshoSend"] != null &&
                          typeof $steps["mihmanshoSend"] === "object" &&
                          typeof $steps["mihmanshoSend"].then === "function"
                        ) {
                          $steps["mihmanshoSend"] = await $steps[
                            "mihmanshoSend"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yqmZj
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"mihmanshosend6"}
                      data-plasmic-override={overrides.mihmanshosend6}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshosend6
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 0,
                                value: $state.step + 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jNd6L
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ textDecorationLine: "underline" }}
                          >
                            {
                              "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdButton>
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__wi8M)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0K0Sj
                      )}
                    >
                      {
                        "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0645\u06cc\u0647\u0645\u0627\u0646\u200c\u0634\u0648 (\u067e\u06cc\u0627\u0645\u06a9):"
                      }
                    </div>
                  }
                  name={"mihmanshoOTP"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input14),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input14", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: (() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input14",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input14.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input14"}
                        data-plasmic-override={overrides.input14}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rxbhL)}
                  >
                    <AntdButton
                      data-plasmic-name={"mihmanshoverify"}
                      data-plasmic-override={overrides.mihmanshoverify}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshoverify
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["mihmanshoVerify"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/mihmansho-verify-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.mihmanshophone,
                                        otp: $state.form.value.mihmanshoOTP
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["mihmanshoVerify"] != null &&
                          typeof $steps["mihmanshoVerify"] === "object" &&
                          typeof $steps["mihmanshoVerify"].then === "function"
                        ) {
                          $steps["mihmanshoVerify"] = await $steps[
                            "mihmanshoVerify"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hvt8L
                        )}
                      >
                        {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"mihmanshoverify7"}
                      data-plasmic-override={overrides.mihmanshoverify7}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshoverify7
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 3
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue - 1);
                                return oldValue - 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["mockRequest"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/e751d172-6387-485d-be13-c2782c4fc5ef",
                                  undefined,
                                  (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["mockRequest"] != null &&
                          typeof $steps["mockRequest"] === "object" &&
                          typeof $steps["mockRequest"].then === "function"
                        ) {
                          $steps["mockRequest"] = await $steps["mockRequest"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gCSe1
                        )}
                      >
                        {"\u0642\u0628\u0644\u06cc"}
                      </div>
                    </AntdButton>
                  </div>
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.step == 9;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jF8G2)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__oPqeF
                      )}
                      initialValue={(() => {
                        try {
                          return $state.apiRequest.data[0].phone;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pPoa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aqrUi
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__dtKby)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"70%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "114px"
                                  : "auto"
                              }
                              height={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "120"
                                  : "120"
                              }
                              loading={"lazy"}
                              src={
                                "https://rentamon.com/wp-content/uploads/2024/02/homsa.png"
                              }
                              width={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "120"
                                  : "120"
                              }
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aXzXh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__txrNj
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.list[0].url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cMNtb
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0647\u0648\u0645\u0633\u0627:"
                              }
                            </div>
                          </div>
                        </div>
                      }
                      name={"homsaphone"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input15),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input15", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input15",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input15.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input15"}
                            data-plasmic-override={overrides.input15}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__qht28
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zCuJn
                          )}
                        >
                          {
                            "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0647\u0648\u0645\u0633\u0627:"
                          }
                        </div>
                      }
                      name={"homsaOTP"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input16),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input16", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input16",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input16.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input16"}
                            data-plasmic-override={overrides.input16}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wrPWm
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"homsaVerify"}
                          data-plasmic-override={overrides.homsaVerify}
                          className={classNames(
                            "__wab_instance",
                            sty.homsaVerify
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["goToHttpsRentamonComPanels"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: "https://rentamon.com/panels"
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToHttpsRentamonComPanels"] != null &&
                              typeof $steps["goToHttpsRentamonComPanels"] ===
                                "object" &&
                              typeof $steps["goToHttpsRentamonComPanels"]
                                .then === "function"
                            ) {
                              $steps["goToHttpsRentamonComPanels"] =
                                await $steps["goToHttpsRentamonComPanels"];
                            }

                            $steps["homsaVerify"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://gateway.rentamon.com/webhook/homsa-verify-otp",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            phone: $state.form.value.homsaphone,
                                            otp: $state.form.value.homsaOTP
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["homsaVerify"] != null &&
                              typeof $steps["homsaVerify"] === "object" &&
                              typeof $steps["homsaVerify"].then === "function"
                            ) {
                              $steps["homsaVerify"] = await $steps[
                                "homsaVerify"
                              ];
                            }

                            $steps["connectionStatus"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://gateway.rentamon.com/webhook/connection",
                                      undefined,
                                      (() => {
                                        try {
                                          return (
                                            "jabama=" +
                                            ($state.form.value.jabamaphone !==
                                            ""
                                              ? "true"
                                              : "false") +
                                            ", shab=" +
                                            ($state.form.value.shabphone !== ""
                                              ? "true"
                                              : "false") +
                                            ", jajiga=" +
                                            ($state.form.value.jajigaphone !==
                                            ""
                                              ? "true"
                                              : "false") +
                                            ", otaghak=" +
                                            ($state.form.value.otaghakphone !==
                                            ""
                                              ? "true"
                                              : "false")
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["connectionStatus"] != null &&
                              typeof $steps["connectionStatus"] === "object" &&
                              typeof $steps["connectionStatus"].then ===
                                "function"
                            ) {
                              $steps["connectionStatus"] = await $steps[
                                "connectionStatus"
                              ];
                            }

                            $steps["homsaContactX"] = true
                              ? (() => {
                                  const actionArgs = { args: ["POST"] };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["homsaContactX"] != null &&
                              typeof $steps["homsaContactX"] === "object" &&
                              typeof $steps["homsaContactX"].then === "function"
                            ) {
                              $steps["homsaContactX"] = await $steps[
                                "homsaContactX"
                              ];
                            }

                            $steps["showToast"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f! \u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0648\u0627\u0631\u062f \u062a\u0642\u0648\u06cc\u0645 \u0628\u0634\u06cc",
                                      "bottom-center",
                                      6000
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["showToast"] != null &&
                              typeof $steps["showToast"] === "object" &&
                              typeof $steps["showToast"].then === "function"
                            ) {
                              $steps["showToast"] = await $steps["showToast"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n2Fhi
                            )}
                          >
                            {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                          </div>
                        </AntdButton>
                        <AntdButton
                          data-plasmic-name={"homsaBack"}
                          data-plasmic-override={overrides.homsaBack}
                          className={classNames(
                            "__wab_instance",
                            sty.homsaBack
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step - 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__flOjS
                            )}
                          >
                            {"\u0642\u0628\u0644\u06cc >"}
                          </div>
                        </AntdButton>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__blhh7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7MRpe
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"homsaSkip"}
                            data-plasmic-override={overrides.homsaSkip}
                            className={classNames(
                              "__wab_instance",
                              sty.homsaSkip
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToHttpsRentamonComPanels"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: "https://rentamon.com/panels"
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToHttpsRentamonComPanels"] != null &&
                                typeof $steps["goToHttpsRentamonComPanels"] ===
                                  "object" &&
                                typeof $steps["goToHttpsRentamonComPanels"]
                                  .then === "function"
                              ) {
                                $steps["goToHttpsRentamonComPanels"] =
                                  await $steps["goToHttpsRentamonComPanels"];
                              }

                              $steps["connectionStatus"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/connection",
                                        undefined,
                                        (() => {
                                          try {
                                            return (
                                              "jabama=" +
                                              ($state.form.value.jabamaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", shab=" +
                                              ($state.form.value.shabphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", jajiga=" +
                                              ($state.form.value.jajigaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", otaghak=" +
                                              ($state.form.value
                                                .otaghakphone !== ""
                                                ? "true"
                                                : "false")
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["connectionStatus"] != null &&
                                typeof $steps["connectionStatus"] ===
                                  "object" &&
                                typeof $steps["connectionStatus"].then ===
                                  "function"
                              ) {
                                $steps["connectionStatus"] = await $steps[
                                  "connectionStatus"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f! \u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0648\u0627\u0631\u062f \u062a\u0642\u0648\u06cc\u0645 \u0628\u0634\u06cc",
                                        "bottom-center",
                                        6000
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c32DU
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ textDecorationLine: "underline" }}
                                >
                                  {
                                    "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    </FormItemWrapper>
                  </div>
                ) : null}
                <FormItemWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.formField___6FHbm
                  )}
                  initialValue={(() => {
                    try {
                      return $state.apiRequest.data[0].phone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6H4J
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:"
                      }
                    </div>
                  }
                  name={"mizboonphone"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input17),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input17", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: ``,
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input17",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input17.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input17"}
                        data-plasmic-override={overrides.input17}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mJ2UH)}
                  >
                    <AntdButton
                      data-plasmic-name={"mizboonsend"}
                      data-plasmic-override={overrides.mizboonsend}
                      className={classNames("__wab_instance", sty.mizboonsend)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/abcd",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.mizboonphone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u6AL6
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"mizboonsend3"}
                      data-plasmic-override={overrides.mizboonsend3}
                      className={classNames("__wab_instance", sty.mizboonsend3)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 3
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue - 1);
                                return oldValue - 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3OwUz
                        )}
                      >
                        {"\u0642\u0628\u0644\u06cc"}
                      </div>
                    </AntdButton>
                  </div>
                  {(() => {
                    try {
                      return $state.step == 13;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nilCu)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__wlZtI
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__swxuV
                            )}
                          >
                            {
                              "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0645\u06cc\u0632\u0628\u0648\u0646 (\u067e\u06cc\u0627\u0645\u06a9):"
                            }
                          </div>
                        }
                        name={"mizboonOTP"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input18
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input18", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: (() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input18",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input18.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input18"}
                              data-plasmic-override={overrides.input18}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cTov
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"mizboonverify"}
                            data-plasmic-override={overrides.mizboonverify}
                            className={classNames(
                              "__wab_instance",
                              sty.mizboonverify
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateStep"] != null &&
                                typeof $steps["updateStep"] === "object" &&
                                typeof $steps["updateStep"].then === "function"
                              ) {
                                $steps["updateStep"] = await $steps[
                                  "updateStep"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/05d196d4-09ca-4f38-a274-e2cbfba43adf",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              phone:
                                                $state.form.value.mizboonphone,
                                              otp: $state.form.value.mizboonOTP
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ddqNl
                              )}
                            >
                              {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"mizboonverify4"}
                            data-plasmic-override={overrides.mizboonverify4}
                            className={classNames(
                              "__wab_instance",
                              sty.mizboonverify4
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 2,
                                      value: $state.step + 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateStep"] != null &&
                                typeof $steps["updateStep"] === "object" &&
                                typeof $steps["updateStep"].then === "function"
                              ) {
                                $steps["updateStep"] = await $steps[
                                  "updateStep"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vXWyA
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                              }
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    </div>
                  ) : null}
                </FormItemWrapper>
                <div
                  data-plasmic-name={"platformpropertyIds"}
                  data-plasmic-override={overrides.platformpropertyIds}
                  className={classNames(
                    projectcss.all,
                    sty.platformpropertyIds
                  )}
                >
                  <div
                    data-plasmic-name={"jajigapp"}
                    data-plasmic-override={overrides.jajigapp}
                    className={classNames(projectcss.all, sty.jajigapp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__oiU3H
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ghQ3N
                          )}
                        >
                          {
                            "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                          }
                        </div>
                      }
                      name={"jajigacode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input19),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input19", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input19",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input19.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input19"}
                            data-plasmic-override={overrides.input19}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    data-plasmic-name={"shabpp"}
                    data-plasmic-override={overrides.shabpp}
                    className={classNames(projectcss.all, sty.shabpp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__ojNsY
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uhawP
                          )}
                        >
                          {
                            "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u0634\u0628:"
                          }
                        </div>
                      }
                      name={"shabcode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input20),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input20", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input20",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input20.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input20"}
                            data-plasmic-override={overrides.input20}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    data-plasmic-name={"otaghakpp"}
                    data-plasmic-override={overrides.otaghakpp}
                    className={classNames(projectcss.all, sty.otaghakpp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__fucM
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Ifl9
                          )}
                        >
                          {
                            "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u0627\u062a\u0627\u0642\u06a9:"
                          }
                        </div>
                      }
                      name={"otaghakcode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input21),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input21", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input21",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input21.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input21"}
                            data-plasmic-override={overrides.input21}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    data-plasmic-name={"mihmanshopp"}
                    data-plasmic-override={overrides.mihmanshopp}
                    className={classNames(projectcss.all, sty.mihmanshopp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___7Xzuq
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zPdY9
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "کد " +
                                  $state.apiRequest.data[0].property_name +
                                  " در میهمان‌شو چیه\u061F"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      name={"mihmanshcode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input22),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input22", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input22",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input22.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input22"}
                            data-plasmic-override={overrides.input22}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    data-plasmic-name={"homsapp"}
                    data-plasmic-override={overrides.homsapp}
                    className={classNames(projectcss.all, sty.homsapp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__zSpxk
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e2Hew
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "کد " +
                                  $state.apiRequest.data[0].property_name +
                                  " در هومسا چیه\u061F"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      name={"homsacode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input23),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input23", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input23",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input23.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input23"}
                            data-plasmic-override={overrides.input23}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    data-plasmic-name={"mizboonpp"}
                    data-plasmic-override={overrides.mizboonpp}
                    className={classNames(projectcss.all, sty.mizboonpp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__jyJ1Y
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ehDtc
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "کد " +
                                  $state.apiRequest.data[0].property_name +
                                  " در میزبون چیه\u061F"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      name={"mizbooncode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input24),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input24", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input24",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input24.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input24"}
                            data-plasmic-override={overrides.input24}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    data-plasmic-name={"jabamapp"}
                    data-plasmic-override={overrides.jabamapp}
                    className={classNames(projectcss.all, sty.jabamapp)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dlHtC
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cyF7E
                          )}
                        >
                          {
                            "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627:"
                          }
                        </div>
                      }
                      name={"jabamacode"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input27),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input27", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: ``,
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input27",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input27.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input27"}
                            data-plasmic-override={overrides.input27}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p9AN)}
                  >
                    <AntdButton
                      data-plasmic-name={"platformpropertyButton"}
                      data-plasmic-override={overrides.platformpropertyButton}
                      className={classNames(
                        "__wab_instance",
                        sty.platformpropertyButton
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["showToast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return "با موفقیت ثبت شد!";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "bottom-center",
                                  6000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }

                        $steps["goToHttpsRentamonComPanels"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "https://rentamon.com/panels"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpsRentamonComPanels"] != null &&
                          typeof $steps["goToHttpsRentamonComPanels"] ===
                            "object" &&
                          typeof $steps["goToHttpsRentamonComPanels"].then ===
                            "function"
                        ) {
                          $steps["goToHttpsRentamonComPanels"] = await $steps[
                            "goToHttpsRentamonComPanels"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/platform-codes",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        jajigacode:
                                          $state.form.value.jajigacode,
                                        shabcode: $state.form.value.shabcode,
                                        otaghkcode:
                                          $state.form.value.otaghakcode,
                                        mihmanshocode:
                                          $state.form.value.mihmanshcode,
                                        homsacode: $state.form.value.homsacode,
                                        mizbooncode:
                                          $state.form.value.mizbooncode,
                                        jabamacode: $state.form.value.jabamacode
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5YQwu
                        )}
                      >
                        {"\u062b\u0628\u062a"}
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"platformpropertyButton2"}
                      data-plasmic-override={overrides.platformpropertyButton2}
                      className={classNames(
                        "__wab_instance",
                        sty.platformpropertyButton2
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 3
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue - 1);
                                return oldValue - 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["goToHttpsRentamonComPanels"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "https://rentamon.com/panels/"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpsRentamonComPanels"] != null &&
                          typeof $steps["goToHttpsRentamonComPanels"] ===
                            "object" &&
                          typeof $steps["goToHttpsRentamonComPanels"].then ===
                            "function"
                        ) {
                          $steps["goToHttpsRentamonComPanels"] = await $steps[
                            "goToHttpsRentamonComPanels"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Mu6F
                        )}
                      >
                        {"\u0642\u0628\u0644\u06cc     >"}
                      </div>
                    </AntdButton>
                  </div>
                </div>
              </FormWrapper>
            );
          })()}
          <div
            data-plasmic-name={"platformStatus"}
            data-plasmic-override={overrides.platformStatus}
            className={classNames(projectcss.all, sty.platformStatus)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oPjss
              )}
            >
              {
                "\u0648\u0636\u0639\u06cc\u062a \u0627\u062a\u0635\u0627\u0644 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wf5Wy)}>
              <div className={classNames(projectcss.all, sty.freeBox__n1Rm)}>
                <div
                  data-plasmic-name={"jajiga"}
                  data-plasmic-override={overrides.jajiga}
                  className={classNames(projectcss.all, sty.jajiga)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5T3K9)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform"}
                      data-plasmic-override={overrides.paltform}
                      alt={""}
                      className={classNames(sty.paltform)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image9.svg",
                        fullWidth: 44,
                        fullHeight: 44,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"_true"}
                      data-plasmic-override={overrides._true}
                      alt={""}
                      className={classNames(sty._true)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"_false"}
                      data-plasmic-override={overrides._false}
                      alt={""}
                      className={classNames(sty._false)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image11.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2UadI
                    )}
                  >
                    {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"jabama"}
                  data-plasmic-override={overrides.jabama}
                  className={classNames(projectcss.all, sty.jabama)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 0,
                            value: ($state.step = 1)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zm0I)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform2"}
                      data-plasmic-override={overrides.paltform2}
                      alt={""}
                      className={classNames(sty.paltform2)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image19.svg",
                        fullWidth: 45,
                        fullHeight: 46,
                        aspectRatio: 0.978261
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"true2"}
                      data-plasmic-override={overrides.true2}
                      alt={""}
                      className={classNames(sty.true2)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"false2"}
                      data-plasmic-override={overrides.false2}
                      alt={""}
                      className={classNames(sty.false2, "element")}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image11.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wVbaw
                    )}
                  >
                    {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"otaghak"}
                  data-plasmic-override={overrides.otaghak}
                  className={classNames(projectcss.all, sty.otaghak)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wgUp6)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform3"}
                      data-plasmic-override={overrides.paltform3}
                      alt={""}
                      className={classNames(sty.paltform3)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image13.svg",
                        fullWidth: 46,
                        fullHeight: 46,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"true3"}
                      data-plasmic-override={overrides.true3}
                      alt={""}
                      className={classNames(sty.true3)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"false3"}
                      data-plasmic-override={overrides.false3}
                      alt={""}
                      className={classNames(sty.false3)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image11.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kmrXe
                    )}
                  >
                    {"\u0627\u062a\u0627\u0642\u06a9"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"shab"}
                  data-plasmic-override={overrides.shab}
                  className={classNames(projectcss.all, sty.shab)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__m5XwO)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform4"}
                      data-plasmic-override={overrides.paltform4}
                      alt={""}
                      className={classNames(sty.paltform4)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image20.svg",
                        fullWidth: 46,
                        fullHeight: 45,
                        aspectRatio: 1.022222
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"true4"}
                      data-plasmic-override={overrides.true4}
                      alt={""}
                      className={classNames(sty.true4)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"false4"}
                      data-plasmic-override={overrides.false4}
                      alt={""}
                      className={classNames(sty.false4)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image11.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xclmb
                    )}
                  >
                    {"\u0634\u0628"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"mizbon"}
                  data-plasmic-override={overrides.mizbon}
                  className={classNames(projectcss.all, sty.mizbon)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tvxWc)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform5"}
                      data-plasmic-override={overrides.paltform5}
                      alt={""}
                      className={classNames(sty.paltform5)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image15.svg",
                        fullWidth: 46,
                        fullHeight: 45,
                        aspectRatio: 1.022222
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"true5"}
                      data-plasmic-override={overrides.true5}
                      alt={""}
                      className={classNames(sty.true5)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"false5"}
                      data-plasmic-override={overrides.false5}
                      alt={""}
                      className={classNames(sty.false5)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image11.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__et1AF
                    )}
                  >
                    {"\u0645\u06cc\u0632\u0628\u0648\u0646"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"homsa"}
                  data-plasmic-override={overrides.homsa}
                  className={classNames(projectcss.all, sty.homsa)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___38UXr)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform6"}
                      data-plasmic-override={overrides.paltform6}
                      alt={""}
                      className={classNames(sty.paltform6)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image18.svg",
                        fullWidth: 46,
                        fullHeight: 45,
                        aspectRatio: 1.022222
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"true6"}
                      data-plasmic-override={overrides.true6}
                      alt={""}
                      className={classNames(sty.true6)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"false6"}
                      data-plasmic-override={overrides.false6}
                      alt={""}
                      className={classNames(sty.false6)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image11.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8FlLn
                    )}
                  >
                    {"\u0647\u0648\u0645\u0633\u0627"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"mehmansho"}
                  data-plasmic-override={overrides.mehmansho}
                  className={classNames(projectcss.all, sty.mehmansho)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zIpD5)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"paltform7"}
                      data-plasmic-override={overrides.paltform7}
                      alt={""}
                      className={classNames(sty.paltform7)}
                      displayHeight={"47px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image21.svg",
                        fullWidth: 46,
                        fullHeight: 45,
                        aspectRatio: 1.022222
                      }}
                    />

                    <PlasmicImg__
                      data-plasmic-name={"true7"}
                      data-plasmic-override={overrides.true7}
                      alt={""}
                      className={classNames(sty.true7)}
                      displayHeight={"18px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image10.svg",
                        fullWidth: 19,
                        fullHeight: 19,
                        aspectRatio: 1
                      }}
                    />

                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"false7"}
                        data-plasmic-override={overrides.false7}
                        alt={""}
                        className={classNames(sty.false7)}
                        displayHeight={"18px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image11.svg",
                          fullWidth: 19,
                          fullHeight: 19,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dtDfu
                    )}
                  >
                    {"\u0645\u0647\u0645\u0627\u0646\u0634\u0648"}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "html",
    "clarity",
    "goftino",
    "favIcon",
    "apiRequest",
    "form",
    "platforms",
    "policiesCheckbox",
    "link",
    "submitButton",
    "input26",
    "jabamasend2",
    "back",
    "skip",
    "input8",
    "jabamaverify",
    "jabamaverify2",
    "input7",
    "jajigasend",
    "jajigasend2",
    "jajigasend4",
    "input6",
    "jajigaverify",
    "jajigaverify2",
    "input9",
    "shabsend",
    "shabsend2",
    "shabsend4",
    "input10",
    "shabverify",
    "shabverify3",
    "input11",
    "otaghaksend",
    "otaghaksend4",
    "otaghaksend5",
    "input12",
    "otaghakverify",
    "otaghakverify5",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "input14",
    "mihmanshoverify",
    "mihmanshoverify7",
    "input15",
    "input16",
    "homsaVerify",
    "homsaBack",
    "homsaSkip",
    "input17",
    "mizboonsend",
    "mizboonsend3",
    "input18",
    "mizboonverify",
    "mizboonverify4",
    "platformpropertyIds",
    "jajigapp",
    "input19",
    "shabpp",
    "input20",
    "otaghakpp",
    "input21",
    "mihmanshopp",
    "input22",
    "homsapp",
    "input23",
    "mizboonpp",
    "input24",
    "jabamapp",
    "input27",
    "platformpropertyButton",
    "platformpropertyButton2",
    "platformStatus",
    "jajiga",
    "paltform",
    "_true",
    "_false",
    "jabama",
    "paltform2",
    "true2",
    "false2",
    "otaghak",
    "paltform3",
    "true3",
    "false3",
    "shab",
    "paltform4",
    "true4",
    "false4",
    "mizbon",
    "paltform5",
    "true5",
    "false5",
    "homsa",
    "paltform6",
    "true6",
    "false6",
    "mehmansho",
    "paltform7",
    "true7",
    "false7"
  ],
  html: ["html", "clarity", "goftino", "favIcon"],
  clarity: ["clarity"],
  goftino: ["goftino"],
  favIcon: ["favIcon"],
  apiRequest: ["apiRequest"],
  form: [
    "form",
    "platforms",
    "policiesCheckbox",
    "link",
    "submitButton",
    "input26",
    "jabamasend2",
    "back",
    "skip",
    "input8",
    "jabamaverify",
    "jabamaverify2",
    "input7",
    "jajigasend",
    "jajigasend2",
    "jajigasend4",
    "input6",
    "jajigaverify",
    "jajigaverify2",
    "input9",
    "shabsend",
    "shabsend2",
    "shabsend4",
    "input10",
    "shabverify",
    "shabverify3",
    "input11",
    "otaghaksend",
    "otaghaksend4",
    "otaghaksend5",
    "input12",
    "otaghakverify",
    "otaghakverify5",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "input14",
    "mihmanshoverify",
    "mihmanshoverify7",
    "input15",
    "input16",
    "homsaVerify",
    "homsaBack",
    "homsaSkip",
    "input17",
    "mizboonsend",
    "mizboonsend3",
    "input18",
    "mizboonverify",
    "mizboonverify4",
    "platformpropertyIds",
    "jajigapp",
    "input19",
    "shabpp",
    "input20",
    "otaghakpp",
    "input21",
    "mihmanshopp",
    "input22",
    "homsapp",
    "input23",
    "mizboonpp",
    "input24",
    "jabamapp",
    "input27",
    "platformpropertyButton",
    "platformpropertyButton2"
  ],
  platforms: ["platforms", "policiesCheckbox", "link", "submitButton"],
  policiesCheckbox: ["policiesCheckbox", "link"],
  link: ["link"],
  submitButton: ["submitButton"],
  input26: ["input26"],
  jabamasend2: ["jabamasend2"],
  back: ["back"],
  skip: ["skip"],
  input8: ["input8"],
  jabamaverify: ["jabamaverify"],
  jabamaverify2: ["jabamaverify2"],
  input7: ["input7"],
  jajigasend: ["jajigasend"],
  jajigasend2: ["jajigasend2"],
  jajigasend4: ["jajigasend4"],
  input6: ["input6"],
  jajigaverify: ["jajigaverify"],
  jajigaverify2: ["jajigaverify2"],
  input9: ["input9"],
  shabsend: ["shabsend"],
  shabsend2: ["shabsend2"],
  shabsend4: ["shabsend4"],
  input10: ["input10"],
  shabverify: ["shabverify"],
  shabverify3: ["shabverify3"],
  input11: ["input11"],
  otaghaksend: ["otaghaksend"],
  otaghaksend4: ["otaghaksend4"],
  otaghaksend5: ["otaghaksend5"],
  input12: ["input12"],
  otaghakverify: ["otaghakverify"],
  otaghakverify5: ["otaghakverify5"],
  input13: ["input13"],
  mihmanshosend: ["mihmanshosend"],
  mihmanshosend6: ["mihmanshosend6"],
  input14: ["input14"],
  mihmanshoverify: ["mihmanshoverify"],
  mihmanshoverify7: ["mihmanshoverify7"],
  input15: ["input15"],
  input16: ["input16"],
  homsaVerify: ["homsaVerify"],
  homsaBack: ["homsaBack"],
  homsaSkip: ["homsaSkip"],
  input17: ["input17"],
  mizboonsend: ["mizboonsend"],
  mizboonsend3: ["mizboonsend3"],
  input18: ["input18"],
  mizboonverify: ["mizboonverify"],
  mizboonverify4: ["mizboonverify4"],
  platformpropertyIds: [
    "platformpropertyIds",
    "jajigapp",
    "input19",
    "shabpp",
    "input20",
    "otaghakpp",
    "input21",
    "mihmanshopp",
    "input22",
    "homsapp",
    "input23",
    "mizboonpp",
    "input24",
    "jabamapp",
    "input27",
    "platformpropertyButton",
    "platformpropertyButton2"
  ],
  jajigapp: ["jajigapp", "input19"],
  input19: ["input19"],
  shabpp: ["shabpp", "input20"],
  input20: ["input20"],
  otaghakpp: ["otaghakpp", "input21"],
  input21: ["input21"],
  mihmanshopp: ["mihmanshopp", "input22"],
  input22: ["input22"],
  homsapp: ["homsapp", "input23"],
  input23: ["input23"],
  mizboonpp: ["mizboonpp", "input24"],
  input24: ["input24"],
  jabamapp: ["jabamapp", "input27"],
  input27: ["input27"],
  platformpropertyButton: ["platformpropertyButton"],
  platformpropertyButton2: ["platformpropertyButton2"],
  platformStatus: [
    "platformStatus",
    "jajiga",
    "paltform",
    "_true",
    "_false",
    "jabama",
    "paltform2",
    "true2",
    "false2",
    "otaghak",
    "paltform3",
    "true3",
    "false3",
    "shab",
    "paltform4",
    "true4",
    "false4",
    "mizbon",
    "paltform5",
    "true5",
    "false5",
    "homsa",
    "paltform6",
    "true6",
    "false6",
    "mehmansho",
    "paltform7",
    "true7",
    "false7"
  ],
  jajiga: ["jajiga", "paltform", "_true", "_false"],
  paltform: ["paltform"],
  _true: ["_true"],
  _false: ["_false"],
  jabama: ["jabama", "paltform2", "true2", "false2"],
  paltform2: ["paltform2"],
  true2: ["true2"],
  false2: ["false2"],
  otaghak: ["otaghak", "paltform3", "true3", "false3"],
  paltform3: ["paltform3"],
  true3: ["true3"],
  false3: ["false3"],
  shab: ["shab", "paltform4", "true4", "false4"],
  paltform4: ["paltform4"],
  true4: ["true4"],
  false4: ["false4"],
  mizbon: ["mizbon", "paltform5", "true5", "false5"],
  paltform5: ["paltform5"],
  true5: ["true5"],
  false5: ["false5"],
  homsa: ["homsa", "paltform6", "true6", "false6"],
  paltform6: ["paltform6"],
  true6: ["true6"],
  false6: ["false6"],
  mehmansho: ["mehmansho", "paltform7", "true7", "false7"],
  paltform7: ["paltform7"],
  true7: ["true7"],
  false7: ["false7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  html: "div";
  clarity: typeof Embed;
  goftino: typeof Embed;
  favIcon: typeof Embed;
  apiRequest: typeof ApiRequest;
  form: typeof FormWrapper;
  platforms: typeof FormItemWrapper;
  policiesCheckbox: typeof Checkbox;
  link: "a";
  submitButton: typeof AntdButton;
  input26: typeof AntdInput;
  jabamasend2: typeof AntdButton;
  back: typeof AntdButton;
  skip: typeof AntdButton;
  input8: typeof AntdInput;
  jabamaverify: typeof AntdButton;
  jabamaverify2: typeof AntdButton;
  input7: typeof AntdInput;
  jajigasend: typeof AntdButton;
  jajigasend2: typeof AntdButton;
  jajigasend4: typeof AntdButton;
  input6: typeof AntdInput;
  jajigaverify: typeof AntdButton;
  jajigaverify2: typeof AntdButton;
  input9: typeof AntdInput;
  shabsend: typeof AntdButton;
  shabsend2: typeof AntdButton;
  shabsend4: typeof AntdButton;
  input10: typeof AntdInput;
  shabverify: typeof AntdButton;
  shabverify3: typeof AntdButton;
  input11: typeof AntdInput;
  otaghaksend: typeof AntdButton;
  otaghaksend4: typeof AntdButton;
  otaghaksend5: typeof AntdButton;
  input12: typeof AntdInput;
  otaghakverify: typeof AntdButton;
  otaghakverify5: typeof AntdButton;
  input13: typeof AntdInput;
  mihmanshosend: typeof AntdButton;
  mihmanshosend6: typeof AntdButton;
  input14: typeof AntdInput;
  mihmanshoverify: typeof AntdButton;
  mihmanshoverify7: typeof AntdButton;
  input15: typeof AntdInput;
  input16: typeof AntdInput;
  homsaVerify: typeof AntdButton;
  homsaBack: typeof AntdButton;
  homsaSkip: typeof AntdButton;
  input17: typeof AntdInput;
  mizboonsend: typeof AntdButton;
  mizboonsend3: typeof AntdButton;
  input18: typeof AntdInput;
  mizboonverify: typeof AntdButton;
  mizboonverify4: typeof AntdButton;
  platformpropertyIds: "div";
  jajigapp: "div";
  input19: typeof AntdInput;
  shabpp: "div";
  input20: typeof AntdInput;
  otaghakpp: "div";
  input21: typeof AntdInput;
  mihmanshopp: "div";
  input22: typeof AntdInput;
  homsapp: "div";
  input23: typeof AntdInput;
  mizboonpp: "div";
  input24: typeof AntdInput;
  jabamapp: "div";
  input27: typeof AntdInput;
  platformpropertyButton: typeof AntdButton;
  platformpropertyButton2: typeof AntdButton;
  platformStatus: "div";
  jajiga: "div";
  paltform: typeof PlasmicImg__;
  _true: typeof PlasmicImg__;
  _false: typeof PlasmicImg__;
  jabama: "div";
  paltform2: typeof PlasmicImg__;
  true2: typeof PlasmicImg__;
  false2: typeof PlasmicImg__;
  otaghak: "div";
  paltform3: typeof PlasmicImg__;
  true3: typeof PlasmicImg__;
  false3: typeof PlasmicImg__;
  shab: "div";
  paltform4: typeof PlasmicImg__;
  true4: typeof PlasmicImg__;
  false4: typeof PlasmicImg__;
  mizbon: "div";
  paltform5: typeof PlasmicImg__;
  true5: typeof PlasmicImg__;
  false5: typeof PlasmicImg__;
  homsa: "div";
  paltform6: typeof PlasmicImg__;
  true6: typeof PlasmicImg__;
  false6: typeof PlasmicImg__;
  mehmansho: "div";
  paltform7: typeof PlasmicImg__;
  true7: typeof PlasmicImg__;
  false7: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationBackup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationBackup__VariantsArgs;
    args?: PlasmicActivationBackup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationBackup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationBackup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationBackup__ArgProps,
          internalVariantPropNames: PlasmicActivationBackup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationBackup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationBackup";
  } else {
    func.displayName = `PlasmicActivationBackup.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationBackup = Object.assign(
  // Top-level PlasmicActivationBackup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    html: makeNodeComponent("html"),
    clarity: makeNodeComponent("clarity"),
    goftino: makeNodeComponent("goftino"),
    favIcon: makeNodeComponent("favIcon"),
    apiRequest: makeNodeComponent("apiRequest"),
    form: makeNodeComponent("form"),
    platforms: makeNodeComponent("platforms"),
    policiesCheckbox: makeNodeComponent("policiesCheckbox"),
    link: makeNodeComponent("link"),
    submitButton: makeNodeComponent("submitButton"),
    input26: makeNodeComponent("input26"),
    jabamasend2: makeNodeComponent("jabamasend2"),
    back: makeNodeComponent("back"),
    skip: makeNodeComponent("skip"),
    input8: makeNodeComponent("input8"),
    jabamaverify: makeNodeComponent("jabamaverify"),
    jabamaverify2: makeNodeComponent("jabamaverify2"),
    input7: makeNodeComponent("input7"),
    jajigasend: makeNodeComponent("jajigasend"),
    jajigasend2: makeNodeComponent("jajigasend2"),
    jajigasend4: makeNodeComponent("jajigasend4"),
    input6: makeNodeComponent("input6"),
    jajigaverify: makeNodeComponent("jajigaverify"),
    jajigaverify2: makeNodeComponent("jajigaverify2"),
    input9: makeNodeComponent("input9"),
    shabsend: makeNodeComponent("shabsend"),
    shabsend2: makeNodeComponent("shabsend2"),
    shabsend4: makeNodeComponent("shabsend4"),
    input10: makeNodeComponent("input10"),
    shabverify: makeNodeComponent("shabverify"),
    shabverify3: makeNodeComponent("shabverify3"),
    input11: makeNodeComponent("input11"),
    otaghaksend: makeNodeComponent("otaghaksend"),
    otaghaksend4: makeNodeComponent("otaghaksend4"),
    otaghaksend5: makeNodeComponent("otaghaksend5"),
    input12: makeNodeComponent("input12"),
    otaghakverify: makeNodeComponent("otaghakverify"),
    otaghakverify5: makeNodeComponent("otaghakverify5"),
    input13: makeNodeComponent("input13"),
    mihmanshosend: makeNodeComponent("mihmanshosend"),
    mihmanshosend6: makeNodeComponent("mihmanshosend6"),
    input14: makeNodeComponent("input14"),
    mihmanshoverify: makeNodeComponent("mihmanshoverify"),
    mihmanshoverify7: makeNodeComponent("mihmanshoverify7"),
    input15: makeNodeComponent("input15"),
    input16: makeNodeComponent("input16"),
    homsaVerify: makeNodeComponent("homsaVerify"),
    homsaBack: makeNodeComponent("homsaBack"),
    homsaSkip: makeNodeComponent("homsaSkip"),
    input17: makeNodeComponent("input17"),
    mizboonsend: makeNodeComponent("mizboonsend"),
    mizboonsend3: makeNodeComponent("mizboonsend3"),
    input18: makeNodeComponent("input18"),
    mizboonverify: makeNodeComponent("mizboonverify"),
    mizboonverify4: makeNodeComponent("mizboonverify4"),
    platformpropertyIds: makeNodeComponent("platformpropertyIds"),
    jajigapp: makeNodeComponent("jajigapp"),
    input19: makeNodeComponent("input19"),
    shabpp: makeNodeComponent("shabpp"),
    input20: makeNodeComponent("input20"),
    otaghakpp: makeNodeComponent("otaghakpp"),
    input21: makeNodeComponent("input21"),
    mihmanshopp: makeNodeComponent("mihmanshopp"),
    input22: makeNodeComponent("input22"),
    homsapp: makeNodeComponent("homsapp"),
    input23: makeNodeComponent("input23"),
    mizboonpp: makeNodeComponent("mizboonpp"),
    input24: makeNodeComponent("input24"),
    jabamapp: makeNodeComponent("jabamapp"),
    input27: makeNodeComponent("input27"),
    platformpropertyButton: makeNodeComponent("platformpropertyButton"),
    platformpropertyButton2: makeNodeComponent("platformpropertyButton2"),
    platformStatus: makeNodeComponent("platformStatus"),
    jajiga: makeNodeComponent("jajiga"),
    paltform: makeNodeComponent("paltform"),
    _true: makeNodeComponent("_true"),
    _false: makeNodeComponent("_false"),
    jabama: makeNodeComponent("jabama"),
    paltform2: makeNodeComponent("paltform2"),
    true2: makeNodeComponent("true2"),
    false2: makeNodeComponent("false2"),
    otaghak: makeNodeComponent("otaghak"),
    paltform3: makeNodeComponent("paltform3"),
    true3: makeNodeComponent("true3"),
    false3: makeNodeComponent("false3"),
    shab: makeNodeComponent("shab"),
    paltform4: makeNodeComponent("paltform4"),
    true4: makeNodeComponent("true4"),
    false4: makeNodeComponent("false4"),
    mizbon: makeNodeComponent("mizbon"),
    paltform5: makeNodeComponent("paltform5"),
    true5: makeNodeComponent("true5"),
    false5: makeNodeComponent("false5"),
    homsa: makeNodeComponent("homsa"),
    paltform6: makeNodeComponent("paltform6"),
    true6: makeNodeComponent("true6"),
    false6: makeNodeComponent("false6"),
    mehmansho: makeNodeComponent("mehmansho"),
    paltform7: makeNodeComponent("paltform7"),
    true7: makeNodeComponent("true7"),
    false7: makeNodeComponent("false7"),

    // Metadata about props expected for PlasmicActivationBackup
    internalVariantProps: PlasmicActivationBackup__VariantProps,
    internalArgProps: PlasmicActivationBackup__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationBackup;
/* prettier-ignore-end */
