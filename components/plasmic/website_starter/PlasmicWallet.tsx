// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: bHX7IYOtGqc7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicWallet.module.css"; // plasmic-import: bHX7IYOtGqc7/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicWallet__VariantMembers = {};
export type PlasmicWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicWallet__VariantsArgs;
export const PlasmicWallet__VariantProps = new Array<VariantPropType>();

export type PlasmicWallet__ArgsType = {};
type ArgPropType = keyof PlasmicWallet__ArgsType;
export const PlasmicWallet__ArgProps = new Array<ArgPropType>();

export type PlasmicWallet__OverridesType = {
  root?: Flex__<"div">;
  شارژکیفپول?: Flex__<typeof Button>;
};

export interface DefaultWalletProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWallet__RenderFunc(props: {
  variants: PlasmicWallet__VariantsArgs;
  args: PlasmicWallet__ArgsType;
  overrides: PlasmicWallet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__voldv
        )}
      >
        {
          "\u0645\u0627\u0646\u062f\u0647 \u0627\u0639\u062a\u0628\u0627\u0631: "
        }
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__rwfBf
        )}
        dir={"rtl"}
      >
        <React.Fragment>
          {(() => {
            try {
              return $ctx.fetchedData.user_info.balance_info.balance + " تومان";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u0645\u0628\u0644\u063a";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Button
        data-plasmic-name={
          "\u0634\u0627\u0631\u0698\u06a9\u06cc\u0641\u067e\u0648\u0644"
        }
        data-plasmic-override={overrides.شارژکیفپول}
        className={classNames("__wab_instance", sty.شارژکیفپول)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gc37
          )}
        >
          {"\u0634\u0627\u0631\u0698"}
        </div>
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "\u0634\u0627\u0631\u0698\u06a9\u06cc\u0641\u067e\u0648\u0644"
  ],
  شارژکیفپول: ["\u0634\u0627\u0631\u0698\u06a9\u06cc\u0641\u067e\u0648\u0644"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  شارژکیفپول: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWallet__VariantsArgs;
    args?: PlasmicWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWallet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWallet__ArgProps,
          internalVariantPropNames: PlasmicWallet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWallet";
  } else {
    func.displayName = `PlasmicWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicWallet = Object.assign(
  // Top-level PlasmicWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    شارژکیفپول: makeNodeComponent(
      "\u0634\u0627\u0631\u0698\u06a9\u06cc\u0641\u067e\u0648\u0644"
    ),

    // Metadata about props expected for PlasmicWallet
    internalVariantProps: PlasmicWallet__VariantProps,
    internalArgProps: PlasmicWallet__ArgProps
  }
);

export default PlasmicWallet;
/* prettier-ignore-end */
