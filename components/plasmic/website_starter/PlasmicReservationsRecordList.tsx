/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: dDeToLEgGJS_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicReservationsRecordList.module.css"; // plasmic-import: dDeToLEgGJS_/css

createPlasmicElementProxy;

export type PlasmicReservationsRecordList__VariantMembers = {
  pastBookingsBox: "pastBookingsBox";
  cancelledBookings: "cancelledBookings";
  confirmedBookings: "confirmedBookings";
  pendingBookings: "pendingBookings";
};
export type PlasmicReservationsRecordList__VariantsArgs = {
  pastBookingsBox?: SingleBooleanChoiceArg<"pastBookingsBox">;
  cancelledBookings?: SingleBooleanChoiceArg<"cancelledBookings">;
  confirmedBookings?: SingleBooleanChoiceArg<"confirmedBookings">;
  pendingBookings?: SingleBooleanChoiceArg<"pendingBookings">;
};
type VariantPropType = keyof PlasmicReservationsRecordList__VariantsArgs;
export const PlasmicReservationsRecordList__VariantProps =
  new Array<VariantPropType>(
    "pastBookingsBox",
    "cancelledBookings",
    "confirmedBookings",
    "pendingBookings"
  );

export type PlasmicReservationsRecordList__ArgsType = {
  currentIndex?: any;
  data?: any;
  firstVisit?: boolean;
};
type ArgPropType = keyof PlasmicReservationsRecordList__ArgsType;
export const PlasmicReservationsRecordList__ArgProps = new Array<ArgPropType>(
  "currentIndex",
  "data",
  "firstVisit"
);

export type PlasmicReservationsRecordList__OverridesType = {
  tourGuideReservations?: Flex__<"div">;
  pic?: Flex__<"div">;
  property?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  guestName?: Flex__<"div">;
  geustName?: Flex__<"div">;
  date2?: Flex__<"div">;
  date?: Flex__<"div">;
  source?: Flex__<"div">;
  website?: Flex__<"div">;
};

export interface DefaultReservationsRecordListProps {
  currentIndex?: any;
  data?: any;
  firstVisit?: boolean;
  pastBookingsBox?: SingleBooleanChoiceArg<"pastBookingsBox">;
  cancelledBookings?: SingleBooleanChoiceArg<"cancelledBookings">;
  confirmedBookings?: SingleBooleanChoiceArg<"confirmedBookings">;
  pendingBookings?: SingleBooleanChoiceArg<"pendingBookings">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReservationsRecordList__RenderFunc(props: {
  variants: PlasmicReservationsRecordList__VariantsArgs;
  args: PlasmicReservationsRecordList__ArgsType;
  overrides: PlasmicReservationsRecordList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          firstVisit: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pastBookingsBox",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pastBookingsBox
      },
      {
        path: "cancelledBookings",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.cancelledBookings
      },
      {
        path: "confirmedBookings",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.confirmedBookings
      },
      {
        path: "pendingBookings",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pendingBookings
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"tourGuideReservations"}
      data-plasmic-override={overrides.tourGuideReservations}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.tourGuideReservations,
        hasVariant($state, "pendingBookings", "pendingBookings")
          ? "pendingStyle"
          : (() => {
              try {
                return (() => {})();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
        {
          [sty.tourGuideReservationscancelledBookings]: hasVariant(
            $state,
            "cancelledBookings",
            "cancelledBookings"
          ),
          [sty.tourGuideReservationsconfirmedBookings]: hasVariant(
            $state,
            "confirmedBookings",
            "confirmedBookings"
          ),
          [sty.tourGuideReservationspastBookingsBox]: hasVariant(
            $state,
            "pastBookingsBox",
            "pastBookingsBox"
          ),
          [sty.tourGuideReservationspendingBookings]: hasVariant(
            $state,
            "pendingBookings",
            "pendingBookings"
          ),
          [sty.tourGuideReservationspendingBookings_cancelledBookings]:
            hasVariant($state, "pendingBookings", "pendingBookings") &&
            hasVariant($state, "cancelledBookings", "cancelledBookings"),
          [sty.tourGuideReservationspendingBookings_confirmedBookings]:
            hasVariant($state, "pendingBookings", "pendingBookings") &&
            hasVariant($state, "confirmedBookings", "confirmedBookings")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___00Ie5, {
          [sty.freeBoxcancelledBookings___00Ie5WA5M7]: hasVariant(
            $state,
            "cancelledBookings",
            "cancelledBookings"
          ),
          [sty.freeBoxconfirmedBookings___00Ie5FwneE]: hasVariant(
            $state,
            "confirmedBookings",
            "confirmedBookings"
          ),
          [sty.freeBoxpastBookingsBox___00Ie5Kh5Ba]: hasVariant(
            $state,
            "pastBookingsBox",
            "pastBookingsBox"
          ),
          [sty.freeBoxpendingBookings___00Ie55H4X]: hasVariant(
            $state,
            "pendingBookings",
            "pendingBookings"
          )
        })}
      >
        <div
          data-plasmic-name={"pic"}
          data-plasmic-override={overrides.pic}
          className={classNames(projectcss.all, sty.pic)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__mk6VW)}>
            <div
              data-plasmic-name={"property"}
              data-plasmic-override={overrides.property}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.property,
                {
                  [sty.propertycancelledBookings]: hasVariant(
                    $state,
                    "cancelledBookings",
                    "cancelledBookings"
                  ),
                  [sty.propertyconfirmedBookings]: hasVariant(
                    $state,
                    "confirmedBookings",
                    "confirmedBookings"
                  ),
                  [sty.propertypastBookingsBox]: hasVariant(
                    $state,
                    "pastBookingsBox",
                    "pastBookingsBox"
                  ),
                  [sty.propertypastBookingsBox_cancelledBookings]:
                    hasVariant($state, "pastBookingsBox", "pastBookingsBox") &&
                    hasVariant(
                      $state,
                      "cancelledBookings",
                      "cancelledBookings"
                    ),
                  [sty.propertypendingBookings]: hasVariant(
                    $state,
                    "pendingBookings",
                    "pendingBookings"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "smallMobile") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.property.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : hasVariant(globalVariants, "screen", "mobile") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.property.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.property.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          </div>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.data.property.property_pic;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/website_starter/images/homeCoverJpg.jpg",
                    fullWidth: 1247,
                    fullHeight: 529,
                    aspectRatio: undefined
                  };
                }
                throw e;
              }
            })()}
          />
        </div>
        <div
          data-plasmic-name={"guestName"}
          data-plasmic-override={overrides.guestName}
          className={classNames(projectcss.all, sty.guestName)}
        >
          <div
            data-plasmic-name={"geustName"}
            data-plasmic-override={overrides.geustName}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.geustName,
              {
                [sty.geustNameconfirmedBookings]: hasVariant(
                  $state,
                  "confirmedBookings",
                  "confirmedBookings"
                ),
                [sty.geustNamependingBookings]: hasVariant(
                  $state,
                  "pendingBookings",
                  "pendingBookings"
                )
              }
            )}
          >
            {hasVariant(globalVariants, "screen", "smallMobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.guest.name || "-";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant(globalVariants, "screen", "mobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.guest.name || "-";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.guest.name || "-";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </div>
        <div
          data-plasmic-name={"date2"}
          data-plasmic-override={overrides.date2}
          className={classNames(projectcss.all, sty.date2)}
        >
          <div
            data-plasmic-name={"date"}
            data-plasmic-override={overrides.date}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.date
            )}
          >
            {hasVariant(globalVariants, "screen", "smallMobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const persianMonths = [
                        "فروردین",
                        "اردیبهشت",
                        "خرداد",
                        "تیر",
                        "مرداد",
                        "شهریور",
                        "مهر",
                        "آبان",
                        "آذر",
                        "دی",
                        "بهمن",
                        "اسفند"
                      ];

                      const persianWeekdays = [
                        "یک‌شنبه",
                        "دوشنبه",
                        "سه‌شنبه",
                        "چهارشنبه",
                        "پنج‌شنبه",
                        "جمعه",
                        "شنبه"
                      ];

                      function toPersianDigits(input) {
                        const persianDigits = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return input
                          .toString()
                          .replace(/\d/g, d => persianDigits[d]);
                      }
                      function toJalali(gYear, gMonth, gDay) {
                        const gDaysInMonth = [
                          31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                        ];

                        const jDaysInMonth = [
                          31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                        ];

                        let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                        let gm = gMonth - 1;
                        let gd = gDay - 1;
                        let gDayNo =
                          365 * gy +
                          Math.floor((gy + 3) / 4) -
                          Math.floor((gy + 99) / 100) +
                          Math.floor((gy + 399) / 400);
                        for (let i = 0; i < gm; ++i) gDayNo += gDaysInMonth[i];
                        gDayNo += gd;
                        let jDayNo = gDayNo - (gYear >= 1600 ? 79 : 0);
                        let jNp = Math.floor(jDayNo / 12053);
                        jDayNo %= 12053;
                        let jYear =
                          979 + 33 * jNp + 4 * Math.floor(jDayNo / 1461);
                        jDayNo %= 1461;
                        if (jDayNo >= 366) {
                          jYear += Math.floor((jDayNo - 1) / 365);
                          jDayNo = (jDayNo - 1) % 365;
                        }
                        let jMonth;
                        for (
                          jMonth = 0;
                          jMonth < 11 && jDayNo >= jDaysInMonth[jMonth];
                          ++jMonth
                        )
                          jDayNo -= jDaysInMonth[jMonth];
                        let jDay = jDayNo + 1;
                        return {
                          jy: jYear + (gYear >= 1600 ? 1600 : 621),
                          jm: jMonth + 1,
                          jd: jDay
                        };
                      }
                      function convertDateToJalaliFullString(dateString) {
                        const date = new Date(dateString);
                        const gYear = date.getFullYear();
                        const gMonth = date.getMonth() + 1;
                        const gDay = date.getDate();
                        const weekdayIndex = date.getDay();
                        const { jy, jm, jd } = toJalali(gYear, gMonth, gDay);
                        const weekday = persianWeekdays[weekdayIndex];
                        const monthName = persianMonths[jm - 1];
                        return `${weekday} ${toPersianDigits(jd)} ${monthName}`;
                      }
                      const checkIn = $props.data.check_in;
                      const result = convertDateToJalaliFullString(checkIn);
                      return result;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant(globalVariants, "screen", "mobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const persianMonths = [
                        "فروردین",
                        "اردیبهشت",
                        "خرداد",
                        "تیر",
                        "مرداد",
                        "شهریور",
                        "مهر",
                        "آبان",
                        "آذر",
                        "دی",
                        "بهمن",
                        "اسفند"
                      ];

                      const persianWeekdays = [
                        "یک‌شنبه",
                        "دوشنبه",
                        "سه‌شنبه",
                        "چهارشنبه",
                        "پنج‌شنبه",
                        "جمعه",
                        "شنبه"
                      ];

                      function toPersianDigits(input) {
                        const persianDigits = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return input
                          .toString()
                          .replace(/\d/g, d => persianDigits[d]);
                      }
                      function toJalali(gYear, gMonth, gDay) {
                        const gDaysInMonth = [
                          31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                        ];

                        const jDaysInMonth = [
                          31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                        ];

                        let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                        let gm = gMonth - 1;
                        let gd = gDay - 1;
                        let gDayNo =
                          365 * gy +
                          Math.floor((gy + 3) / 4) -
                          Math.floor((gy + 99) / 100) +
                          Math.floor((gy + 399) / 400);
                        for (let i = 0; i < gm; ++i) gDayNo += gDaysInMonth[i];
                        gDayNo += gd;
                        let jDayNo = gDayNo - (gYear >= 1600 ? 79 : 0);
                        let jNp = Math.floor(jDayNo / 12053);
                        jDayNo %= 12053;
                        let jYear =
                          979 + 33 * jNp + 4 * Math.floor(jDayNo / 1461);
                        jDayNo %= 1461;
                        if (jDayNo >= 366) {
                          jYear += Math.floor((jDayNo - 1) / 365);
                          jDayNo = (jDayNo - 1) % 365;
                        }
                        let jMonth;
                        for (
                          jMonth = 0;
                          jMonth < 11 && jDayNo >= jDaysInMonth[jMonth];
                          ++jMonth
                        )
                          jDayNo -= jDaysInMonth[jMonth];
                        let jDay = jDayNo + 1;
                        return {
                          jy: jYear + (gYear >= 1600 ? 1600 : 621),
                          jm: jMonth + 1,
                          jd: jDay
                        };
                      }
                      function convertDateToJalaliFullString(dateString) {
                        const date = new Date(dateString);
                        const gYear = date.getFullYear();
                        const gMonth = date.getMonth() + 1;
                        const gDay = date.getDate();
                        const weekdayIndex = date.getDay();
                        const { jy, jm, jd } = toJalali(gYear, gMonth, gDay);
                        const weekday = persianWeekdays[weekdayIndex];
                        const monthName = persianMonths[jm - 1];
                        return `${weekday} ${toPersianDigits(jd)} ${monthName}`;
                      }
                      const checkIn = $props.data.check_in;
                      const result = convertDateToJalaliFullString(checkIn);
                      return result;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant(globalVariants, "screen", "tablet") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const persianMonths = [
                        "فروردین",
                        "اردیبهشت",
                        "خرداد",
                        "تیر",
                        "مرداد",
                        "شهریور",
                        "مهر",
                        "آبان",
                        "آذر",
                        "دی",
                        "بهمن",
                        "اسفند"
                      ];

                      const persianWeekdays = [
                        "یک‌شنبه",
                        "دوشنبه",
                        "سه‌شنبه",
                        "چهارشنبه",
                        "پنج‌شنبه",
                        "جمعه",
                        "شنبه"
                      ];

                      function toPersianDigits(input) {
                        const persianDigits = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return input
                          .toString()
                          .replace(/\d/g, d => persianDigits[d]);
                      }
                      function toJalali(gYear, gMonth, gDay) {
                        const gDaysInMonth = [
                          31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                        ];

                        const jDaysInMonth = [
                          31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                        ];

                        let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                        let gm = gMonth - 1;
                        let gd = gDay - 1;
                        let gDayNo =
                          365 * gy +
                          Math.floor((gy + 3) / 4) -
                          Math.floor((gy + 99) / 100) +
                          Math.floor((gy + 399) / 400);
                        for (let i = 0; i < gm; ++i) gDayNo += gDaysInMonth[i];
                        gDayNo += gd;
                        let jDayNo = gDayNo - (gYear >= 1600 ? 79 : 0);
                        let jNp = Math.floor(jDayNo / 12053);
                        jDayNo %= 12053;
                        let jYear =
                          979 + 33 * jNp + 4 * Math.floor(jDayNo / 1461);
                        jDayNo %= 1461;
                        if (jDayNo >= 366) {
                          jYear += Math.floor((jDayNo - 1) / 365);
                          jDayNo = (jDayNo - 1) % 365;
                        }
                        let jMonth;
                        for (
                          jMonth = 0;
                          jMonth < 11 && jDayNo >= jDaysInMonth[jMonth];
                          ++jMonth
                        )
                          jDayNo -= jDaysInMonth[jMonth];
                        let jDay = jDayNo + 1;
                        return {
                          jy: jYear + (gYear >= 1600 ? 1600 : 621),
                          jm: jMonth + 1,
                          jd: jDay
                        };
                      }
                      function convertDateToJalaliFullString(dateString) {
                        const date = new Date(dateString);
                        const gYear = date.getFullYear();
                        const gMonth = date.getMonth() + 1;
                        const gDay = date.getDate();
                        const weekdayIndex = date.getDay();
                        const { jy, jm, jd } = toJalali(gYear, gMonth, gDay);
                        const weekday = persianWeekdays[weekdayIndex];
                        const monthName = persianMonths[jm - 1];
                        return `${weekday} ${toPersianDigits(jd)} ${monthName}`;
                      }
                      const checkIn = $props.data.check_in;
                      const result = convertDateToJalaliFullString(checkIn);
                      return result;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      const persianMonths = [
                        "فروردین",
                        "اردیبهشت",
                        "خرداد",
                        "تیر",
                        "مرداد",
                        "شهریور",
                        "مهر",
                        "آبان",
                        "آذر",
                        "دی",
                        "بهمن",
                        "اسفند"
                      ];

                      const persianWeekdays = [
                        "یک‌شنبه",
                        "دوشنبه",
                        "سه‌شنبه",
                        "چهارشنبه",
                        "پنج‌شنبه",
                        "جمعه",
                        "شنبه"
                      ];

                      function toPersianDigits(input) {
                        const persianDigits = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return input
                          .toString()
                          .replace(/\d/g, d => persianDigits[d]);
                      }
                      function toJalali(gYear, gMonth, gDay) {
                        const gDaysInMonth = [
                          31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                        ];

                        const jDaysInMonth = [
                          31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                        ];

                        let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                        let gm = gMonth - 1;
                        let gd = gDay - 1;
                        let gDayNo =
                          365 * gy +
                          Math.floor((gy + 3) / 4) -
                          Math.floor((gy + 99) / 100) +
                          Math.floor((gy + 399) / 400);
                        for (let i = 0; i < gm; ++i) gDayNo += gDaysInMonth[i];
                        gDayNo += gd;
                        let jDayNo = gDayNo - (gYear >= 1600 ? 79 : 0);
                        let jNp = Math.floor(jDayNo / 12053);
                        jDayNo %= 12053;
                        let jYear =
                          979 + 33 * jNp + 4 * Math.floor(jDayNo / 1461);
                        jDayNo %= 1461;
                        if (jDayNo >= 366) {
                          jYear += Math.floor((jDayNo - 1) / 365);
                          jDayNo = (jDayNo - 1) % 365;
                        }
                        let jMonth;
                        for (
                          jMonth = 0;
                          jMonth < 11 && jDayNo >= jDaysInMonth[jMonth];
                          ++jMonth
                        )
                          jDayNo -= jDaysInMonth[jMonth];
                        let jDay = jDayNo + 1;
                        return {
                          jy: jYear + (gYear >= 1600 ? 1600 : 621),
                          jm: jMonth + 1,
                          jd: jDay
                        };
                      }
                      function convertDateToJalaliFullString(dateString) {
                        const date = new Date(dateString);
                        const gYear = date.getFullYear();
                        const gMonth = date.getMonth() + 1;
                        const gDay = date.getDate();
                        const weekdayIndex = date.getDay();
                        const { jy, jm, jd } = toJalali(gYear, gMonth, gDay);
                        const weekday = persianWeekdays[weekdayIndex];
                        const monthName = persianMonths[jm - 1];
                        return `${weekday} ${toPersianDigits(jd)} ${monthName}`;
                      }
                      const checkIn = $props.data.check_in;
                      const result = convertDateToJalaliFullString(checkIn);
                      return result;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </div>
        <div
          data-plasmic-name={"source"}
          data-plasmic-override={overrides.source}
          className={classNames(projectcss.all, sty.source)}
        >
          <div
            data-plasmic-name={"website"}
            data-plasmic-override={overrides.website}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.website,
              {
                [sty.websiteconfirmedBookings]: hasVariant(
                  $state,
                  "confirmedBookings",
                  "confirmedBookings"
                ),
                [sty.websitepastBookingsBox]: hasVariant(
                  $state,
                  "pastBookingsBox",
                  "pastBookingsBox"
                )
              }
            )}
          >
            {hasVariant(globalVariants, "screen", "smallMobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.website_name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : hasVariant(globalVariants, "screen", "mobile") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.website_name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.website_name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tourGuideReservations: [
    "tourGuideReservations",
    "pic",
    "property",
    "img",
    "guestName",
    "geustName",
    "date2",
    "date",
    "source",
    "website"
  ],
  pic: ["pic", "property", "img"],
  property: ["property"],
  img: ["img"],
  guestName: ["guestName", "geustName"],
  geustName: ["geustName"],
  date2: ["date2", "date"],
  date: ["date"],
  source: ["source", "website"],
  website: ["website"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tourGuideReservations: "div";
  pic: "div";
  property: "div";
  img: typeof PlasmicImg__;
  guestName: "div";
  geustName: "div";
  date2: "div";
  date: "div";
  source: "div";
  website: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReservationsRecordList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReservationsRecordList__VariantsArgs;
    args?: PlasmicReservationsRecordList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicReservationsRecordList__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicReservationsRecordList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReservationsRecordList__ArgProps,
          internalVariantPropNames: PlasmicReservationsRecordList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReservationsRecordList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tourGuideReservations") {
    func.displayName = "PlasmicReservationsRecordList";
  } else {
    func.displayName = `PlasmicReservationsRecordList.${nodeName}`;
  }
  return func;
}

export const PlasmicReservationsRecordList = Object.assign(
  // Top-level PlasmicReservationsRecordList renders the root element
  makeNodeComponent("tourGuideReservations"),
  {
    // Helper components rendering sub-elements
    pic: makeNodeComponent("pic"),
    property: makeNodeComponent("property"),
    img: makeNodeComponent("img"),
    guestName: makeNodeComponent("guestName"),
    geustName: makeNodeComponent("geustName"),
    date2: makeNodeComponent("date2"),
    date: makeNodeComponent("date"),
    source: makeNodeComponent("source"),
    website: makeNodeComponent("website"),

    // Metadata about props expected for PlasmicReservationsRecordList
    internalVariantProps: PlasmicReservationsRecordList__VariantProps,
    internalArgProps: PlasmicReservationsRecordList__ArgProps
  }
);

export default PlasmicReservationsRecordList;
/* prettier-ignore-end */
