/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: rgUIidrS02xT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarRntHeader from "../../NavbarRntHeader"; // plasmic-import: gWac1FMbIJat/component
import TestimonialsScrolling from "../../TestimonialsScrolling"; // plasmic-import: lrlVKcMJCRk_/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicLite.module.css"; // plasmic-import: rgUIidrS02xT/css

import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: yp-BEibF8Gyh/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: OcX2ER-sALSD/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: 7SATgDgNnB07/icon

createPlasmicElementProxy;

export type PlasmicLite__VariantMembers = {};
export type PlasmicLite__VariantsArgs = {};
type VariantPropType = keyof PlasmicLite__VariantsArgs;
export const PlasmicLite__VariantProps = new Array<VariantPropType>();

export type PlasmicLite__ArgsType = {};
type ArgPropType = keyof PlasmicLite__ArgsType;
export const PlasmicLite__ArgProps = new Array<ArgPropType>();

export type PlasmicLite__OverridesType = {
  home?: Flex__<"div">;
  navbarRntHeader?: Flex__<typeof NavbarRntHeader>;
  mainContents?: Flex__<"div">;
  introCalendar?: Flex__<"div">;
  introCalendarTitle?: Flex__<"div">;
  introCalendarCaption?: Flex__<"div">;
  introCalendar4?: Flex__<"div">;
  introCalendarRight?: Flex__<"div">;
  introCalendarRight3?: Flex__<"div">;
  introCalendarRight4?: Flex__<"div">;
  introCalendarLeft?: Flex__<"div">;
  _3Benefits?: Flex__<"div">;
  _3Benefits1st?: Flex__<"div">;
  icon?: Flex__<"div">;
  title?: Flex__<"div">;
  caption?: Flex__<"div">;
  _3Benefits2nd?: Flex__<"div">;
  icon2?: Flex__<"div">;
  title2?: Flex__<"div">;
  caption2?: Flex__<"div">;
  _3Benefits3rd?: Flex__<"div">;
  icon3?: Flex__<"div">;
  title3?: Flex__<"div">;
  caption3?: Flex__<"div">;
  introAutoSync?: Flex__<"div">;
  introAutoSyncTitle?: Flex__<"div">;
  introAutoSyncCaption?: Flex__<"div">;
  introAutoSyncDesc?: Flex__<"div">;
  introAutoSyncBenefits?: Flex__<"div">;
  introAutoSyncGif?: Flex__<"div">;
  testimonials?: Flex__<"div">;
  titlePart?: Flex__<"div">;
  commentsScrolling?: Flex__<"div">;
  testimonialsScrolling?: Flex__<typeof TestimonialsScrolling>;
  embedHtml?: Flex__<typeof Embed>;
  screenshots?: Flex__<"div">;
  screenshotsRight?: Flex__<"div">;
  screenshotsCaption?: Flex__<"div">;
  screenshotsLeft?: Flex__<"div">;
  carousel?: Flex__<typeof Embed>;
  addingVillaIntoPltforms?: Flex__<"div">;
  reg?: Flex__<"div">;
  qA?: Flex__<"div">;
  accordionMain?: Flex__<typeof AntdAccordion>;
  _2?: Flex__<typeof AntdAccordionItem>;
  _1?: Flex__<"div">;
  _4?: Flex__<typeof AntdAccordionItem>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  html?: Flex__<"div">;
  goftino?: Flex__<typeof Embed>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
};

export interface DefaultLiteProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLite__RenderFunc(props: {
  variants: PlasmicLite__VariantsArgs;
  args: PlasmicLite__ArgsType;
  overrides: PlasmicLite__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "accordionMain.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicLite.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLite.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLite.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicLite.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicLite.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicLite.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicLite.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicLite.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicLite.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.home
          )}
        >
          <NavbarRntHeader
            data-plasmic-name={"navbarRntHeader"}
            data-plasmic-override={overrides.navbarRntHeader}
            className={classNames("__wab_instance", sty.navbarRntHeader)}
          />

          <div
            data-plasmic-name={"mainContents"}
            data-plasmic-override={overrides.mainContents}
            className={classNames(projectcss.all, sty.mainContents)}
          >
            <div
              data-plasmic-name={"introCalendar"}
              data-plasmic-override={overrides.introCalendar}
              className={classNames(projectcss.all, sty.introCalendar)}
            >
              <div
                data-plasmic-name={"introCalendarTitle"}
                data-plasmic-override={overrides.introCalendarTitle}
                className={classNames(projectcss.all, sty.introCalendarTitle)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__frdDf
                  )}
                >
                  {
                    "\u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"introCalendarCaption"}
                data-plasmic-override={overrides.introCalendarCaption}
                className={classNames(projectcss.all, sty.introCalendarCaption)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kLo
                  )}
                >
                  {
                    "\u062a\u0645\u0627\u0645 \u0648\u0642\u0627\u06cc\u0639 \u0627\u062c\u0627\u0631\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0631\u0648 \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0647\u0645\u06cc\u0634\u0647 \u0647\u0645\u0631\u0627\u0647\u062a \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634."
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"introCalendar4"}
                data-plasmic-override={overrides.introCalendar4}
                className={classNames(projectcss.all, sty.introCalendar4)}
              >
                <div
                  data-plasmic-name={"introCalendarRight"}
                  data-plasmic-override={overrides.introCalendarRight}
                  className={classNames(projectcss.all, sty.introCalendarRight)}
                >
                  <div
                    data-plasmic-name={"introCalendarRight3"}
                    data-plasmic-override={overrides.introCalendarRight3}
                    className={classNames(
                      projectcss.all,
                      sty.introCalendarRight3
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yXNy
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile")
                        ? "\u2705 \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u062c\u06cc\u0628\u062a\u0647\n\u2705 \u0645\u0634\u0627\u0647\u062f\u0647\u200c\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u06cc\u06a9 \u0646\u06af\u0627\u0647\n\u2705 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u06af\u0630\u0627\u0631\u06cc \u0631\u0648\u06cc \u06cc\u06a9 \u0631\u0648\u0632 \u062e\u0627\u0635"
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? "\u2705 \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u062c\u06cc\u0628\u062a\u0647\n\u2705 \u0645\u0634\u0627\u0647\u062f\u0647\u200c\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u06cc\u06a9 \u0646\u06af\u0627\u0647\n\u2705 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u06af\u0630\u0627\u0631\u06cc \u0631\u0648\u06cc \u06cc\u06a9 \u0631\u0648\u0632 \u062e\u0627\u0635"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "\u2705 \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u062c\u06cc\u0628\u062a\u0647\n\u2705 \u0645\u0634\u0627\u0647\u062f\u0647\u200c\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u06cc\u06a9 \u0646\u06af\u0627\u0647\n\r\n\u2705 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u06af\u0630\u0627\u0631\u06cc \u0631\u0648\u06cc \u06cc\u06a9 \u0631\u0648\u0632 \u062e\u0627\u0635"
                        : "\u2705 \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u062c\u06cc\u0628\u062a\u0647\n\u2705 \u0645\u0634\u0627\u0647\u062f\u0647\u200c\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u06cc\u06a9 \u0646\u06af\u0627\u0647\n\u2705 \u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u06af\u0630\u0627\u0631\u06cc \u0631\u0648\u06cc \u06cc\u06a9 \u0631\u0648\u0632 \u062e\u0627\u0635\r"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"introCalendarRight4"}
                    data-plasmic-override={overrides.introCalendarRight4}
                    className={classNames(
                      projectcss.all,
                      sty.introCalendarRight4
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bbSiO,
                        "clickable"
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return (window.location.href =
                                      "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/splash?src=web");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      {
                        "\u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u0631\u0627\u06cc\u06af\u0627\u0646"
                      }
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"introCalendarLeft"}
                  data-plasmic-override={overrides.introCalendarLeft}
                  className={classNames(projectcss.all, sty.introCalendarLeft)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1Dsyn)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "100%"
                        : "522px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "90%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "100%"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/handsOnApp4042LowPng.png",
                      fullWidth: 600,
                      fullHeight: 865,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"_3Benefits"}
              data-plasmic-override={overrides._3Benefits}
              className={classNames(projectcss.all, sty._3Benefits)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"_3Benefits1st"}
                data-plasmic-override={overrides._3Benefits1st}
                hasGap={true}
                className={classNames(projectcss.all, sty._3Benefits1st)}
              >
                <div
                  data-plasmic-name={"icon"}
                  data-plasmic-override={overrides.icon}
                  className={classNames(projectcss.all, sty.icon)}
                >
                  <Icon36Icon
                    className={classNames(projectcss.all, sty.svg__ylEzy)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  className={classNames(projectcss.all, sty.title)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zjGoq
                    )}
                  >
                    {
                      "\u062e\u062f\u0627\u062d\u0627\u0641\u0638\u06cc \u0628\u0627 \u062e\u0637\u0627 \u0648 \u0644\u063a\u0648 \u0631\u0632\u0631\u0648"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"caption"}
                  data-plasmic-override={overrides.caption}
                  className={classNames(projectcss.all, sty.caption)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dsyrH
                    )}
                  >
                    {
                      "\u0648\u0636\u0639\u06cc\u062a \u0631\u0632\u0631\u0648\u0647\u0627 \u06a9\u0641 \u062f\u0633\u062a\u062a\u0647"
                    }
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"_3Benefits2nd"}
                data-plasmic-override={overrides._3Benefits2nd}
                hasGap={true}
                className={classNames(projectcss.all, sty._3Benefits2nd)}
              >
                <div
                  data-plasmic-name={"icon2"}
                  data-plasmic-override={overrides.icon2}
                  className={classNames(projectcss.all, sty.icon2)}
                >
                  <Icon35Icon
                    className={classNames(projectcss.all, sty.svg__dmNq0)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"title2"}
                  data-plasmic-override={overrides.title2}
                  className={classNames(projectcss.all, sty.title2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aEq5G
                    )}
                  >
                    {
                      "\u0627\u0641\u0632\u0627\u06cc\u0634 \u062f\u0631\u0622\u0645\u062f"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"caption2"}
                  data-plasmic-override={overrides.caption2}
                  className={classNames(projectcss.all, sty.caption2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hUkkj
                    )}
                  >
                    {
                      "\u062a\u0642\u0648\u06cc\u0645\u062a \u0647\u0645\u06cc\u0634\u0647 \u0628\u0647\u200c\u0631\u0648\u0632\u0647"
                    }
                  </div>
                </div>
              </Stack__>
              <div
                data-plasmic-name={"_3Benefits3rd"}
                data-plasmic-override={overrides._3Benefits3rd}
                className={classNames(projectcss.all, sty._3Benefits3rd)}
              >
                <div
                  data-plasmic-name={"icon3"}
                  data-plasmic-override={overrides.icon3}
                  className={classNames(projectcss.all, sty.icon3)}
                >
                  <Icon33Icon
                    className={classNames(projectcss.all, sty.svg__u6CeI)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"title3"}
                  data-plasmic-override={overrides.title3}
                  className={classNames(projectcss.all, sty.title3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wXrUg
                    )}
                  >
                    {
                      "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0645\u062a\u0645\u0631\u06a9\u0632"
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"caption3"}
                  data-plasmic-override={overrides.caption3}
                  className={classNames(projectcss.all, sty.caption3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gt0Nw
                    )}
                  >
                    {
                      "\u0627\u0632 \u0646\u06af\u0647\u062f\u0627\u0631\u06cc \u0633\u0631 \u0631\u0633\u06cc\u062f \u062e\u0644\u0627\u0635 \u0634\u0648"
                    }
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"introAutoSync"}
              data-plasmic-override={overrides.introAutoSync}
              className={classNames(projectcss.all, sty.introAutoSync)}
            >
              <div
                data-plasmic-name={"introAutoSyncTitle"}
                data-plasmic-override={overrides.introAutoSyncTitle}
                className={classNames(projectcss.all, sty.introAutoSyncTitle)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rpXu2
                  )}
                >
                  {
                    "\u0634\u0641\u0627\u0641\u06cc\u062a \u062d\u0633\u0627\u0628 \u0648 \u06a9\u062a\u0627\u0628\u200c\u0647\u0627"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"introAutoSyncCaption"}
                data-plasmic-override={overrides.introAutoSyncCaption}
                className={classNames(projectcss.all, sty.introAutoSyncCaption)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qVu8H
                  )}
                >
                  {
                    "\u0628\u0627 \u062b\u0628\u062a \u0646\u0631\u062e \u0631\u0648\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0648 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0631\u0628\u0648\u0637 \u0628\u0647 \u0647\u0631 \u0631\u0632\u0631\u0648\u060c \u0645\u0648\u0642\u0639 \u062d\u0633\u0627\u0628 \u0648 \u06a9\u062a\u0627\u0628 \u0647\u06cc\u0686 \u062e\u0637\u0627\u06cc\u06cc \u067e\u06cc\u0634 \u0646\u0645\u06cc\u0627\u062f."
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"introAutoSyncDesc"}
                data-plasmic-override={overrides.introAutoSyncDesc}
                className={classNames(projectcss.all, sty.introAutoSyncDesc)}
              >
                <div
                  data-plasmic-name={"introAutoSyncBenefits"}
                  data-plasmic-override={overrides.introAutoSyncBenefits}
                  className={classNames(
                    projectcss.all,
                    sty.introAutoSyncBenefits
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6YC3
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u2705 \u062b\u0628\u062a \u0646\u0631\u062e \u0627\u062c\u0627\u0631\u0647 \u0647\u0631 \u0631\u0648\u0632 \u062f\u0631 \u062a\u0642\u0648\u06cc\u0645\n\u2705 \u062b\u0628\u062a \u062a\u062e\u0641\u06cc\u0641\n\u2705 \u0627\u0633\u062a\u0641\u0627\u062f\u0647\u200c\u06cc \u0647\u0645\u0632\u0645\u0627\u0646 \u0686\u0646\u062f \u0646\u0641\u0631 \u0627\u0632 \u06cc\u06a9 \u062a\u0642\u0648\u06cc\u0645 (\u0627\u0628\u0631\u06cc)"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u2705 \u062b\u0628\u062a \u0646\u0631\u062e \u0627\u062c\u0627\u0631\u0647 \u0647\u0631 \u0631\u0648\u0632 \u062f\u0631 \u062a\u0642\u0648\u06cc\u0645\n\u2705 \u062b\u0628\u062a \u062a\u062e\u0641\u06cc\u0641\n\u2705 \u0627\u0633\u062a\u0641\u0627\u062f\u0647\u200c\u06cc \u0647\u0645\u0632\u0645\u0627\u0646 \u0686\u0646\u062f \u0646\u0641\u0631 \u0627\u0632 \u06cc\u06a9 \u062a\u0642\u0648\u06cc\u0645 (\u0627\u0628\u0631\u06cc)"
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? "\u2705 \u062b\u0628\u062a \u0646\u0631\u062e \u0627\u062c\u0627\u0631\u0647 \u0647\u0631 \u0631\u0648\u0632 \u062f\u0631 \u062a\u0642\u0648\u06cc\u0645\n\u2705 \u062b\u0628\u062a \u062a\u062e\u0641\u06cc\u0641\n\u2705 \u0627\u0633\u062a\u0641\u0627\u062f\u0647\u200c\u06cc \u0647\u0645\u0632\u0645\u0627\u0646 \u0686\u0646\u062f \u0646\u0641\u0631 \u0627\u0632 \u06cc\u06a9 \u062a\u0642\u0648\u06cc\u0645 (\u0627\u0628\u0631\u06cc)"
                      : "\u2705 \u062b\u0628\u062a \u0646\u0631\u062e \u0627\u062c\u0627\u0631\u0647 \u0647\u0631 \u0631\u0648\u0632 \u062f\u0631 \u062a\u0642\u0648\u06cc\u0645\n\u2705 \u062b\u0628\u062a \u062a\u062e\u0641\u06cc\u0641\n\u2705 \u0627\u0633\u062a\u0641\u0627\u062f\u0647\u200c\u06cc \u0647\u0645\u0632\u0645\u0627\u0646 \u0686\u0646\u062f \u0646\u0641\u0631 \u0627\u0632 \u06cc\u06a9 \u062a\u0642\u0648\u06cc\u0645 (\u0627\u0628\u0631\u06cc)"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"introAutoSyncGif"}
                  data-plasmic-override={overrides.introAutoSyncGif}
                  className={classNames(projectcss.all, sty.introAutoSyncGif)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ePAo)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image99.png",
                      fullWidth: 486,
                      fullHeight: 573,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"testimonials"}
              data-plasmic-override={overrides.testimonials}
              className={classNames(projectcss.all, sty.testimonials)}
            >
              <div
                data-plasmic-name={"titlePart"}
                data-plasmic-override={overrides.titlePart}
                className={classNames(projectcss.all, sty.titlePart)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pQUs
                  )}
                >
                  {
                    "\u0627\u0639\u062a\u0645\u0627\u062f \u0628\u06cc\u0634 \u0627\u0632 \u06f8\u06f0\u06f0 \u0645\u06cc\u0632\u0628\u0627\u0646 \u0627\u0632 \u0633\u0631\u0627\u0633\u0631 \u06a9\u0634\u0648\u0631"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"commentsScrolling"}
                data-plasmic-override={overrides.commentsScrolling}
                className={classNames(projectcss.all, sty.commentsScrolling)}
              >
                <TestimonialsScrolling
                  data-plasmic-name={"testimonialsScrolling"}
                  data-plasmic-override={overrides.testimonialsScrolling}
                  className={classNames(
                    "__wab_instance",
                    sty.testimonialsScrolling
                  )}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bz6Y7)}>
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "<div id=\"counterSection\" class=\"counter-container\">\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count1\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062a\u062d\u062a \u067e\u0648\u0634\u0634</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count2\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count3\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u0648\u0636\u0639\u06cc\u062a \u062a\u0642\u0648\u06cc\u0645</div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .counter-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n  }\r\n\r\n  .counter-wrapper {\r\n    width: 33%;\r\n    text-align: center;\r\n  }\r\n\r\n  .counter-title {\r\n    font-size: 1.3rem;\r\n    margin-top: 10px;\r\n    direction: rtl;\r\n  }\r\n\r\n  .counter {\r\n    font-size: 1.8rem;\r\n    font-weight: bold;\r\n    direction: rtl;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    .counter-container {\r\n      flex-direction: column;\r\n      align-items: center;\r\n      padding: 20px;\r\n    }\r\n    .counter-wrapper {\r\n      width: 100%;\r\n      margin-bottom: 30px;\r\n    }\r\n  }\r\n</style>\r\n\r\n<script>\r\n  function toPersianNumber(num) {\r\n    const persianDigits = ['\u06f0', '\u06f1', '\u06f2', '\u06f3', '\u06f4', '\u06f5', '\u06f6', '\u06f7', '\u06f8', '\u06f9'];\r\n\r\n    // \u062c\u062f\u0627 \u06a9\u0631\u062f\u0646 \u0633\u0647\u200c\u0631\u0642\u0645\u06cc \u0639\u062f\u062f \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u06a9\u0627\u0645\u0627\r\n    let formattedNumber = num.toLocaleString('en-US');\r\n\r\n    // \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646\u06cc \u0627\u0639\u062f\u0627\u062f \u0627\u0646\u06af\u0644\u06cc\u0633\u06cc \u0628\u0627 \u0641\u0627\u0631\u0633\u06cc\r\n    return formattedNumber.replace(/\\d/g, digit => persianDigits[digit]);\r\n  }\r\n\r\n  function startCounter(counterElement, startValue, endValue, duration) {\r\n    let startTime = null;\r\n    const step = (timestamp) => {\r\n      if (!startTime) startTime = timestamp;\r\n      const progress = (timestamp - startTime) / duration;\r\n      const currentValue = Math.min(startValue + (endValue - startValue) * progress, endValue);\r\n      counterElement.textContent = toPersianNumber(Math.round(currentValue)) + \" +\";\r\n      if (currentValue < endValue) {\r\n        requestAnimationFrame(step);\r\n      }\r\n    };\r\n    requestAnimationFrame(step);\r\n  }\r\n\r\n  let hasCounted = false;\r\n\r\n  function onScroll() {\r\n    const counterSection = document.getElementById('counterSection');\r\n    const rect = counterSection.getBoundingClientRect();\r\n\r\n    if (!hasCounted && rect.top <= window.innerHeight && rect.bottom >= 0) {\r\n      hasCounted = true;\r\n      startCounter(document.getElementById('count1'), 0, 910, 5000);\r\n      startCounter(document.getElementById('count2'), 0, 12000, 6000);\r\n      startCounter(document.getElementById('count3'), 0, 72000, 7000);\r\n\r\n      window.removeEventListener('scroll', onScroll);\r\n    }\r\n  }\r\n\r\n  window.addEventListener('scroll', onScroll);\r\n</script>\r\n"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "<div id=\"counterSection\" class=\"counter-container\">\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count1\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062a\u062d\u062a \u067e\u0648\u0634\u0634</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count2\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count3\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u0648\u0636\u0639\u06cc\u062a \u062a\u0642\u0648\u06cc\u0645</div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .counter-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n  }\r\n\r\n  .counter-wrapper {\r\n    width: 33%;\r\n    text-align: center;\r\n  }\r\n\r\n  .counter-title {\r\n    font-size: 1.3rem;\r\n    margin-top: 10px;\r\n    direction: rtl;\r\n  }\r\n\r\n  .counter {\r\n    font-size: 1.8rem;\r\n    font-weight: bold;\r\n    direction: rtl;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    .counter-container {\r\n      flex-direction: column;\r\n      align-items: center;\r\n      padding: 20px;\r\n    }\r\n    .counter-wrapper {\r\n      width: 100%;\r\n      margin-bottom: 30px;\r\n  }\r\n</style>\r\n\r\n<script>\r\n  function toPersianNumber(num) {\r\n    const persianDigits = ['\u06f0', '\u06f1', '\u06f2', '\u06f3', '\u06f4', '\u06f5', '\u06f6', '\u06f7', '\u06f8', '\u06f9'];\r\n\r\n    // \u062c\u062f\u0627 \u06a9\u0631\u062f\u0646 \u0633\u0647\u200c\u0631\u0642\u0645\u06cc \u0639\u062f\u062f \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u06a9\u0627\u0645\u0627\r\n    let formattedNumber = num.toLocaleString('en-US');\r\n\r\n    // \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646\u06cc \u0627\u0639\u062f\u0627\u062f \u0627\u0646\u06af\u0644\u06cc\u0633\u06cc \u0628\u0627 \u0641\u0627\u0631\u0633\u06cc\r\n    return formattedNumber.replace(/\\d/g, digit => persianDigits[digit]);\r\n  }\r\n\r\n  function startCounter(counterElement, startValue, endValue, duration) {\r\n    let startTime = null;\r\n    const step = (timestamp) => {\r\n      if (!startTime) startTime = timestamp;\r\n      const progress = (timestamp - startTime) / duration;\r\n      const currentValue = Math.min(startValue + (endValue - startValue) * progress, endValue);\r\n      counterElement.textContent = toPersianNumber(Math.round(currentValue)) + \" +\";\r\n      if (currentValue < endValue) {\r\n        requestAnimationFrame(step);\r\n      }\r\n    };\r\n    requestAnimationFrame(step);\r\n  }\r\n\r\n  let hasCounted = false;\r\n\r\n  function onScroll() {\r\n    const counterSection = document.getElementById('counterSection');\r\n    const rect = counterSection.getBoundingClientRect();\r\n\r\n    if (!hasCounted && rect.top <= window.innerHeight && rect.bottom >= 0) {\r\n      hasCounted = true;\r\n      startCounter(document.getElementById('count1'), 0, 910, 5000);\r\n      startCounter(document.getElementById('count2'), 0, 10000, 6000);\r\n      startCounter(document.getElementById('count3'), 0, 72000, 7000);\r\n\r\n      window.removeEventListener('scroll', onScroll);\r\n    }\r\n  }\r\n\r\n  window.addEventListener('scroll', onScroll);\r\n</script>\r\n"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "<div id=\"counterSection\" class=\"counter-container\">\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count1\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062a\u062d\u062a \u067e\u0648\u0634\u0634</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count2\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count3\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u0648\u0636\u0639\u06cc\u062a \u062a\u0642\u0648\u06cc\u0645</div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .counter-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n  }\r\n\r\n  .counter-wrapper {\r\n    width: 33%;\r\n    text-align: center;\r\n  }\r\n\r\n  .counter-title {\r\n    font-size: 1.3rem;\r\n    margin-top: 10px;\r\n    direction: rtl;\r\n  }\r\n\r\n  .counter {\r\n    font-size: 1.8rem;\r\n    font-weight: bold;\r\n    direction: rtl;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    .counter-container {\r\n      flex-direction: column;\r\n      align-items: center;\r\n      padding: 20px;\r\n    }\r\n    .counter-wrapper {\r\n      width: 100%;\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n</style>\r\n\r\n<script>\r\n  function toPersianNumber(num) {\r\n    const persianDigits = ['\u06f0', '\u06f1', '\u06f2', '\u06f3', '\u06f4', '\u06f5', '\u06f6', '\u06f7', '\u06f8', '\u06f9'];\r\n\r\n    // \u062c\u062f\u0627 \u06a9\u0631\u062f\u0646 \u0633\u0647\u200c\u0631\u0642\u0645\u06cc \u0639\u062f\u062f \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u06a9\u0627\u0645\u0627\r\n    let formattedNumber = num.toLocaleString('en-US');\r\n\r\n    // \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646\u06cc \u0627\u0639\u062f\u0627\u062f \u0627\u0646\u06af\u0644\u06cc\u0633\u06cc \u0628\u0627 \u0641\u0627\u0631\u0633\u06cc\r\n    return formattedNumber.replace(/\\d/g, digit => persianDigits[digit]);\r\n  }\r\n\r\n  function startCounter(counterElement, startValue, endValue, duration) {\r\n    let startTime = null;\r\n    const step = (timestamp) => {\r\n      if (!startTime) startTime = timestamp;\r\n      const progress = (timestamp - startTime) / duration;\r\n      const currentValue = Math.min(startValue + (endValue - startValue) * progress, endValue);\r\n      counterElement.textContent = toPersianNumber(Math.round(currentValue)) + \" +\";\r\n      if (currentValue < endValue) {\r\n        requestAnimationFrame(step);\r\n      }\r\n    };\r\n    requestAnimationFrame(step);\r\n  }\r\n\r\n  let hasCounted = false;\r\n\r\n  function onScroll() {\r\n    const counterSection = document.getElementById('counterSection');\r\n    const rect = counterSection.getBoundingClientRect();\r\n\r\n    if (!hasCounted && rect.top <= window.innerHeight && rect.bottom >= 0) {\r\n      hasCounted = true;\r\n      startCounter(document.getElementById('count1'), 0, 910, 5000);\r\n      startCounter(document.getElementById('count2'), 0, 10000, 6000);\r\n      startCounter(document.getElementById('count3'), 0, 72000, 7000);\r\n\r\n      window.removeEventListener('scroll', onScroll);\r\n    }\r\n  }\r\n\r\n  window.addEventListener('scroll', onScroll);\r\n</script>\r\n"
                    : "<div id=\"counterSection\" class=\"counter-container\">\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count1\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062a\u062d\u062a \u067e\u0648\u0634\u0634</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count2\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631</div>\r\n  </div>\r\n  <div class=\"counter-wrapper\">\r\n    <div id=\"count3\" class=\"counter\">\u06f0 +</div>\r\n    <div class=\"counter-title\">\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u0648\u0636\u0639\u06cc\u062a \u062a\u0642\u0648\u06cc\u0645</div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .counter-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n  }\r\n\r\n  .counter-wrapper {\r\n    width: 33%;\r\n    text-align: center;\r\n  }\r\n\r\n  .counter-title {\r\n    font-size: 1.3rem;\r\n    margin-top: 10px;\r\n    direction: rtl;\r\n  }\r\n\r\n  .counter {\r\n    font-size: 1.8rem;\r\n    font-weight: bold;\r\n    direction: rtl;\r\n  }\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    .counter-container {\r\n      flex-direction: column;\r\n      align-items: center;\r\n      padding: 20px;\r\n    }\r\n    .counter-wrapper {\r\n      width: 100%;\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n</style>\r\n\r\n<script>\r\n  function toPersianNumber(num) {\r\n    const persianDigits = ['\u06f0', '\u06f1', '\u06f2', '\u06f3', '\u06f4', '\u06f5', '\u06f6', '\u06f7', '\u06f8', '\u06f9'];\r\n\r\n    // \u062c\u062f\u0627 \u06a9\u0631\u062f\u0646 \u0633\u0647\u200c\u0631\u0642\u0645\u06cc \u0639\u062f\u062f \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u06a9\u0627\u0645\u0627\r\n    let formattedNumber = num.toLocaleString('en-US');\r\n\r\n    // \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646\u06cc \u0627\u0639\u062f\u0627\u062f \u0627\u0646\u06af\u0644\u06cc\u0633\u06cc \u0628\u0627 \u0641\u0627\u0631\u0633\u06cc\r\n    return formattedNumber.replace(/\\d/g, digit => persianDigits[digit]);\r\n  }\r\n\r\n  function startCounter(counterElement, startValue, endValue, duration) {\r\n    let startTime = null;\r\n    const step = (timestamp) => {\r\n      if (!startTime) startTime = timestamp;\r\n      const progress = (timestamp - startTime) / duration;\r\n      const currentValue = Math.min(startValue + (endValue - startValue) * progress, endValue);\r\n      counterElement.textContent = toPersianNumber(Math.round(currentValue)) + \" +\";\r\n      if (currentValue < endValue) {\r\n        requestAnimationFrame(step);\r\n      }\r\n    };\r\n    requestAnimationFrame(step);\r\n  }\r\n\r\n  let hasCounted = false;\r\n\r\n  function onScroll() {\r\n    const counterSection = document.getElementById('counterSection');\r\n    const rect = counterSection.getBoundingClientRect();\r\n\r\n    if (!hasCounted && rect.top <= window.innerHeight && rect.bottom >= 0) {\r\n      hasCounted = true;\r\n      startCounter(document.getElementById('count1'), 0, 1200, 5000);\r\n      startCounter(document.getElementById('count2'), 0, 10000, 6000);\r\n      startCounter(document.getElementById('count3'), 0, 72000, 7000);\r\n\r\n      window.removeEventListener('scroll', onScroll);\r\n    }\r\n  }\r\n\r\n  window.addEventListener('scroll', onScroll);\r\n</script>\r\n"
                }
              />
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"screenshots"}
            data-plasmic-override={overrides.screenshots}
            hasGap={true}
            className={classNames(projectcss.all, sty.screenshots)}
          >
            <div
              data-plasmic-name={"screenshotsRight"}
              data-plasmic-override={overrides.screenshotsRight}
              className={classNames(projectcss.all, sty.screenshotsRight)}
            >
              <div
                data-plasmic-name={"screenshotsCaption"}
                data-plasmic-override={overrides.screenshotsCaption}
                className={classNames(projectcss.all, sty.screenshotsCaption)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r6Rq4
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "\u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u0645\u0647\u0645\u0627\u0646\u0627\u0646  \u0648 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0622\u06cc\u0646\u062f\u0647"
                    : "\u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u0645\u0647\u0645\u0627\u0646\u0627\u0646  \u0648 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0622\u06cc\u0646\u062f\u0647"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"screenshotsLeft"}
              data-plasmic-override={overrides.screenshotsLeft}
              className={classNames(projectcss.all, sty.screenshotsLeft)}
            >
              <Embed
                data-plasmic-name={"carousel"}
                data-plasmic-override={overrides.carousel}
                className={classNames("__wab_instance", sty.carousel)}
                code={
                  '<!DOCTYPE html>\r\n<html lang="fa">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>Simple Image Slider</title>\r\n    <style>\r\n        .slider-container {\r\n            position: relative;\r\n            width: 100%;\r\n            max-width: 800px;\r\n            height: 400px;\r\n            overflow: hidden;\r\n        }\r\n        .slider-container img {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: contain;\r\n            opacity: 0;\r\n            transition: opacity 0.5s ease-in-out;\r\n        }\r\n        .slider-container img.active {\r\n            opacity: 1;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class="slider-container">\r\n        <img src="https://rentamon-files.storage.iran.liara.space/img/1.png" class="active" alt="Slide 1">\r\n        <img src="https://rentamon-files.storage.iran.liara.space/img/2.png" alt="Slide 2">\r\n        <img src="https://rentamon-files.storage.iran.liara.space/img/3.png" alt="Slide 3">\r\n        <img src="https://rentamon-files.storage.iran.liara.space/img/4.png" alt="Slide 4">\r\n    </div>\r\n\r\n    <script>\r\n        document.addEventListener("DOMContentLoaded", function () {\r\n            var images = document.querySelectorAll(".slider-container img");\r\n            var currentIndex = 0;\r\n            \r\n            function changeSlide() {\r\n                images[currentIndex].classList.remove("active");\r\n                currentIndex = (currentIndex + 1) % images.length;\r\n                images[currentIndex].classList.add("active");\r\n            }\r\n            \r\n            setInterval(changeSlide, 4000);\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n'
                }
              />
            </div>
          </Stack__>
          <div
            data-plasmic-name={"addingVillaIntoPltforms"}
            data-plasmic-override={overrides.addingVillaIntoPltforms}
            className={classNames(projectcss.all, sty.addingVillaIntoPltforms)}
          >
            <div
              data-plasmic-name={"reg"}
              data-plasmic-override={overrides.reg}
              className={classNames(projectcss.all, sty.reg)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iWtB,
                  "clickable"
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/splash?src=web");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {
                  "\u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u0631\u0627\u06cc\u06af\u0627\u0646"
                }
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"qA"}
            data-plasmic-override={overrides.qA}
            className={classNames(projectcss.all, sty.qA)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vdQf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__boWLb
                )}
              >
                {
                  "\u0633\u0648\u0627\u0644\u0627\u062a \u0645\u062a\u062f\u0627\u0648\u0644:\r\n\r"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___8M3Uf)}>
              {(() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordionMain",
                    "activePanelId"
                  ]),
                  bordered: true,
                  className: classNames("__wab_instance", sty.accordionMain),
                  ghost: true,
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        data-plasmic-name={"_2"}
                        data-plasmic-override={overrides._2}
                        className={classNames("__wab_instance", sty._2)}
                        id={"11"}
                        label2={
                          <div
                            data-plasmic-name={"_1"}
                            data-plasmic-override={overrides._1}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty._1
                            )}
                          >
                            {
                              "\u0647\u0632\u06cc\u0646\u0647\u200c\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u00ab\u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u00bb \u0686\u0642\u062f\u0631\u0647\u061f"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dMJkD
                          )}
                        >
                          {
                            "\u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0631\u0627\u06cc\u06af\u0627\u0646\u0647. \u0627\u06cc\u0646 \u062a\u0642\u0648\u06cc\u0645 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a\u06cc \u0645\u062b\u0644 \u062a\u063a\u06cc\u06cc\u0631 \u06cc\u06a9\u062c\u0627 \u0642\u06cc\u0645\u062a\u060c \u062a\u062e\u0641\u06cc\u0641\u060c \u067e\u0631 \u0648 \u062e\u0627\u0644\u06cc \u06a9\u0631\u062f\u0646 \u0631\u0648 \u062f\u0631 \u0627\u062e\u062a\u06cc\u0627\u0631\u062a \u0645\u06cc\u200c\u0630\u0627\u0631\u0647."
                          }
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        data-plasmic-name={"_4"}
                        data-plasmic-override={overrides._4}
                        className={classNames("__wab_instance", sty._4)}
                        id={"22"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mLEka
                            )}
                          >
                            {
                              "\u0622\u06cc\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u062f\u06cc\u06af\u0647\u200c\u0627\u06cc \u0647\u0645 \u062f\u0627\u0631\u0647\u061f"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xojtl
                          )}
                        >
                          {
                            "\u0628\u0644\u0647. \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u067e\u06cc\u0634\u0631\u0641\u062a\u0647\u200c\u062a\u0631\u06cc \u0647\u0645 \u062f\u0627\u0631\u0647. \u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0634\u0645\u0627 \u0631\u0648 \u062a\u0628\u062f\u06cc\u0644 \u0628\u0647 \u06cc\u06a9 \u0645\u06cc\u0632\u0628\u0627\u0646 \u062d\u0631\u0641\u0647\u200c\u0627\u06cc \u06a9\u0646\u0647. \u0628\u0627 \u0627\u0641\u0632\u0627\u06cc\u0634 \u062f\u0631\u0622\u0645\u062f."
                          }
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__tC56I
                        )}
                        id={"55"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c2Eta
                            )}
                          >
                            {
                              "\u0686\u0646\u062f\u062a\u0627 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u062b\u0628\u062a \u06a9\u0646\u0645\u061f"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aqDfq
                          )}
                        >
                          {
                            "\u0647\u0631 \u0686\u0646\u062f\u062a\u0627 \u06a9\u0647 \u0628\u062e\u0648\u0627\u06cc! \u0645\u062d\u062f\u0648\u062f\u06cc\u062a\u06cc \u0646\u06cc\u0633\u062a. \u0641\u0642\u0637 \u06a9\u0627\u0641\u06cc\u0647  \u0628\u0639\u062f \u0627\u0632 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u060c \u0645\u0631\u0627\u062d\u0644 \u062b\u0628\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0631\u0648 \u067e\u06cc\u0634 \u0628\u0628\u0631\u06cc."
                          }
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__mI6Mf
                        )}
                        id={"88"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__abClb
                            )}
                          >
                            {
                              "\u0633\u06cc\u0633\u062a\u0645 \u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627 (\u0686\u0646\u0644\u200c\u0645\u0646\u06cc\u062c\u0631) \u0686\u06cc\u0647\u061f"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__er6Z9
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "\u0686\u0646\u0644\u200c\u0645\u0646\u06cc\u062c\u0631 \u0647\u0645\u0647\u200c\u06cc \u06a9\u0627\u0646\u0627\u0644\u200c\u0647\u0627\u06cc \u0641\u0631\u0648\u0634 \u0645\u06cc\u0632\u0628\u0627\u0646 \u0631\u0648 \u0647\u0645\u0633\u0627\u0646\u200c\u0633\u0627\u0632\u06cc \u0645\u06cc\u200c\u06a9\u0646\u0647. \u0645\u062b\u0644\u0627 \u0627\u06af\u0647 \u0627\u0632 \u062c\u0627\u0628\u0627\u0645\u0627 \u0631\u0632\u0631\u0648 \u0628\u06af\u06cc\u0631\u06cc\u060c \u0686\u0646\u0644\u200c\u0645\u0646\u06cc\u062c\u0631 \u0622\u062e\u0631 \u0647\u0641\u062a\u0647 \u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u062f\u0631 \u0633\u0627\u06cc\u0631 \u067e\u0644\u062a\u0641\u0631\u0645\u200c\u0647\u0627 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u06a9\u0646\u0647! "
                              }
                            </React.Fragment>
                            {
                              <PlasmicLink__
                                data-plasmic-name={"link"}
                                data-plasmic-override={overrides.link}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.link
                                )}
                                component={Link}
                                href={
                                  "https://rentamon.com/%d9%85%d8%af%db%8c%d8%b1%db%8c%d8%aa-%d9%88%db%8c%d9%84%d8%a7/"
                                }
                                platform={"nextjs"}
                              >
                                {
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0634\u062a\u0631"
                                }
                              </PlasmicLink__>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "activePanelId",
                      ["accordionMain", "activePanelId"],
                      AntdAccordion_Helpers
                    ).apply(null, eventArgs);
                  }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordionMain.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdAccordion
                    data-plasmic-name={"accordionMain"}
                    data-plasmic-override={overrides.accordionMain}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <div
              data-plasmic-name={"html"}
              data-plasmic-override={overrides.html}
              className={classNames(projectcss.all, sty.html)}
            >
              <Embed
                data-plasmic-name={"goftino"}
                data-plasmic-override={overrides.goftino}
                className={classNames("__wab_instance", sty.goftino)}
                code={
                  '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox__glh1F)}>
                <ClarityRntComponent
                  data-plasmic-name={"clarityRntComponent"}
                  data-plasmic-override={overrides.clarityRntComponent}
                  className={classNames(
                    "__wab_instance",
                    sty.clarityRntComponent
                  )}
                />

                <FaviconRntComponent
                  data-plasmic-name={"faviconRntComponent"}
                  data-plasmic-override={overrides.faviconRntComponent}
                  className={classNames(
                    "__wab_instance",
                    sty.faviconRntComponent
                  )}
                />
              </div>
            </div>
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: [
    "home",
    "navbarRntHeader",
    "mainContents",
    "introCalendar",
    "introCalendarTitle",
    "introCalendarCaption",
    "introCalendar4",
    "introCalendarRight",
    "introCalendarRight3",
    "introCalendarRight4",
    "introCalendarLeft",
    "_3Benefits",
    "_3Benefits1st",
    "icon",
    "title",
    "caption",
    "_3Benefits2nd",
    "icon2",
    "title2",
    "caption2",
    "_3Benefits3rd",
    "icon3",
    "title3",
    "caption3",
    "introAutoSync",
    "introAutoSyncTitle",
    "introAutoSyncCaption",
    "introAutoSyncDesc",
    "introAutoSyncBenefits",
    "introAutoSyncGif",
    "testimonials",
    "titlePart",
    "commentsScrolling",
    "testimonialsScrolling",
    "embedHtml",
    "screenshots",
    "screenshotsRight",
    "screenshotsCaption",
    "screenshotsLeft",
    "carousel",
    "addingVillaIntoPltforms",
    "reg",
    "qA",
    "accordionMain",
    "_2",
    "_1",
    "_4",
    "link",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent",
    "rentamonFooter"
  ],
  navbarRntHeader: ["navbarRntHeader"],
  mainContents: [
    "mainContents",
    "introCalendar",
    "introCalendarTitle",
    "introCalendarCaption",
    "introCalendar4",
    "introCalendarRight",
    "introCalendarRight3",
    "introCalendarRight4",
    "introCalendarLeft",
    "_3Benefits",
    "_3Benefits1st",
    "icon",
    "title",
    "caption",
    "_3Benefits2nd",
    "icon2",
    "title2",
    "caption2",
    "_3Benefits3rd",
    "icon3",
    "title3",
    "caption3",
    "introAutoSync",
    "introAutoSyncTitle",
    "introAutoSyncCaption",
    "introAutoSyncDesc",
    "introAutoSyncBenefits",
    "introAutoSyncGif",
    "testimonials",
    "titlePart",
    "commentsScrolling",
    "testimonialsScrolling",
    "embedHtml"
  ],
  introCalendar: [
    "introCalendar",
    "introCalendarTitle",
    "introCalendarCaption",
    "introCalendar4",
    "introCalendarRight",
    "introCalendarRight3",
    "introCalendarRight4",
    "introCalendarLeft"
  ],
  introCalendarTitle: ["introCalendarTitle"],
  introCalendarCaption: ["introCalendarCaption"],
  introCalendar4: [
    "introCalendar4",
    "introCalendarRight",
    "introCalendarRight3",
    "introCalendarRight4",
    "introCalendarLeft"
  ],
  introCalendarRight: [
    "introCalendarRight",
    "introCalendarRight3",
    "introCalendarRight4"
  ],
  introCalendarRight3: ["introCalendarRight3"],
  introCalendarRight4: ["introCalendarRight4"],
  introCalendarLeft: ["introCalendarLeft"],
  _3Benefits: [
    "_3Benefits",
    "_3Benefits1st",
    "icon",
    "title",
    "caption",
    "_3Benefits2nd",
    "icon2",
    "title2",
    "caption2",
    "_3Benefits3rd",
    "icon3",
    "title3",
    "caption3"
  ],
  _3Benefits1st: ["_3Benefits1st", "icon", "title", "caption"],
  icon: ["icon"],
  title: ["title"],
  caption: ["caption"],
  _3Benefits2nd: ["_3Benefits2nd", "icon2", "title2", "caption2"],
  icon2: ["icon2"],
  title2: ["title2"],
  caption2: ["caption2"],
  _3Benefits3rd: ["_3Benefits3rd", "icon3", "title3", "caption3"],
  icon3: ["icon3"],
  title3: ["title3"],
  caption3: ["caption3"],
  introAutoSync: [
    "introAutoSync",
    "introAutoSyncTitle",
    "introAutoSyncCaption",
    "introAutoSyncDesc",
    "introAutoSyncBenefits",
    "introAutoSyncGif"
  ],
  introAutoSyncTitle: ["introAutoSyncTitle"],
  introAutoSyncCaption: ["introAutoSyncCaption"],
  introAutoSyncDesc: [
    "introAutoSyncDesc",
    "introAutoSyncBenefits",
    "introAutoSyncGif"
  ],
  introAutoSyncBenefits: ["introAutoSyncBenefits"],
  introAutoSyncGif: ["introAutoSyncGif"],
  testimonials: [
    "testimonials",
    "titlePart",
    "commentsScrolling",
    "testimonialsScrolling"
  ],
  titlePart: ["titlePart"],
  commentsScrolling: ["commentsScrolling", "testimonialsScrolling"],
  testimonialsScrolling: ["testimonialsScrolling"],
  embedHtml: ["embedHtml"],
  screenshots: [
    "screenshots",
    "screenshotsRight",
    "screenshotsCaption",
    "screenshotsLeft",
    "carousel"
  ],
  screenshotsRight: ["screenshotsRight", "screenshotsCaption"],
  screenshotsCaption: ["screenshotsCaption"],
  screenshotsLeft: ["screenshotsLeft", "carousel"],
  carousel: ["carousel"],
  addingVillaIntoPltforms: ["addingVillaIntoPltforms", "reg"],
  reg: ["reg"],
  qA: [
    "qA",
    "accordionMain",
    "_2",
    "_1",
    "_4",
    "link",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  accordionMain: ["accordionMain", "_2", "_1", "_4", "link"],
  _2: ["_2", "_1"],
  _1: ["_1"],
  _4: ["_4"],
  link: ["link"],
  html: ["html", "goftino", "clarityRntComponent", "faviconRntComponent"],
  goftino: ["goftino"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  rentamonFooter: ["rentamonFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  home: "div";
  navbarRntHeader: typeof NavbarRntHeader;
  mainContents: "div";
  introCalendar: "div";
  introCalendarTitle: "div";
  introCalendarCaption: "div";
  introCalendar4: "div";
  introCalendarRight: "div";
  introCalendarRight3: "div";
  introCalendarRight4: "div";
  introCalendarLeft: "div";
  _3Benefits: "div";
  _3Benefits1st: "div";
  icon: "div";
  title: "div";
  caption: "div";
  _3Benefits2nd: "div";
  icon2: "div";
  title2: "div";
  caption2: "div";
  _3Benefits3rd: "div";
  icon3: "div";
  title3: "div";
  caption3: "div";
  introAutoSync: "div";
  introAutoSyncTitle: "div";
  introAutoSyncCaption: "div";
  introAutoSyncDesc: "div";
  introAutoSyncBenefits: "div";
  introAutoSyncGif: "div";
  testimonials: "div";
  titlePart: "div";
  commentsScrolling: "div";
  testimonialsScrolling: typeof TestimonialsScrolling;
  embedHtml: typeof Embed;
  screenshots: "div";
  screenshotsRight: "div";
  screenshotsCaption: "div";
  screenshotsLeft: "div";
  carousel: typeof Embed;
  addingVillaIntoPltforms: "div";
  reg: "div";
  qA: "div";
  accordionMain: typeof AntdAccordion;
  _2: typeof AntdAccordionItem;
  _1: "div";
  _4: typeof AntdAccordionItem;
  link: "a";
  html: "div";
  goftino: typeof Embed;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  rentamonFooter: typeof RentamonFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLite__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLite__VariantsArgs;
    args?: PlasmicLite__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLite__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLite__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLite__ArgProps,
          internalVariantPropNames: PlasmicLite__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLite__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicLite";
  } else {
    func.displayName = `PlasmicLite.${nodeName}`;
  }
  return func;
}

export const PlasmicLite = Object.assign(
  // Top-level PlasmicLite renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    navbarRntHeader: makeNodeComponent("navbarRntHeader"),
    mainContents: makeNodeComponent("mainContents"),
    introCalendar: makeNodeComponent("introCalendar"),
    introCalendarTitle: makeNodeComponent("introCalendarTitle"),
    introCalendarCaption: makeNodeComponent("introCalendarCaption"),
    introCalendar4: makeNodeComponent("introCalendar4"),
    introCalendarRight: makeNodeComponent("introCalendarRight"),
    introCalendarRight3: makeNodeComponent("introCalendarRight3"),
    introCalendarRight4: makeNodeComponent("introCalendarRight4"),
    introCalendarLeft: makeNodeComponent("introCalendarLeft"),
    _3Benefits: makeNodeComponent("_3Benefits"),
    _3Benefits1st: makeNodeComponent("_3Benefits1st"),
    icon: makeNodeComponent("icon"),
    title: makeNodeComponent("title"),
    caption: makeNodeComponent("caption"),
    _3Benefits2nd: makeNodeComponent("_3Benefits2nd"),
    icon2: makeNodeComponent("icon2"),
    title2: makeNodeComponent("title2"),
    caption2: makeNodeComponent("caption2"),
    _3Benefits3rd: makeNodeComponent("_3Benefits3rd"),
    icon3: makeNodeComponent("icon3"),
    title3: makeNodeComponent("title3"),
    caption3: makeNodeComponent("caption3"),
    introAutoSync: makeNodeComponent("introAutoSync"),
    introAutoSyncTitle: makeNodeComponent("introAutoSyncTitle"),
    introAutoSyncCaption: makeNodeComponent("introAutoSyncCaption"),
    introAutoSyncDesc: makeNodeComponent("introAutoSyncDesc"),
    introAutoSyncBenefits: makeNodeComponent("introAutoSyncBenefits"),
    introAutoSyncGif: makeNodeComponent("introAutoSyncGif"),
    testimonials: makeNodeComponent("testimonials"),
    titlePart: makeNodeComponent("titlePart"),
    commentsScrolling: makeNodeComponent("commentsScrolling"),
    testimonialsScrolling: makeNodeComponent("testimonialsScrolling"),
    embedHtml: makeNodeComponent("embedHtml"),
    screenshots: makeNodeComponent("screenshots"),
    screenshotsRight: makeNodeComponent("screenshotsRight"),
    screenshotsCaption: makeNodeComponent("screenshotsCaption"),
    screenshotsLeft: makeNodeComponent("screenshotsLeft"),
    carousel: makeNodeComponent("carousel"),
    addingVillaIntoPltforms: makeNodeComponent("addingVillaIntoPltforms"),
    reg: makeNodeComponent("reg"),
    qA: makeNodeComponent("qA"),
    accordionMain: makeNodeComponent("accordionMain"),
    _2: makeNodeComponent("_2"),
    _1: makeNodeComponent("_1"),
    _4: makeNodeComponent("_4"),
    link: makeNodeComponent("link"),
    html: makeNodeComponent("html"),
    goftino: makeNodeComponent("goftino"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),

    // Metadata about props expected for PlasmicLite
    internalVariantProps: PlasmicLite__VariantProps,
    internalArgProps: PlasmicLite__ArgProps,

    // Key-value metadata
    metadata: {
      ogDescription:
        "\u0628\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0628\u0647 \u0633\u0627\u062f\u0647\u200c\u062a\u0631\u06cc\u0646 \u0648 \u0633\u0631\u06cc\u0639\u200c\u062a\u0631\u06cc\u0646 \u0634\u06a9\u0644 \u0645\u0645\u06a9\u0646 \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc\u0634\u0647. \u062f\u06cc\u06af\u0647 \u0646\u06cc\u0627\u0632\u06cc \u0628\u0647 \u062f\u0641\u062a\u0631\u0686\u0647\u060c \u0633\u0631\u0631\u0633\u06cc\u062f \u06cc\u0627 \u062a\u0642\u0648\u06cc\u0645\u200c\u0647\u0627\u06cc \u06a9\u0627\u063a\u0630\u06cc \u0646\u06cc\u0633\u062a! \u0647\u0645\u0647 \u0686\u06cc\u0632 \u062f\u0631 \u06cc\u06a9 \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633\u0647\u061b \u0627\u0632 \u0647\u0631 \u062c\u0627 \u0648 \u0631\u0648\u06cc \u0647\u0631 \u062f\u0633\u062a\u06af\u0627\u0647\u06cc.",
      ogType: "website",
      ogTitle:
        "\u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647",
      ogUrl: "https://rentamon.com/lite/",
      ogLocale: "fa_IR",
      robots: "index, follow",
      alternate: "https://rentamon.com/"
    },

    // Page metadata
    pageMetadata: {
      title: "رنتامون، تقویم آنلاین اقامتگاه",
      description:
        "با رنتامون، مدیریت اقامتگاه به ساده‌ترین و سریع‌ترین شکل ممکن انجام میشه. دیگه نیازی به دفترچه، سررسید یا تقویم‌های کاغذی نیست! همه چیز در یک تقویم آنلاین در دسترسه؛ از هر جا و روی هر دستگاهی.",
      ogImageSrc:
        "https://site-assets.plasmic.app/34f18b9d9c3a2d97d0402c2e7fe04721.png",
      canonical: "https://rentamon.com/lite/"
    }
  }
);

export default PlasmicLite;
/* prettier-ignore-end */
