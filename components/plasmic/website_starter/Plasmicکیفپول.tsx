/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: nz5EAC1dRXp3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Input } from "@/fragment/components/input"; // plasmic-import: fpBkcjHl6n0Y/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./Plasmicکیفپول.module.css"; // plasmic-import: nz5EAC1dRXp3/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type Plasmicکیفپول__VariantMembers = {};
export type Plasmicکیفپول__VariantsArgs = {};
type VariantPropType = keyof Plasmicکیفپول__VariantsArgs;
export const Plasmicکیفپول__VariantProps = new Array<VariantPropType>();

export type Plasmicکیفپول__ArgsType = {};
type ArgPropType = keyof Plasmicکیفپول__ArgsType;
export const Plasmicکیفپول__ArgProps = new Array<ArgPropType>();

export type Plasmicکیفپول__OverridesType = {
  wallet?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  balanceAndCharge?: Flex__<"div">;
  balance?: Flex__<"div">;
  balance2?: Flex__<"div">;
  report?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  button2?: Flex__<"div">;
  title?: Flex__<"div">;
  charge?: Flex__<"div">;
  input?: Flex__<"div">;
  right?: Flex__<"div">;
  center?: Flex__<"div">;
  input3?: Flex__<typeof Input>;
  input2?: Flex__<typeof Input>;
  left?: Flex__<"div">;
  intext?: Flex__<"div">;
  right2?: Flex__<"div">;
  left2?: Flex__<"div">;
  packages?: Flex__<"div">;
  p1?: Flex__<"div">;
  paymentbutton?: Flex__<"div">;
  button?: Flex__<"div">;
  pricing?: Flex__<"div">;
  ctaReferral?: Flex__<"div">;
  qA?: Flex__<"div">;
  accordionMain?: Flex__<typeof AntdAccordion>;
  _2?: Flex__<typeof AntdAccordionItem>;
  _1?: Flex__<"div">;
  _4?: Flex__<typeof AntdAccordionItem>;
  _5?: Flex__<typeof AntdAccordionItem>;
  _6?: Flex__<typeof AntdAccordionItem>;
  html?: Flex__<"div">;
  goftino?: Flex__<typeof Embed>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
  profile?: Flex__<typeof ApiRequest>;
  sideEffect?: Flex__<typeof SideEffect>;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
};

export interface DefaultکیفپولProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmicکیفپول__RenderFunc(props: {
  variants: Plasmicکیفپول__VariantsArgs;
  args: Plasmicکیفپول__ArgsType;
  overrides: Plasmicکیفپول__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordionMain.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "tokenResponse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? "1000000" : "1000000"
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1000000"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{Plasmicکیفپول.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={Plasmicکیفپول.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={Plasmicکیفپول.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"wallet"}
          data-plasmic-override={overrides.wallet}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.wallet
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(
              projectcss.all,
              sty.header,
              hasVariant(globalVariants, "screen", "smallMobile")
                ? "fadeinf"
                : hasVariant(globalVariants, "screen", "mobile")
                ? "fadeinf"
                : "fadeinf"
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox__aD3Fh)}>
              <SideBar2
                data-plasmic-name={"sideBar2"}
                data-plasmic-override={overrides.sideBar2}
                className={classNames("__wab_instance", sty.sideBar2)}
                isOpen={
                  hasVariant(globalVariants, "screen", "mobile") ? false : false
                }
                userData={(() => {
                  try {
                    return $state.profile2.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__vz8Jg,
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? ``
                  : undefined
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n7WGr,
                  "fadeinf"
                )}
              >
                {"\u06a9\u06cc\u0641 \u067e\u0648\u0644"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__l1Vxy)}>
              <ApiRequest
                data-plasmic-name={"profile2"}
                data-plasmic-override={overrides.profile2}
                className={classNames("__wab_instance", sty.profile2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile2"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"balanceAndCharge"}
            data-plasmic-override={overrides.balanceAndCharge}
            className={classNames(projectcss.all, sty.balanceAndCharge)}
          >
            <div
              data-plasmic-name={"balance"}
              data-plasmic-override={overrides.balance}
              className={classNames(
                projectcss.all,
                sty.balance,
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? "fadein"
                  : undefined
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__lvxu,
                  "fadeinf"
                )}
              >
                <div
                  data-plasmic-name={"balance2"}
                  data-plasmic-override={overrides.balance2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.balance2,
                    "fadeinf"
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          const balance_info =
                            $state.profile2.data.user_info.balance_info;
                          const reducedBalance = Math.floor(
                            balance_info.balance / 10
                          );
                          const formattedBalance = new Intl.NumberFormat(
                            "fa-IR"
                          ).format(reducedBalance);
                          return `موجودی: ${formattedBalance} تومان`;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"report"}
              data-plasmic-override={overrides.report}
              className={classNames(
                projectcss.all,
                sty.report,
                hasVariant(globalVariants, "screen", "mobile")
                  ? "fadein"
                  : "fadein"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToTransactions"] = true
                  ? (() => {
                      const actionArgs = { destination: `/transactions` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTransactions"] != null &&
                  typeof $steps["goToTransactions"] === "object" &&
                  typeof $steps["goToTransactions"].then === "function"
                ) {
                  $steps["goToTransactions"] = await $steps["goToTransactions"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hiIkz,
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "clickable"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "clickable"
                    : "clickable"
                )}
              >
                {
                  "\u06af\u0632\u0627\u0631\u0634 \u0645\u0635\u0631\u0641 \u0627\u0639\u062a\u0628\u0627\u0631"
                }
              </div>
            </div>
          </div>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_CmpF8jkKA5OQ"]]: true,
              [sty["pcls_X5OuuLluSa_K"]]: hasVariant(
                globalVariants,
                "screen",
                "tablet"
              ),
              [sty["pcls_yYJR4AYa_Nr0"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              )
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "smallMobile")
                ? "320"
                : hasVariant(globalVariants, "screen", "mobile")
                ? "400"
                : undefined
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__ryKkA)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pu3RU
                )}
              >
                {
                  "\u062a\u0627\u06cc\u06cc\u062f \u0645\u0628\u0644\u063a \u0648 \u067e\u0631\u062f\u0627\u062e\u062a \u062f\u0631 \u062f\u0631\u06af\u0627\u0647 \u0628\u0627\u0646\u06a9"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__buUMp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aFwh
                )}
              >
                {hasVariant(globalVariants, "screen", "tablet")
                  ? "\u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc:  "
                  : "\u0645\u0628\u0644\u063a:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tdx4A
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.tokenResponse.amount
                          ) + "  تومان"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : hasVariant(globalVariants, "screen", "tablet") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.tokenResponse.amount
                          ) + "  تومان"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.tokenResponse.amount
                          ) + "  تومان"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ktBJb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dFi4N
                )}
              >
                {hasVariant(globalVariants, "screen", "tablet")
                  ? "\u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062a\u0645\u0627\u0645\u06cc \u06a9\u0627\u0631\u062a\u200c\u0647\u0627\u06cc \u0628\u0627\u0646\u06a9\u06cc \u0639\u0636\u0648 \u0634\u062a\u0627\u0628"
                  : "\u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062a\u0645\u0627\u0645\u06cc \u06a9\u0627\u0631\u062a\u200c\u0647\u0627\u06cc \u0639\u0636\u0648 \u0634\u062a\u0627\u0628\r"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mmdog)}>
              <Button
                className={classNames("__wab_instance", sty.button__yXzkG)}
                link={(() => {
                  try {
                    return (
                      "https://payment.zarinpal.com/pg/StartPay/" +
                      $state.tokenResponse.payInfo
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xtbcc
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                    : "\u067e\u0631\u062f\u0627\u062e\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc"}
                </div>
              </Button>
              <div
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames(projectcss.all, sty.button2, "clickable")}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.open(
                                "https://payment.zarinpal.com/pg/StartPay/" +
                                  $state.tokenResponse.payInfo
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___5NHpa)}
                    displayHeight={"34px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image140.gif",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8JEz
                  )}
                >
                  {
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc"
                  }
                </div>
              </div>
            </div>
          </AntdModal>
          <div
            className={classNames(projectcss.all, sty.freeBox__fx5B, "fadeinf")}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zx3Qm
                )}
              >
                {
                  "\u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"charge"}
              data-plasmic-override={overrides.charge}
              className={classNames(projectcss.all, sty.charge)}
            >
              <div
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames(projectcss.all, sty.input)}
              >
                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iBnd9
                    )}
                  >
                    {"\u0645\u0628\u0644\u063a"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"center"}
                  data-plasmic-override={overrides.center}
                  className={classNames(projectcss.all, sty.center)}
                >
                  <Input
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    className={classNames("__wab_instance", sty.input3)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "input3",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = { operation: 0 };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "1/000/000"
                        : ``
                    }
                    type={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "text"
                        : "text"
                    }
                    value={generateStateValueProp($state, ["input3", "value"])}
                  />

                  <Input
                    data-plasmic-name={"input2"}
                    data-plasmic-override={overrides.input2}
                    className={classNames("__wab_instance", sty.input2)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "input2",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    type={"number"}
                    value={generateStateValueProp($state, ["input2", "value"])}
                  />
                </div>
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z2MAw
                    )}
                  >
                    {"\u062a\u0648\u0645\u0627\u0646"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"intext"}
                data-plasmic-override={overrides.intext}
                className={classNames(projectcss.all, sty.intext)}
              >
                <div
                  data-plasmic-name={"right2"}
                  data-plasmic-override={overrides.right2}
                  className={classNames(projectcss.all, sty.right2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kqo4A
                    )}
                  >
                    {"\u0628\u0647 \u062d\u0631\u0648\u0641:"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"left2"}
                  data-plasmic-override={overrides.left2}
                  className={classNames(projectcss.all, sty.left2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rTdNh
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            function numberToPersian(num) {
                              const units = [
                                "",
                                "یک",
                                "دو",
                                "سه",
                                "چهار",
                                "پنج",
                                "شش",
                                "هفت",
                                "هشت",
                                "نه"
                              ];

                              const tens = [
                                "",
                                "ده",
                                "بیست",
                                "سی",
                                "چهل",
                                "پنجاه",
                                "شصت",
                                "هفتاد",
                                "هشتاد",
                                "نود"
                              ];

                              const teens = [
                                "ده",
                                "یازده",
                                "دوازده",
                                "سیزده",
                                "چهارده",
                                "پانزده",
                                "شانزده",
                                "هفده",
                                "هجده",
                                "نوزده"
                              ];

                              const hundreds = [
                                "",
                                "صد",
                                "دویست",
                                "سیصد",
                                "چهارصد",
                                "پانصد",
                                "ششصد",
                                "هفتصد",
                                "هشتصد",
                                "نهصد"
                              ];

                              const groupNames = [
                                "",
                                "هزار",
                                "میلیون",
                                "میلیارد"
                              ];

                              if (num == null || num === "" || num === 0)
                                return "صفر";
                              const splitNumber = n => {
                                const str = n.toString();
                                const len = str.length;
                                if (len <= 3) return [n];
                                const groups = [];
                                let i = len;
                                while (i > 0) {
                                  groups.unshift(
                                    Number(str.substring(Math.max(0, i - 3), i))
                                  );
                                  i -= 3;
                                }
                                return groups;
                              };
                              const convertGroup = n => {
                                if (n === 0) return "";
                                const h = Math.floor(n / 100);
                                const t = Math.floor((n % 100) / 10);
                                const u = n % 10;
                                const hundred = hundreds[h];
                                let tenUnit = "";
                                if (t === 1) {
                                  tenUnit = teens[u];
                                } else {
                                  tenUnit =
                                    tens[t] + (u > 0 ? " و " + units[u] : "");
                                }
                                return [hundred, tenUnit]
                                  .filter(Boolean)
                                  .join(" و ")
                                  .trim();
                              };
                              const groups = splitNumber(num);
                              const result = groups
                                .map((g, i) => {
                                  const groupText = convertGroup(g);
                                  if (groupText) {
                                    return (
                                      groupText +
                                      (groupNames[groups.length - i - 1]
                                        ? " " +
                                          groupNames[groups.length - i - 1]
                                        : "")
                                    );
                                  }
                                  return "";
                                })
                                .filter(Boolean)
                                .join(" و ");
                              const finalResult = result.startsWith("و ")
                                ? result.slice(2)
                                : result;
                              return finalResult.trim() + " تومان";
                            }
                            const input = $state.input2?.value || "";
                            const output =
                              input === ""
                                ? "صفر"
                                : numberToPersian(Number(input));
                            return output;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...\u062a\u0648\u0645\u0627\u0646";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"packages"}
              data-plasmic-override={overrides.packages}
              className={classNames(projectcss.all, sty.packages)}
            >
              <div
                data-plasmic-name={"p1"}
                data-plasmic-override={overrides.p1}
                className={classNames(projectcss.all, sty.p1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m3UhN,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "clickable"
                      : undefined
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateInput2Value"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["input2", "value"]
                            },
                            operation: 0,
                            value: 2000000
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInput2Value"] != null &&
                      typeof $steps["updateInput2Value"] === "object" &&
                      typeof $steps["updateInput2Value"].then === "function"
                    ) {
                      $steps["updateInput2Value"] = await $steps[
                        "updateInput2Value"
                      ];
                    }
                  }}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile")
                    ? "\u06f2 \u0645\u06cc\u0644\u06cc\u0648\u0646"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "\u06f2 \u0645\u06cc\u0644\u06cc\u0648\u0646"
                    : "\u06f2 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mLjd,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "clickable"
                      : undefined
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateInput2Value"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["input2", "value"]
                            },
                            operation: 0,
                            value: 3000000
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInput2Value"] != null &&
                      typeof $steps["updateInput2Value"] === "object" &&
                      typeof $steps["updateInput2Value"].then === "function"
                    ) {
                      $steps["updateInput2Value"] = await $steps[
                        "updateInput2Value"
                      ];
                    }
                  }}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile")
                    ? "\u06f3 \u0645\u06cc\u0644\u06cc\u0648\u0646"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "\u06f3 \u0645\u06cc\u0644\u06cc\u0648\u0646"
                    : "\u06f3 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yqQfD,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "clickable"
                      : undefined
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateInput2Value"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["input2", "value"]
                            },
                            operation: 0,
                            value: 5000000
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInput2Value"] != null &&
                      typeof $steps["updateInput2Value"] === "object" &&
                      typeof $steps["updateInput2Value"].then === "function"
                    ) {
                      $steps["updateInput2Value"] = await $steps[
                        "updateInput2Value"
                      ];
                    }
                  }}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile")
                    ? "\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646"
                    : "\u06f5 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"paymentbutton"}
              data-plasmic-override={overrides.paymentbutton}
              className={classNames(projectcss.all, sty.paymentbutton)}
            >
              <div
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(projectcss.all, sty.button, "clickable")}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoading"] =
                    $state.input2.value >= 100000
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateLoading"] != null &&
                    typeof $steps["updateLoading"] === "object" &&
                    typeof $steps["updateLoading"].then === "function"
                  ) {
                    $steps["updateLoading"] = await $steps["updateLoading"];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.input2.value >= 100000
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://gateway.rentamon.com/webhook/f0e9689b-e711-4212-8551-e138c23b4cf5",
                              undefined,
                              (() => {
                                try {
                                  return { amount: $state.input2.value * 10 };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateAccordionMainActivePanelId"] =
                    $state.input2.value >= 100000
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["accordionMain", "activePanelId"]
                            },
                            operation: 0,
                            value: (() => {
                              $state.tokenResponse.payInfo =
                                $steps.invokeGlobalAction.data.payinfo;
                              $state.tokenResponse.amount = $state.input2.value;
                              return console.log($state.tokenResponse);
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateAccordionMainActivePanelId"] != null &&
                    typeof $steps["updateAccordionMainActivePanelId"] ===
                      "object" &&
                    typeof $steps["updateAccordionMainActivePanelId"].then ===
                      "function"
                  ) {
                    $steps["updateAccordionMainActivePanelId"] = await $steps[
                      "updateAccordionMainActivePanelId"
                    ];
                  }

                  $steps["updateAccordionMainActivePanelId2"] =
                    $state.input2.value >= 100000
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateAccordionMainActivePanelId2"] != null &&
                    typeof $steps["updateAccordionMainActivePanelId2"] ===
                      "object" &&
                    typeof $steps["updateAccordionMainActivePanelId2"].then ===
                      "function"
                  ) {
                    $steps["updateAccordionMainActivePanelId2"] = await $steps[
                      "updateAccordionMainActivePanelId2"
                    ];
                  }

                  $steps["updateAccordionMainActivePanelId3"] =
                    $state.input2.value >= 100000
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateAccordionMainActivePanelId3"] != null &&
                    typeof $steps["updateAccordionMainActivePanelId3"] ===
                      "object" &&
                    typeof $steps["updateAccordionMainActivePanelId3"].then ===
                      "function"
                  ) {
                    $steps["updateAccordionMainActivePanelId3"] = await $steps[
                      "updateAccordionMainActivePanelId3"
                    ];
                  }

                  $steps["updateAccordionMainActivePanelId4"] =
                    $state.input2.value < 100000
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u062d\u062f\u0627\u0642\u0644 \u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u06f1\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646 \u0645\u06cc\u200c\u0628\u0627\u0634\u062f.",
                              "top-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["updateAccordionMainActivePanelId4"] != null &&
                    typeof $steps["updateAccordionMainActivePanelId4"] ===
                      "object" &&
                    typeof $steps["updateAccordionMainActivePanelId4"].then ===
                      "function"
                  ) {
                    $steps["updateAccordionMainActivePanelId4"] = await $steps[
                      "updateAccordionMainActivePanelId4"
                    ];
                  }
                }}
              >
                {(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__b20Ry)}
                    displayHeight={"34px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image140.gif",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tdffw
                  )}
                >
                  {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uAXxy)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tAt2Q
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile")
                  ? "\u062f\u0631 \u0635\u0648\u0631\u062a \u0639\u062f\u0645 \u0631\u0636\u0627\u06cc\u062a \u0627\u0632 \u06a9\u06cc\u0641\u06cc\u062a \u062e\u062f\u0645\u0627\u062a\u060c \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0628\u06cc\u200c\u0642\u06cc\u062f\u0648\u0634\u0631\u0637 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0639\u0648\u062f\u062a \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647."
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? "\u062f\u0631 \u0635\u0648\u0631\u062a \u0639\u062f\u0645 \u0631\u0636\u0627\u06cc\u062a \u0627\u0632 \u06a9\u06cc\u0641\u06cc\u062a \u062e\u062f\u0645\u0627\u062a\u060c \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0628\u06cc\u200c\u0642\u06cc\u062f\u0648\u0634\u0631\u0637 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0639\u0648\u062f\u062a \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647."
                  : "\u062f\u0631 \u0635\u0648\u0631\u062a \u0639\u062f\u0645 \u0631\u0636\u0627\u06cc\u062a \u0627\u0632 \u06a9\u06cc\u0641\u06cc\u062a \u062e\u062f\u0645\u0627\u062a\u060c \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0628\u06cc \u0642\u06cc\u062f\u0648\u0634\u0631\u0637 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0639\u0648\u062f\u062a \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nR86T
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile") ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#444444" }}
                    >
                      {""}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__bZhwy
                        )}
                        component={Link}
                        href={"tel: 02191096227"}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 400, color: "#444444" }}
                            >
                              {
                                "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7-\u06f0\u06f2\u06f1\r\u00a0"
                              }
                            </span>
                          </React.Fragment>
                        ) : (
                          "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7-\u06f0\u06f2\u06f1\r\u00a0"
                        )}
                      </PlasmicLink__>
                    }
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__ibgn6
                        )}
                        component={Link}
                        href={"tel: 02191096227"}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? ""
                          : "\r"}
                      </PlasmicLink__>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : (
                  "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7-\u06f0\u06f2\u06f1\r\u00a0\n\r"
                )}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"pricing"}
            data-plasmic-override={overrides.pricing}
            className={classNames(projectcss.all, sty.pricing)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cvTC
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToPricing"] = true
                  ? (() => {
                      const actionArgs = { destination: `/pricing` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPricing"] != null &&
                  typeof $steps["goToPricing"] === "object" &&
                  typeof $steps["goToPricing"].then === "function"
                ) {
                  $steps["goToPricing"] = await $steps["goToPricing"];
                }
              }}
            >
              {hasVariant(globalVariants, "screen", "smallMobile")
                ? "\u0628\u0631\u0627\u06cc \u0645\u0634\u0627\u0647\u062f\u0647  \u062a\u0639\u0631\u0641\u0647 \u062e\u062f\u0645\u0627\u062a \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u0627\u06cc\u0646\u062c\u0627 \u0628\u0632\u0646"
                : hasVariant(globalVariants, "screen", "mobile")
                ? "\u00ab\u0628\u0631\u0627\u06cc \u0645\u0634\u0627\u0647\u062f\u0647\u200c  \u062a\u0639\u0631\u0641\u0647 \u062e\u062f\u0645\u0627\u062a \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u0627\u06cc\u0646\u062c\u0627 \u0628\u0632\u0646\u00bb"
                : hasVariant(globalVariants, "screen", "tablet")
                ? "\u00ab\u0628\u0631\u0627\u06cc \u0645\u0634\u0627\u0647\u062f\u0647\u200c  \u062a\u0639\u0631\u0641\u0647 \u062e\u062f\u0645\u0627\u062a \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u0627\u06cc\u0646\u062c\u0627 \u0628\u0632\u0646\u00bb"
                : "\u00ab\u0628\u0631\u0627\u06cc \u0645\u0634\u0627\u0647\u062f\u0647\u200c  \u062a\u0639\u0631\u0641\u0647 \u062e\u062f\u0645\u0627\u062a \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u0628\u0632\u0646 \u0627\u06cc\u0646\u062c\u0627\u00bb"}
            </div>
          </div>
          <div
            data-plasmic-name={"ctaReferral"}
            data-plasmic-override={overrides.ctaReferral}
            className={classNames(projectcss.all, sty.ctaReferral)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___45D1H,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToReferral"] = true
                  ? (() => {
                      const actionArgs = { destination: `/referral` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToReferral"] != null &&
                  typeof $steps["goToReferral"] === "object" &&
                  typeof $steps["goToReferral"].then === "function"
                ) {
                  $steps["goToReferral"] = await $steps["goToReferral"];
                }
              }}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \ud83c\udf81"
                : "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0639\u062a\u0628\u0627\u0631 \u0631\u0627\u06cc\u06af\u0627\u0646 \ud83c\udf81"}
            </div>
          </div>
          <div
            data-plasmic-name={"qA"}
            data-plasmic-override={overrides.qA}
            className={classNames(projectcss.all, sty.qA)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__eZrXa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jChhM
                )}
              >
                {
                  "\u0633\u0648\u0627\u0644\u0627\u062a \u0645\u062a\u062f\u0627\u0648\u0644:\r\n\r"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___01HVf)}>
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "accordionMain",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames("__wab_instance", sty.accordionMain),
                    ghost: true,
                    items: (
                      <React.Fragment>
                        <AntdAccordionItem
                          data-plasmic-name={"_2"}
                          data-plasmic-override={overrides._2}
                          className={classNames("__wab_instance", sty._2)}
                          id={"11"}
                          label2={
                            <div
                              data-plasmic-name={"_1"}
                              data-plasmic-override={overrides._1}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty._1
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u0645\u0628\u0644\u063a \u0628\u0627\u0628\u062a \u0686\u06cc\u0647\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__owfpa
                            )}
                          >
                            {
                              "\u0641\u0642\u0637 \u062f\u0631\u0635\u0648\u0631\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u00ab\u0631\u0632\u0631\u0648 \u0646\u0647\u0627\u06cc\u06cc\u00bb \u0627\u0632 \u06a9\u0644 \u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648 \u06a9\u0627\u0631\u0645\u0632\u062f \u06a9\u0645 \u0645\u06cc\u200c\u0634\u0647.\r\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          data-plasmic-name={"_4"}
                          data-plasmic-override={overrides._4}
                          className={classNames("__wab_instance", sty._4)}
                          id={"22"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gljJt
                              )}
                            >
                              {
                                "\u0647\u0632\u06cc\u0646\u0647\u200c\u0647\u0627 \u0686\u0637\u0648\u0631 \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc\u200c\u0634\u0647\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__awyNx
                            )}
                          >
                            {
                              "\u0628\u0639\u0636\u06cc \u0627\u0632 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627 \u0631\u0627\u06cc\u06af\u0627\u0646\u0647. \u0627\u0645\u0627 \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u06a9\u0627\u0631\u0645\u0632\u062f \u062f\u0627\u0631\u0646\u062f \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062f\u0631\u0635\u062f\u06cc \u0627\u0632 \u062c\u0645\u0639 \u0645\u0628\u0644\u063a \u0647\u0631 \u0631\u0632\u0631\u0648 \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc\u200c\u0634\u0646.\n\n\u0645\u062b\u0627\u0644: \u062f\u0631\u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0648\u06cc\u0698\u06af\u06cc \u00ab\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627\u00bb \u0641\u0639\u0627\u0644 \u0628\u0627\u0634\u0647\u060c \u0648 \u06cc\u06a9 \u0631\u0632\u0631\u0648 \u06f2 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0646\u06cc \u0628\u06af\u06cc\u0631\u06cc\u060c \u0645\u06cc\u0632\u0627\u0646 \u06f1.\u06f5\u066a \u0627\u0632 \u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u06a9\u0627\u0631\u0645\u0632\u062f \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc\u200c\u0634\u0647:\n\u06f3\u06f0,\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646 = \u06f1.\u06f5\u066a \u00d7 \u06f2,\u06f0\u06f0\u06f0,\u06f0\u06f0\u06f0\n\n\r\n\r"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          data-plasmic-name={"_5"}
                          data-plasmic-override={overrides._5}
                          className={classNames("__wab_instance", sty._5)}
                          id={"33"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3AmO
                              )}
                            >
                              {
                                "\u0627\u0645\u06a9\u0627\u0646 \u0644\u063a\u0648 \u0639\u0636\u0648\u06cc\u062a \u062f\u0631 \u0628\u0631\u0646\u0627\u0645\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0647\u0633\u062a\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vHy7V
                            )}
                          >
                            {
                              "\u0645\u0627 \u062a\u0645\u0627\u0645 \u062a\u0644\u0627\u0634\u0645\u0648\u0646 \u0631\u0648 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645 \u062a\u0627 \u0647\u0645\u06cc\u0634\u0647 \u0631\u0627\u0636\u06cc \u0628\u0627\u0634\u06cc. \u0648\u0644\u06cc \u0647\u0631 \u0632\u0645\u0627\u0646 \u0648 \u0628\u0647 \u0647\u0631 \u062f\u0644\u06cc\u0644 \u062a\u0645\u0627\u06cc\u0644\u06cc \u0628\u0647 \u0627\u062f\u0627\u0645\u0647\u200c\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0646\u062f\u0627\u0634\u062a\u06cc\u060c \u0639\u0636\u0648\u06cc\u062a \u0644\u063a\u0648 \u0634\u062f\u0647 \u0648 \u06a9\u0644 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0639\u0648\u062f\u062a \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          data-plasmic-name={"_6"}
                          data-plasmic-override={overrides._6}
                          className={classNames("__wab_instance", sty._6)}
                          id={"44"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hPsL9
                              )}
                            >
                              {
                                "\u06a9\u06cc\u0641 \u067e\u0648\u0644\u0645 \u0631\u0648 \u0686\u0637\u0648\u0631 \u0634\u0627\u0631\u0698 \u06a9\u0646\u0645\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kcWmW
                            )}
                          >
                            {
                              "\u06a9\u0627\u0641\u06cc\u0647 \u06cc\u06a9 \u0645\u0628\u0644\u063a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u0648 \u062f\u0631 \u062f\u0631\u06af\u0627\u0647 \u0628\u0627\u0646\u06a9 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646\u06cc. \u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647 \u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0647.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__zo7V
                          )}
                          id={"55"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aBwTb
                              )}
                            >
                              {
                                "\u062f\u0631\u0635\u0648\u0631\u062a \u062e\u0627\u0644\u06cc \u0634\u062f\u0646 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0686\u06cc \u0645\u06cc\u0634\u0647\u061f\r"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zgieD
                            )}
                          >
                            {
                              "\u062f\u0631\u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u00ab\u06a9\u0645\u062a\u0631 \u0627\u0632 \u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 \u0628\u0631\u0627\u06cc \u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f\u00bb \u0634\u0645\u0627 \u0628\u0634\u0647\u060c \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u062f\u0627\u0631\u0627\u06cc \u06a9\u0627\u0631\u0645\u0632\u062f \u0647\u0633\u062a\u0646\u062f \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0634\u0646. \u0627\u0645\u0627 \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u0631\u0627\u06cc\u06af\u0627\u0646 \u0647\u0645\u0686\u0646\u0627\u0646 \u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0647\u0633\u062a\u0646\u062f.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__adTgR
                          )}
                          id={"66"}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6G02U
                              )}
                            >
                              {
                                "\u0627\u06af\u0647 \u0631\u0632\u0631\u0648 \u0644\u063a\u0648 \u0628\u0634\u0647\u060c \u06a9\u0627\u0631\u0645\u0632\u062f\u06cc \u06a9\u0647 \u062f\u0627\u062f\u0645 \u0628\u0631\u0645\u06cc\u200c\u06af\u0631\u062f\u0647\u061f"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___09Ui9
                            )}
                          >
                            {
                              "\u0628\u0644\u0647. \u062f\u0631\u0635\u0648\u0631\u062a \u0644\u063a\u0648 \u0634\u062f\u0646 \u0631\u0632\u0631\u0648\u060c \u06a9\u0627\u0631\u0645\u0632\u062f \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0631\u0627\u06cc \u0648\u06cc\u0698\u06af\u06cc \u00ab\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627\u00bb \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a \u0628\u0631\u0645\u06cc\u200c\u06af\u0631\u062f\u0647. \u0627\u0645\u0627 \u0628\u0627 \u062a\u0648\u062c\u0647 \u0628\u0647 \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f\u0646 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0632\u0631\u0648 \u0648 \u0645\u0647\u0645\u0627\u0646\u060c \u0647\u0632\u06cc\u0646\u0647\u200c\u06cc \u0648\u06cc\u0698\u06af\u06cc \u00ab\u0631\u0632\u0631\u0648 \u0647\u0648\u0634\u0645\u0646\u062f\u00bb \u0628\u0631\u0646\u0645\u06cc\u200c\u06af\u0631\u062f\u0647.\n"
                            }
                          </div>
                        </AntdAccordionItem>
                      </React.Fragment>
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordionMain", "activePanelId"],
                        AntdAccordion_Helpers
                      ).apply(null, eventArgs);
                    }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "accordionMain.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"accordionMain"}
                      data-plasmic-override={overrides.accordionMain}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
            <div
              data-plasmic-name={"html"}
              data-plasmic-override={overrides.html}
              className={classNames(projectcss.all, sty.html)}
            >
              <Embed
                data-plasmic-name={"goftino"}
                data-plasmic-override={overrides.goftino}
                className={classNames("__wab_instance", sty.goftino)}
                code={
                  '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
                }
              />

              <div className={classNames(projectcss.all, sty.freeBox__taXuI)}>
                <ClarityRntComponent
                  data-plasmic-name={"clarityRntComponent"}
                  data-plasmic-override={overrides.clarityRntComponent}
                  className={classNames(
                    "__wab_instance",
                    sty.clarityRntComponent
                  )}
                />

                <FaviconRntComponent
                  data-plasmic-name={"faviconRntComponent"}
                  data-plasmic-override={overrides.faviconRntComponent}
                  className={classNames(
                    "__wab_instance",
                    sty.faviconRntComponent
                  )}
                />
              </div>
            </div>
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />

          {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
            <ApiRequest
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames("__wab_instance", sty.profile)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile"] = ref;
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Olf5
                )}
              >
                {"Enter some text"}
              </div>
            </ApiRequest>
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/panel/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            userType={
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return (() => {
                        return null;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  wallet: [
    "wallet",
    "header",
    "sideBar2",
    "profile2",
    "balanceAndCharge",
    "balance",
    "balance2",
    "report",
    "modal",
    "button2",
    "title",
    "charge",
    "input",
    "right",
    "center",
    "input3",
    "input2",
    "left",
    "intext",
    "right2",
    "left2",
    "packages",
    "p1",
    "paymentbutton",
    "button",
    "pricing",
    "ctaReferral",
    "qA",
    "accordionMain",
    "_2",
    "_1",
    "_4",
    "_5",
    "_6",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent",
    "rentamonFooter",
    "profile",
    "sideEffect",
    "navbarRntFooter"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  balanceAndCharge: ["balanceAndCharge", "balance", "balance2", "report"],
  balance: ["balance", "balance2"],
  balance2: ["balance2"],
  report: ["report"],
  modal: ["modal", "button2"],
  button2: ["button2"],
  title: ["title"],
  charge: [
    "charge",
    "input",
    "right",
    "center",
    "input3",
    "input2",
    "left",
    "intext",
    "right2",
    "left2"
  ],
  input: ["input", "right", "center", "input3", "input2", "left"],
  right: ["right"],
  center: ["center", "input3", "input2"],
  input3: ["input3"],
  input2: ["input2"],
  left: ["left"],
  intext: ["intext", "right2", "left2"],
  right2: ["right2"],
  left2: ["left2"],
  packages: ["packages", "p1"],
  p1: ["p1"],
  paymentbutton: ["paymentbutton", "button"],
  button: ["button"],
  pricing: ["pricing"],
  ctaReferral: ["ctaReferral"],
  qA: [
    "qA",
    "accordionMain",
    "_2",
    "_1",
    "_4",
    "_5",
    "_6",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  accordionMain: ["accordionMain", "_2", "_1", "_4", "_5", "_6"],
  _2: ["_2", "_1"],
  _1: ["_1"],
  _4: ["_4"],
  _5: ["_5"],
  _6: ["_6"],
  html: ["html", "goftino", "clarityRntComponent", "faviconRntComponent"],
  goftino: ["goftino"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  rentamonFooter: ["rentamonFooter"],
  profile: ["profile"],
  sideEffect: ["sideEffect"],
  navbarRntFooter: ["navbarRntFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  wallet: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  balanceAndCharge: "div";
  balance: "div";
  balance2: "div";
  report: "div";
  modal: typeof AntdModal;
  button2: "div";
  title: "div";
  charge: "div";
  input: "div";
  right: "div";
  center: "div";
  input3: typeof Input;
  input2: typeof Input;
  left: "div";
  intext: "div";
  right2: "div";
  left2: "div";
  packages: "div";
  p1: "div";
  paymentbutton: "div";
  button: "div";
  pricing: "div";
  ctaReferral: "div";
  qA: "div";
  accordionMain: typeof AntdAccordion;
  _2: typeof AntdAccordionItem;
  _1: "div";
  _4: typeof AntdAccordionItem;
  _5: typeof AntdAccordionItem;
  _6: typeof AntdAccordionItem;
  html: "div";
  goftino: typeof Embed;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  rentamonFooter: typeof RentamonFooter;
  profile: typeof ApiRequest;
  sideEffect: typeof SideEffect;
  navbarRntFooter: typeof NavbarRntFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmicکیفپول__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmicکیفپول__VariantsArgs;
    args?: Plasmicکیفپول__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmicکیفپول__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmicکیفپول__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicکیفپول__ArgProps,
          internalVariantPropNames: Plasmicکیفپول__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicکیفپول__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "wallet") {
    func.displayName = "Plasmic\u06a9\u06cc\u0641\u067e\u0648\u0644";
  } else {
    func.displayName = `Plasmicکیفپول.${nodeName}`;
  }
  return func;
}

export const Plasmicکیفپول = Object.assign(
  // Top-level Plasmicکیفپول renders the root element
  makeNodeComponent("wallet"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    balanceAndCharge: makeNodeComponent("balanceAndCharge"),
    balance: makeNodeComponent("balance"),
    balance2: makeNodeComponent("balance2"),
    report: makeNodeComponent("report"),
    modal: makeNodeComponent("modal"),
    button2: makeNodeComponent("button2"),
    title: makeNodeComponent("title"),
    charge: makeNodeComponent("charge"),
    input: makeNodeComponent("input"),
    right: makeNodeComponent("right"),
    center: makeNodeComponent("center"),
    input3: makeNodeComponent("input3"),
    input2: makeNodeComponent("input2"),
    left: makeNodeComponent("left"),
    intext: makeNodeComponent("intext"),
    right2: makeNodeComponent("right2"),
    left2: makeNodeComponent("left2"),
    packages: makeNodeComponent("packages"),
    p1: makeNodeComponent("p1"),
    paymentbutton: makeNodeComponent("paymentbutton"),
    button: makeNodeComponent("button"),
    pricing: makeNodeComponent("pricing"),
    ctaReferral: makeNodeComponent("ctaReferral"),
    qA: makeNodeComponent("qA"),
    accordionMain: makeNodeComponent("accordionMain"),
    _2: makeNodeComponent("_2"),
    _1: makeNodeComponent("_1"),
    _4: makeNodeComponent("_4"),
    _5: makeNodeComponent("_5"),
    _6: makeNodeComponent("_6"),
    html: makeNodeComponent("html"),
    goftino: makeNodeComponent("goftino"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),
    profile: makeNodeComponent("profile"),
    sideEffect: makeNodeComponent("sideEffect"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),

    // Metadata about props expected for Plasmicکیفپول
    internalVariantProps: Plasmicکیفپول__VariantProps,
    internalArgProps: Plasmicکیفپول__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "کیف پول",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmicکیفپول;
/* prettier-ignore-end */
