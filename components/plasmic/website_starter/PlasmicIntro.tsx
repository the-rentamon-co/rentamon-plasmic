/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: wLy6Qx2J0ci-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import NavbarRntHeader from "../../NavbarRntHeader"; // plasmic-import: gWac1FMbIJat/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicIntro.module.css"; // plasmic-import: wLy6Qx2J0ci-/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicIntro__VariantMembers = {};
export type PlasmicIntro__VariantsArgs = {};
type VariantPropType = keyof PlasmicIntro__VariantsArgs;
export const PlasmicIntro__VariantProps = new Array<VariantPropType>();

export type PlasmicIntro__ArgsType = {};
type ArgPropType = keyof PlasmicIntro__ArgsType;
export const PlasmicIntro__ArgProps = new Array<ArgPropType>();

export type PlasmicIntro__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  navbarRntHeader?: Flex__<typeof NavbarRntHeader>;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultIntroProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntro__RenderFunc(props: {
  variants: PlasmicIntro__VariantsArgs;
  args: PlasmicIntro__ArgsType;
  overrides: PlasmicIntro__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showToggle",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["updateShowToggle"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["showToggle"]
                      },
                      operation: 0,
                      value: (() => {
                        return setTimeout(() => {
                          $state.showToggle = !$state.showToggle;
                        }, 10000);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShowToggle"] != null &&
                typeof $steps["updateShowToggle"] === "object" &&
                typeof $steps["updateShowToggle"].then === "function"
              ) {
                $steps["updateShowToggle"] = await $steps["updateShowToggle"];
              }
            }}
          />

          <NavbarRntHeader
            data-plasmic-name={"navbarRntHeader"}
            data-plasmic-override={overrides.navbarRntHeader}
            className={classNames("__wab_instance", sty.navbarRntHeader)}
          />

          {(() => {
            try {
              return $state.showToggle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__cn8R7)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "40px"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "50px"
                    : "76px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image140.gif",
                  fullWidth: 500,
                  fullHeight: 500,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rLw2K
                )}
              >
                {
                  "\u062f\u0631 \u062d\u0627\u0644 \u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0634\u0645\u0627"
                }
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return !$state.showToggle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__rNjTb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sxI4Y
                )}
              >
                {
                  "\u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0634\u0645\u0627 \u0622\u0645\u0627\u062f\u0647 \u0634\u062f"
                }
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                link={(() => {
                  try {
                    return $ctx.params.type == "lite"
                      ? "https://rentamon.com/calendar/"
                      : "https://rentamon.com/panel/";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/calendar`;
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function setCookie(name, value, hours) {
                                let expires = "";
                                if (hours) {
                                  const date = new Date();
                                  date.setTime(
                                    date.getTime() + hours * 60 * 60 * 1000
                                  );
                                  expires = "; expires=" + date.toUTCString();
                                }
                                document.cookie =
                                  name +
                                  "=" +
                                  (value || "") +
                                  expires +
                                  "; path=/";
                              }
                              return setCookie("first_visit", "true", 2);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {
                  "\u0648\u0631\u0648\u062f \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                }
              </Button>
            </div>
          ) : null}
          {(() => {
            try {
              return $ctx.params.type == "pro";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__yiK3J)}>
              <div className={classNames(projectcss.all, sty.freeBox__nepg6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vqRx4
                  )}
                >
                  {
                    "\u062a\u0642\u0648\u06cc\u0645 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0686\u0637\u0648\u0631 \u06a9\u0627\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647\u061f"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jjTWo
                  )}
                >
                  {"\u0648\u06cc\u062f\u0648 \u067e\u0631\u0648"}
                </div>
              </div>
              <Iframe
                className={classNames("__wab_instance", sty.iframe__vLsgo)}
                src={``}
                srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                useHtml={false}
              />

              <Embed
                className={classNames("__wab_instance", sty.embedHtml__y7JkN)}
                code={
                  '<div id="19987570163"><script type="text/JavaScript" src="https://www.aparat.com/embed/dnu9g57?data[rnddiv]=19987570163&data[responsive]=yes"></script></div>'
                }
              />

              <Video
                autoPlay={false}
                className={classNames("__wab_instance", sty.htmlVideo__yucuM)}
                controls={true}
                poster={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "/plasmic/website_starter/images/coverJpg2.jpg"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "/plasmic/website_starter/images/coverJpg2.jpg"
                    : "/plasmic/website_starter/images/coverJpg2.jpg"
                }
                src={"https://media.rentamon.com/video%2Fpro_onboarding.mp4"}
              />
            </div>
          ) : null}
          {(() => {
            try {
              return $ctx.params.type == "lite";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__vVBpa)}>
              <div className={classNames(projectcss.all, sty.freeBox__kphtq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c2E9M
                  )}
                >
                  {
                    "\u062a\u0642\u0648\u06cc\u0645 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0686\u0637\u0648\u0631 \u06a9\u0627\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647\u061f"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yQtX
                  )}
                >
                  {"\u0648\u06cc\u062f\u0648 \u0644\u0627\u06cc\u062a"}
                </div>
              </div>
              <Iframe
                className={classNames("__wab_instance", sty.iframe___1TAO)}
                src={``}
                srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                useHtml={false}
              />

              <Embed
                className={classNames("__wab_instance", sty.embedHtml__v1L9J)}
                code={
                  '<div id="19987570163"><script type="text/JavaScript" src="https://www.aparat.com/embed/dnu9g57?data[rnddiv]=19987570163&data[responsive]=yes"></script></div>'
                }
              />

              <Video
                autoPlay={false}
                className={classNames("__wab_instance", sty.htmlVideo__zdbxb)}
                controls={true}
                poster={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "/plasmic/website_starter/images/coverJpg2.jpg"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "/plasmic/website_starter/images/coverJpg2.jpg"
                    : "/plasmic/website_starter/images/coverJpg2.jpg"
                }
                src={"https://media.rentamon.com/video%2Fintro%20to%20lite.mp4"}
              />
            </div>
          ) : null}
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__dto94)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "navbarRntHeader",
    "img",
    "button",
    "rentamonFooter",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  sideEffect: ["sideEffect"],
  navbarRntHeader: ["navbarRntHeader"],
  img: ["img"],
  button: ["button"],
  rentamonFooter: ["rentamonFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  navbarRntHeader: typeof NavbarRntHeader;
  img: typeof PlasmicImg__;
  button: typeof Button;
  rentamonFooter: typeof RentamonFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIntro__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIntro__VariantsArgs;
    args?: PlasmicIntro__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIntro__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIntro__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntro__ArgProps,
          internalVariantPropNames: PlasmicIntro__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntro__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntro";
  } else {
    func.displayName = `PlasmicIntro.${nodeName}`;
  }
  return func;
}

export const PlasmicIntro = Object.assign(
  // Top-level PlasmicIntro renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    navbarRntHeader: makeNodeComponent("navbarRntHeader"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicIntro
    internalVariantProps: PlasmicIntro__VariantProps,
    internalArgProps: PlasmicIntro__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIntro;
/* prettier-ignore-end */
