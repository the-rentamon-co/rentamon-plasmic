/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: TARn4RyKgOfz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import ToastMessageRnt from "../../ToastMessageRnt"; // plasmic-import: _mkSLPxHmSdr/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicChannelManager.module.css"; // plasmic-import: TARn4RyKgOfz/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicChannelManager__VariantMembers = {};
export type PlasmicChannelManager__VariantsArgs = {};
type VariantPropType = keyof PlasmicChannelManager__VariantsArgs;
export const PlasmicChannelManager__VariantProps = new Array<VariantPropType>();

export type PlasmicChannelManager__ArgsType = {};
type ArgPropType = keyof PlasmicChannelManager__ArgsType;
export const PlasmicChannelManager__ArgProps = new Array<ArgPropType>();

export type PlasmicChannelManager__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile?: Flex__<typeof ApiRequest>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  toastMessageRnt?: Flex__<typeof ToastMessageRnt>;
  apiRequest?: Flex__<typeof ApiRequest>;
  tableHeader?: Flex__<"div">;
  statusModal?: Flex__<typeof AntdModal>;
  shab?: Flex__<"div">;
  jajiga?: Flex__<"div">;
  jabama?: Flex__<"div">;
  otaaghak?: Flex__<"div">;
  mizboon?: Flex__<"div">;
  mihmansho?: Flex__<"div">;
  homsa?: Flex__<"div">;
  item?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  intro?: Flex__<"div">;
  returnButton?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  modal?: Flex__<typeof AntdModal>;
  htmlVideo?: Flex__<typeof Video>;
};

export interface DefaultChannelManagerProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChannelManager__RenderFunc(props: {
  variants: PlasmicChannelManager__VariantsArgs;
  args: PlasmicChannelManager__ArgsType;
  overrides: PlasmicChannelManager__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "modalData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "statusModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicChannelManager.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicChannelManager.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicChannelManager.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___7S7O2)}>
              <SideBar2
                data-plasmic-name={"sideBar2"}
                data-plasmic-override={overrides.sideBar2}
                className={classNames("__wab_instance", sty.sideBar2)}
                isOpen={false}
                userData={(() => {
                  try {
                    return $state.profile.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mfzC7)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wv5Tm,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "fadeinf"
                    : undefined
                )}
              >
                {
                  "\u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wi6An)}>
              <ApiRequest
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames("__wab_instance", sty.profile)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__odazp)}>
            <ApiRequest
              data-plasmic-name={"apiRequest2"}
              data-plasmic-override={overrides.apiRequest2}
              className={classNames("__wab_instance", sty.apiRequest2)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ixBoV
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest2",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest2",
                  "data"
                ]).apply(null, eventArgs);
              }}
              params={{ feature_name: "auto_sync" }}
              ref={ref => {
                $refs["apiRequest2"] = ref;
              }}
              url={"https://gateway.rentamon.com/webhook/user_access"}
            >
              {(() => {
                try {
                  return $state.apiRequest2.data.status != "ok";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__dOM)}>
                  <ToastMessageRnt
                    data-plasmic-name={"toastMessageRnt"}
                    data-plasmic-override={overrides.toastMessageRnt}
                    buttonLink={`/settings`}
                    buttonText={
                      "\u062a\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.toastMessageRnt
                    )}
                    logo={{
                      src: "/plasmic/website_starter/images/image72.svg",
                      fullWidth: 42,
                      fullHeight: 42,
                      aspectRatio: 1
                    }}
                    message={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u062c\u0627\u06cc \u062a\u0648 \u0645\u0631\u0627\u0642\u0628 \u062a\u062f\u0627\u062e\u0644 \u0631\u0632\u0631\u0648\u0647\u0627 \u0628\u0627\u0634\u0647"
                        : "\u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u062c\u0627\u06cc \u062a\u0648 \u0645\u0631\u0627\u0642\u0628 \u0631\u0632\u0631\u0648 \u0647\u0627 \u0628\u0627\u0634\u0647"
                    }
                  />
                </div>
              ) : null}
            </ApiRequest>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vg0K
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={"https://gateway.rentamon.com/webhook/get_status"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__y4L)}>
              <div
                data-plasmic-name={"tableHeader"}
                data-plasmic-override={overrides.tableHeader}
                className={classNames(projectcss.all, sty.tableHeader)}
              >
                <AntdModal
                  data-plasmic-name={"statusModal"}
                  data-plasmic-override={overrides.statusModal}
                  className={classNames("__wab_instance", sty.statusModal)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames
                  )}
                  hideFooter={true}
                  modalContentClassName={classNames({
                    [sty["pcls_1dA0fRTU7ky-"]]: true
                  })}
                  modalScopeClassName={sty["statusModal__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "statusModal",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, ["statusModal", "open"])}
                  title={null}
                  trigger={null}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5NVyJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dTzEi)}
                    >
                      {(() => {
                        try {
                          return $state.modalData.request_for == "cancelled";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__du2HZ
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "smallMobile"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    return (
                                      "رزرو از " +
                                      ($state.modalData.source === "jabama"
                                        ? "جاباما"
                                        : $state.modalData.source === "otaghak"
                                          ? "اتاقک"
                                          : $state.modalData.source ===
                                              "mihmansho"
                                            ? "میهمان‌شو"
                                            : $state.modalData.source ===
                                                "homsa"
                                              ? "هومسا"
                                              : $state.modalData.source ===
                                                  "jajiga"
                                                ? "جاجیگا"
                                                : $state.modalData.source ===
                                                    "shab"
                                                  ? "شب"
                                                  : $state.modalData.source ===
                                                      "mizboon"
                                                    ? "میزبون"
                                                    : $state.modalData.source)
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u0627\u0632 ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    return (
                                      "لغو رزرو از " +
                                      ($state.modalData.source === "jabama"
                                        ? "جاباما"
                                        : $state.modalData.source === "otaghak"
                                          ? "اتاقک"
                                          : $state.modalData.source ===
                                              "mihmansho"
                                            ? "میهمان‌شو"
                                            : $state.modalData.source ===
                                                "homsa"
                                              ? "هومسا"
                                              : $state.modalData.source ===
                                                  "jajiga"
                                                ? "جاجیگا"
                                                : $state.modalData.source ===
                                                    "shab"
                                                  ? "شب"
                                                  : $state.modalData.source ===
                                                      "mizboon"
                                                    ? "میزبون"
                                                    : $state.modalData.source)
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u0627\u0632 ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.request_for == "reserve";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xn25L
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "smallMobile"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    return (
                                      "دریافت رزرو از " +
                                      ($state.modalData.source === "jabama"
                                        ? "جاباما"
                                        : $state.modalData.source === "otaghak"
                                          ? "اتاقک"
                                          : $state.modalData.source ===
                                              "mihmansho"
                                            ? "میهمان‌شو"
                                            : $state.modalData.source ===
                                                "homsa"
                                              ? "هومسا"
                                              : $state.modalData.source ===
                                                  "jajiga"
                                                ? "جاجیگا"
                                                : $state.modalData.source ===
                                                    "shab"
                                                  ? "شب"
                                                  : $state.modalData.source ===
                                                      "mizboon"
                                                    ? "میزبون"
                                                    : $state.modalData.source)
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u0627\u0632 ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    return (
                                      "دریافت رزرو از " +
                                      ($state.modalData.source === "jabama"
                                        ? "جاباما"
                                        : $state.modalData.source === "otaghak"
                                          ? "اتاقک"
                                          : $state.modalData.source ===
                                              "mihmansho"
                                            ? "میهمان‌شو"
                                            : $state.modalData.source ===
                                                "homsa"
                                              ? "هومسا"
                                              : $state.modalData.source ===
                                                  "jajiga"
                                                ? "جاجیگا"
                                                : $state.modalData.source ===
                                                    "shab"
                                                  ? "شب"
                                                  : $state.modalData.source ===
                                                      "mizboon"
                                                    ? "میزبون"
                                                    : $state.modalData.source)
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u0627\u0632 ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "jabama";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__c6ZEc)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/jabamaWebp.webp",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "jajiga";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nmqQa)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/jajigaWebp.webp",
                            fullWidth: 192,
                            fullHeight: 192,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "shab";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ci8A0)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image20.svg",
                            fullWidth: 46,
                            fullHeight: 45,
                            aspectRatio: 1.022222
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "otaghak";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__loOs8)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image13.svg",
                            fullWidth: 46,
                            fullHeight: 46,
                            aspectRatio: 1
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "mizboon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__wkOwz)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/mizboonPng.png",
                            fullWidth: 140,
                            fullHeight: 140,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "mihmansho";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kbmkk)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/mihmanshoPng.png",
                            fullWidth: 140,
                            fullHeight: 140,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.modalData.source == "homsa";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___4MGs4)}
                          displayHeight={"41px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image18.svg",
                            fullWidth: 46,
                            fullHeight: 45,
                            aspectRatio: 1.022222
                          }}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m3Fs2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xEoLb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hmxr8
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.modalData.property_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__d2Qq8
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  function toJalali(gYear, gMonth, gDay) {
                                    const gDaysInMonth = [
                                      31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
                                      30, 31
                                    ];

                                    const jDaysInMonth = [
                                      31, 31, 31, 31, 31, 31, 30, 30, 30, 30,
                                      30, 29
                                    ];

                                    let gy =
                                      gYear - (gYear >= 1600 ? 1600 : 621);
                                    let gm = gMonth - 1;
                                    let gd = gDay - 1;
                                    let gDayNo =
                                      365 * gy +
                                      Math.floor((gy + 3) / 4) -
                                      Math.floor((gy + 99) / 100) +
                                      Math.floor((gy + 399) / 400);
                                    for (let i = 0; i < gm; i++) {
                                      gDayNo += gDaysInMonth[i];
                                    }
                                    gDayNo += gd;
                                    let jYear = gYear >= 1600 ? 979 : 0;
                                    let jDayNo =
                                      gDayNo - (gYear >= 1600 ? 79 : 0);
                                    let jNp = Math.floor(jDayNo / 12053);
                                    jDayNo %= 12053;
                                    jYear +=
                                      33 * jNp + 4 * Math.floor(jDayNo / 1461);
                                    jDayNo %= 1461;
                                    if (jDayNo >= 366) {
                                      jYear += Math.floor((jDayNo - 1) / 365);
                                      jDayNo = (jDayNo - 1) % 365;
                                    }
                                    let jMonth;
                                    for (
                                      jMonth = 0;
                                      jMonth < 11 &&
                                      jDayNo >= jDaysInMonth[jMonth];
                                      jMonth++
                                    ) {
                                      jDayNo -= jDaysInMonth[jMonth];
                                    }
                                    let jDay = jDayNo + 1;
                                    jYear += gYear >= 1600 ? 1600 : 621;
                                    return {
                                      jy: jYear,
                                      jm: jMonth + 1,
                                      jd: jDay
                                    };
                                  }
                                  const persianMonths = [
                                    "فروردین",
                                    "اردیبهشت",
                                    "خرداد",
                                    "تیر",
                                    "مرداد",
                                    "شهریور",
                                    "مهر",
                                    "آبان",
                                    "آذر",
                                    "دی",
                                    "بهمن",
                                    "اسفند"
                                  ];

                                  function toPersianDigits(input) {
                                    const persianDigits = [
                                      "۰",
                                      "۱",
                                      "۲",
                                      "۳",
                                      "۴",
                                      "۵",
                                      "۶",
                                      "۷",
                                      "۸",
                                      "۹"
                                    ];

                                    return input
                                      .toString()
                                      .replace(/\d/g, function (digit) {
                                        return persianDigits[digit];
                                      });
                                  }
                                  function convertDateToJalaliString(
                                    dateString
                                  ) {
                                    const date = new Date(dateString);
                                    const gYear = date.getFullYear();
                                    const gMonth = date.getMonth() + 1;
                                    const gDay = date.getDate();
                                    const { jy, jm, jd } = toJalali(
                                      gYear,
                                      gMonth,
                                      gDay
                                    );
                                    const monthName = persianMonths[jm - 1];
                                    const persianDay = toPersianDigits(jd);
                                    return `${persianDay} ${monthName}`;
                                  }
                                  const exampleDate =
                                    $state.modalData.created_at;
                                  const jalaliResult =
                                    convertDateToJalaliString(exampleDate);
                                  return jalaliResult;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wkvAq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yX8Qq
                        )}
                      >
                        {"\u0648\u0631\u0648\u062f:"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mvRiB
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function convertToPersianDigits(str) {
                                  return String(str).replace(
                                    /\d/g,
                                    digit => "۰۱۲۳۴۵۶۷۸۹"[digit]
                                  );
                                }
                                function formatDateToPersian(dateString) {
                                  const [year, month, day] =
                                    dateString.split("-");
                                  const withSlashes = `${year}/${month}/${day}`;
                                  return convertToPersianDigits(withSlashes);
                                }
                                const dateString = $state.modalData.check_in;
                                const result = formatDateToPersian(dateString);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qOxct)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q44Ip
                        )}
                      >
                        {"\u062e\u0631\u0648\u062c"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zyaZv
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function convertToPersianDigits(str) {
                                  return String(str).replace(
                                    /\d/g,
                                    digit => "۰۱۲۳۴۵۶۷۸۹"[digit]
                                  );
                                }
                                function formatDateToPersian(dateString) {
                                  const [year, month, day] =
                                    dateString.split("-");
                                  const withSlashes = `${year}/${month}/${day}`;
                                  return convertToPersianDigits(withSlashes);
                                }
                                const dateString = $state.modalData.check_out;
                                const result = formatDateToPersian(dateString);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bYbS4)}
                  >
                    {(() => {
                      try {
                        return $state.modalData.request_for == "reserve";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nuB4
                        )}
                      >
                        {
                          "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0644\u0627\u0634 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0631\u0627\u06cc \u0628\u0633\u062a\u0646 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e:\r"
                        }
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.modalData.request_for == "cancelled";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q0Ym
                        )}
                      >
                        {
                          "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0644\u0627\u0634 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0631\u0627\u06cc \u0628\u0627\u0632 \u06a9\u0631\u062f\u0646 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e:\r"
                        }
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__adLW)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__enMwu)}
                    >
                      {(() => {
                        try {
                          return (() => {
                            const source = "shab";
                            const statusObj = $state.modalData.status;
                            function checkSourceKeyInStatus(
                              sourceValue,
                              status
                            ) {
                              return status.hasOwnProperty(sourceValue);
                            }
                            const result = checkSourceKeyInStatus(
                              source,
                              statusObj
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"shab"}
                          data-plasmic-override={overrides.shab}
                          className={classNames(projectcss.all, sty.shab)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a3Naa
                            )}
                          >
                            {"\u0634\u0628"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.shab == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__pdBmB)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.shab == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__oDFd)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const source = "jajiga";
                            const statusObj = $state.modalData.status;
                            function checkSourceKeyInStatus(
                              sourceValue,
                              status
                            ) {
                              return status.hasOwnProperty(sourceValue);
                            }
                            const result = checkSourceKeyInStatus(
                              source,
                              statusObj
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"jajiga"}
                          data-plasmic-override={overrides.jajiga}
                          className={classNames(projectcss.all, sty.jajiga)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x26Bn
                            )}
                          >
                            {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.jajiga == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___7EPt3)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.jajiga == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__inTpV)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const source = "jabama";
                            const statusObj = $state.modalData.status;
                            function checkSourceKeyInStatus(
                              sourceValue,
                              status
                            ) {
                              return status.hasOwnProperty(sourceValue);
                            }
                            const result = checkSourceKeyInStatus(
                              source,
                              statusObj
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"jabama"}
                          data-plasmic-override={overrides.jabama}
                          className={classNames(projectcss.all, sty.jabama)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nWgZ5
                            )}
                          >
                            {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.jabama == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__zpIC)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.jabama == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__hTmLp)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const source = "otaghak";
                            const statusObj = $state.modalData.status;
                            function checkSourceKeyInStatus(
                              sourceValue,
                              status
                            ) {
                              return status.hasOwnProperty(sourceValue);
                            }
                            const result = checkSourceKeyInStatus(
                              source,
                              statusObj
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"otaaghak"}
                          data-plasmic-override={overrides.otaaghak}
                          className={classNames(projectcss.all, sty.otaaghak)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__semYg
                            )}
                          >
                            {"\u0627\u062a\u0627\u0642\u06a9"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.otaghak == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___23JHo)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.otaghak == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__f53Tl)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "smallMobile")
                          ? (() => {
                              try {
                                return (() => {
                                  const source = "mizboon";
                                  const statusObj = $state.modalData.status;
                                  function checkSourceKeyInStatus(
                                    sourceValue,
                                    status
                                  ) {
                                    return status.hasOwnProperty(sourceValue);
                                  }
                                  const result = checkSourceKeyInStatus(
                                    source,
                                    statusObj
                                  );
                                  return result;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return (() => {
                                  const source = "mizboon";
                                  const statusObj = $state.modalData.status;
                                  function checkSourceKeyInStatus(
                                    sourceValue,
                                    status
                                  ) {
                                    return status.hasOwnProperty(sourceValue);
                                  }
                                  const result = checkSourceKeyInStatus(
                                    source,
                                    statusObj
                                  );
                                  return result;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          data-plasmic-name={"mizboon"}
                          data-plasmic-override={overrides.mizboon}
                          className={classNames(projectcss.all, sty.mizboon)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fu7D
                            )}
                          >
                            {"\u0645\u06cc\u0632\u0628\u0648\u0646"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.mizboon == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___2NuaP)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.mizboon == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__iWbSq)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const source = "mihmansho";
                            const statusObj = $state.modalData.status;
                            function checkSourceKeyInStatus(
                              sourceValue,
                              status
                            ) {
                              return status.hasOwnProperty(sourceValue);
                            }
                            const result = checkSourceKeyInStatus(
                              source,
                              statusObj
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"mihmansho"}
                          data-plasmic-override={overrides.mihmansho}
                          className={classNames(projectcss.all, sty.mihmansho)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vbvpg
                            )}
                          >
                            {"\u0645\u0647\u0645\u0627\u0646\u0634\u0648"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.mihmansho == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___1L2SP)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.mihmansho == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__jhXkZ)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const source = "homsa";
                            const statusObj = $state.modalData.status;
                            function checkSourceKeyInStatus(
                              sourceValue,
                              status
                            ) {
                              return status.hasOwnProperty(sourceValue);
                            }
                            const result = checkSourceKeyInStatus(
                              source,
                              statusObj
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"homsa"}
                          data-plasmic-override={overrides.homsa}
                          className={classNames(projectcss.all, sty.homsa)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wJzju
                            )}
                          >
                            {"\u0647\u0648\u0645\u0633\u0627"}
                          </div>
                          {(() => {
                            try {
                              return $state.modalData.status.homsa == true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__xlWfM)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image85.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.modalData.status.homsa == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__xKtqf)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "24px"
                                  : "27px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image88.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1IJ9K)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__jmmPh
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStatusModalOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["statusModal", "open"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStatusModalOpen"] != null &&
                          typeof $steps["updateStatusModalOpen"] === "object" &&
                          typeof $steps["updateStatusModalOpen"].then ===
                            "function"
                        ) {
                          $steps["updateStatusModalOpen"] =
                            await $steps["updateStatusModalOpen"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d7OzV
                        )}
                      >
                        {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                      </div>
                    </Button>
                  </div>
                </AntdModal>
                <div
                  className={classNames(projectcss.all, sty.freeBox___0DlVa)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3UBqc
                    )}
                  >
                    {"\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eF7Bt)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__caISk
                    )}
                  >
                    {"\u0648\u0631\u0648\u062f"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pFS8)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f3HgU
                    )}
                  >
                    {"\u062e\u0631\u0648\u062c"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__nu0J)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___06Pll
                    )}
                  >
                    {"\u0645\u0639\u0631\u0641"}
                  </div>
                </div>
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.apiRequest.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"item"}
                    data-plasmic-override={overrides.item}
                    className={classNames(
                      projectcss.all,
                      sty.item,
                      (() => {
                        try {
                          return $state.apiRequest.data[currentIndex]
                            .request_for == "cancelled"
                            ? "cancelled clickable"
                            : "clickable";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.modalData = {
                                check_in:
                                  $state.apiRequest.data[currentIndex].check_in,
                                check_out:
                                  $state.apiRequest.data[currentIndex]
                                    .check_out,
                                property_name:
                                  $state.apiRequest.data[currentIndex]
                                    .property_name,
                                source:
                                  $state.apiRequest.data[currentIndex].source,
                                status:
                                  $state.apiRequest.data[currentIndex].status,
                                request_for:
                                  $state.apiRequest.data[currentIndex]
                                    .request_for,
                                created_at:
                                  $state.apiRequest.data[currentIndex]
                                    .created_at
                              })
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] =
                          await $steps["updateStateVariable"];
                      }

                      $steps["updateStatusModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["statusModal", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStatusModalOpen"] != null &&
                        typeof $steps["updateStatusModalOpen"] === "object" &&
                        typeof $steps["updateStatusModalOpen"].then ===
                          "function"
                      ) {
                        $steps["updateStatusModalOpen"] =
                          await $steps["updateStatusModalOpen"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__haSnf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vhrhd
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest.data[currentIndex]
                                .property_name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06a9\u0631\u062f\u0627\u0646 \u0637...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__p5KJm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m86Ki
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                function convertToPersianDigits(input) {
                                  return String(input).replace(
                                    /\d/g,
                                    digit => "۰۱۲۳۴۵۶۷۸۹"[digit]
                                  );
                                }
                                function convertShamsiDate(dateString) {
                                  const [year, month, day] = dateString
                                    .split("-")
                                    .map(Number);
                                  const monthName = persianMonths[month - 1];
                                  const persianDay =
                                    convertToPersianDigits(day);
                                  return `${persianDay} ${monthName}`;
                                }
                                const inputDate =
                                  $state.apiRequest.data[currentIndex].check_in;
                                const output = convertShamsiDate(inputDate);
                                return output;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "12 \u0645\u0647\u0631";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e45Hx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cBjcT
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                function convertToPersianDigits(input) {
                                  return String(input).replace(
                                    /\d/g,
                                    digit => "۰۱۲۳۴۵۶۷۸۹"[digit]
                                  );
                                }
                                function convertShamsiDate(dateString) {
                                  const [year, month, day] = dateString
                                    .split("-")
                                    .map(Number);
                                  const monthName = persianMonths[month - 1];
                                  const persianDay =
                                    convertToPersianDigits(day);
                                  return `${persianDay} ${monthName}`;
                                }
                                const inputDate =
                                  $state.apiRequest.data[currentIndex]
                                    .check_out;
                                const output = convertShamsiDate(inputDate);
                                return output;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "12 \u0645\u0647\u0631";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mRxCx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hWfFd
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const sourceMap = {
                                  jabama: "جاباما",
                                  jajiga: "جاجیگا",
                                  mihmansho: "میهمان‌شو",
                                  mizboon: "میزبون",
                                  shab: "شب",
                                  otaghak: "اتاقک",
                                  homsa: "هومسا"
                                };
                                function getPersianSource(sourceValue) {
                                  return sourceMap[sourceValue] || sourceValue;
                                }
                                const sourceValue =
                                  $state.apiRequest.data[currentIndex].source;
                                const persianSource =
                                  getPersianSource(sourceValue);
                                return persianSource;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </ApiRequest>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/channel-manager/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/channel-manager/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <div
            data-plasmic-name={"intro"}
            data-plasmic-override={overrides.intro}
            className={classNames(projectcss.all, sty.intro)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p2AEp
              )}
            >
              {
                "\u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc\u060c \u06f2\u06f4 \u0633\u0627\u0639\u062a\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0631\u0648 \u062f\u0631 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0631\u0635\u062f \u0645\u06cc\u200c\u06a9\u0646\u0647. \u062f\u0631 \u0635\u0648\u0631\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u0631\u0632\u0631\u0648 \u0627\u0632 \u06cc\u06a9\u06cc\u060c \u0627\u0648\u0646 \u062a\u0627\u0631\u06cc\u062e \u0631\u0648 \u062f\u0631 \u0633\u0627\u06cc\u0631 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627 \u0631\u0648 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0645\u06cc\u200c\u0628\u0646\u062f\u0647 \u062a\u0627 \u062a\u062f\u0627\u062e\u0644 \u0631\u0632\u0631\u0648 \u067e\u06cc\u0634 \u0646\u06cc\u0627\u062f. \u0646\u062a\u06cc\u062c\u0647\u200c\u0627\u0634 \u0627\u06cc\u0646 \u0639\u0645\u0644\u06cc\u0627\u062a \u0631\u0648 \u0627\u06cc\u0646\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc."
              }
            </div>
          </div>
          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___9ZxWb,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ayiQa
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            userType={(() => {
              try {
                return (() => {
                  return null;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox___6SjlZ)}>
            <div className={classNames(projectcss.all, sty.freeBox__j18U)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          </div>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            hideFooter={true}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f2Wh4
              )}
            >
              {
                "\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0627\u06cc\u0646\u200c\u062c\u0627 \u0631\u0648 \u0628\u0627 \u062c\u0632\u06cc\u06cc\u0627\u062a \u0628\u06cc\u0634\u200c\u062a\u0631 \u062f\u0631 \u00ab\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646\u00bb \u0628\u0628\u06cc\u0646\u06cc"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fhtrm)}>
              <Video
                data-plasmic-name={"htmlVideo"}
                data-plasmic-override={overrides.htmlVideo}
                autoPlay={true}
                className={classNames("__wab_instance", sty.htmlVideo)}
                controls={false}
                muted={true}
                src={
                  "https://rentamon-library.s3.ir-thr-at1.arvanstorage.ir/gif%2Fdoc_2025-10-31_12-25-54.mp4?versionId="
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bRfdf)}>
              <Button
                className={classNames("__wab_instance", sty.button__qLHuH)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToReservations"] = true
                    ? (() => {
                        const actionArgs = { destination: `/reservations` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToReservations"] != null &&
                    typeof $steps["goToReservations"] === "object" &&
                    typeof $steps["goToReservations"].then === "function"
                  ) {
                    $steps["goToReservations"] =
                      await $steps["goToReservations"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dYoH9
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0647\u062f\u0647 \u062c\u0632\u06cc\u06cc\u0627\u062a \u0631\u0632\u0631\u0648"
                  }
                </div>
              </Button>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p5Qk
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
              >
                {"\u0628\u06cc\u062e\u06cc\u0627\u0644"}
              </div>
            </div>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile",
    "apiRequest2",
    "toastMessageRnt",
    "apiRequest",
    "tableHeader",
    "statusModal",
    "shab",
    "jajiga",
    "jabama",
    "otaaghak",
    "mizboon",
    "mihmansho",
    "homsa",
    "item",
    "sideEffect",
    "intro",
    "returnButton",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent",
    "modal",
    "htmlVideo"
  ],
  header: ["header", "sideBar2", "profile"],
  sideBar2: ["sideBar2"],
  profile: ["profile"],
  apiRequest2: ["apiRequest2", "toastMessageRnt"],
  toastMessageRnt: ["toastMessageRnt"],
  apiRequest: [
    "apiRequest",
    "tableHeader",
    "statusModal",
    "shab",
    "jajiga",
    "jabama",
    "otaaghak",
    "mizboon",
    "mihmansho",
    "homsa",
    "item"
  ],
  tableHeader: [
    "tableHeader",
    "statusModal",
    "shab",
    "jajiga",
    "jabama",
    "otaaghak",
    "mizboon",
    "mihmansho",
    "homsa"
  ],
  statusModal: [
    "statusModal",
    "shab",
    "jajiga",
    "jabama",
    "otaaghak",
    "mizboon",
    "mihmansho",
    "homsa"
  ],
  shab: ["shab"],
  jajiga: ["jajiga"],
  jabama: ["jabama"],
  otaaghak: ["otaaghak"],
  mizboon: ["mizboon"],
  mihmansho: ["mihmansho"],
  homsa: ["homsa"],
  item: ["item"],
  sideEffect: ["sideEffect"],
  intro: ["intro"],
  returnButton: ["returnButton"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  modal: ["modal", "htmlVideo"],
  htmlVideo: ["htmlVideo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile: typeof ApiRequest;
  apiRequest2: typeof ApiRequest;
  toastMessageRnt: typeof ToastMessageRnt;
  apiRequest: typeof ApiRequest;
  tableHeader: "div";
  statusModal: typeof AntdModal;
  shab: "div";
  jajiga: "div";
  jabama: "div";
  otaaghak: "div";
  mizboon: "div";
  mihmansho: "div";
  homsa: "div";
  item: "div";
  sideEffect: typeof SideEffect;
  intro: "div";
  returnButton: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  modal: typeof AntdModal;
  htmlVideo: typeof Video;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChannelManager__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChannelManager__VariantsArgs;
    args?: PlasmicChannelManager__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicChannelManager__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicChannelManager__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChannelManager__ArgProps,
          internalVariantPropNames: PlasmicChannelManager__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChannelManager__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChannelManager";
  } else {
    func.displayName = `PlasmicChannelManager.${nodeName}`;
  }
  return func;
}

export const PlasmicChannelManager = Object.assign(
  // Top-level PlasmicChannelManager renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile: makeNodeComponent("profile"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    toastMessageRnt: makeNodeComponent("toastMessageRnt"),
    apiRequest: makeNodeComponent("apiRequest"),
    tableHeader: makeNodeComponent("tableHeader"),
    statusModal: makeNodeComponent("statusModal"),
    shab: makeNodeComponent("shab"),
    jajiga: makeNodeComponent("jajiga"),
    jabama: makeNodeComponent("jabama"),
    otaaghak: makeNodeComponent("otaaghak"),
    mizboon: makeNodeComponent("mizboon"),
    mihmansho: makeNodeComponent("mihmansho"),
    homsa: makeNodeComponent("homsa"),
    item: makeNodeComponent("item"),
    sideEffect: makeNodeComponent("sideEffect"),
    intro: makeNodeComponent("intro"),
    returnButton: makeNodeComponent("returnButton"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    modal: makeNodeComponent("modal"),
    htmlVideo: makeNodeComponent("htmlVideo"),

    // Metadata about props expected for PlasmicChannelManager
    internalVariantProps: PlasmicChannelManager__VariantProps,
    internalArgProps: PlasmicChannelManager__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "بروز رسانی خودکار رزروها",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicChannelManager;
/* prettier-ignore-end */
