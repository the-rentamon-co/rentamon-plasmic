// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: 3zHUjsxpYABR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicJabamaProfile.module.css"; // plasmic-import: 3zHUjsxpYABR/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicJabamaProfile__VariantMembers = {};
export type PlasmicJabamaProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicJabamaProfile__VariantsArgs;
export const PlasmicJabamaProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicJabamaProfile__ArgsType = {};
type ArgPropType = keyof PlasmicJabamaProfile__ArgsType;
export const PlasmicJabamaProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicJabamaProfile__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  img?: Flex__<typeof PlasmicImg__>;
  survey?: Flex__<"div">;
  selectAccess?: Flex__<typeof Select>;
  selectSpeed?: Flex__<typeof Select>;
  selectJudgment?: Flex__<typeof Select>;
  submit?: Flex__<typeof Button>;
  linkToPlatform?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultJabamaProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicJabamaProfile__RenderFunc(props: {
  variants: PlasmicJabamaProfile__VariantsArgs;
  args: PlasmicJabamaProfile__ArgsType;
  overrides: PlasmicJabamaProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectAccess.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectSpeed.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectJudgment.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sur",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "surveyform",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<script>\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        function convertNumbersInPage() {\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    setTimeout(convertNumbersInPage, 1000);\r\n    </script>"
            }
          />

          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{ "xc-token": "ty7cwczW_JDC0VQq8sEBJtu6E1e3_mX-kpa4d9TJ" }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://app.nocodb.com/api/v2/tables/myvdl0qfd44y12p/records?where=where%3D%28platformId%2Ceq%2C" +
                  $ctx.query.pid +
                  "%29&limit=25&shuffle=0&offset=0"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__s5BqJ)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___48ObF)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kl6Ov)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $ctx.fetchedData.list[0].logo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rwd8X
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nrqPr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qlNl
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.list[0].name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tEs0A
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.list[0].url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qOu1H
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "امتیاز کلی: " +
                                  $ctx.fetchedData.list[0].commissionRate *
                                    $ctx.fetchedData.list[0].supportScore +
                                  " از ۱۰۰"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u06a9\u0644\u06cc: x";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hTDv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tpdpv
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.fetchedData.list[0].description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. \u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u062a\u0646 \u0645\u0639\u0631\u0641\u06cc \u0634\u0631\u06a9\u062a \u062c\u0627\u0628\u0627\u0645\u0627 \u0648 \u0628\u0647 \u0637\u0648\u0631 \u06a9\u0644\u06cc \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0644\u0627\u0635\u0647 \u0646\u0648\u0634\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f \u062a\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0628\u062a\u0648\u0627\u0646 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u0648 \u0627\u0647\u062f\u0627\u0641 \u0627\u06cc\u0646 \u0634\u0631\u06a9\u062a \u0622\u06af\u0627\u0647 \u0634\u0648\u062f. ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ljlIv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gqy8E
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " پشتیبانی: ⭐️ " +
                                  $ctx.fetchedData.list[0].supportScore
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u2b50\ufe0f\u06f4";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "امتیاز پشتیبانی: ⭐️ " +
                                  $ctx.fetchedData.list[0].supportScore
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0627\u0645\u062a\u06cc\u0627\u0632 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc: \u2b50\ufe0f\u06f4";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kflBb
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " کارمزد: % " +
                                  $ctx.fetchedData.list[0].commissionRate
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u06cc\u0632\u0627\u0646 \u06a9\u0645\u06cc\u0633\u06cc\u0648\u0646: X%";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "نرخ کمیسیون: % " +
                                  $ctx.fetchedData.list[0].commissionRate
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u06cc\u0632\u0627\u0646 \u06a9\u0645\u06cc\u0633\u06cc\u0648\u0646: X%";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.columns__haZgZ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__ekbUf)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.column__dFwEf)}
                    />
                  </div>
                  <div
                    data-plasmic-name={"survey"}
                    data-plasmic-override={overrides.survey}
                    className={classNames(projectcss.all, sty.survey)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oQdWn
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "به پلتفرم «" +
                              $ctx.fetchedData.list[0].name +
                              "» امتیاز دهید"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0647 \u067e\u0644\u062a\u0641\u0631\u0645 x \u0627\u0645\u062a\u06cc\u0627\u0632 \u062f\u0647\u06cc\u062f\n\u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0627 \u062b\u0628\u062a \u0646\u0638\u0631 \u062e\u0648\u062f\u060c \u062f\u06cc\u06af\u0631\u0627\u0646 \u0631\u0627 \u062f\u0631 \u0634\u0646\u0627\u062e\u062a \u0628\u0647\u062a\u0631 \u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u06a9\u0646\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ie4Fa
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0628\u0627\u0632\u062e\u0648\u0631\u062f \u0634\u0645\u0627 \u0628\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u0648 \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc \u0628\u0647\u062a\u0631 \u0633\u0627\u06cc\u0632 \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627 \u062f\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0631\u06cc\u06a9 \u06a9\u0633\u0628\u200c\u0648\u06a9\u0627\u0631\u0634\u0648\u0646 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647."
                        : "\u0628\u0627\u0632\u062e\u0648\u0631\u062f \u0634\u0645\u0627 \u0628\u0647 \u062f\u06cc\u06af\u0631\u0627\u0646 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u062f \u062a\u0627 \u0634\u0631\u06cc\u06a9 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647\u062a\u0631 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u0646\u062f."}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__laFLy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__spTc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__xeiyb
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mAu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9MYqx
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                                : "\u0633\u0627\u062f\u06af\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__eoPuj
                          )}
                        >
                          <Select
                            data-plasmic-name={"selectAccess"}
                            data-plasmic-override={overrides.selectAccess}
                            className={classNames(
                              "__wab_instance",
                              sty.selectAccess
                            )}
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "selectAccess",
                                "value"
                              ])(eventArgs[0]);
                            }}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null },
                                { value: null, label: null }
                              ];
                              __composite["0"]["value"] = "5";
                              __composite["0"]["label"] =
                                "\u06f5 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646";
                              __composite["1"]["value"] = "4";
                              __composite["1"]["label"] = "\u06f4";
                              __composite["2"]["value"] = "3";
                              __composite["2"]["label"] = "\u06f3";
                              __composite["3"]["value"] = "2";
                              __composite["3"]["label"] = "\u06f2";
                              __composite["4"]["value"] = "1";
                              __composite["4"]["label"] =
                                "\u06f1  \u06a9\u0645\u062a\u0631\u06cc\u0646";
                              return __composite;
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__agVku
                                )}
                              >
                                {
                                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                                }
                              </div>
                            }
                            value={generateStateValueProp($state, [
                              "selectAccess",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.columns__ds2Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__epJa1
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__s1T8D
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0MMbN
                            )}
                          >
                            {
                              "\u0633\u0631\u0639\u062a \u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___8M9Gn
                        )}
                      >
                        <Select
                          data-plasmic-name={"selectSpeed"}
                          data-plasmic-override={overrides.selectSpeed}
                          className={classNames(
                            "__wab_instance",
                            sty.selectSpeed
                          )}
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "selectSpeed",
                              "value"
                            ])(eventArgs[0]);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null }
                            ];
                            __composite["0"]["value"] = "5";
                            __composite["0"]["label"] =
                              "\u06f5 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646";
                            __composite["1"]["value"] = "4";
                            __composite["1"]["label"] = "\u06f4";
                            __composite["2"]["value"] = "3";
                            __composite["2"]["label"] = "\u06f3";
                            __composite["3"]["value"] = "2";
                            __composite["3"]["label"] = "\u06f2";
                            __composite["4"]["value"] = "1";
                            __composite["4"]["label"] =
                              "\u06f1  \u06a9\u0645\u062a\u0631\u06cc\u0646";
                            return __composite;
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ih7Aq
                              )}
                            >
                              {
                                "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                              }
                            </div>
                          }
                          value={generateStateValueProp($state, [
                            "selectSpeed",
                            "value"
                          ])}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.columns__tGlbY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__sWh4S
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__x0KzU
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k2DiB
                            )}
                          >
                            {
                              "\u0642\u0636\u0627\u0648\u062a \u0645\u0646\u0635\u0641\u0627\u0646\u0647 \u062f\u0631 \u0627\u062e\u062a\u0644\u0627\u0641\u0627\u062a"
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__hiLay
                        )}
                      >
                        <Select
                          data-plasmic-name={"selectJudgment"}
                          data-plasmic-override={overrides.selectJudgment}
                          className={classNames(
                            "__wab_instance",
                            sty.selectJudgment
                          )}
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "selectJudgment",
                              "value"
                            ])(eventArgs[0]);
                          }}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null },
                              { value: null, label: null }
                            ];
                            __composite["0"]["value"] = "5";
                            __composite["0"]["label"] =
                              "\u06f5 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646";
                            __composite["1"]["value"] = "4";
                            __composite["1"]["label"] = "\u06f4";
                            __composite["2"]["value"] = "3";
                            __composite["2"]["label"] = "\u06f3";
                            __composite["3"]["value"] = "2";
                            __composite["3"]["label"] = "\u06f2";
                            __composite["4"]["value"] = "1";
                            __composite["4"]["label"] =
                              "\u06f1  \u06a9\u0645\u062a\u0631\u06cc\u0646";
                            return __composite;
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jxvO3
                              )}
                            >
                              {
                                "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                              }
                            </div>
                          }
                          value={generateStateValueProp($state, [
                            "selectJudgment",
                            "value"
                          ])}
                        />
                      </div>
                    </div>
                    <Button
                      data-plasmic-name={"submit"}
                      data-plasmic-override={overrides.submit}
                      className={classNames("__wab_instance", sty.submit)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://app.nocodb.com/api/v2/tables/m13p0qumldon4j4/records",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        Title: "string",
                                        platformId: $ctx.query.pid,
                                        supportAccess:
                                          $state.selectAccess.value,
                                        supportSpeed: $state.selectSpeed.value,
                                        supportJudgment:
                                          $state.selectJudgment.value,
                                        userId: 122
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          accept: "application/json",
                                          "xc-token":
                                            "ty7cwczW_JDC0VQq8sEBJtu6E1e3_mX-kpa4d9TJ",
                                          "Content-Type": "application/json"
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0638\u0631 \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f. \u0645\u062a\u0634\u06a9\u0631\u06cc\u0645",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }
                      }}
                      submitsForm={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jm4Ux
                        )}
                      >
                        {
                          "\u0627\u0631\u0633\u0627\u0644 \u0628\u0627\u0632\u062e\u0648\u0631\u062f"
                        }
                      </div>
                    </Button>
                  </div>
                  <PlasmicLink__
                    data-plasmic-name={"linkToPlatform"}
                    data-plasmic-override={overrides.linkToPlatform}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.linkToPlatform
                    )}
                    component={Link}
                    href={""}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return (() => {
                                    return (window.location.href =
                                      $ctx.fetchedData.list[0].url);
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    {
                      "\u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645\u060c \u0627\u06cc\u0646\u062c\u0627 \u0628\u0632\u0646\u06cc\u062f"
                    }
                  </PlasmicLink__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fjWbg)}
                    onClick={async event => {
                      const $steps = {};

                      $steps[
                        "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                      ] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://rentamon.com/%D8%B3%D8%A7%DB%8C%D8%AA-%D8%A7%D8%AC%D8%A7%D8%B1%D9%87-%D9%88%DB%8C%D9%84%D8%A7/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ] != null &&
                        typeof $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ] === "object" &&
                        typeof $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ].then === "function"
                      ) {
                        $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ] = await $steps[
                          "goToHttpsRentamonComD8B3D8A7Db8CD8AaD8A7D8AcD8A7D8B1D987D988Db8CD984D8A7"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rGlTw
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-8nedppYkGVaH)" }}
                        >
                          {
                            "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0645\u0642\u0627\u06cc\u0633\u0647"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              )}
            </DataCtxReader__>
          </DataFetcher>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox__cJr7H)} />
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox___1Jlei)} />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "httpRestApiFetcher",
    "img",
    "survey",
    "selectAccess",
    "selectSpeed",
    "selectJudgment",
    "submit",
    "linkToPlatform"
  ],
  embedHtml: ["embedHtml"],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "img",
    "survey",
    "selectAccess",
    "selectSpeed",
    "selectJudgment",
    "submit",
    "linkToPlatform"
  ],
  img: ["img"],
  survey: ["survey", "selectAccess", "selectSpeed", "selectJudgment", "submit"],
  selectAccess: ["selectAccess"],
  selectSpeed: ["selectSpeed"],
  selectJudgment: ["selectJudgment"],
  submit: ["submit"],
  linkToPlatform: ["linkToPlatform"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  httpRestApiFetcher: typeof DataFetcher;
  img: typeof PlasmicImg__;
  survey: "div";
  selectAccess: typeof Select;
  selectSpeed: typeof Select;
  selectJudgment: typeof Select;
  submit: typeof Button;
  linkToPlatform: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJabamaProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJabamaProfile__VariantsArgs;
    args?: PlasmicJabamaProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJabamaProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicJabamaProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicJabamaProfile__ArgProps,
          internalVariantPropNames: PlasmicJabamaProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicJabamaProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJabamaProfile";
  } else {
    func.displayName = `PlasmicJabamaProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicJabamaProfile = Object.assign(
  // Top-level PlasmicJabamaProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    img: makeNodeComponent("img"),
    survey: makeNodeComponent("survey"),
    selectAccess: makeNodeComponent("selectAccess"),
    selectSpeed: makeNodeComponent("selectSpeed"),
    selectJudgment: makeNodeComponent("selectJudgment"),
    submit: makeNodeComponent("submit"),
    linkToPlatform: makeNodeComponent("linkToPlatform"),

    // Metadata about props expected for PlasmicJabamaProfile
    internalVariantProps: PlasmicJabamaProfile__VariantProps,
    internalArgProps: PlasmicJabamaProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicJabamaProfile;
/* prettier-ignore-end */
