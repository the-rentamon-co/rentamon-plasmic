/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: wjpY8LK3df7G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import SidebarLite from "../../SidebarLite"; // plasmic-import: NKEuaTqYxvdh/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicWebsitesConnections.module.css"; // plasmic-import: wjpY8LK3df7G/css

createPlasmicElementProxy;

export type PlasmicWebsitesConnections__VariantMembers = {};
export type PlasmicWebsitesConnections__VariantsArgs = {};
type VariantPropType = keyof PlasmicWebsitesConnections__VariantsArgs;
export const PlasmicWebsitesConnections__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWebsitesConnections__ArgsType = {};
type ArgPropType = keyof PlasmicWebsitesConnections__ArgsType;
export const PlasmicWebsitesConnections__ArgProps = new Array<ArgPropType>();

export type PlasmicWebsitesConnections__OverridesType = {
  root?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  sidebarLite?: Flex__<typeof SidebarLite>;
  profile2?: Flex__<typeof ApiRequest>;
  platformsStack?: Flex__<"div">;
  platforms?: Flex__<"div">;
  apiRequest2?: Flex__<typeof ApiRequest>;
  localStorage?: Flex__<"div">;
  connectedPlatforms?: Flex__<"div">;
  falseStatus?: Flex__<typeof PlasmicImg__>;
  trueStatus?: Flex__<typeof PlasmicImg__>;
  newPlatform?: Flex__<"div">;
  connectedPlatforms2?: Flex__<"div">;
  newPlatform2?: Flex__<"div">;
  propGuide?: Flex__<"div">;
  allConnected?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultWebsitesConnectionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWebsitesConnections__RenderFunc(props: {
  variants: PlasmicWebsitesConnections__VariantsArgs;
  args: PlasmicWebsitesConnections__ArgsType;
  overrides: PlasmicWebsitesConnections__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "propTour",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <NavbarRntFooter
              data-plasmic-name={"navbarRntFooter"}
              data-plasmic-override={overrides.navbarRntFooter}
              className={classNames("__wab_instance", sty.navbarRntFooter)}
              navPage={"properties"}
              userType={(() => {
                try {
                  return $state.userType;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__htHp)}>
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return $state.userType == "1";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__tkFlx)}>
                  <SideBar2
                    data-plasmic-name={"sideBar2"}
                    data-plasmic-override={overrides.sideBar2}
                    className={classNames("__wab_instance", sty.sideBar2)}
                    isOpen={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? false
                        : false
                    }
                    userData={(() => {
                      try {
                        return $state.profile2.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return $state.userType == "2";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__xAjdI)}>
                  <SidebarLite
                    data-plasmic-name={"sidebarLite"}
                    data-plasmic-override={overrides.sidebarLite}
                    className={classNames("__wab_instance", sty.sidebarLite)}
                    isOpen={false}
                    userData={(() => {
                      try {
                        return $state.profile2.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <ApiRequest
                    data-plasmic-name={"profile2"}
                    data-plasmic-override={overrides.profile2}
                    className={classNames("__wab_instance", sty.profile2)}
                    errorDisplay={null}
                    loadingDisplay={null}
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "profile2",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "profile2",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "profile2",
                        "data"
                      ]).apply(null, eventArgs);
                    }}
                    ref={ref => {
                      $refs["profile2"] = ref;
                    }}
                    url={
                      "https://api-v2.rentamon.com/api/user_info?property_id=1"
                    }
                  />
                </div>
              ) : null}
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___6NrM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yYh0Q,
                    "fadeinf"
                  )}
                >
                  {
                    "\u0633\u0627\u06cc\u062a\u06cc \u06a9\u0647 \u0645\u06cc\u200c\u062e\u0648\u0627\u06cc \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                  }
                </div>
              </div>
            ) : null}
          </div>
          <div
            data-plasmic-name={"platformsStack"}
            data-plasmic-override={overrides.platformsStack}
            className={classNames(projectcss.all, sty.platformsStack)}
          >
            <div
              data-plasmic-name={"platforms"}
              data-plasmic-override={overrides.platforms}
              className={classNames(projectcss.all, sty.platforms, "fadeinf")}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__k08LC,
                  hasVariant(globalVariants, "screen", "mobile") ? "fadein" : ``
                )}
              >
                <ApiRequest
                  data-plasmic-name={"apiRequest2"}
                  data-plasmic-override={overrides.apiRequest2}
                  className={classNames("__wab_instance", sty.apiRequest2)}
                  errorDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sNeZu
                      )}
                    >
                      {
                        "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                      }
                    </div>
                  }
                  loadingDisplay={
                    <React.Fragment>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__iTfqr)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "40px"
                            : "50px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={
                          "https://web.rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                        }
                      />

                      {false ? (
                        <div
                          data-plasmic-name={"localStorage"}
                          data-plasmic-override={overrides.localStorage}
                          className={classNames(
                            projectcss.all,
                            sty.localStorage
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.apiRequest2.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                data-plasmic-name={"connectedPlatforms"}
                                data-plasmic-override={
                                  overrides.connectedPlatforms
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.connectedPlatforms,
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "clickable"
                                    : undefined
                                )}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["goToActivationDuplicateConnection"] =
                                    currentItem.status === "false"
                                      ? (() => {
                                          const actionArgs = {
                                            destination: `/connections?step=${(() => {
                                              try {
                                                return (() => {
                                                  switch (currentItem.website) {
                                                    case 2:
                                                      return 1;
                                                    case 3:
                                                      return 3;
                                                    case 4:
                                                      return 5;
                                                    case 6:
                                                      return 7;
                                                    case 7:
                                                      return 10;
                                                    case 8:
                                                      return 9;
                                                    default:
                                                      return null;
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}`
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps[
                                      "goToActivationDuplicateConnection"
                                    ] != null &&
                                    typeof $steps[
                                      "goToActivationDuplicateConnection"
                                    ] === "object" &&
                                    typeof $steps[
                                      "goToActivationDuplicateConnection"
                                    ].then === "function"
                                  ) {
                                    $steps[
                                      "goToActivationDuplicateConnection"
                                    ] = await $steps[
                                      "goToActivationDuplicateConnection"
                                    ];
                                  }

                                  $steps["connectedToast"] =
                                    currentItem.status === "true"
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              (() => {
                                                try {
                                                  return (() => {
                                                    switch (
                                                      $state.apiRequest2.data[
                                                        currentIndex
                                                      ].website
                                                    ) {
                                                      case 2:
                                                        return "جاباما وصله!";
                                                      case 3:
                                                        return "جاجیگا وصله!";
                                                      case 4:
                                                        return "شب وصله!";
                                                      case 5:
                                                        return "میزبون وصله!";
                                                      case 6:
                                                        return "اتاقک وصله!";
                                                      case 7:
                                                        return "مهمانشو وصله!";
                                                      case 8:
                                                        return "هومسا وصله!";
                                                      default:
                                                        return "";
                                                    }
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              "top-center"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["connectedToast"] != null &&
                                    typeof $steps["connectedToast"] ===
                                      "object" &&
                                    typeof $steps["connectedToast"].then ===
                                      "function"
                                  ) {
                                    $steps["connectedToast"] = await $steps[
                                      "connectedToast"
                                    ];
                                  }
                                }}
                              >
                                {(() => {
                                  try {
                                    return true;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__w8NDc
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return currentItem.status === "false";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <PlasmicImg__
                                        data-plasmic-name={"falseStatus"}
                                        data-plasmic-override={
                                          overrides.falseStatus
                                        }
                                        alt={""}
                                        className={classNames(
                                          sty.falseStatus,
                                          "element"
                                        )}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"48px"}
                                        loading={"lazy"}
                                        src={{
                                          src: "/plasmic/website_starter/images/image29.svg",
                                          fullWidth: 27,
                                          fullHeight: 27,
                                          aspectRatio: 1
                                        }}
                                      />
                                    ) : null}
                                    {(() => {
                                      try {
                                        return currentItem.status === "true";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <PlasmicImg__
                                        data-plasmic-name={"trueStatus"}
                                        data-plasmic-override={
                                          overrides.trueStatus
                                        }
                                        alt={""}
                                        className={classNames(sty.trueStatus)}
                                        displayHeight={"auto"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"48px"}
                                        loading={"lazy"}
                                        src={{
                                          src: "/plasmic/website_starter/images/image30.svg",
                                          fullWidth: 27,
                                          fullHeight: 27,
                                          aspectRatio: 1
                                        }}
                                      />
                                    ) : null}
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__lf5YJ)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? ``
                                          : undefined
                                      }
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return (() => {
                                            switch (
                                              $state.apiRequest2.data[
                                                currentIndex
                                              ].website
                                            ) {
                                              case 2:
                                                return "https://media.rentamon.com/icon%2Fjabama-wide.jpg";
                                              case 3:
                                                return "https://media.rentamon.com/icon%2Fjajiga-wide.jpg";
                                              case 4:
                                                return "https://media.rentamon.com/icon%2Fshab-wide.jpg";
                                              case 5:
                                                return "https://media.rentamon.com/icon%2Fmizboon-wide.jpg";
                                              case 6:
                                                return "https://media.rentamon.com/icon%2Fotaghak-wide.jpg";
                                              case 7:
                                                return "https://media.rentamon.com/icon%2Fmihmansho-wide.jpg";
                                              case 8:
                                                return "https://media.rentamon.com/icon%2Fhomsa-wide.jpg";
                                              default:
                                                return "";
                                            }
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                          ? "80%"
                                          : "80%"
                                      }
                                    />
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__oKrbb
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iYook
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            switch (
                                              $state.apiRequest2.data[
                                                currentIndex
                                              ].website
                                            ) {
                                              case 2:
                                                return "جاباما";
                                              case 3:
                                                return "جاجیگا";
                                              case 4:
                                                return "شب";
                                              case 5:
                                                return "میزبون";
                                              case 6:
                                                return "اتاقک";
                                              case 7:
                                                return "مهمانشو";
                                              case 8:
                                                return "هومسا";
                                              default:
                                                return "";
                                            }
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                          {(() => {
                            try {
                              return [2, 3, 4, 6, 7, 8].some(
                                required =>
                                  !$state.apiRequest2.data.some(
                                    item => item.website === required
                                  )
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"newPlatform"}
                              data-plasmic-override={overrides.newPlatform}
                              className={classNames(
                                projectcss.all,
                                sty.newPlatform,
                                "clickable fadein"
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToPlatformsConnections"] = [
                                  2, 3, 4, 6, 7, 8
                                ].some(
                                  required =>
                                    !$state.apiRequest2.data.some(
                                      item => item.website === required
                                    )
                                )
                                  ? (() => {
                                      const actionArgs = {};
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToPlatformsConnections"] != null &&
                                  typeof $steps["goToPlatformsConnections"] ===
                                    "object" &&
                                  typeof $steps["goToPlatformsConnections"]
                                    .then === "function"
                                ) {
                                  $steps["goToPlatformsConnections"] =
                                    await $steps["goToPlatformsConnections"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Lsf9
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__dtD9P)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                      ? "60px"
                                      : "52px"
                                  }
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/website_starter/images/image110.svg",
                                    fullWidth: 51,
                                    fullHeight: 51,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vJOxM
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6Wi8U
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                                    : "\u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0633\u0627\u06cc\u062a \u062c\u062f\u06cc\u062f"}
                                </div>
                              </div>
                            </div>
                          ) : null}
                        </div>
                      ) : null}
                    </React.Fragment>
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "error"
                    ]).apply(null, eventArgs);

                    (async error => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "data"
                    ]).apply(null, eventArgs);

                    (async data => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const data = $state.apiRequest2.data;
                                  if (Array.isArray(data) && data.length > 0) {
                                    return localStorage.setItem(
                                      "property_data",
                                      JSON.stringify(data)
                                    );
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["apiRequest2"] = ref;
                  }}
                  url={"https://gateway.rentamon.com/webhook/not-connected"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wyHoo)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apiRequest2.data
                            ? $state.apiRequest2.data
                            : [];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItems = __plasmic_item_0;
                      const currentIndexs = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"connectedPlatforms2"}
                          data-plasmic-override={overrides.connectedPlatforms2}
                          className={classNames(
                            projectcss.all,
                            sty.connectedPlatforms2,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "clickable"
                              : "clickable fadeinf"
                          )}
                          key={currentIndexs}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToConnections"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/connections?step=${(() => {
                                      try {
                                        return (() => {
                                          switch (currentItems.website) {
                                            case 2:
                                              return 1;
                                            case 3:
                                              return 3;
                                            case 4:
                                              return 5;
                                            case 6:
                                              return 7;
                                            case 7:
                                              return 10;
                                            case 8:
                                              return 9;
                                            default:
                                              return null;
                                          }
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToConnections"] != null &&
                              typeof $steps["goToConnections"] === "object" &&
                              typeof $steps["goToConnections"].then ===
                                "function"
                            ) {
                              $steps["goToConnections"] = await $steps[
                                "goToConnections"
                              ];
                            }
                          }}
                        >
                          {(() => {
                            try {
                              return true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uayol
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__cuIiN)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? ``
                                    : undefined
                                }
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return (() => {
                                      switch (
                                        $state.apiRequest2.data[currentIndexs]
                                          .website
                                      ) {
                                        case 2:
                                          return "https://media.rentamon.com/icon%2Fjabama-wide.jpg";
                                        case 3:
                                          return "https://media.rentamon.com/icon%2Fjajiga-wide.jpg";
                                        case 4:
                                          return "https://media.rentamon.com/icon%2Fshab-wide.jpg";
                                        case 5:
                                          return "https://media.rentamon.com/icon%2Fmizboon-wide.jpg";
                                        case 6:
                                          return "https://media.rentamon.com/icon%2Fotaghak-wide.jpg";
                                        case 7:
                                          return "https://media.rentamon.com/icon%2Fmihmansho-wide.jpg";
                                        case 8:
                                          return "https://media.rentamon.com/icon%2Fhomsa-wide.jpg";
                                        default:
                                          return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "80%"
                                    : "80%"
                                }
                              />
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dXjnZ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__x96U3
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      switch (
                                        $state.apiRequest2.data[currentIndexs]
                                          .website
                                      ) {
                                        case 2:
                                          return "جاباما";
                                        case 3:
                                          return "جاجیگا";
                                        case 4:
                                          return "شب";
                                        case 5:
                                          return "میزبون";
                                        case 6:
                                          return "اتاقک";
                                        case 7:
                                          return "مهمانشو";
                                        case 8:
                                          return "هومسا";
                                        default:
                                          return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    {false ? (
                      <div
                        data-plasmic-name={"newPlatform2"}
                        data-plasmic-override={overrides.newPlatform2}
                        className={classNames(
                          projectcss.all,
                          sty.newPlatform2,
                          "clickable fadein"
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToPlatformsConnections"] = [
                            2, 3, 4, 6, 7, 8
                          ].some(
                            required =>
                              !$state.apiRequest2.data.some(
                                item => item.website === required
                              )
                          )
                            ? (() => {
                                const actionArgs = {};
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPlatformsConnections"] != null &&
                            typeof $steps["goToPlatformsConnections"] ===
                              "object" &&
                            typeof $steps["goToPlatformsConnections"].then ===
                              "function"
                          ) {
                            $steps["goToPlatformsConnections"] = await $steps[
                              "goToPlatformsConnections"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__acKlh
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__npKBw)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? "60px"
                                : "52px"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image110.svg",
                              fullWidth: 51,
                              fullHeight: 51,
                              aspectRatio: 1
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lUfDw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o6N6X
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                              : "\u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0633\u0627\u06cc\u062a \u062c\u062f\u06cc\u062f"}
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__caXt6)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "smallMobile")
                          ? (() => {
                              try {
                                return $state.propTour === true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : false
                      ) ? (
                        <div
                          data-plasmic-name={"propGuide"}
                          data-plasmic-override={overrides.propGuide}
                          className={classNames(projectcss.all, sty.propGuide)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yYuxW
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__u4CP
                              )}
                            >
                              {
                                "\u0631\u0648\u06cc \u062f\u06a9\u0645\u0647  +  \u0628\u0627\u0644\u0627 \u0628\u0632\u0646 \u062a\u0627 \u0632\u06cc\u0631 \u06f1 \u062f\u0642\u06cc\u0642\u0647\n\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a\u0648 \u062b\u0628\u062a \u06a9\u0646\u06cc"
                              }
                            </div>
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return !(
                              $state.apiRequest2.data &&
                              $state.apiRequest2.data.length
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return !$state.apiRequest2.data[0];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      data-plasmic-name={"allConnected"}
                      data-plasmic-override={overrides.allConnected}
                      className={classNames(projectcss.all, sty.allConnected)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__r5SIi)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "54px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "60px"
                            : "72px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image27.svg",
                          fullWidth: 26,
                          fullHeight: 26,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o4YS9
                        )}
                      >
                        {
                          " \u0647\u0645\u0647\u200c\u06cc  \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u062a\u062d\u062a \u067e\u0648\u0634\u0634 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0645\u062a\u0635\u0644 \u0634\u062f\u0646"
                        }
                      </div>
                    </div>
                  ) : null}
                </ApiRequest>
                <div
                  className={classNames(projectcss.all, sty.freeBox__em2Wb)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.history.back();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zIqd5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v68QE
                      )}
                    >
                      {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["updateStep2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/properties/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/properties/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStep2"] != null &&
                typeof $steps["updateStep2"] === "object" &&
                typeof $steps["updateStep2"].then === "function"
              ) {
                $steps["updateStep2"] = await $steps["updateStep2"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://gateway.rentamon.com/webhook/get_user_segment"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateStep"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["step"]
                      },
                      operation: 0,
                      value: ($state.userType =
                        $steps.invokeGlobalAction.data.flag)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStep"] != null &&
                typeof $steps["updateStep"] === "object" &&
                typeof $steps["updateStep"].then === "function"
              ) {
                $steps["updateStep"] = await $steps["updateStep"];
              }

              $steps["checkPropTourCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          if (document.cookie.includes("prop_tour")) {
                            console.log("in the visit");
                            const prop_tour = getCookieValue("prop_tour");
                            if (prop_tour != null) {
                              $state.propTour = true;
                            }
                            return console.log("prop_tour:", $state.propTour);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkPropTourCookie"] != null &&
                typeof $steps["checkPropTourCookie"] === "object" &&
                typeof $steps["checkPropTourCookie"].then === "function"
              ) {
                $steps["checkPropTourCookie"] = await $steps[
                  "checkPropTourCookie"
                ];
              }
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__rWxqi)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarRntFooter",
    "header",
    "sideBar2",
    "sidebarLite",
    "profile2",
    "platformsStack",
    "platforms",
    "apiRequest2",
    "localStorage",
    "connectedPlatforms",
    "falseStatus",
    "trueStatus",
    "newPlatform",
    "connectedPlatforms2",
    "newPlatform2",
    "propGuide",
    "allConnected",
    "sideEffect",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  navbarRntFooter: ["navbarRntFooter"],
  header: ["header", "sideBar2", "sidebarLite", "profile2"],
  sideBar2: ["sideBar2"],
  sidebarLite: ["sidebarLite"],
  profile2: ["profile2"],
  platformsStack: [
    "platformsStack",
    "platforms",
    "apiRequest2",
    "localStorage",
    "connectedPlatforms",
    "falseStatus",
    "trueStatus",
    "newPlatform",
    "connectedPlatforms2",
    "newPlatform2",
    "propGuide",
    "allConnected"
  ],
  platforms: [
    "platforms",
    "apiRequest2",
    "localStorage",
    "connectedPlatforms",
    "falseStatus",
    "trueStatus",
    "newPlatform",
    "connectedPlatforms2",
    "newPlatform2",
    "propGuide",
    "allConnected"
  ],
  apiRequest2: [
    "apiRequest2",
    "localStorage",
    "connectedPlatforms",
    "falseStatus",
    "trueStatus",
    "newPlatform",
    "connectedPlatforms2",
    "newPlatform2",
    "propGuide",
    "allConnected"
  ],
  localStorage: [
    "localStorage",
    "connectedPlatforms",
    "falseStatus",
    "trueStatus",
    "newPlatform"
  ],
  connectedPlatforms: ["connectedPlatforms", "falseStatus", "trueStatus"],
  falseStatus: ["falseStatus"],
  trueStatus: ["trueStatus"],
  newPlatform: ["newPlatform"],
  connectedPlatforms2: ["connectedPlatforms2"],
  newPlatform2: ["newPlatform2"],
  propGuide: ["propGuide"],
  allConnected: ["allConnected"],
  sideEffect: ["sideEffect"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  header: "div";
  sideBar2: typeof SideBar2;
  sidebarLite: typeof SidebarLite;
  profile2: typeof ApiRequest;
  platformsStack: "div";
  platforms: "div";
  apiRequest2: typeof ApiRequest;
  localStorage: "div";
  connectedPlatforms: "div";
  falseStatus: typeof PlasmicImg__;
  trueStatus: typeof PlasmicImg__;
  newPlatform: "div";
  connectedPlatforms2: "div";
  newPlatform2: "div";
  propGuide: "div";
  allConnected: "div";
  sideEffect: typeof SideEffect;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWebsitesConnections__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWebsitesConnections__VariantsArgs;
    args?: PlasmicWebsitesConnections__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWebsitesConnections__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWebsitesConnections__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWebsitesConnections__ArgProps,
          internalVariantPropNames: PlasmicWebsitesConnections__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWebsitesConnections__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWebsitesConnections";
  } else {
    func.displayName = `PlasmicWebsitesConnections.${nodeName}`;
  }
  return func;
}

export const PlasmicWebsitesConnections = Object.assign(
  // Top-level PlasmicWebsitesConnections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    sidebarLite: makeNodeComponent("sidebarLite"),
    profile2: makeNodeComponent("profile2"),
    platformsStack: makeNodeComponent("platformsStack"),
    platforms: makeNodeComponent("platforms"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    localStorage: makeNodeComponent("localStorage"),
    connectedPlatforms: makeNodeComponent("connectedPlatforms"),
    falseStatus: makeNodeComponent("falseStatus"),
    trueStatus: makeNodeComponent("trueStatus"),
    newPlatform: makeNodeComponent("newPlatform"),
    connectedPlatforms2: makeNodeComponent("connectedPlatforms2"),
    newPlatform2: makeNodeComponent("newPlatform2"),
    propGuide: makeNodeComponent("propGuide"),
    allConnected: makeNodeComponent("allConnected"),
    sideEffect: makeNodeComponent("sideEffect"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicWebsitesConnections
    internalVariantProps: PlasmicWebsitesConnections__VariantProps,
    internalArgProps: PlasmicWebsitesConnections__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWebsitesConnections;
/* prettier-ignore-end */
