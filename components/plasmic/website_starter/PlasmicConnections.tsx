/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: X6rxWka4Bgj1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { Input } from "@/fragment/components/input"; // plasmic-import: fpBkcjHl6n0Y/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicConnections.module.css"; // plasmic-import: X6rxWka4Bgj1/css

import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: TftNRT31euw0/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: o43p7K39C_K5/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: rEfYfo-bZI1f/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: K57vPznoPcIO/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: lCqNCZvBtChM/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: vDSfCAHiQsnP/icon

createPlasmicElementProxy;

export type PlasmicConnections__VariantMembers = {};
export type PlasmicConnections__VariantsArgs = {};
type VariantPropType = keyof PlasmicConnections__VariantsArgs;
export const PlasmicConnections__VariantProps = new Array<VariantPropType>();

export type PlasmicConnections__ArgsType = {};
type ArgPropType = keyof PlasmicConnections__ArgsType;
export const PlasmicConnections__ArgProps = new Array<ArgPropType>();

export type PlasmicConnections__OverridesType = {
  root?: Flex__<"div">;
  html?: Flex__<"div">;
  goftino?: Flex__<typeof Embed>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  platformStatus?: Flex__<"div">;
  helptStack?: Flex__<"div">;
  platforms2?: Flex__<"div">;
  jajigaStatus?: Flex__<"div">;
  _true?: Flex__<typeof PlasmicImg__>;
  paltform?: Flex__<typeof PlasmicImg__>;
  _false?: Flex__<typeof PlasmicImg__>;
  add?: Flex__<typeof PlasmicImg__>;
  jabamaStatus?: Flex__<"div">;
  paltform2?: Flex__<typeof PlasmicImg__>;
  true2?: Flex__<typeof PlasmicImg__>;
  false2?: Flex__<typeof PlasmicImg__>;
  add2?: Flex__<typeof PlasmicImg__>;
  otaghakStatus?: Flex__<"div">;
  paltform3?: Flex__<typeof PlasmicImg__>;
  true3?: Flex__<typeof PlasmicImg__>;
  false3?: Flex__<typeof PlasmicImg__>;
  add3?: Flex__<typeof PlasmicImg__>;
  shabStatus?: Flex__<"div">;
  paltform4?: Flex__<typeof PlasmicImg__>;
  true4?: Flex__<typeof PlasmicImg__>;
  false4?: Flex__<typeof PlasmicImg__>;
  add4?: Flex__<typeof PlasmicImg__>;
  mizbon?: Flex__<"div">;
  paltform5?: Flex__<typeof PlasmicImg__>;
  true5?: Flex__<typeof PlasmicImg__>;
  false5?: Flex__<typeof PlasmicImg__>;
  add5?: Flex__<typeof PlasmicImg__>;
  homsaStatus?: Flex__<"div">;
  paltform6?: Flex__<typeof PlasmicImg__>;
  true6?: Flex__<typeof PlasmicImg__>;
  false6?: Flex__<typeof PlasmicImg__>;
  add6?: Flex__<typeof PlasmicImg__>;
  mihmanshoStatus?: Flex__<"div">;
  paltform7?: Flex__<typeof PlasmicImg__>;
  true7?: Flex__<typeof PlasmicImg__>;
  false7?: Flex__<typeof PlasmicImg__>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  guideModal?: Flex__<typeof AntdModal>;
  allConnected?: Flex__<"div">;
  jabamasend9?: Flex__<typeof AntdButton>;
  connect?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  jabama?: Flex__<"div">;
  jabamaSend?: Flex__<typeof FormItemWrapper>;
  jabamaSendOtp?: Flex__<typeof Input>;
  jabamasend2?: Flex__<typeof AntdButton>;
  jabamasend3?: Flex__<typeof AntdButton>;
  jabamaVerify?: Flex__<typeof FormItemWrapper>;
  jabamaOtpInput?: Flex__<typeof AntdInput>;
  jabamaverify?: Flex__<typeof AntdButton>;
  jajiga?: Flex__<"div">;
  jajigaSendForm?: Flex__<typeof FormItemWrapper>;
  jajigaSend?: Flex__<typeof Input>;
  jajigasend?: Flex__<typeof AntdButton>;
  jabamasend4?: Flex__<typeof AntdButton>;
  jajigaVerify?: Flex__<typeof FormItemWrapper>;
  input6?: Flex__<typeof AntdInput>;
  jajigaverify?: Flex__<typeof AntdButton>;
  shab?: Flex__<"div">;
  shabSend?: Flex__<typeof FormItemWrapper>;
  shabOtpSend?: Flex__<typeof Input>;
  shabSendButton?: Flex__<typeof AntdButton>;
  jabamasend5?: Flex__<typeof AntdButton>;
  shabVerify?: Flex__<typeof FormItemWrapper>;
  input10?: Flex__<typeof AntdInput>;
  shabverify?: Flex__<typeof AntdButton>;
  otaghak?: Flex__<"div">;
  otaghakSend?: Flex__<typeof FormItemWrapper>;
  otaghakSendOtp?: Flex__<typeof Input>;
  otaghaksend?: Flex__<typeof AntdButton>;
  jabamasend6?: Flex__<typeof AntdButton>;
  otaghakVerify?: Flex__<typeof FormItemWrapper>;
  input12?: Flex__<typeof AntdInput>;
  otaghakverify?: Flex__<typeof AntdButton>;
  mihmansho?: Flex__<"div">;
  mihmanshoSend?: Flex__<typeof FormItemWrapper>;
  input13?: Flex__<typeof AntdInput>;
  mihmanshosend?: Flex__<typeof AntdButton>;
  mihmanshosend6?: Flex__<typeof AntdButton>;
  mihmanshoVerify?: Flex__<typeof FormItemWrapper>;
  input14?: Flex__<typeof AntdInput>;
  mihmanshoVerify3?: Flex__<typeof AntdButton>;
  jabamasend8?: Flex__<typeof AntdButton>;
  homsa?: Flex__<"div">;
  homsaSend?: Flex__<typeof FormItemWrapper>;
  input15?: Flex__<typeof AntdInput>;
  homsaVerify2?: Flex__<typeof FormItemWrapper>;
  input16?: Flex__<typeof AntdInput>;
  homsaVerify?: Flex__<typeof AntdButton>;
  jabamasend7?: Flex__<typeof AntdButton>;
  security?: Flex__<"div">;
  guide?: Flex__<"div">;
  _1?: Flex__<"div">;
  _2?: Flex__<"div">;
  _3?: Flex__<"div">;
  getNumberOfDisconnectedPlatforms?: Flex__<typeof ApiRequest>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultConnectionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConnections__RenderFunc(props: {
  variants: PlasmicConnections__VariantsArgs;
  args: PlasmicConnections__ArgsType;
  overrides: PlasmicConnections__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "jabamaOtpInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                // // if($ctx.params.type==3){
                // //   return 1
                // // }
                // // else
                // {
                //   return 1
                // }

                $ctx.query.step
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "guideModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : false
      },
      {
        path: "platformstatus",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$state.apiRequest2.data) {
                  return { status: {} };
                } else {
                  return $state.apiRequest2.data;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "guideStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "panelGuide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "rateLimit",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          shab: 0,
          jabama: 0,
          jajiga: 0,
          otaghak: 0,
          mihmansho: 0,
          homsa: 0
        })
      },
      {
        path: "invitationCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "source",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "getNumberOfDisconnectedPlatforms.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getNumberOfDisconnectedPlatforms"
      },
      {
        path: "getNumberOfDisconnectedPlatforms.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getNumberOfDisconnectedPlatforms"
      },
      {
        path: "getNumberOfDisconnectedPlatforms.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getNumberOfDisconnectedPlatforms"
      },
      {
        path: "jajigaSend.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const found = $state.getNumberOfDisconnectedPlatforms.data.find(
                  item => item.website_id === 3
                );
                return found ? found.phone_number : null;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "jabamaSendOtp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const found = $state.getNumberOfDisconnectedPlatforms.data.find(
                  item => item.website_id === 2
                );
                return found ? found.phone_number : null;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "otaghakSendOtp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const found = $state.getNumberOfDisconnectedPlatforms.data.find(
                  item => item.website_id === 6
                );
                return found ? found.phone_number : null;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "shabOtpSend.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const found = $state.getNumberOfDisconnectedPlatforms.data.find(
                  item => item.website_id === 4
                );
                return found ? found.phone_number : null;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox___3QwNg)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__rUp55)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.history.back();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <Icon23Icon
              className={classNames(projectcss.all, sty.svg__ha2WA)}
              onClick={async event => {
                const $steps = {};

                $steps["update1"] = false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["step"]
                        },
                        operation: 0,
                        value: ($state.step = 14)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["update1"] != null &&
                  typeof $steps["update1"] === "object" &&
                  typeof $steps["update1"].then === "function"
                ) {
                  $steps["update1"] = await $steps["update1"];
                }

                $steps["goToPage3"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return (window.location.href =
                              "https://rentamon.com/panel/");
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage3"] != null &&
                  typeof $steps["goToPage3"] === "object" &&
                  typeof $steps["goToPage3"].then === "function"
                ) {
                  $steps["goToPage3"] = await $steps["goToPage3"];
                }
              }}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__r1Dz)}>
            <div className={classNames(projectcss.all, sty.freeBox___06Csm)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sbaPk)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "90px"
                    : "108px"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: "/plasmic/website_starter/images/rentamonFaLowPng.png",
                  fullWidth: 200,
                  fullHeight: 99,
                  aspectRatio: undefined
                }}
              />

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__jW23M)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__ohHk
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__djXiU)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___3GxQ)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__o6Ucu)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9S2Y
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </div>
          </div>
          {false ? (
            <div
              data-plasmic-name={"platformStatus"}
              data-plasmic-override={overrides.platformStatus}
              className={classNames(projectcss.all, sty.platformStatus)}
            >
              <div
                data-plasmic-name={"helptStack"}
                data-plasmic-override={overrides.helptStack}
                className={classNames(projectcss.all, sty.helptStack)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eaf1
                  )}
                >
                  {
                    "\u0648\u0636\u0639\u06cc\u062a \u0627\u062a\u0635\u0627\u0644 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ioOF,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "clickable"
                      : undefined
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["guideModal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                >
                  <Icon17Icon
                    className={classNames(projectcss.all, sty.svg__jq1Tr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__swDD
                    )}
                  >
                    {"\u0631\u0627\u0647\u0646\u0645\u0627"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"platforms2"}
                data-plasmic-override={overrides.platforms2}
                className={classNames(projectcss.all, sty.platforms2)}
              >
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t4Mt4)}
                  >
                    <div
                      data-plasmic-name={"jajigaStatus"}
                      data-plasmic-override={overrides.jajigaStatus}
                      className={classNames(projectcss.all, sty.jajigaStatus)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  if (
                                    $state.platformstatus.status.jajiga !== true
                                  ) {
                                    return ($state.step = 3);
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }

                        $steps["connectToast"] =
                          $state.platformstatus.status.jajiga == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u062c\u0627\u062c\u06cc\u06af\u0627\u062a \u0645\u062a\u0635\u0644 \u0647\u0633\u062a",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["connectToast"] != null &&
                          typeof $steps["connectToast"] === "object" &&
                          typeof $steps["connectToast"].then === "function"
                        ) {
                          $steps["connectToast"] = await $steps["connectToast"];
                        }

                        $steps["disconnectToast"] =
                          $state.platformstatus.status.jajiga == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u062a\u0635\u0627\u0644\u062a \u0628\u0627 \u00ab\u062c\u0627\u062c\u06cc\u06af\u0627\u00bb \u0642\u0637\u0639\u0647! \u0633\u0631\u06cc\u0639 \u0648\u0635\u0644\u0634 \u06a9\u0646",
                                    "top-center",
                                    3000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["disconnectToast"] != null &&
                          typeof $steps["disconnectToast"] === "object" &&
                          typeof $steps["disconnectToast"].then === "function"
                        ) {
                          $steps["disconnectToast"] = await $steps[
                            "disconnectToast"
                          ];
                        }

                        $steps["addToast"] = (() => {
                          return !("jajiga" in $state.platformstatus.status);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u062c\u0627\u062c\u06cc\u06af\u0627 \u0631\u0648 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645\u062a \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["addToast"] != null &&
                          typeof $steps["addToast"] === "object" &&
                          typeof $steps["addToast"].then === "function"
                        ) {
                          $steps["addToast"] = await $steps["addToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dtUt4
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jajiga !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jajiga !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jajiga !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"_true"}
                            data-plasmic-override={overrides._true}
                            alt={""}
                            className={classNames(sty._true)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image30.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        <PlasmicImg__
                          data-plasmic-name={"paltform"}
                          data-plasmic-override={overrides.paltform}
                          alt={""}
                          className={classNames(
                            sty.paltform,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "jajiga" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "jajiga" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={"47px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image9.svg",
                            fullWidth: 44,
                            fullHeight: 44,
                            aspectRatio: 1
                          }}
                        />

                        {(
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jajiga !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jajiga !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jajiga !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"_false"}
                            data-plasmic-override={overrides._false}
                            alt={""}
                            className={classNames(sty._false, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (!("jajiga" in $state.platformstatus.status)) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"add"}
                            data-plasmic-override={overrides.add}
                            alt={""}
                            className={classNames(sty.add)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hlC8R,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "jajiga" in $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "jajiga" in $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"jabamaStatus"}
                      data-plasmic-override={overrides.jabamaStatus}
                      className={classNames(projectcss.all, sty.jabamaStatus)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  if (
                                    $state.platformstatus.status.jabama !== true
                                  ) {
                                    return ($state.step = 1);
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }

                        $steps["connectToast"] =
                          $state.platformstatus.status.jabama == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u062c\u0627\u0628\u0627\u0645\u0627\u062a \u0645\u062a\u0635\u0644 \u0647\u0633\u062a",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["connectToast"] != null &&
                          typeof $steps["connectToast"] === "object" &&
                          typeof $steps["connectToast"].then === "function"
                        ) {
                          $steps["connectToast"] = await $steps["connectToast"];
                        }

                        $steps["disconnectToast"] =
                          $state.platformstatus.status.jabama == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u062a\u0635\u0627\u0644\u062a \u0628\u0627 \u00ab\u062c\u0627\u0628\u0627\u0645\u0627\u00bb \u0642\u0637\u0639\u0647! \u0633\u0631\u06cc\u0639 \u0648\u0635\u0644\u0634 \u06a9\u0646",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["disconnectToast"] != null &&
                          typeof $steps["disconnectToast"] === "object" &&
                          typeof $steps["disconnectToast"].then === "function"
                        ) {
                          $steps["disconnectToast"] = await $steps[
                            "disconnectToast"
                          ];
                        }

                        $steps["addToast"] = (() => {
                          return !("jabama" in $state.platformstatus.status);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u062c\u0627\u0628\u0627\u0645\u0627 \u0631\u0648 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645\u062a \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["addToast"] != null &&
                          typeof $steps["addToast"] === "object" &&
                          typeof $steps["addToast"].then === "function"
                        ) {
                          $steps["addToast"] = await $steps["addToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2Rf5E
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"paltform2"}
                          data-plasmic-override={overrides.paltform2}
                          alt={""}
                          className={classNames(
                            sty.paltform2,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "jabama" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "jabama" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={"47px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image19.svg",
                            fullWidth: 45,
                            fullHeight: 46,
                            aspectRatio: 0.978261
                          }}
                        />

                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jabama !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jabama !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"true2"}
                            data-plasmic-override={overrides.true2}
                            alt={""}
                            className={classNames(sty.true2)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image30.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jabama !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.jabama !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"false2"}
                            data-plasmic-override={overrides.false2}
                            alt={""}
                            className={classNames(sty.false2, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (!("jabama" in $state.platformstatus.status)) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"add2"}
                            data-plasmic-override={overrides.add2}
                            alt={""}
                            className={classNames(sty.add2)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zFq9Q,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "jabama" in $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "jabama" in $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"otaghakStatus"}
                      data-plasmic-override={overrides.otaghakStatus}
                      className={classNames(projectcss.all, sty.otaghakStatus)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  if (
                                    $state.platformstatus.status.otaghak !==
                                    true
                                  ) {
                                    return ($state.step = 7);
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }

                        $steps["connectToast"] =
                          $state.platformstatus.status.otaghak == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0627\u062a\u0627\u0642\u06a9\u062a \u0645\u062a\u0635\u0644 \u0647\u0633\u062a",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["connectToast"] != null &&
                          typeof $steps["connectToast"] === "object" &&
                          typeof $steps["connectToast"].then === "function"
                        ) {
                          $steps["connectToast"] = await $steps["connectToast"];
                        }

                        $steps["disconnectToast"] =
                          $state.platformstatus.status.otaghak == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u062a\u0635\u0627\u0644\u062a \u0628\u0627 \u00ab\u0627\u062a\u0627\u0642\u06a9\u00bb \u0642\u0637\u0639\u0647! \u0633\u0631\u06cc\u0639 \u0648\u0635\u0644\u0634 \u06a9\u0646",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["disconnectToast"] != null &&
                          typeof $steps["disconnectToast"] === "object" &&
                          typeof $steps["disconnectToast"].then === "function"
                        ) {
                          $steps["disconnectToast"] = await $steps[
                            "disconnectToast"
                          ];
                        }

                        $steps["addToast"] = (() => {
                          return !("otaghak" in $state.platformstatus.status);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0627\u062a\u0627\u0642\u06a9 \u0631\u0648 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645\u062a \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["addToast"] != null &&
                          typeof $steps["addToast"] === "object" &&
                          typeof $steps["addToast"].then === "function"
                        ) {
                          $steps["addToast"] = await $steps["addToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0Q8Oc
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"paltform3"}
                          data-plasmic-override={overrides.paltform3}
                          alt={""}
                          className={classNames(
                            sty.paltform3,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "otaghak" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "otaghak" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={"47px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image13.svg",
                            fullWidth: 46,
                            fullHeight: 46,
                            aspectRatio: 1
                          }}
                        />

                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.otaghak !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.otaghak !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"true3"}
                            data-plasmic-override={overrides.true3}
                            alt={""}
                            className={classNames(sty.true3)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image30.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                $state.platformstatus.status.otaghak !== false
                              ) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"false3"}
                            data-plasmic-override={overrides.false3}
                            alt={""}
                            className={classNames(sty.false3, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !("otaghak" in $state.platformstatus.status)
                              ) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"add3"}
                            data-plasmic-override={overrides.add3}
                            alt={""}
                            className={classNames(sty.add3)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zCB,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "otaghak" in
                                        $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "otaghak" in
                                        $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u0627\u062a\u0627\u0642\u06a9"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"shabStatus"}
                      data-plasmic-override={overrides.shabStatus}
                      className={classNames(projectcss.all, sty.shabStatus)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  if (
                                    $state.platformstatus.status.shab !== true
                                  ) {
                                    return ($state.step = 5);
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }

                        $steps["connectToast"] =
                          $state.platformstatus.status.shab == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0634\u0628 \u0634\u0645\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["connectToast"] != null &&
                          typeof $steps["connectToast"] === "object" &&
                          typeof $steps["connectToast"].then === "function"
                        ) {
                          $steps["connectToast"] = await $steps["connectToast"];
                        }

                        $steps["disconnectToast"] =
                          $state.platformstatus.status.shab == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u062a\u0635\u0627\u0644\u062a \u0628\u0627 \u00ab\u0634\u0628\u00bb \u0642\u0637\u0639\u0647! \u0633\u0631\u06cc\u0639 \u0648\u0635\u0644\u0634 \u06a9\u0646",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["disconnectToast"] != null &&
                          typeof $steps["disconnectToast"] === "object" &&
                          typeof $steps["disconnectToast"].then === "function"
                        ) {
                          $steps["disconnectToast"] = await $steps[
                            "disconnectToast"
                          ];
                        }

                        $steps["addToast"] = (() => {
                          return !("shab" in $state.platformstatus.status);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0634\u0628 \u0631\u0648 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645\u062a \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["addToast"] != null &&
                          typeof $steps["addToast"] === "object" &&
                          typeof $steps["addToast"].then === "function"
                        ) {
                          $steps["addToast"] = await $steps["addToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jBsg
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"paltform4"}
                          data-plasmic-override={overrides.paltform4}
                          alt={""}
                          className={classNames(
                            sty.paltform4,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "shab" in $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "shab" in $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={"47px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image20.svg",
                            fullWidth: 46,
                            fullHeight: 45,
                            aspectRatio: 1.022222
                          }}
                        />

                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.shab !== true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.shab !== true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"true4"}
                            data-plasmic-override={overrides.true4}
                            alt={""}
                            className={classNames(sty.true4)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image30.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if ($state.platformstatus.status.shab !== false) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"false4"}
                            data-plasmic-override={overrides.false4}
                            alt={""}
                            className={classNames(sty.false4, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (!("shab" in $state.platformstatus.status)) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"add4"}
                            data-plasmic-override={overrides.add4}
                            alt={""}
                            className={classNames(sty.add4)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wJacn,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !("shab" in $state.platformstatus.status)
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !("shab" in $state.platformstatus.status)
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u0634\u0628"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"mizbon"}
                      data-plasmic-override={overrides.mizbon}
                      className={classNames(projectcss.all, sty.mizbon)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0628\u0631\u0627\u06cc \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0645\u06cc\u0632\u0628\u0648\u0646 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u067e\u06cc\u0627\u0645 \u062f\u0647\u06cc\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__no8Ec
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"paltform5"}
                          data-plasmic-override={overrides.paltform5}
                          alt={""}
                          className={classNames(
                            sty.paltform5,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "mizboon" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "mizboon" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={"47px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image15.svg",
                            fullWidth: 46,
                            fullHeight: 45,
                            aspectRatio: 1.022222
                          }}
                        />

                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.mizboon !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.mizboon !==
                                      true
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"true5"}
                            data-plasmic-override={overrides.true5}
                            alt={""}
                            className={classNames(sty.true5)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image8.svg",
                              fullWidth: 30,
                              fullHeight: 30,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.mizboon !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.platformstatus.status.mizboon !==
                                      false
                                    ) {
                                      return false;
                                    } else {
                                      return true;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            data-plasmic-name={"false5"}
                            data-plasmic-override={overrides.false5}
                            alt={""}
                            className={classNames(sty.false5, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !("mizboon" in $state.platformstatus.status)
                              ) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"add5"}
                            data-plasmic-override={overrides.add5}
                            alt={""}
                            className={classNames(sty.add5)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jOrgc,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "mizboon" in
                                        $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "mizboon" in
                                        $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u0645\u06cc\u0632\u0628\u0648\u0646"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"homsaStatus"}
                      data-plasmic-override={overrides.homsaStatus}
                      className={classNames(projectcss.all, sty.homsaStatus)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  if (
                                    $state.platformstatus.status.homsa !== true
                                  ) {
                                    return ($state.step = 9);
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }

                        $steps["connectToast"] =
                          $state.platformstatus.status.homsa == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0647\u0648\u0645\u0633\u0627\u062a \u0645\u062a\u0635\u0644 \u0647\u0633\u062a",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["connectToast"] != null &&
                          typeof $steps["connectToast"] === "object" &&
                          typeof $steps["connectToast"].then === "function"
                        ) {
                          $steps["connectToast"] = await $steps["connectToast"];
                        }

                        $steps["disconnectToast"] =
                          $state.platformstatus.status.homsa == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u062a\u0635\u0627\u0644\u062a \u0628\u0627 \u00ab\u0647\u0648\u0645\u0633\u0627\u00bb \u0642\u0637\u0639\u0647! \u0633\u0631\u06cc\u0639 \u0648\u0635\u0644\u0634 \u06a9\u0646",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["disconnectToast"] != null &&
                          typeof $steps["disconnectToast"] === "object" &&
                          typeof $steps["disconnectToast"].then === "function"
                        ) {
                          $steps["disconnectToast"] = await $steps[
                            "disconnectToast"
                          ];
                        }

                        $steps["addToast"] = (() => {
                          return !("homsa" in $state.platformstatus.status);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0647\u0648\u0645\u0633\u0627 \u0631\u0648 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645\u062a \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["addToast"] != null &&
                          typeof $steps["addToast"] === "object" &&
                          typeof $steps["addToast"].then === "function"
                        ) {
                          $steps["addToast"] = await $steps["addToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cBlsJ
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"paltform6"}
                          data-plasmic-override={overrides.paltform6}
                          alt={""}
                          className={classNames(
                            sty.paltform6,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "homsa" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "homsa" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "47px"
                              : "47px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image18.svg",
                            fullWidth: 46,
                            fullHeight: 45,
                            aspectRatio: 1.022222
                          }}
                        />

                        {(() => {
                          try {
                            return (() => {
                              if ($state.platformstatus.status.homsa !== true) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"true6"}
                            data-plasmic-override={overrides.true6}
                            alt={""}
                            className={classNames(sty.true6)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image34.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                $state.platformstatus.status.homsa !== false
                              ) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"false6"}
                            data-plasmic-override={overrides.false6}
                            alt={""}
                            className={classNames(sty.false6, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (!("homsa" in $state.platformstatus.status)) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"add6"}
                            data-plasmic-override={overrides.add6}
                            alt={""}
                            className={classNames(sty.add6)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y3Obi,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !("homsa" in $state.platformstatus.status)
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !("homsa" in $state.platformstatus.status)
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u0647\u0648\u0645\u0633\u0627"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"mihmanshoStatus"}
                      data-plasmic-override={overrides.mihmanshoStatus}
                      className={classNames(
                        projectcss.all,
                        sty.mihmanshoStatus
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateInput6Value"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["input6", "value"]
                                },
                                operation: 0,
                                value: (() => {
                                  if (
                                    $state.platformstatus.status.mihmansho !==
                                    true
                                  ) {
                                    return ($state.step = 10);
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateInput6Value"] != null &&
                          typeof $steps["updateInput6Value"] === "object" &&
                          typeof $steps["updateInput6Value"].then === "function"
                        ) {
                          $steps["updateInput6Value"] = await $steps[
                            "updateInput6Value"
                          ];
                        }

                        $steps["connectToast"] =
                          $state.platformstatus.status.mihmansho == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0645\u0647\u0645\u0627\u0646\u0634\u0648 \u0634\u0645\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["connectToast"] != null &&
                          typeof $steps["connectToast"] === "object" &&
                          typeof $steps["connectToast"].then === "function"
                        ) {
                          $steps["connectToast"] = await $steps["connectToast"];
                        }

                        $steps["disconnectToast"] =
                          $state.platformstatus.status.mihmansho == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u062a\u0635\u0627\u0644\u062a \u0628\u0627 \u00ab\u0645\u0647\u0645\u0627\u0646\u0634\u0648\u00bb \u0642\u0637\u0639\u0647! \u0633\u0631\u06cc\u0639 \u0648\u0635\u0644\u0634 \u06a9\u0646",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["disconnectToast"] != null &&
                          typeof $steps["disconnectToast"] === "object" &&
                          typeof $steps["disconnectToast"].then === "function"
                        ) {
                          $steps["disconnectToast"] = await $steps[
                            "disconnectToast"
                          ];
                        }

                        $steps["addToast"] = (() => {
                          return !("mihmansho" in $state.platformstatus.status);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u0647\u0645\u0627\u0646\u0634\u0648 \u0631\u0648 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645\u062a \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["addToast"] != null &&
                          typeof $steps["addToast"] === "object" &&
                          typeof $steps["addToast"].then === "function"
                        ) {
                          $steps["addToast"] = await $steps["addToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pg8Qv
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"paltform7"}
                          data-plasmic-override={overrides.paltform7}
                          alt={""}
                          className={classNames(
                            sty.paltform7,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "mihmansho" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (() => {
                                      if (
                                        !(
                                          "mihmansho" in
                                          $state.platformstatus.status
                                        )
                                      ) {
                                        return "disable";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          displayHeight={"47px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image21.svg",
                            fullWidth: 46,
                            fullHeight: 45,
                            aspectRatio: 1.022222
                          }}
                        />

                        {(() => {
                          try {
                            return (() => {
                              if (
                                $state.platformstatus.status.mihmansho !== true
                              ) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"true7"}
                            data-plasmic-override={overrides.true7}
                            alt={""}
                            className={classNames(sty.true7)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image8.svg",
                              fullWidth: 30,
                              fullHeight: 30,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !("mihmansho" in $state.platformstatus.status)
                              ) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___5OHvI)}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image22.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                $state.platformstatus.status.mihmansho !== false
                              ) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"false7"}
                            data-plasmic-override={overrides.false7}
                            alt={""}
                            className={classNames(sty.false7, "element")}
                            displayHeight={"18px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image29.svg",
                              fullWidth: 27,
                              fullHeight: 27,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bmJqB,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "mihmansho" in
                                        $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (() => {
                                    if (
                                      !(
                                        "mihmansho" in
                                        $state.platformstatus.status
                                      )
                                    ) {
                                      return "disable";
                                    } else {
                                      return "";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                      >
                        {"\u0645\u0647\u0645\u0627\u0646\u0634\u0648"}
                      </div>
                    </div>
                  </div>
                ) : null}
                <ApiRequest
                  data-plasmic-name={"apiRequest2"}
                  data-plasmic-override={overrides.apiRequest2}
                  children={null}
                  className={classNames("__wab_instance", sty.apiRequest2)}
                  errorDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l9B6H
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  loadingDisplay={null}
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["apiRequest2"] = ref;
                  }}
                  url={
                    "https://api-v2.rentamon.com/api/website_statuses/?property_id=1"
                  }
                />
              </div>
              <AntdModal
                data-plasmic-name={"guideModal"}
                data-plasmic-override={overrides.guideModal}
                className={classNames("__wab_instance", sty.guideModal)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  styleTokensClassNames
                )}
                hideFooter={true}
                maskClosable={true}
                modalScopeClassName={sty["guideModal__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "guideModal",
                    "open"
                  ]).apply(null, eventArgs);
                }}
                open={generateStateValueProp($state, ["guideModal", "open"])}
                title={
                  <React.Fragment>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rFs0A)}
                    >
                      <Icon22Icon
                        className={classNames(projectcss.all, sty.svg__l3Ry)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sxU2B
                        )}
                      >
                        {
                          "\u0648\u0636\u0639\u06cc\u062a \u0627\u062a\u0635\u0627\u0644 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vqiWw)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateModalOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["guideModal", "open"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalOpen"] != null &&
                          typeof $steps["updateModalOpen"] === "object" &&
                          typeof $steps["updateModalOpen"].then === "function"
                        ) {
                          $steps["updateModalOpen"] = await $steps[
                            "updateModalOpen"
                          ];
                        }
                      }}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___2CWq)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"18px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image24.svg",
                          fullWidth: 20,
                          fullHeight: 18,
                          aspectRatio: 1.111111
                        }}
                      />
                    </div>
                  </React.Fragment>
                }
                trigger={null}
                width={"320px"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tf3Du)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8FVwA)}
                  >
                    <Icon19Icon
                      className={classNames(projectcss.all, sty.svg__ehVoj)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rjWoI
                      )}
                    >
                      {
                        "\u0633\u0627\u06cc\u062a \u0647\u0646\u0648\u0632 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0636\u0627\u0641\u0647 \u0646\u0634\u062f\u0647"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wJstk)}
                  >
                    <Icon20Icon
                      className={classNames(projectcss.all, sty.svg__xTt9E)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ne5Ud
                      )}
                    >
                      {
                        "\u0627\u062a\u0635\u0627\u0644 \u0633\u0627\u06cc\u062a \u0628\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0642\u0637\u0639 \u0647\u0633\u062a"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qFiSa)}
                  >
                    <Icon21Icon
                      className={classNames(projectcss.all, sty.svg__oiThV)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ni9H
                      )}
                    >
                      {
                        "\u0633\u0627\u06cc\u062a \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0648\u0635\u0644 \u0634\u062f\u0647"
                      }
                    </div>
                  </div>
                </div>
              </AntdModal>
            </div>
          ) : null}
          {false ? (
            <div
              data-plasmic-name={"allConnected"}
              data-plasmic-override={overrides.allConnected}
              className={classNames(projectcss.all, sty.allConnected)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jlH7I)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "72px"
                    : "83px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image27.svg",
                  fullWidth: 26,
                  fullHeight: 26,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x0Zaw
                )}
              >
                {
                  "\u0647\u0645\u0647\u200c\u06cc  \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u0646"
                }
              </div>
              <AntdButton
                data-plasmic-name={"jabamasend9"}
                data-plasmic-override={overrides.jabamasend9}
                className={classNames("__wab_instance", sty.jabamasend9)}
                onClick={async () => {
                  const $steps = {};

                  $steps["update1"] = false
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: ($state.step = 14)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["update1"] != null &&
                    typeof $steps["update1"] === "object" &&
                    typeof $steps["update1"].then === "function"
                  ) {
                    $steps["update1"] = await $steps["update1"];
                  }

                  $steps["goToPanelCalendar"] = true
                    ? (() => {
                        const actionArgs = { destination: `/panel` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPanelCalendar"] != null &&
                    typeof $steps["goToPanelCalendar"] === "object" &&
                    typeof $steps["goToPanelCalendar"].then === "function"
                  ) {
                    $steps["goToPanelCalendar"] = await $steps[
                      "goToPanelCalendar"
                    ];
                  }
                }}
                submitsForm={true}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ptLyK
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0646\u0645\u0627\u06cc\u0634 \u062a\u0642\u0648\u06cc\u0645"
                    : "\u0646\u0645\u0627\u06cc\u0634 \u062a\u0642\u0648\u06cc\u0645"}
                </div>
              </AntdButton>
            </div>
          ) : null}
          <div
            data-plasmic-name={"connect"}
            data-plasmic-override={overrides.connect}
            className={classNames(
              projectcss.all,
              sty.connect,
              hasVariant(globalVariants, "screen", "mobile")
                ? "shadow"
                : undefined
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <div
                    data-plasmic-name={"jabama"}
                    data-plasmic-override={overrides.jabama}
                    className={classNames(projectcss.all, sty.jabama)}
                  >
                    {(() => {
                      try {
                        return (
                          $state.step == 1 &&
                          $state.platformstatus.status.jabama !== true
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"jabamaSend"}
                        data-plasmic-override={overrides.jabamaSend}
                        className={classNames("__wab_instance", sty.jabamaSend)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8LG4D
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mqhAz
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___2OhO3)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"70%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "114px"
                                    : "80px"
                                }
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/website_starter/images/image19.svg",
                                  fullWidth: 45,
                                  fullHeight: 46,
                                  aspectRatio: 0.978261
                                }}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ieXxf
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3DpmI
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.list[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fTfkX
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627:"
                                }
                              </div>
                            </div>
                          </div>
                        }
                        name={"jabamaphone"}
                        rules={[
                          { ruleType: "required", message: `` },

                          {
                            ruleType: "min",
                            length: 11,
                            message:
                              "\u0645\u0648\u0628\u0627\u06cc\u0644 \u0628\u0627\u06cc\u062f \u06f1\u06f1 \u0631\u0642\u0645 \u0628\u0627\u0634\u0647"
                          }
                        ]}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eTpk2
                          )}
                        />

                        <Input
                          data-plasmic-name={"jabamaSendOtp"}
                          data-plasmic-override={overrides.jabamaSendOtp}
                          className={classNames(
                            "__wab_instance",
                            sty.jabamaSendOtp
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "jabamaSendOtp",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "jabamaSendOtp",
                            "value"
                          ])}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__g2Zhg
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"jabamasend2"}
                            data-plasmic-override={overrides.jabamasend2}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend2
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToActivationDuplicateConnection"] =
                                $state.jabamaSendOtp.value !== undefined &&
                                $state.jabamaSendOtp.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/connections?step=${"2"}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToActivationDuplicateConnection"] !=
                                  null &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ] === "object" &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ].then === "function"
                              ) {
                                $steps["goToActivationDuplicateConnection"] =
                                  await $steps[
                                    "goToActivationDuplicateConnection"
                                  ];
                              }

                              $steps["jabamaSend"] =
                                $state.jabamaSendOtp.value !== undefined &&
                                $state.jabamaSendOtp.value >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/jabama-send-otp",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.jabamaSendOtp.value
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["jabamaSend"] != null &&
                                typeof $steps["jabamaSend"] === "object" &&
                                typeof $steps["jabamaSend"].then === "function"
                              ) {
                                $steps["jabamaSend"] = await $steps[
                                  "jabamaSend"
                                ];
                              }

                              $steps["invokeGlobalAction"] =
                                $steps.jabamaSend.status == 400
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          (() => {
                                            try {
                                              return (
                                                "با شماره " +
                                                $state.jabamaSendOtp.value.replace(
                                                  /[0-9]/g,
                                                  function (char) {
                                                    return String.fromCharCode(
                                                      char.charCodeAt(0) + 1728
                                                    );
                                                  }
                                                ) +
                                                " در جاباما حساب کاربری نداری!"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2FwI
                              )}
                            >
                              {
                                "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                              }
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"jabamasend3"}
                            data-plasmic-override={overrides.jabamasend3}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend3
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.history.back();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["update1"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: ($state.step = 14)
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["update1"] != null &&
                                typeof $steps["update1"] === "object" &&
                                typeof $steps["update1"].then === "function"
                              ) {
                                $steps["update1"] = await $steps["update1"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hwggq
                              )}
                            >
                              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                    {(() => {
                      try {
                        return $state.step == 2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"jabamaVerify"}
                        data-plasmic-override={overrides.jabamaVerify}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamaVerify
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__g7BNm
                            )}
                          >
                            {
                              "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u0628\u0627\u0645\u0627:"
                            }
                          </div>
                        }
                        name={"jabamaOTP"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u06a9\u062f \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.jabamaOtpInput
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["jabamaOtpInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0634\u062f",
                            size: "large",
                            value: generateStateValueProp($state, [
                              "jabamaOtpInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "jabamaOtpInput.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"jabamaOtpInput"}
                              data-plasmic-override={overrides.jabamaOtpInput}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jJma1
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ilgzK
                            )}
                          >
                            <AntdButton
                              data-plasmic-name={"jabamaverify"}
                              data-plasmic-override={overrides.jabamaverify}
                              className={classNames(
                                "__wab_instance",
                                sty.jabamaverify
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["jabamaVerify"] =
                                  $state.form.value.jabamaOTP !== undefined
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://gateway.rentamon.com/webhook/jabama-verify-otp",
                                            undefined,
                                            (() => {
                                              try {
                                                return (() => {
                                                  function faToEnDigits(str) {
                                                    return str.replace(
                                                      /[۰-۹]/g,
                                                      d =>
                                                        "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                    );
                                                  }
                                                  return {
                                                    phone: faToEnDigits(
                                                      $state.jabamaSendOtp.value
                                                    ),
                                                    otp: faToEnDigits(
                                                      $state.form.value
                                                        .jabamaOTP
                                                    )
                                                  };
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["jabamaVerify"] != null &&
                                  typeof $steps["jabamaVerify"] === "object" &&
                                  typeof $steps["jabamaVerify"].then ===
                                    "function"
                                ) {
                                  $steps["jabamaVerify"] = await $steps[
                                    "jabamaVerify"
                                  ];
                                }

                                $steps["successToast"] =
                                  $steps.jabamaVerify.data.status === true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "\u062c\u0627\u0628\u0627\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0645\u062a\u0635\u0644 \u0634\u062f!",
                                            "top-center"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["successToast"] != null &&
                                  typeof $steps["successToast"] === "object" &&
                                  typeof $steps["successToast"].then ===
                                    "function"
                                ) {
                                  $steps["successToast"] = await $steps[
                                    "successToast"
                                  ];
                                }

                                $steps["errorToast"] = !$steps.jabamaVerify
                                  ?.data?.status
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0627\u062a\u0635\u0627\u0644 \u0628\u0627 \u062c\u0627\u0628\u0627\u0645\u0627 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u0634\u062f!",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["errorToast"] != null &&
                                  typeof $steps["errorToast"] === "object" &&
                                  typeof $steps["errorToast"].then ===
                                    "function"
                                ) {
                                  $steps["errorToast"] = await $steps[
                                    "errorToast"
                                  ];
                                }

                                $steps["jabamaContact"] =
                                  $state.form.value.jabamaOTP !== undefined
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://gateway.rentamon.com/webhook/jabamacontact",
                                            undefined,
                                            undefined
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["jabamaContact"] != null &&
                                  typeof $steps["jabamaContact"] === "object" &&
                                  typeof $steps["jabamaContact"].then ===
                                    "function"
                                ) {
                                  $steps["jabamaContact"] = await $steps[
                                    "jabamaContact"
                                  ];
                                }

                                $steps["platformStatus"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        operation: 0,
                                        value: (() => {
                                          if (
                                            $steps.jabamaVerify.data.status ===
                                            true
                                          ) {
                                            return ($state.platformstatus.status.jabama =
                                              true);
                                          } else {
                                            return ($state.platformstatus.status.jabama =
                                              false);
                                          }
                                        })()
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["platformStatus"] != null &&
                                  typeof $steps["platformStatus"] ===
                                    "object" &&
                                  typeof $steps["platformStatus"].then ===
                                    "function"
                                ) {
                                  $steps["platformStatus"] = await $steps[
                                    "platformStatus"
                                  ];
                                }

                                $steps["goToStatusesConnections"] =
                                  $steps.jabamaVerify.data.status === true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/statuses`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["goToStatusesConnections"] != null &&
                                  typeof $steps["goToStatusesConnections"] ===
                                    "object" &&
                                  typeof $steps["goToStatusesConnections"]
                                    .then === "function"
                                ) {
                                  $steps["goToStatusesConnections"] =
                                    await $steps["goToStatusesConnections"];
                                }
                              }}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dfcQp
                                )}
                              >
                                {"\u062a\u0627\u06cc\u06cc\u062f"}
                              </div>
                            </AntdButton>
                          </div>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"jajiga"}
                    data-plasmic-override={overrides.jajiga}
                    className={classNames(projectcss.all, sty.jajiga)}
                  >
                    {(() => {
                      try {
                        return (
                          $state.step == 3 &&
                          $state.platformstatus.status.jajiga != true
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"jajigaSendForm"}
                        data-plasmic-override={overrides.jajigaSendForm}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaSendForm
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__evOtu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eKxq
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___1WXvt)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"70%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "114px"
                                    : "80px"
                                }
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/website_starter/images/image9.svg",
                                  fullWidth: 44,
                                  fullHeight: 44,
                                  aspectRatio: 1
                                }}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aOzja
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zzuFq
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.list[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qqGvc
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                                }
                              </div>
                            </div>
                          </div>
                        }
                        name={"jajigaphone"}
                        rules={[
                          { ruleType: "required", message: `` },

                          {
                            ruleType: "min",
                            length: 11,
                            message:
                              "\u0634\u0645\u0627\u0631\u0647 \u0628\u0627\u06cc\u062f \u06f1\u06f1 \u0631\u0642\u0645 \u0628\u0627\u0634\u0647"
                          }
                        ]}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uMsAr
                          )}
                        />

                        <Input
                          data-plasmic-name={"jajigaSend"}
                          data-plasmic-override={overrides.jajigaSend}
                          className={classNames(
                            "__wab_instance",
                            sty.jajigaSend
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "jajigaSend",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "jajigaSend",
                            "value"
                          ])}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xndOh
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"jajigasend"}
                            data-plasmic-override={overrides.jajigasend}
                            className={classNames(
                              "__wab_instance",
                              sty.jajigasend
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToActivationDuplicateConnection"] =
                                $state.jajigaSend.value !== undefined &&
                                $state.jajigaSend.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/connections?step=${"4"}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToActivationDuplicateConnection"] !=
                                  null &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ] === "object" &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ].then === "function"
                              ) {
                                $steps["goToActivationDuplicateConnection"] =
                                  await $steps[
                                    "goToActivationDuplicateConnection"
                                  ];
                              }

                              $steps["jajigaSend"] =
                                $state.jajigaSend.value !== undefined &&
                                $state.jajigaSend.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/Auth_jajiga_Send",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.jajigaSend.value
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["jajigaSend"] != null &&
                                typeof $steps["jajigaSend"] === "object" &&
                                typeof $steps["jajigaSend"].then === "function"
                              ) {
                                $steps["jajigaSend"] = await $steps[
                                  "jajigaSend"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rRfLg
                              )}
                            >
                              {
                                "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                              }
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"jabamasend4"}
                            data-plasmic-override={overrides.jabamasend4}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend4
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.history.back();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["update1"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: ($state.step = 14)
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["update1"] != null &&
                                typeof $steps["update1"] === "object" &&
                                typeof $steps["update1"].then === "function"
                              ) {
                                $steps["update1"] = await $steps["update1"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mu4Nk
                              )}
                            >
                              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                    {(() => {
                      try {
                        return $state.step == 4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"jajigaVerify"}
                        data-plasmic-override={overrides.jajigaVerify}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaVerify
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nd8Qp
                            )}
                          >
                            {
                              "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                            }
                          </div>
                        }
                        name={"jajigaOTP"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u06a9\u062f \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input6),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input6", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0634\u062f",
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input6",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input6.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input6"}
                              data-plasmic-override={overrides.input6}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e5Bhm
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"jajigaverify"}
                            data-plasmic-override={overrides.jajigaverify}
                            className={classNames(
                              "__wab_instance",
                              sty.jajigaverify
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["jajigaVerify"] =
                                $state.form.value.jajigaOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/Auth_jajiga_verify",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.jajigaSend.value
                                                  ),
                                                  otp: faToEnDigits(
                                                    $state.form.value.jajigaOTP
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["jajigaVerify"] != null &&
                                typeof $steps["jajigaVerify"] === "object" &&
                                typeof $steps["jajigaVerify"].then ===
                                  "function"
                              ) {
                                $steps["jajigaVerify"] = await $steps[
                                  "jajigaVerify"
                                ];
                              }

                              $steps["successToast"] =
                                $steps.jajigaVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u062c\u0627\u062c\u06cc\u06af\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0645\u062a\u0635\u0644 \u0634\u062f!",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["successToast"] != null &&
                                typeof $steps["successToast"] === "object" &&
                                typeof $steps["successToast"].then ===
                                  "function"
                              ) {
                                $steps["successToast"] = await $steps[
                                  "successToast"
                                ];
                              }

                              $steps["errorToast"] =
                                $steps.jajigaVerify.data.status !== true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0627\u062a\u0635\u0627\u0644 \u0628\u0627 \u062c\u0627\u062c\u06cc\u06af\u0627 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u0634\u062f!",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["errorToast"] != null &&
                                typeof $steps["errorToast"] === "object" &&
                                typeof $steps["errorToast"].then === "function"
                              ) {
                                $steps["errorToast"] = await $steps[
                                  "errorToast"
                                ];
                              }

                              $steps["jajigacontact"] =
                                $state.form.value.jajigaOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/jajigacontact",
                                          undefined,
                                          (() => {
                                            try {
                                              return $state.user_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["jajigacontact"] != null &&
                                typeof $steps["jajigacontact"] === "object" &&
                                typeof $steps["jajigacontact"].then ===
                                  "function"
                              ) {
                                $steps["jajigacontact"] = await $steps[
                                  "jajigacontact"
                                ];
                              }

                              $steps["platformStatus"] = true
                                ? (() => {
                                    const actionArgs = {
                                      operation: 0,
                                      value: (() => {
                                        if ($steps.jajigaVerify.status == 200) {
                                          return ($state.platformstatus.status.jajiga =
                                            true);
                                        } else {
                                          return ($state.platformstatus.status.jajiga =
                                            false);
                                        }
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["platformStatus"] != null &&
                                typeof $steps["platformStatus"] === "object" &&
                                typeof $steps["platformStatus"].then ===
                                  "function"
                              ) {
                                $steps["platformStatus"] = await $steps[
                                  "platformStatus"
                                ];
                              }

                              $steps["goToStatusesConnections"] =
                                $steps.jajigaVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/statuses`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToStatusesConnections"] != null &&
                                typeof $steps["goToStatusesConnections"] ===
                                  "object" &&
                                typeof $steps["goToStatusesConnections"]
                                  .then === "function"
                              ) {
                                $steps["goToStatusesConnections"] =
                                  await $steps["goToStatusesConnections"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sto5U
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"shab"}
                    data-plasmic-override={overrides.shab}
                    className={classNames(projectcss.all, sty.shab)}
                  >
                    {(() => {
                      try {
                        return (
                          $state.step == 5 &&
                          $state.platformstatus.status.shab !== true
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"shabSend"}
                        data-plasmic-override={overrides.shabSend}
                        className={classNames("__wab_instance", sty.shabSend)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ig9A
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qBaZ
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__onyxZ)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"70%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "114px"
                                    : "80px"
                                }
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/website_starter/images/image.png",
                                  fullWidth: 88,
                                  fullHeight: 88,
                                  aspectRatio: undefined
                                }}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cYoHm
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1FI1U
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.list[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xqVd5
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0634\u0628:"
                                }
                              </div>
                            </div>
                          </div>
                        }
                        name={"shabphone"}
                        rules={[
                          { ruleType: "required" },

                          {
                            ruleType: "min",
                            length: 11,
                            message:
                              "\u0634\u0645\u0627\u0631\u0647 \u0628\u0627\u06cc\u062f \u06f1\u06f1 \u0631\u0642\u0645 \u0628\u0627\u0634\u0647"
                          }
                        ]}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aTdJd
                          )}
                        />

                        <Input
                          data-plasmic-name={"shabOtpSend"}
                          data-plasmic-override={overrides.shabOtpSend}
                          className={classNames(
                            "__wab_instance",
                            sty.shabOtpSend
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "shabOtpSend",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "shabOtpSend",
                            "value"
                          ])}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__h01Oz
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"shabSendButton"}
                            data-plasmic-override={overrides.shabSendButton}
                            className={classNames(
                              "__wab_instance",
                              sty.shabSendButton
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToActivationDuplicateConnection"] =
                                $state.shabOtpSend.value !== undefined &&
                                $state.shabOtpSend.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/connections?step=${"6"}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToActivationDuplicateConnection"] !=
                                  null &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ] === "object" &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ].then === "function"
                              ) {
                                $steps["goToActivationDuplicateConnection"] =
                                  await $steps[
                                    "goToActivationDuplicateConnection"
                                  ];
                              }

                              $steps["shabSend"] =
                                $state.shabOtpSend.value !== undefined &&
                                $state.shabOtpSend.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/shab-otp",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.shabOtpSend.value
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["shabSend"] != null &&
                                typeof $steps["shabSend"] === "object" &&
                                typeof $steps["shabSend"].then === "function"
                              ) {
                                $steps["shabSend"] = await $steps["shabSend"];
                              }

                              $steps["repeatTest"] = (() => {
                                if (!$state.form.submitTimes) {
                                  $state.form.submitTimes = [];
                                }
                                const now = Date.now();
                                $state.form.submitTimes =
                                  $state.form.submitTimes.filter(
                                    time => now - time <= 15 * 60 * 1000
                                  );
                                if ($state.form.submitTimes.length < 2) {
                                  $state.form.submitTimes.push(now);
                                  $state.form.isSubmitting = true;
                                  console.log("Form submitted!");
                                  return setTimeout(() => {
                                    $state.form.isSubmitting = false;
                                  }, 1000);
                                } else {
                                  return console.log(
                                    "You can only submit the form 2 times in 15 minutes."
                                  );
                                }
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/shabnewsend"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["repeatTest"] != null &&
                                typeof $steps["repeatTest"] === "object" &&
                                typeof $steps["repeatTest"].then === "function"
                              ) {
                                $steps["repeatTest"] = await $steps[
                                  "repeatTest"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7SvYg
                              )}
                            >
                              {
                                "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                              }
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"jabamasend5"}
                            data-plasmic-override={overrides.jabamasend5}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend5
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.history.back();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["update1"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: ($state.step = 14)
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["update1"] != null &&
                                typeof $steps["update1"] === "object" &&
                                typeof $steps["update1"].then === "function"
                              ) {
                                $steps["update1"] = await $steps["update1"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dMwUi
                              )}
                            >
                              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                    {(() => {
                      try {
                        return $state.step == 6;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"shabVerify"}
                        data-plasmic-override={overrides.shabVerify}
                        className={classNames("__wab_instance", sty.shabVerify)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ynWSi
                            )}
                          >
                            {
                              "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0634\u0628:"
                            }
                          </div>
                        }
                        name={"shabOTP"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u06a9\u062f \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input10
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input10", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0634\u062f",
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input10",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input10.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input10"}
                              data-plasmic-override={overrides.input10}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rmhyO
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"shabverify"}
                            data-plasmic-override={overrides.shabverify}
                            className={classNames(
                              "__wab_instance",
                              sty.shabverify
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["shabVerify"] =
                                $state.form.value.shabOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/shab-verify?v=2",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.shabOtpSend.value
                                                  ),
                                                  otp: faToEnDigits(
                                                    $state.form.value.shabOTP
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["shabVerify"] != null &&
                                typeof $steps["shabVerify"] === "object" &&
                                typeof $steps["shabVerify"].then === "function"
                              ) {
                                $steps["shabVerify"] = await $steps[
                                  "shabVerify"
                                ];
                              }

                              $steps["successToast"] =
                                $steps.shabVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u0634\u0628 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0645\u062a\u0635\u0644 \u0634\u062f!",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["successToast"] != null &&
                                typeof $steps["successToast"] === "object" &&
                                typeof $steps["successToast"].then ===
                                  "function"
                              ) {
                                $steps["successToast"] = await $steps[
                                  "successToast"
                                ];
                              }

                              $steps["errorToast"] = !$steps.shabVerify?.data
                                ?.status
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0627\u062a\u0635\u0627\u0644 \u0628\u0627 \u0634\u0628 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u0634\u062f!",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["errorToast"] != null &&
                                typeof $steps["errorToast"] === "object" &&
                                typeof $steps["errorToast"].then === "function"
                              ) {
                                $steps["errorToast"] = await $steps[
                                  "errorToast"
                                ];
                              }

                              $steps["shabContact"] =
                                $state.form.value.shabOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/shabcontact",
                                          undefined,
                                          (() => {
                                            try {
                                              return $state.user_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["shabContact"] != null &&
                                typeof $steps["shabContact"] === "object" &&
                                typeof $steps["shabContact"].then === "function"
                              ) {
                                $steps["shabContact"] = await $steps[
                                  "shabContact"
                                ];
                              }

                              $steps["platformStatus"] = true
                                ? (() => {
                                    const actionArgs = {
                                      operation: 0,
                                      value: (() => {
                                        if (
                                          $steps.shabVerify.data.status === true
                                        ) {
                                          return ($state.platformstatus.status.shab =
                                            true);
                                        } else {
                                          return ($state.platformstatus.status.shab =
                                            false);
                                        }
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["platformStatus"] != null &&
                                typeof $steps["platformStatus"] === "object" &&
                                typeof $steps["platformStatus"].then ===
                                  "function"
                              ) {
                                $steps["platformStatus"] = await $steps[
                                  "platformStatus"
                                ];
                              }

                              $steps["goToStatusesConnections"] =
                                $steps.shabVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/statuses`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToStatusesConnections"] != null &&
                                typeof $steps["goToStatusesConnections"] ===
                                  "object" &&
                                typeof $steps["goToStatusesConnections"]
                                  .then === "function"
                              ) {
                                $steps["goToStatusesConnections"] =
                                  await $steps["goToStatusesConnections"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eOw1L
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"otaghak"}
                    data-plasmic-override={overrides.otaghak}
                    className={classNames(projectcss.all, sty.otaghak)}
                  >
                    {(() => {
                      try {
                        return $state.step == 7;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"otaghakSend"}
                        data-plasmic-override={overrides.otaghakSend}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakSend
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__phep7
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__c3Imr
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__veTej)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"70%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "114px"
                                    : "80px"
                                }
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/website_starter/images/image13.svg",
                                  fullWidth: 46,
                                  fullHeight: 46,
                                  aspectRatio: 1
                                }}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vdQim
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__t0C1J
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.list[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ewPm5
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0627\u062a\u0627\u0642\u06a9:"
                                }
                              </div>
                            </div>
                          </div>
                        }
                        name={"otaghakphone"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          },

                          {
                            ruleType: "min",
                            length: 11,
                            message:
                              "\u0634\u0645\u0627\u0631\u0647 \u06f1\u06f1 \u0631\u0642\u0645 \u0628\u0627\u06cc\u062f \u0628\u0627\u0634\u0647"
                          }
                        ]}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__p63Lx
                          )}
                        />

                        <Input
                          data-plasmic-name={"otaghakSendOtp"}
                          data-plasmic-override={overrides.otaghakSendOtp}
                          className={classNames(
                            "__wab_instance",
                            sty.otaghakSendOtp
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "otaghakSendOtp",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={``}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "otaghakSendOtp",
                            "value"
                          ])}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oe77W
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"otaghaksend"}
                            data-plasmic-override={overrides.otaghaksend}
                            className={classNames(
                              "__wab_instance",
                              sty.otaghaksend
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToActivationDuplicateConnection"] =
                                $state.otaghakSendOtp.value !== undefined &&
                                $state.otaghakSendOtp.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/connections?step=${"8"}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToActivationDuplicateConnection"] !=
                                  null &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ] === "object" &&
                                typeof $steps[
                                  "goToActivationDuplicateConnection"
                                ].then === "function"
                              ) {
                                $steps["goToActivationDuplicateConnection"] =
                                  await $steps[
                                    "goToActivationDuplicateConnection"
                                  ];
                              }

                              $steps["otaghakSend"] =
                                $state.otaghakSendOtp.value !== undefined &&
                                $state.otaghakSendOtp.value.length >= 11
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/otaghak-send-otp",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.otaghakSendOtp.value
                                                  ),
                                                  website: "otaghak"
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["otaghakSend"] != null &&
                                typeof $steps["otaghakSend"] === "object" &&
                                typeof $steps["otaghakSend"].then === "function"
                              ) {
                                $steps["otaghakSend"] = await $steps[
                                  "otaghakSend"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zsykB
                              )}
                            >
                              {
                                "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                              }
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"jabamasend6"}
                            data-plasmic-override={overrides.jabamasend6}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend6
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.history.back();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["update1"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: ($state.step = 14)
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["update1"] != null &&
                                typeof $steps["update1"] === "object" &&
                                typeof $steps["update1"].then === "function"
                              ) {
                                $steps["update1"] = await $steps["update1"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mXrku
                              )}
                            >
                              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                    {(() => {
                      try {
                        return $state.step == 8;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"otaghakVerify"}
                        data-plasmic-override={overrides.otaghakVerify}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakVerify
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gLgpq
                            )}
                          >
                            {
                              "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0627\u062a\u0627\u0642\u06a9:"
                            }
                          </div>
                        }
                        name={"otaghakOTP"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u06a9\u062f \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input12
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input12", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0634\u062f",
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input12",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input12.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input12"}
                              data-plasmic-override={overrides.input12}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yiWyj
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"otaghakverify"}
                            data-plasmic-override={overrides.otaghakverify}
                            className={classNames(
                              "__wab_instance",
                              sty.otaghakverify
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["otaghakVerify"] =
                                $state.form.value.otaghakOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/otaghak-verify-otp",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.otaghakSendOtp.value
                                                  ),
                                                  otp: faToEnDigits(
                                                    $state.form.value.otaghakOTP
                                                  ),
                                                  website: "otaghak"
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["otaghakVerify"] != null &&
                                typeof $steps["otaghakVerify"] === "object" &&
                                typeof $steps["otaghakVerify"].then ===
                                  "function"
                              ) {
                                $steps["otaghakVerify"] = await $steps[
                                  "otaghakVerify"
                                ];
                              }

                              $steps["successToast"] =
                                $steps.otaghakVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          " \u0627\u062a\u0627\u0642\u06a9 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0645\u062a\u0635\u0644 \u0634\u062f!",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["successToast"] != null &&
                                typeof $steps["successToast"] === "object" &&
                                typeof $steps["successToast"].then ===
                                  "function"
                              ) {
                                $steps["successToast"] = await $steps[
                                  "successToast"
                                ];
                              }

                              $steps["errorToast"] = !$steps.otaghakVerify?.data
                                ?.status
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0627\u062a\u0635\u0627\u0644 \u0628\u0627 \u0627\u062a\u0627\u0642\u06a9 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u0634\u062f!",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["errorToast"] != null &&
                                typeof $steps["errorToast"] === "object" &&
                                typeof $steps["errorToast"].then === "function"
                              ) {
                                $steps["errorToast"] = await $steps[
                                  "errorToast"
                                ];
                              }

                              $steps["otaghakContact"] =
                                $state.form.value.otaghakOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/otaghakcontact",
                                          undefined,
                                          (() => {
                                            try {
                                              return $state.user_id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["otaghakContact"] != null &&
                                typeof $steps["otaghakContact"] === "object" &&
                                typeof $steps["otaghakContact"].then ===
                                  "function"
                              ) {
                                $steps["otaghakContact"] = await $steps[
                                  "otaghakContact"
                                ];
                              }

                              $steps["platformStatus"] = true
                                ? (() => {
                                    const actionArgs = {
                                      operation: 0,
                                      value: (() => {
                                        if (
                                          $steps.otaghakVerify.data.status ===
                                          true
                                        ) {
                                          return ($state.platformstatus.status.otaghak =
                                            true);
                                        } else {
                                          return ($state.platformstatus.status.otaghak =
                                            false);
                                        }
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["platformStatus"] != null &&
                                typeof $steps["platformStatus"] === "object" &&
                                typeof $steps["platformStatus"].then ===
                                  "function"
                              ) {
                                $steps["platformStatus"] = await $steps[
                                  "platformStatus"
                                ];
                              }

                              $steps["goToStatusesConnections"] =
                                $steps.otaghakVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/statuses`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToStatusesConnections"] != null &&
                                typeof $steps["goToStatusesConnections"] ===
                                  "object" &&
                                typeof $steps["goToStatusesConnections"]
                                  .then === "function"
                              ) {
                                $steps["goToStatusesConnections"] =
                                  await $steps["goToStatusesConnections"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hz1A3
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    ) : null}
                  </div>
                  {(() => {
                    try {
                      return (
                        $state.step == 10 &&
                        $state.platformstatus.status.mihmansho !== true
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"mihmansho"}
                      data-plasmic-override={overrides.mihmansho}
                      className={classNames(projectcss.all, sty.mihmansho)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"mihmanshoSend"}
                        data-plasmic-override={overrides.mihmanshoSend}
                        className={classNames(
                          "__wab_instance",
                          sty.mihmanshoSend
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wAwRc
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eNbG
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__makix)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"70%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "114px"
                                    : "80px"
                                }
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/website_starter/images/image21.svg",
                                  fullWidth: 46,
                                  fullHeight: 45,
                                  aspectRatio: 1.022222
                                }}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rYl9H
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sSwrm
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.list[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__i6JFy
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0645\u06cc\u0647\u0645\u0627\u0646\u200c\u0634\u0648:"
                                }
                              </div>
                            </div>
                          </div>
                        }
                        name={"mihmanshophone"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          },

                          {
                            ruleType: "min",
                            length: 11,
                            message:
                              "\u0634\u0645\u0627\u0631\u0647 \u0628\u0627\u06cc\u062f \u06f1\u06f1 \u0631\u0642\u0645 \u0628\u0627\u0634\u0647"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input13
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input13", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            onPressEnter: async event => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        undefined,
                                        undefined,
                                        (() => {
                                          try {
                                            return undefined;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            },
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input13",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input13.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input13"}
                              data-plasmic-override={overrides.input13}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uXkCg
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"mihmanshosend"}
                            data-plasmic-override={overrides.mihmanshosend}
                            className={classNames(
                              "__wab_instance",
                              sty.mihmanshosend
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateStep"] != null &&
                                typeof $steps["updateStep"] === "object" &&
                                typeof $steps["updateStep"].then === "function"
                              ) {
                                $steps["updateStep"] = await $steps[
                                  "updateStep"
                                ];
                              }

                              $steps["mihmanshoSend"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/mihmansho-send-otp",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              phone:
                                                $state.form.value.mihmanshophone
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["mihmanshoSend"] != null &&
                                typeof $steps["mihmanshoSend"] === "object" &&
                                typeof $steps["mihmanshoSend"].then ===
                                  "function"
                              ) {
                                $steps["mihmanshoSend"] = await $steps[
                                  "mihmanshoSend"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__czL2P
                              )}
                            >
                              {
                                "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                              }
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"mihmanshosend6"}
                            data-plasmic-override={overrides.mihmanshosend6}
                            className={classNames(
                              "__wab_instance",
                              sty.mihmanshosend6
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: $state.step + 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateStep"] != null &&
                                typeof $steps["updateStep"] === "object" &&
                                typeof $steps["updateStep"].then === "function"
                              ) {
                                $steps["updateStep"] = await $steps[
                                  "updateStep"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uiKj
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ textDecorationLine: "underline" }}
                                >
                                  {
                                    "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"mihmanshoVerify"}
                        data-plasmic-override={overrides.mihmanshoVerify}
                        className={classNames(
                          "__wab_instance",
                          sty.mihmanshoVerify
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pvZr9
                            )}
                          >
                            {
                              "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0645\u06cc\u0647\u0645\u0627\u0646\u200c\u0634\u0648:"
                            }
                          </div>
                        }
                        name={"mihmanshoPass"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input14
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input14", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: (() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input14",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input14.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input14"}
                              data-plasmic-override={overrides.input14}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Jv4G
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"mihmanshoVerify3"}
                            data-plasmic-override={overrides.mihmanshoVerify3}
                            className={classNames(
                              "__wab_instance",
                              sty.mihmanshoVerify3
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["mihmanshoVerify"] =
                                $state.form.value.mihmanshophone !==
                                  undefined &&
                                $state.form.value.mihmanshophone.length >= 11 &&
                                $state.form.value.mihmanshoPass !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/mihmansho",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.form.value
                                                      .mihmanshophone
                                                  ),
                                                  otp: faToEnDigits(
                                                    $state.form.value
                                                      .mihmanshoPass
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["mihmanshoVerify"] != null &&
                                typeof $steps["mihmanshoVerify"] === "object" &&
                                typeof $steps["mihmanshoVerify"].then ===
                                  "function"
                              ) {
                                $steps["mihmanshoVerify"] = await $steps[
                                  "mihmanshoVerify"
                                ];
                              }

                              $steps["platformSatus"] = true
                                ? (() => {
                                    const actionArgs = {
                                      operation: 0,
                                      value: (() => {
                                        if (
                                          $steps.mihmanshoVerify.data.status ===
                                          true
                                        ) {
                                          return ($state.platformstatus.status.mihmansho =
                                            true);
                                        } else {
                                          return ($state.platformstatus.status.mihmansho =
                                            false);
                                        }
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["platformSatus"] != null &&
                                typeof $steps["platformSatus"] === "object" &&
                                typeof $steps["platformSatus"].then ===
                                  "function"
                              ) {
                                $steps["platformSatus"] = await $steps[
                                  "platformSatus"
                                ];
                              }

                              $steps["connectionStatus"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/connection",
                                        undefined,
                                        (() => {
                                          try {
                                            return (
                                              "jabama=" +
                                              ($state.form.value.jabamaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", shab=" +
                                              ($state.form.value.shabphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", jajiga=" +
                                              ($state.form.value.jajigaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", otaghak=" +
                                              ($state.form.value
                                                .otaghakphone !== ""
                                                ? "true"
                                                : "false") +
                                              ", homsa=" +
                                              ($state.form.value.homsaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              ", mihmansho=" +
                                              ($state.form.value
                                                .mihmanshophone !== ""
                                                ? "true"
                                                : "false")
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["connectionStatus"] != null &&
                                typeof $steps["connectionStatus"] ===
                                  "object" &&
                                typeof $steps["connectionStatus"].then ===
                                  "function"
                              ) {
                                $steps["connectionStatus"] = await $steps[
                                  "connectionStatus"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e8Swt
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"jabamasend8"}
                            data-plasmic-override={overrides.jabamasend8}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend8
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.history.back();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["update1"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: ($state.step = 14)
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["update1"] != null &&
                                typeof $steps["update1"] === "object" &&
                                typeof $steps["update1"].then === "function"
                              ) {
                                $steps["update1"] = await $steps["update1"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4KMmK
                              )}
                            >
                              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $state.step == 9 &&
                        $state.platformstatus.status.homsa !== true
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"homsa"}
                      data-plasmic-override={overrides.homsa}
                      className={classNames(projectcss.all, sty.homsa)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"homsaSend"}
                        data-plasmic-override={overrides.homsaSend}
                        className={classNames("__wab_instance", sty.homsaSend)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__x5GRo
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dt87P
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__qDfvg)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"70%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "114px"
                                    : "80px"
                                }
                                height={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/website_starter/images/image18.svg",
                                  fullWidth: 46,
                                  fullHeight: 45,
                                  aspectRatio: 1.022222
                                }}
                                width={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "120"
                                    : "120"
                                }
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eKcNc
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hYqC
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchedData.list[0].url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__crIyh
                                )}
                              >
                                {
                                  "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0647\u0648\u0645\u0633\u0627:"
                                }
                              </div>
                            </div>
                          </div>
                        }
                        name={"homsaphone"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          },

                          {
                            ruleType: "min",
                            length: 11,
                            message:
                              "\u0634\u0645\u0627\u0631\u0647 \u0628\u0627\u06cc\u062f \u06f1\u06f1 \u0631\u0642\u0645 \u0628\u0627\u0634\u0647"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input15
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input15", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input15",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input15.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input15"}
                              data-plasmic-override={overrides.input15}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"homsaVerify2"}
                        data-plasmic-override={overrides.homsaVerify2}
                        className={classNames(
                          "__wab_instance",
                          sty.homsaVerify2
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xFLwU
                            )}
                          >
                            {
                              "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0647\u0648\u0645\u0633\u0627:"
                            }
                          </div>
                        }
                        name={"homsaOTP"}
                        rules={[
                          {
                            ruleType: "required",
                            message:
                              "\u0644\u0637\u0641\u0627 \u06a9\u062f \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input16
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input16", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: (() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input16",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input16.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input16"}
                              data-plasmic-override={overrides.input16}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b1AiH
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"homsaVerify"}
                            data-plasmic-override={overrides.homsaVerify}
                            className={classNames(
                              "__wab_instance",
                              sty.homsaVerify
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["homsaVerify"] =
                                $state.form.value.homsaphone !== undefined &&
                                $state.form.value.homsaphone.length >= 11 &&
                                $state.form.value.homsaOTP !== undefined
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://gateway.rentamon.com/webhook/homsa-verify-otp",
                                          undefined,
                                          (() => {
                                            try {
                                              return (() => {
                                                function faToEnDigits(str) {
                                                  return str.replace(
                                                    /[۰-۹]/g,
                                                    d => "۰۱۲۳۴۵۶۷۸۹".indexOf(d)
                                                  );
                                                }
                                                return {
                                                  phone: faToEnDigits(
                                                    $state.form.value.homsaphone
                                                  ),
                                                  otp: faToEnDigits(
                                                    $state.form.value.homsaOTP
                                                  )
                                                };
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["homsaVerify"] != null &&
                                typeof $steps["homsaVerify"] === "object" &&
                                typeof $steps["homsaVerify"].then === "function"
                              ) {
                                $steps["homsaVerify"] = await $steps[
                                  "homsaVerify"
                                ];
                              }

                              $steps["errorToast"] = !$steps.homsaVerify?.data
                                ?.status
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0627\u062a\u0635\u0627\u0644 \u0628\u0627 \u0647\u0648\u0645\u0633\u0627 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u0634\u062f!",
                                        "top-center"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["errorToast"] != null &&
                                typeof $steps["errorToast"] === "object" &&
                                typeof $steps["errorToast"].then === "function"
                              ) {
                                $steps["errorToast"] = await $steps[
                                  "errorToast"
                                ];
                              }

                              $steps["successToast"] =
                                $steps.homsaVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u0647\u0648\u0645\u0633\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0645\u062a\u0635\u0644 \u0634\u062f!",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["successToast"] != null &&
                                typeof $steps["successToast"] === "object" &&
                                typeof $steps["successToast"].then ===
                                  "function"
                              ) {
                                $steps["successToast"] = await $steps[
                                  "successToast"
                                ];
                              }

                              $steps["goToStatusesConnections"] =
                                $steps.homsaVerify.data.status === true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/statuses`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToStatusesConnections"] != null &&
                                typeof $steps["goToStatusesConnections"] ===
                                  "object" &&
                                typeof $steps["goToStatusesConnections"]
                                  .then === "function"
                              ) {
                                $steps["goToStatusesConnections"] =
                                  await $steps["goToStatusesConnections"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4Um3T
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"jabamasend7"}
                            data-plasmic-override={overrides.jabamasend7}
                            className={classNames(
                              "__wab_instance",
                              sty.jabamasend7
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.history.back();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["update1"] = false
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 0,
                                      value: ($state.step = 14)
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["update1"] != null &&
                                typeof $steps["update1"] === "object" &&
                                typeof $steps["update1"].then === "function"
                              ) {
                                $steps["update1"] = await $steps["update1"];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kl42N
                              )}
                            >
                              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return (() => {
                              const platforms =
                                $state.platformstatus?.status || {};
                              const requiredWebsites = [
                                "jabama",
                                "jajiga",
                                "shab",
                                "otaghak",
                                "homsa",
                                "mihmansho"
                              ];

                              function isExplicitFalse(v) {
                                if (v === false) return true;
                                if (v === null || v === undefined) return true;
                                if (typeof v === "string") {
                                  const s = v.trim().toLowerCase();
                                  return s === "false" || s === "0" || s === "";
                                }
                                if (typeof v === "number") {
                                  return v === 0;
                                }
                                return false;
                              }
                              const missingKeys = requiredWebsites.filter(
                                k => !(k in platforms)
                              );
                              const falseKeys = requiredWebsites.filter(k =>
                                isExplicitFalse(platforms[k])
                              );
                              console.log(
                                "platforms:",
                                platforms,
                                "missingKeys:",
                                missingKeys,
                                "falseKeys:",
                                falseKeys,
                                "step:",
                                $state.step
                              );
                              return (
                                $state.step !== 0 &&
                                $ctx.params.type !== 1 &&
                                (missingKeys.length > 0 || falseKeys.length > 0)
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (() => {
                              const platforms =
                                $state.platformstatus?.status || {};
                              const requiredWebsites = [
                                "jabama",
                                "jajiga",
                                "shab",
                                "otaghak",
                                "homsa",
                                "mihmansho"
                              ];

                              function isExplicitFalse(v) {
                                if (v === false) return true;
                                if (v === null || v === undefined) return true;
                                if (typeof v === "string") {
                                  const s = v.trim().toLowerCase();
                                  return s === "false" || s === "0" || s === "";
                                }
                                if (typeof v === "number") {
                                  return v === 0;
                                }
                                return false;
                              }
                              const missingKeys = requiredWebsites.filter(
                                k => !(k in platforms)
                              );
                              const falseKeys = requiredWebsites.filter(k =>
                                isExplicitFalse(platforms[k])
                              );
                              console.log(
                                "platforms:",
                                platforms,
                                "missingKeys:",
                                missingKeys,
                                "falseKeys:",
                                falseKeys,
                                "step:",
                                $state.step
                              );
                              return (
                                $state.step !== 0 &&
                                $ctx.params.type !== 1 &&
                                (missingKeys.length > 0 || falseKeys.length > 0)
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      data-plasmic-name={"security"}
                      data-plasmic-override={overrides.security}
                      className={classNames(projectcss.all, sty.security)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fPlz3
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__xOgIh)}
                          displayHeight={"34px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"38px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/shieldSecurity1Svg.svg",
                            fullWidth: 800,
                            fullHeight: 800,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gAJi
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u0646\u0632\u062f \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0645\u062d\u0631\u0645\u0627\u0646\u0647 \u0633\u062a \u0648 \u0641\u0642\u0637 \u0628\u0631\u0627\u06cc "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062a\u0642\u0648\u06cc\u0645"
                                }
                              </span>
                              <React.Fragment>{" \u0648 "}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648"
                                }
                              </span>
                              <React.Fragment>
                                {
                                  " \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u0646\u0632\u062f \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0645\u062d\u0631\u0645\u0627\u0646\u0647 \u0633\u062a \u0648 \u0641\u0642\u0637 \u0628\u0631\u0627\u06cc "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062a\u0642\u0648\u06cc\u0645"
                                }
                              </span>
                              <React.Fragment>{" \u0648 "}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u067e\u0631\u062f\u0627\u0632\u0634 \u0631\u0632\u0631\u0648"
                                }
                              </span>
                              <React.Fragment>
                                {
                                  " \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0647"
                                }
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : null}
                </FormWrapper>
              );
            })()}
          </div>
          {false ? (
            <div
              data-plasmic-name={"guide"}
              data-plasmic-override={overrides.guide}
              className={classNames(projectcss.all, sty.guide)}
            >
              {(() => {
                try {
                  return $state.guideStep == 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_1"}
                  data-plasmic-override={overrides._1}
                  className={classNames(projectcss.all, sty._1)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ghp1A)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 2)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__bGjvm)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "300px"
                        : "300px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_1L2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.guideStep == 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  className={classNames(projectcss.all, sty._2)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1O7E)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 3)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rs2Sr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "300px"
                        : "300px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_2L2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ujTG)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 1)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.guideStep == 3;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"_3"}
                  data-plasmic-override={overrides._3}
                  className={classNames(projectcss.all, sty._3)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dSrIp)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.step = 1)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image36.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__a9VVc)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "250px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "300px"
                        : "300px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/_3L2Jpg.jpg",
                      fullWidth: 278,
                      fullHeight: 575,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rRlpl)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "30px"
                        : "50px"
                    }
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.guideStep = 2)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
              ) : null}
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox___1Dcyb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aLrKt
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.list[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___2Kzdn)}>
            <div className={classNames(projectcss.all, sty.freeBox__xnh1K)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rDMy0
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "\u0634\u0631\u06a9\u062a \u062a\u0648\u0633\u0639\u0647 \u0641\u0646\u0627\u0648\u0631\u06cc \u0648 \u062a\u0648\u0627\u0646\u0645\u0646\u062f\u0633\u0627\u0632\u06cc \u0634\u0631\u06cc\u0641 (\u0631\u0646\u062a\u0627\u0645\u0648\u0646)\n\u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7  \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u062f\u0627\u0631\u06cc \u0627\u0632 \u06f9 \u0627\u0644\u06cc \u06f1\u06f7\r\n\r\n\u0642\u0645\u060c \u067e\u0631\u062f\u06cc\u0633\u0627\u0646\u060c \u0628\u0644\u0648\u0627\u0631 \u0645\u0648\u0644\u0648\u06cc\u060c \u067e\u0627\u0631\u06a9 \u0639\u0644\u0645 \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u0627\u0633\u062a\u0627\u0646 \u0642\u0645\u060c \u0628\u0644\u0648\u06a9 \u06f1\u060c\u200c \u0637\u0628\u0642\u0647 \u06f3\r"
                  : "\u0634\u0631\u06a9\u062a \u062a\u0648\u0633\u0639\u0647 \u0641\u0646\u0627\u0648\u0631\u06cc \u0648 \u062a\u0648\u0627\u0646\u0645\u0646\u062f\u0633\u0627\u0632\u06cc \u0634\u0631\u06cc\u0641\n\u06f0\u06f2\u06f1\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u062f\u0627\u0631\u06cc \u0627\u0632 \u06f9 \u0627\u0644\u06cc \u06f1\u06f7\r\n\r\n\u0642\u0645\u060c \u067e\u0631\u062f\u06cc\u0633\u0627\u0646\u060c \u0628\u0644\u0648\u0627\u0631 \u0645\u0648\u0644\u0648\u06cc\u060c \u067e\u0627\u0631\u06a9 \u0639\u0644\u0645 \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u0627\u0633\u062a\u0627\u0646 \u0642\u0645\u060c \u0628\u0644\u0648\u06a9 \u06f1\u060c\u200c \u0637\u0628\u0642\u0647 \u06f3\r"}
              </div>
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"getNumberOfDisconnectedPlatforms"}
            data-plasmic-override={overrides.getNumberOfDisconnectedPlatforms}
            className={classNames(
              "__wab_instance",
              sty.getNumberOfDisconnectedPlatforms
            )}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getNumberOfDisconnectedPlatforms",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getNumberOfDisconnectedPlatforms",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getNumberOfDisconnectedPlatforms",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["getNumberOfDisconnectedPlatforms"] = ref;
            }}
            url={
              "https://gateway.rentamon.com/webhook/disconnected\u0640website\u0640users"
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://gateway.rentamon.com/webhook/get_user_referrer"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["runCode"] =
                // if($state.step == 0){
                //   return false
                // }

                $state.step == 0 && $ctx.params.type == 1
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            let user_type =
                              $steps.invokeGlobalAction.data[0].referrer;
                            $state.userType = user_type;
                            console.log($state.userType);
                            if (user_type == "referral") {
                              window.location.href =
                                "https://rentamon.com/intro/pro/";
                            }
                            if (
                              user_type == "app_store" ||
                              user_type == "cafe_bazar" ||
                              user_type == "myket" ||
                              user_type == "unknown"
                            ) {
                              return (window.location.href =
                                "https://rentamon.com/intro/lite/");
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "html",
    "goftino",
    "clarityRntComponent",
    "faviconRntComponent",
    "platformStatus",
    "helptStack",
    "platforms2",
    "jajigaStatus",
    "_true",
    "paltform",
    "_false",
    "add",
    "jabamaStatus",
    "paltform2",
    "true2",
    "false2",
    "add2",
    "otaghakStatus",
    "paltform3",
    "true3",
    "false3",
    "add3",
    "shabStatus",
    "paltform4",
    "true4",
    "false4",
    "add4",
    "mizbon",
    "paltform5",
    "true5",
    "false5",
    "add5",
    "homsaStatus",
    "paltform6",
    "true6",
    "false6",
    "add6",
    "mihmanshoStatus",
    "paltform7",
    "true7",
    "false7",
    "apiRequest2",
    "guideModal",
    "allConnected",
    "jabamasend9",
    "connect",
    "form",
    "jabama",
    "jabamaSend",
    "jabamaSendOtp",
    "jabamasend2",
    "jabamasend3",
    "jabamaVerify",
    "jabamaOtpInput",
    "jabamaverify",
    "jajiga",
    "jajigaSendForm",
    "jajigaSend",
    "jajigasend",
    "jabamasend4",
    "jajigaVerify",
    "input6",
    "jajigaverify",
    "shab",
    "shabSend",
    "shabOtpSend",
    "shabSendButton",
    "jabamasend5",
    "shabVerify",
    "input10",
    "shabverify",
    "otaghak",
    "otaghakSend",
    "otaghakSendOtp",
    "otaghaksend",
    "jabamasend6",
    "otaghakVerify",
    "input12",
    "otaghakverify",
    "mihmansho",
    "mihmanshoSend",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "mihmanshoVerify",
    "input14",
    "mihmanshoVerify3",
    "jabamasend8",
    "homsa",
    "homsaSend",
    "input15",
    "homsaVerify2",
    "input16",
    "homsaVerify",
    "jabamasend7",
    "security",
    "guide",
    "_1",
    "_2",
    "_3",
    "getNumberOfDisconnectedPlatforms",
    "sideEffect"
  ],
  html: ["html", "goftino", "clarityRntComponent", "faviconRntComponent"],
  goftino: ["goftino"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  platformStatus: [
    "platformStatus",
    "helptStack",
    "platforms2",
    "jajigaStatus",
    "_true",
    "paltform",
    "_false",
    "add",
    "jabamaStatus",
    "paltform2",
    "true2",
    "false2",
    "add2",
    "otaghakStatus",
    "paltform3",
    "true3",
    "false3",
    "add3",
    "shabStatus",
    "paltform4",
    "true4",
    "false4",
    "add4",
    "mizbon",
    "paltform5",
    "true5",
    "false5",
    "add5",
    "homsaStatus",
    "paltform6",
    "true6",
    "false6",
    "add6",
    "mihmanshoStatus",
    "paltform7",
    "true7",
    "false7",
    "apiRequest2",
    "guideModal"
  ],
  helptStack: ["helptStack"],
  platforms2: [
    "platforms2",
    "jajigaStatus",
    "_true",
    "paltform",
    "_false",
    "add",
    "jabamaStatus",
    "paltform2",
    "true2",
    "false2",
    "add2",
    "otaghakStatus",
    "paltform3",
    "true3",
    "false3",
    "add3",
    "shabStatus",
    "paltform4",
    "true4",
    "false4",
    "add4",
    "mizbon",
    "paltform5",
    "true5",
    "false5",
    "add5",
    "homsaStatus",
    "paltform6",
    "true6",
    "false6",
    "add6",
    "mihmanshoStatus",
    "paltform7",
    "true7",
    "false7",
    "apiRequest2"
  ],
  jajigaStatus: ["jajigaStatus", "_true", "paltform", "_false", "add"],
  _true: ["_true"],
  paltform: ["paltform"],
  _false: ["_false"],
  add: ["add"],
  jabamaStatus: ["jabamaStatus", "paltform2", "true2", "false2", "add2"],
  paltform2: ["paltform2"],
  true2: ["true2"],
  false2: ["false2"],
  add2: ["add2"],
  otaghakStatus: ["otaghakStatus", "paltform3", "true3", "false3", "add3"],
  paltform3: ["paltform3"],
  true3: ["true3"],
  false3: ["false3"],
  add3: ["add3"],
  shabStatus: ["shabStatus", "paltform4", "true4", "false4", "add4"],
  paltform4: ["paltform4"],
  true4: ["true4"],
  false4: ["false4"],
  add4: ["add4"],
  mizbon: ["mizbon", "paltform5", "true5", "false5", "add5"],
  paltform5: ["paltform5"],
  true5: ["true5"],
  false5: ["false5"],
  add5: ["add5"],
  homsaStatus: ["homsaStatus", "paltform6", "true6", "false6", "add6"],
  paltform6: ["paltform6"],
  true6: ["true6"],
  false6: ["false6"],
  add6: ["add6"],
  mihmanshoStatus: ["mihmanshoStatus", "paltform7", "true7", "false7"],
  paltform7: ["paltform7"],
  true7: ["true7"],
  false7: ["false7"],
  apiRequest2: ["apiRequest2"],
  guideModal: ["guideModal"],
  allConnected: ["allConnected", "jabamasend9"],
  jabamasend9: ["jabamasend9"],
  connect: [
    "connect",
    "form",
    "jabama",
    "jabamaSend",
    "jabamaSendOtp",
    "jabamasend2",
    "jabamasend3",
    "jabamaVerify",
    "jabamaOtpInput",
    "jabamaverify",
    "jajiga",
    "jajigaSendForm",
    "jajigaSend",
    "jajigasend",
    "jabamasend4",
    "jajigaVerify",
    "input6",
    "jajigaverify",
    "shab",
    "shabSend",
    "shabOtpSend",
    "shabSendButton",
    "jabamasend5",
    "shabVerify",
    "input10",
    "shabverify",
    "otaghak",
    "otaghakSend",
    "otaghakSendOtp",
    "otaghaksend",
    "jabamasend6",
    "otaghakVerify",
    "input12",
    "otaghakverify",
    "mihmansho",
    "mihmanshoSend",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "mihmanshoVerify",
    "input14",
    "mihmanshoVerify3",
    "jabamasend8",
    "homsa",
    "homsaSend",
    "input15",
    "homsaVerify2",
    "input16",
    "homsaVerify",
    "jabamasend7",
    "security"
  ],
  form: [
    "form",
    "jabama",
    "jabamaSend",
    "jabamaSendOtp",
    "jabamasend2",
    "jabamasend3",
    "jabamaVerify",
    "jabamaOtpInput",
    "jabamaverify",
    "jajiga",
    "jajigaSendForm",
    "jajigaSend",
    "jajigasend",
    "jabamasend4",
    "jajigaVerify",
    "input6",
    "jajigaverify",
    "shab",
    "shabSend",
    "shabOtpSend",
    "shabSendButton",
    "jabamasend5",
    "shabVerify",
    "input10",
    "shabverify",
    "otaghak",
    "otaghakSend",
    "otaghakSendOtp",
    "otaghaksend",
    "jabamasend6",
    "otaghakVerify",
    "input12",
    "otaghakverify",
    "mihmansho",
    "mihmanshoSend",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "mihmanshoVerify",
    "input14",
    "mihmanshoVerify3",
    "jabamasend8",
    "homsa",
    "homsaSend",
    "input15",
    "homsaVerify2",
    "input16",
    "homsaVerify",
    "jabamasend7",
    "security"
  ],
  jabama: [
    "jabama",
    "jabamaSend",
    "jabamaSendOtp",
    "jabamasend2",
    "jabamasend3",
    "jabamaVerify",
    "jabamaOtpInput",
    "jabamaverify"
  ],
  jabamaSend: ["jabamaSend", "jabamaSendOtp", "jabamasend2", "jabamasend3"],
  jabamaSendOtp: ["jabamaSendOtp"],
  jabamasend2: ["jabamasend2"],
  jabamasend3: ["jabamasend3"],
  jabamaVerify: ["jabamaVerify", "jabamaOtpInput", "jabamaverify"],
  jabamaOtpInput: ["jabamaOtpInput"],
  jabamaverify: ["jabamaverify"],
  jajiga: [
    "jajiga",
    "jajigaSendForm",
    "jajigaSend",
    "jajigasend",
    "jabamasend4",
    "jajigaVerify",
    "input6",
    "jajigaverify"
  ],
  jajigaSendForm: ["jajigaSendForm", "jajigaSend", "jajigasend", "jabamasend4"],
  jajigaSend: ["jajigaSend"],
  jajigasend: ["jajigasend"],
  jabamasend4: ["jabamasend4"],
  jajigaVerify: ["jajigaVerify", "input6", "jajigaverify"],
  input6: ["input6"],
  jajigaverify: ["jajigaverify"],
  shab: [
    "shab",
    "shabSend",
    "shabOtpSend",
    "shabSendButton",
    "jabamasend5",
    "shabVerify",
    "input10",
    "shabverify"
  ],
  shabSend: ["shabSend", "shabOtpSend", "shabSendButton", "jabamasend5"],
  shabOtpSend: ["shabOtpSend"],
  shabSendButton: ["shabSendButton"],
  jabamasend5: ["jabamasend5"],
  shabVerify: ["shabVerify", "input10", "shabverify"],
  input10: ["input10"],
  shabverify: ["shabverify"],
  otaghak: [
    "otaghak",
    "otaghakSend",
    "otaghakSendOtp",
    "otaghaksend",
    "jabamasend6",
    "otaghakVerify",
    "input12",
    "otaghakverify"
  ],
  otaghakSend: ["otaghakSend", "otaghakSendOtp", "otaghaksend", "jabamasend6"],
  otaghakSendOtp: ["otaghakSendOtp"],
  otaghaksend: ["otaghaksend"],
  jabamasend6: ["jabamasend6"],
  otaghakVerify: ["otaghakVerify", "input12", "otaghakverify"],
  input12: ["input12"],
  otaghakverify: ["otaghakverify"],
  mihmansho: [
    "mihmansho",
    "mihmanshoSend",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "mihmanshoVerify",
    "input14",
    "mihmanshoVerify3",
    "jabamasend8"
  ],
  mihmanshoSend: [
    "mihmanshoSend",
    "input13",
    "mihmanshosend",
    "mihmanshosend6"
  ],
  input13: ["input13"],
  mihmanshosend: ["mihmanshosend"],
  mihmanshosend6: ["mihmanshosend6"],
  mihmanshoVerify: [
    "mihmanshoVerify",
    "input14",
    "mihmanshoVerify3",
    "jabamasend8"
  ],
  input14: ["input14"],
  mihmanshoVerify3: ["mihmanshoVerify3"],
  jabamasend8: ["jabamasend8"],
  homsa: [
    "homsa",
    "homsaSend",
    "input15",
    "homsaVerify2",
    "input16",
    "homsaVerify",
    "jabamasend7"
  ],
  homsaSend: ["homsaSend", "input15"],
  input15: ["input15"],
  homsaVerify2: ["homsaVerify2", "input16", "homsaVerify", "jabamasend7"],
  input16: ["input16"],
  homsaVerify: ["homsaVerify"],
  jabamasend7: ["jabamasend7"],
  security: ["security"],
  guide: ["guide", "_1", "_2", "_3"],
  _1: ["_1"],
  _2: ["_2"],
  _3: ["_3"],
  getNumberOfDisconnectedPlatforms: ["getNumberOfDisconnectedPlatforms"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  html: "div";
  goftino: typeof Embed;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  platformStatus: "div";
  helptStack: "div";
  platforms2: "div";
  jajigaStatus: "div";
  _true: typeof PlasmicImg__;
  paltform: typeof PlasmicImg__;
  _false: typeof PlasmicImg__;
  add: typeof PlasmicImg__;
  jabamaStatus: "div";
  paltform2: typeof PlasmicImg__;
  true2: typeof PlasmicImg__;
  false2: typeof PlasmicImg__;
  add2: typeof PlasmicImg__;
  otaghakStatus: "div";
  paltform3: typeof PlasmicImg__;
  true3: typeof PlasmicImg__;
  false3: typeof PlasmicImg__;
  add3: typeof PlasmicImg__;
  shabStatus: "div";
  paltform4: typeof PlasmicImg__;
  true4: typeof PlasmicImg__;
  false4: typeof PlasmicImg__;
  add4: typeof PlasmicImg__;
  mizbon: "div";
  paltform5: typeof PlasmicImg__;
  true5: typeof PlasmicImg__;
  false5: typeof PlasmicImg__;
  add5: typeof PlasmicImg__;
  homsaStatus: "div";
  paltform6: typeof PlasmicImg__;
  true6: typeof PlasmicImg__;
  false6: typeof PlasmicImg__;
  add6: typeof PlasmicImg__;
  mihmanshoStatus: "div";
  paltform7: typeof PlasmicImg__;
  true7: typeof PlasmicImg__;
  false7: typeof PlasmicImg__;
  apiRequest2: typeof ApiRequest;
  guideModal: typeof AntdModal;
  allConnected: "div";
  jabamasend9: typeof AntdButton;
  connect: "div";
  form: typeof FormWrapper;
  jabama: "div";
  jabamaSend: typeof FormItemWrapper;
  jabamaSendOtp: typeof Input;
  jabamasend2: typeof AntdButton;
  jabamasend3: typeof AntdButton;
  jabamaVerify: typeof FormItemWrapper;
  jabamaOtpInput: typeof AntdInput;
  jabamaverify: typeof AntdButton;
  jajiga: "div";
  jajigaSendForm: typeof FormItemWrapper;
  jajigaSend: typeof Input;
  jajigasend: typeof AntdButton;
  jabamasend4: typeof AntdButton;
  jajigaVerify: typeof FormItemWrapper;
  input6: typeof AntdInput;
  jajigaverify: typeof AntdButton;
  shab: "div";
  shabSend: typeof FormItemWrapper;
  shabOtpSend: typeof Input;
  shabSendButton: typeof AntdButton;
  jabamasend5: typeof AntdButton;
  shabVerify: typeof FormItemWrapper;
  input10: typeof AntdInput;
  shabverify: typeof AntdButton;
  otaghak: "div";
  otaghakSend: typeof FormItemWrapper;
  otaghakSendOtp: typeof Input;
  otaghaksend: typeof AntdButton;
  jabamasend6: typeof AntdButton;
  otaghakVerify: typeof FormItemWrapper;
  input12: typeof AntdInput;
  otaghakverify: typeof AntdButton;
  mihmansho: "div";
  mihmanshoSend: typeof FormItemWrapper;
  input13: typeof AntdInput;
  mihmanshosend: typeof AntdButton;
  mihmanshosend6: typeof AntdButton;
  mihmanshoVerify: typeof FormItemWrapper;
  input14: typeof AntdInput;
  mihmanshoVerify3: typeof AntdButton;
  jabamasend8: typeof AntdButton;
  homsa: "div";
  homsaSend: typeof FormItemWrapper;
  input15: typeof AntdInput;
  homsaVerify2: typeof FormItemWrapper;
  input16: typeof AntdInput;
  homsaVerify: typeof AntdButton;
  jabamasend7: typeof AntdButton;
  security: "div";
  guide: "div";
  _1: "div";
  _2: "div";
  _3: "div";
  getNumberOfDisconnectedPlatforms: typeof ApiRequest;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnections__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConnections__VariantsArgs;
    args?: PlasmicConnections__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConnections__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConnections__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConnections__ArgProps,
          internalVariantPropNames: PlasmicConnections__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConnections__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnections";
  } else {
    func.displayName = `PlasmicConnections.${nodeName}`;
  }
  return func;
}

export const PlasmicConnections = Object.assign(
  // Top-level PlasmicConnections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    html: makeNodeComponent("html"),
    goftino: makeNodeComponent("goftino"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    platformStatus: makeNodeComponent("platformStatus"),
    helptStack: makeNodeComponent("helptStack"),
    platforms2: makeNodeComponent("platforms2"),
    jajigaStatus: makeNodeComponent("jajigaStatus"),
    _true: makeNodeComponent("_true"),
    paltform: makeNodeComponent("paltform"),
    _false: makeNodeComponent("_false"),
    add: makeNodeComponent("add"),
    jabamaStatus: makeNodeComponent("jabamaStatus"),
    paltform2: makeNodeComponent("paltform2"),
    true2: makeNodeComponent("true2"),
    false2: makeNodeComponent("false2"),
    add2: makeNodeComponent("add2"),
    otaghakStatus: makeNodeComponent("otaghakStatus"),
    paltform3: makeNodeComponent("paltform3"),
    true3: makeNodeComponent("true3"),
    false3: makeNodeComponent("false3"),
    add3: makeNodeComponent("add3"),
    shabStatus: makeNodeComponent("shabStatus"),
    paltform4: makeNodeComponent("paltform4"),
    true4: makeNodeComponent("true4"),
    false4: makeNodeComponent("false4"),
    add4: makeNodeComponent("add4"),
    mizbon: makeNodeComponent("mizbon"),
    paltform5: makeNodeComponent("paltform5"),
    true5: makeNodeComponent("true5"),
    false5: makeNodeComponent("false5"),
    add5: makeNodeComponent("add5"),
    homsaStatus: makeNodeComponent("homsaStatus"),
    paltform6: makeNodeComponent("paltform6"),
    true6: makeNodeComponent("true6"),
    false6: makeNodeComponent("false6"),
    add6: makeNodeComponent("add6"),
    mihmanshoStatus: makeNodeComponent("mihmanshoStatus"),
    paltform7: makeNodeComponent("paltform7"),
    true7: makeNodeComponent("true7"),
    false7: makeNodeComponent("false7"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    guideModal: makeNodeComponent("guideModal"),
    allConnected: makeNodeComponent("allConnected"),
    jabamasend9: makeNodeComponent("jabamasend9"),
    connect: makeNodeComponent("connect"),
    form: makeNodeComponent("form"),
    jabama: makeNodeComponent("jabama"),
    jabamaSend: makeNodeComponent("jabamaSend"),
    jabamaSendOtp: makeNodeComponent("jabamaSendOtp"),
    jabamasend2: makeNodeComponent("jabamasend2"),
    jabamasend3: makeNodeComponent("jabamasend3"),
    jabamaVerify: makeNodeComponent("jabamaVerify"),
    jabamaOtpInput: makeNodeComponent("jabamaOtpInput"),
    jabamaverify: makeNodeComponent("jabamaverify"),
    jajiga: makeNodeComponent("jajiga"),
    jajigaSendForm: makeNodeComponent("jajigaSendForm"),
    jajigaSend: makeNodeComponent("jajigaSend"),
    jajigasend: makeNodeComponent("jajigasend"),
    jabamasend4: makeNodeComponent("jabamasend4"),
    jajigaVerify: makeNodeComponent("jajigaVerify"),
    input6: makeNodeComponent("input6"),
    jajigaverify: makeNodeComponent("jajigaverify"),
    shab: makeNodeComponent("shab"),
    shabSend: makeNodeComponent("shabSend"),
    shabOtpSend: makeNodeComponent("shabOtpSend"),
    shabSendButton: makeNodeComponent("shabSendButton"),
    jabamasend5: makeNodeComponent("jabamasend5"),
    shabVerify: makeNodeComponent("shabVerify"),
    input10: makeNodeComponent("input10"),
    shabverify: makeNodeComponent("shabverify"),
    otaghak: makeNodeComponent("otaghak"),
    otaghakSend: makeNodeComponent("otaghakSend"),
    otaghakSendOtp: makeNodeComponent("otaghakSendOtp"),
    otaghaksend: makeNodeComponent("otaghaksend"),
    jabamasend6: makeNodeComponent("jabamasend6"),
    otaghakVerify: makeNodeComponent("otaghakVerify"),
    input12: makeNodeComponent("input12"),
    otaghakverify: makeNodeComponent("otaghakverify"),
    mihmansho: makeNodeComponent("mihmansho"),
    mihmanshoSend: makeNodeComponent("mihmanshoSend"),
    input13: makeNodeComponent("input13"),
    mihmanshosend: makeNodeComponent("mihmanshosend"),
    mihmanshosend6: makeNodeComponent("mihmanshosend6"),
    mihmanshoVerify: makeNodeComponent("mihmanshoVerify"),
    input14: makeNodeComponent("input14"),
    mihmanshoVerify3: makeNodeComponent("mihmanshoVerify3"),
    jabamasend8: makeNodeComponent("jabamasend8"),
    homsa: makeNodeComponent("homsa"),
    homsaSend: makeNodeComponent("homsaSend"),
    input15: makeNodeComponent("input15"),
    homsaVerify2: makeNodeComponent("homsaVerify2"),
    input16: makeNodeComponent("input16"),
    homsaVerify: makeNodeComponent("homsaVerify"),
    jabamasend7: makeNodeComponent("jabamasend7"),
    security: makeNodeComponent("security"),
    guide: makeNodeComponent("guide"),
    _1: makeNodeComponent("_1"),
    _2: makeNodeComponent("_2"),
    _3: makeNodeComponent("_3"),
    getNumberOfDisconnectedPlatforms: makeNodeComponent(
      "getNumberOfDisconnectedPlatforms"
    ),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicConnections
    internalVariantProps: PlasmicConnections__VariantProps,
    internalArgProps: PlasmicConnections__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConnections;
/* prettier-ignore-end */
