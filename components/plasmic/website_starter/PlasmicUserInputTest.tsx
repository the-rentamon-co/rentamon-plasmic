/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: oDtZS8iwRHFd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component
import TextInput2 from "../../TextInput2"; // plasmic-import: MGm7xuldRCuA/component
import { Input } from "@/fragment/components/input"; // plasmic-import: fpBkcjHl6n0Y/codeComponent
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicUserInputTest.module.css"; // plasmic-import: oDtZS8iwRHFd/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon

createPlasmicElementProxy;

export type PlasmicUserInputTest__VariantMembers = {};
export type PlasmicUserInputTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserInputTest__VariantsArgs;
export const PlasmicUserInputTest__VariantProps = new Array<VariantPropType>();

export type PlasmicUserInputTest__ArgsType = {};
type ArgPropType = keyof PlasmicUserInputTest__ArgsType;
export const PlasmicUserInputTest__ArgProps = new Array<ArgPropType>();

export type PlasmicUserInputTest__OverridesType = {
  root?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput2>;
  textInput22?: Flex__<typeof TextInput2>;
  input?: Flex__<typeof Input>;
  input3?: Flex__<typeof Input>;
  numberInput?: Flex__<typeof AntdInputNumber>;
};

export interface DefaultUserInputTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserInputTest__RenderFunc(props: {
  variants: PlasmicUserInputTest__VariantsArgs;
  args: PlasmicUserInputTest__ArgsType;
  overrides: PlasmicUserInputTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__mQnF9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sBiIx
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f1"}
            </div>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              type={"text"}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___62HlX
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f1.\u06f2"}
            </div>
            <TextInput
              data-plasmic-name={"textInput3"}
              data-plasmic-override={overrides.textInput3}
              className={classNames("__wab_instance", sty.textInput3)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput3", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              type={"number"}
              value={
                generateStateValueProp($state, ["textInput3", "value"]) ?? ""
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cjOlq)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gRWp
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f2"}
            </div>
            <TextInput2
              data-plasmic-name={"textInput2"}
              data-plasmic-override={overrides.textInput2}
              className={classNames("__wab_instance", sty.textInput2)}
              inputMode={"text"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "textInput2",
                  "value"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3X01
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f2.\u06f2"}
            </div>
            <TextInput2
              data-plasmic-name={"textInput22"}
              data-plasmic-override={overrides.textInput22}
              className={classNames("__wab_instance", sty.textInput22)}
              inputMode={"numeric"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "textInput22",
                  "value"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fOtix)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__koVkI
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f3"}
            </div>
            <Input
              data-plasmic-name={"input"}
              data-plasmic-override={overrides.input}
              className={classNames("__wab_instance", sty.input)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["input", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              type={"text"}
              value={generateStateValueProp($state, ["input", "value"])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__luzXv
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f3.\u06f2"}
            </div>
            <Input
              data-plasmic-name={"input3"}
              data-plasmic-override={overrides.input3}
              className={classNames("__wab_instance", sty.input3)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["input3", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              type={"number"}
              value={generateStateValueProp($state, ["input3", "value"])}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tlS8)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z40Pn
              )}
            >
              {" \u0634\u0645\u0627\u0631\u0647 \u06f4"}
            </div>
            <AntdInputNumber
              data-plasmic-name={"numberInput"}
              data-plasmic-override={overrides.numberInput}
              className={classNames("__wab_instance", sty.numberInput)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "numberInput",
                  "value"
                ]).apply(null, eventArgs);
              }}
              type={"number"}
              value={generateStateValueProp($state, ["numberInput", "value"])}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "textInput",
    "textInput3",
    "textInput2",
    "textInput22",
    "input",
    "input3",
    "numberInput"
  ],
  textInput: ["textInput"],
  textInput3: ["textInput3"],
  textInput2: ["textInput2"],
  textInput22: ["textInput22"],
  input: ["input"],
  input3: ["input3"],
  numberInput: ["numberInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  textInput3: typeof TextInput;
  textInput2: typeof TextInput2;
  textInput22: typeof TextInput2;
  input: typeof Input;
  input3: typeof Input;
  numberInput: typeof AntdInputNumber;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserInputTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserInputTest__VariantsArgs;
    args?: PlasmicUserInputTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserInputTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserInputTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserInputTest__ArgProps,
          internalVariantPropNames: PlasmicUserInputTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserInputTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserInputTest";
  } else {
    func.displayName = `PlasmicUserInputTest.${nodeName}`;
  }
  return func;
}

export const PlasmicUserInputTest = Object.assign(
  // Top-level PlasmicUserInputTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    textInput3: makeNodeComponent("textInput3"),
    textInput2: makeNodeComponent("textInput2"),
    textInput22: makeNodeComponent("textInput22"),
    input: makeNodeComponent("input"),
    input3: makeNodeComponent("input3"),
    numberInput: makeNodeComponent("numberInput"),

    // Metadata about props expected for PlasmicUserInputTest
    internalVariantProps: PlasmicUserInputTest__VariantProps,
    internalArgProps: PlasmicUserInputTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserInputTest;
/* prettier-ignore-end */
