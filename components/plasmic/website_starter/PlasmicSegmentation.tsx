/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: EiemSs0Lr6oN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSegmentation.module.css"; // plasmic-import: EiemSs0Lr6oN/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicSegmentation__VariantMembers = {};
export type PlasmicSegmentation__VariantsArgs = {};
type VariantPropType = keyof PlasmicSegmentation__VariantsArgs;
export const PlasmicSegmentation__VariantProps = new Array<VariantPropType>();

export type PlasmicSegmentation__ArgsType = {};
type ArgPropType = keyof PlasmicSegmentation__ArgsType;
export const PlasmicSegmentation__ArgProps = new Array<ArgPropType>();

export type PlasmicSegmentation__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSegmentationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSegmentation__RenderFunc(props: {
  variants: PlasmicSegmentation__VariantsArgs;
  args: PlasmicSegmentation__ArgsType;
  overrides: PlasmicSegmentation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__gxyGk)}>
            <div className={classNames(projectcss.all, sty.freeBox__mEp65)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pxmJ5
                )}
              >
                {
                  "\u0647\u0645\u06cc\u0646 \u0627\u0644\u0627\u0646 \u0628\u0627 \u0633\u0627\u06cc\u062a \u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0645\u062b\u0644 \u062c\u0627\u062c\u06cc\u06af\u0627 , \u0634\u0628 , \u0627\u062a\u0627\u0642\u06a9 \u0648 \u062c\u0627\u0628\u0627\u0645\u0627 \u0647\u0645\u06a9\u0627\u0631\u06cc \u062f\u0627\u0631\u06cc\u061f"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__aPlBi)}>
              <div className={classNames(projectcss.all, sty.freeBox__y790)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yySkr)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___2BB22)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/jajigaWebp.webp",
                      fullWidth: 192,
                      fullHeight: 192,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xiF5G
                    )}
                  >
                    {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rMT3)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gMmGk)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/jabamaWebp.webp",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ymkan
                    )}
                  >
                    {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gjRrw)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__t4ODp)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image20.svg",
                      fullWidth: 46,
                      fullHeight: 45,
                      aspectRatio: 1.022222
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t8D2Y
                    )}
                  >
                    {"\u0634\u0628"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pp4AP)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__mdCdV)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image13.svg",
                      fullWidth: 46,
                      fullHeight: 46,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__majj
                    )}
                  >
                    {"\u0627\u062a\u0627\u0642\u06a9"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nhze)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eQvYx)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image18.svg",
                      fullWidth: 46,
                      fullHeight: 45,
                      aspectRatio: 1.022222
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vTTbl
                    )}
                  >
                    {"\u0647\u0648\u0645\u0633\u0627"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mr1Ry)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___0SFyU)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image68.png",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o6LD
                    )}
                  >
                    {"\u0645\u0647\u0645\u0627\u0646\u0634\u0648"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7Y3M)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tpzPj)}
                    displayHeight={"52px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/mizboonPng.png",
                      fullWidth: 140,
                      fullHeight: 140,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gOeDh
                    )}
                  >
                    {"\u0645\u06cc\u0632\u0628\u0648\u0646"}
                  </div>
                </Stack__>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mnhb7)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__ysGs)}
                  color={"green"}
                  link={`/intro/${"pro"}`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i3VG
                    )}
                  >
                    {"\u0628\u0644\u0647"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__j1Bwr)}
                  color={"red"}
                  link={`/intro/${"lite"}`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0X11F
                    )}
                  >
                    {"\u062e\u06cc\u0631"}
                  </div>
                </Button>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSegmentation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSegmentation__VariantsArgs;
    args?: PlasmicSegmentation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSegmentation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSegmentation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSegmentation__ArgProps,
          internalVariantPropNames: PlasmicSegmentation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSegmentation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSegmentation";
  } else {
    func.displayName = `PlasmicSegmentation.${nodeName}`;
  }
  return func;
}

export const PlasmicSegmentation = Object.assign(
  // Top-level PlasmicSegmentation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSegmentation
    internalVariantProps: PlasmicSegmentation__VariantProps,
    internalArgProps: PlasmicSegmentation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSegmentation;
/* prettier-ignore-end */
