// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: JS02cj_l1MoU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: MR9MOBuvKPN3/codeComponent
import DayCell from "../../DayCell"; // plasmic-import: cU6Nt4MA6DXT/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicCalendar22.module.css"; // plasmic-import: JS02cj_l1MoU/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: TftNRT31euw0/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: PIv_Q4vxdPrZ/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: JGzy20bJEzcD/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: zCddQXMUCxH0/icon

createPlasmicElementProxy;

export type PlasmicCalendar22__VariantMembers = {};
export type PlasmicCalendar22__VariantsArgs = {};
type VariantPropType = keyof PlasmicCalendar22__VariantsArgs;
export const PlasmicCalendar22__VariantProps = new Array<VariantPropType>();

export type PlasmicCalendar22__ArgsType = {
  propertyId?: number;
  daystatuses?: any;
};
type ArgPropType = keyof PlasmicCalendar22__ArgsType;
export const PlasmicCalendar22__ArgProps = new Array<ArgPropType>(
  "propertyId",
  "daystatuses"
);

export type PlasmicCalendar22__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  مشکلدربرقراریارتط?: Flex__<"div">;
  fragmentDatePicker?: Flex__<typeof DatePicker>;
  dayCell?: Flex__<typeof DayCell>;
  modalDiscount?: Flex__<typeof AntdModal>;
  main?: Flex__<"div">;
  numberInput4?: Flex__<typeof AntdInputNumber>;
  numberInput3?: Flex__<typeof AntdInputNumber>;
  modal?: Flex__<typeof AntdModal>;
  modalChangePrice?: Flex__<typeof AntdModal>;
  main2?: Flex__<"div">;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  img?: Flex__<typeof PlasmicImg__>;
  fetchModal?: Flex__<typeof AntdModal>;
  userPlatform?: Flex__<typeof ApiRequest>;
  loading2?: Flex__<typeof PlasmicImg__>;
  ok?: Flex__<typeof PlasmicImg__>;
  fail?: Flex__<typeof PlasmicImg__>;
  loading?: Flex__<typeof PlasmicImg__>;
  block?: Flex__<typeof AntdModal>;
};

export interface DefaultCalendar22Props {
  propertyId?: number;
  daystatuses?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCalendar22__RenderFunc(props: {
  variants: PlasmicCalendar22__VariantsArgs;
  args: PlasmicCalendar22__ArgsType;
  overrides: PlasmicCalendar22__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentDatePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fragmentDatePicker.month",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.year",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "modalChangePrice.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalDiscount.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "numberInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.count;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "count",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "block.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "fetchModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "variable3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "userPlatform.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPlatform"
      },
      {
        path: "userPlatform.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPlatform"
      },
      {
        path: "userPlatform.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPlatform"
      },
      {
        path: "platformRequestStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "requestdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "numberInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.count;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "dayStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const websiteNames = {
                  host: "رزرو",
                  jajiga: "جاجیگا",
                  jabama: "جاباما",
                  shab: "شب",
                  homsa: "هومسا",
                  mihmansho: "مهمانشو",
                  otaghak: "اتاقک",
                  mizboon: "میزبون"
                };
                const calendar = $state.apiRequest.data.calendar.map(item => {
                  if (
                    item.status === "reserved" &&
                    websiteNames[item.website]
                  ) {
                    return {
                      ...item,
                      website: websiteNames[item.website]
                    };
                  }
                  return item;
                });
                return calendar;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        children={null}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            data-plasmic-name={
              "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
            }
            data-plasmic-override={overrides.مشکلدربرقراریارتط}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.مشکلدربرقراریارتط
            )}
          >
            {
              "\u0645\u0634\u06a9\u0644 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637"
            }
          </div>
        }
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={(() => {
          try {
            return (() => {
              let initialMonth = new Date()
                .toLocaleDateString("fa")
                .split("/")[1];
              return `https://api.rentamon.com/api/getcalendar?start_date=1403-${
                $state.fragmentDatePicker?.month ?? initialMonth
              }-01&end_date=1403-${
                $state.fragmentDatePicker?.month ?? initialMonth
              }-30&property_id=${$props.propertyId}`;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <div className={classNames(projectcss.all, sty.freeBox__rxhaC)}>
        <DatePicker
          data-plasmic-name={"fragmentDatePicker"}
          data-plasmic-override={overrides.fragmentDatePicker}
          className={classNames("__wab_instance", sty.fragmentDatePicker)}
          customDayCell={true}
          dayCell={(dateProps: any) => (
            <DayCell
              data-plasmic-name={"dayCell"}
              data-plasmic-override={overrides.dayCell}
              className={classNames("__wab_instance", sty.dayCell)}
              dayStatus={(() => {
                try {
                  return dateProps.isSelected ? "selected" : null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            />
          )}
          locale={"fa"}
          mode={"multiple"}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "value"
            ]).apply(null, eventArgs);
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "values"
            ]).apply(null, eventArgs);
          }}
          onMonthChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "month"
            ]).apply(null, eventArgs);
          }}
          onYearChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "year"
            ]).apply(null, eventArgs);

            (async year => {
              const $steps = {};

              $steps["updateFragmentDatePickerValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["fragmentDatePicker", "value"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFragmentDatePickerValue"] != null &&
                typeof $steps["updateFragmentDatePickerValue"] === "object" &&
                typeof $steps["updateFragmentDatePickerValue"].then ===
                  "function"
              ) {
                $steps["updateFragmentDatePickerValue"] = await $steps[
                  "updateFragmentDatePickerValue"
                ];
              }
            }).apply(null, eventArgs);
          }}
          value={generateStateValueProp($state, [
            "fragmentDatePicker",
            "value"
          ])}
          values={generateStateValueProp($state, [
            "fragmentDatePicker",
            "values"
          ])}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hxone)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jD7Wi)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wZeS)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__toaIs
              )}
            >
              {"\u0631\u0632\u0631\u0648"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__u57Rs)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yuSbx)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6Lq2T
              )}
            >
              {"\u063a\u06cc\u0631\u0641\u0639\u0627\u0644"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z96Q)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kjWd)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rQygR
              )}
            >
              {"\u062a\u062e\u0641\u06cc\u0641"}
            </div>
          </Stack__>
        </Stack__>
        <AntdModal
          data-plasmic-name={"modalDiscount"}
          data-plasmic-override={overrides.modalDiscount}
          cancelText={"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\u0634"}
          className={classNames("__wab_instance", sty.modalDiscount)}
          closeButtonClassName={classNames({
            [sty["pcls_GT1l-1yjpsrl"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={
            hasVariant(globalVariants, "screen", "mobile") ? true : true
          }
          modalContentClassName={classNames({
            [sty["pcls_7uTKAjzTptFn"]]: true
          })}
          modalScopeClassName={sty["modalDiscount__modal"]}
          okText={"\u062a\u0627\u06cc\u06cc\u062f"}
          onOk={async () => {
            const $steps = {};

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: ($state.modalDiscount.open = false)
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }

            $steps["updateFetchModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["fetchModal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateFetchModalOpen"] != null &&
              typeof $steps["updateFetchModalOpen"] === "object" &&
              typeof $steps["updateFetchModalOpen"].then === "function"
            ) {
              $steps["updateFetchModalOpen"] = await $steps[
                "updateFetchModalOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function convertPersianNumbersToEnglish(str) {
                          const persianNumbers = [
                            "۰",
                            "۱",
                            "۲",
                            "۳",
                            "۴",
                            "۵",
                            "۶",
                            "۷",
                            "۸",
                            "۹"
                          ];

                          const englishNumbers = [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9"
                          ];

                          return str.replace(
                            /[۰-۹]/g,
                            char =>
                              englishNumbers[persianNumbers.indexOf(char)] ||
                              char
                          );
                        }
                        function padZero(num) {
                          return num.length === 1 ? `0${num}` : num;
                        }
                        function convertTimestampToPersianDateWithEnglishNumbers(
                          timestamp
                        ) {
                          const date = new Date(timestamp * 1000);
                          const [year, month, day] = date
                            .toLocaleDateString("fa")
                            .split("/");
                          const formattedDate = `${convertPersianNumbersToEnglish(
                            year
                          )}-${padZero(
                            convertPersianNumbersToEnglish(month)
                          )}-${padZero(convertPersianNumbersToEnglish(day))}`;
                          return formattedDate;
                        }
                        function getTodayInPersian() {
                          const today = new Date();
                          const [year, month, day] = today
                            .toLocaleDateString("fa")
                            .split("/");
                          const formattedDate = `${convertPersianNumbersToEnglish(
                            year
                          )}-${padZero(
                            convertPersianNumbersToEnglish(month)
                          )}-${padZero(convertPersianNumbersToEnglish(day))}`;
                          return formattedDate;
                        }
                        const todayInPersian = getTodayInPersian();
                        const data = {
                          days: [$state.fragmentDatePicker.values],
                          property_id: $props.propertyId,
                          discount: String($state.numberInput3.value)
                        };
                        $state.requestdata = data;
                        data.days = data.days
                          .map(timestampArray =>
                            timestampArray
                              .map(timestamp =>
                                convertTimestampToPersianDateWithEnglishNumbers(
                                  timestamp
                                )
                              )
                              .filter(day => day >= todayInPersian)
                          )
                          .flat();
                        return fetch(
                          "https://api.rentamon.com/api/setdiscount",
                          {
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Accept: "*/*"
                            },
                            credentials: "include",
                            body: JSON.stringify(data)
                          }
                        )
                          .then(response => {
                            if (!response.ok) {
                              throw new Error(
                                `HTTP error! status: ${response.status}`
                              );
                            }
                            return response.json();
                          })
                          .then(result => {
                            $state.platformRequestStatus = result;
                            console.log("Response saved to state:", result);
                          })
                          .catch(error => {
                            console.error("Error:", error);
                            $state.platformRequestStatus = {
                              error: error.message
                            };
                          });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["modalDiscount", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["modalDiscount", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__n92VJ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oiBb
                )}
              >
                {
                  "\u062f\u0631\u0635\u062f \u062a\u062e\u0641\u06cc\u0641\ud83d\udd25\u0631\u0648 \u0645\u0634\u062e\u0635 \u06a9\u0646\n"
                }
              </div>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg___6PAy5)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalDiscountOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalDiscount", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalDiscountOpen"] != null &&
                    typeof $steps["updateModalDiscountOpen"] === "object" &&
                    typeof $steps["updateModalDiscountOpen"].then === "function"
                  ) {
                    $steps["updateModalDiscountOpen"] = await $steps[
                      "updateModalDiscountOpen"
                    ];
                  }
                }}
                role={"img"}
              />
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
              ? "320px"
              : "320px"
          }
          wrapClassName={classNames({ [sty["pcls_UccVk_ZCcYJk"]]: true })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ayJaK)}>
            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main, "bordeRadius")}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__otErB)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__nxg1A)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCount"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            variable: {
                              objRoot: $state,
                              variablePath: ["count"]
                            },
                            value: ($state.count = Math.min(
                              $state.count + 5,
                              60
                            ))
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCount"] != null &&
                      typeof $steps["updateCount"] === "object" &&
                      typeof $steps["updateCount"].then === "function"
                    ) {
                      $steps["updateCount"] = await $steps["updateCount"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hep0T
                    )}
                  >
                    {"+"}
                  </div>
                </Button>
                <div className={classNames(projectcss.all, sty.freeBox__y7Xzi)}>
                  <AntdInputNumber
                    data-plasmic-name={"numberInput4"}
                    data-plasmic-override={overrides.numberInput4}
                    className={classNames("__wab_instance", sty.numberInput4)}
                    controls={false}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "numberInput4",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={"\u0645\u062b\u0644\u0627 \u06f2\u06f5"}
                    readOnly={true}
                    type={"number"}
                    value={generateStateValueProp($state, [
                      "numberInput4",
                      "value"
                    ])}
                  />
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__jq81K)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCount"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: ($state.count = Math.max(
                              0,
                              $state.count - 5
                            )),
                            variable: {
                              objRoot: $state,
                              variablePath: ["count"]
                            }
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCount"] != null &&
                      typeof $steps["updateCount"] === "object" &&
                      typeof $steps["updateCount"].then === "function"
                    ) {
                      $steps["updateCount"] = await $steps["updateCount"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pDi8J
                    )}
                  >
                    {"-"}
                  </div>
                </Button>
              </Stack__>
              {(() => {
                try {
                  return (() => {
                    if ($state.numberInput4.value == "5") {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__l1Di)}>
                  <div
                    className={classNames(projectcss.all, sty.column__g8APf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__virKe
                      )}
                    >
                      {
                        "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u06a9\u0645\u200c\u062a\u0631 \u0627\u0632 \u06f1\u06f0\u066a \u0628\u0631\u0627\u06cc \u0634\u0628 \u0646\u06cc\u0633\u062a"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              <Button
                className={classNames("__wab_instance", sty.button__f5BPv)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFetchModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fetchModal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFetchModalOpen"] != null &&
                    typeof $steps["updateFetchModalOpen"] === "object" &&
                    typeof $steps["updateFetchModalOpen"].then === "function"
                  ) {
                    $steps["updateFetchModalOpen"] = await $steps[
                      "updateFetchModalOpen"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function convertPersianNumbersToEnglish(str) {
                                const persianNumbers = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                const englishNumbers = [
                                  "0",
                                  "1",
                                  "2",
                                  "3",
                                  "4",
                                  "5",
                                  "6",
                                  "7",
                                  "8",
                                  "9"
                                ];

                                return str.replace(
                                  /[۰-۹]/g,
                                  char =>
                                    englishNumbers[
                                      persianNumbers.indexOf(char)
                                    ] || char
                                );
                              }
                              function padZero(num) {
                                return num.length === 1 ? `0${num}` : num;
                              }
                              function convertTimestampToPersianDateWithEnglishNumbers(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                const [year, month, day] = date
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(
                                  year
                                )}-${padZero(
                                  convertPersianNumbersToEnglish(month)
                                )}-${padZero(
                                  convertPersianNumbersToEnglish(day)
                                )}`;
                                return formattedDate;
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                discount: String($state.numberInput4.value)
                              };
                              $state.requestdata = data;
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                )
                                .flat();
                              return fetch(
                                "https://api.rentamon.com/api/setdiscount",
                                {
                                  method: "POST",
                                  headers: {
                                    "Content-Type": "application/json",
                                    Accept: "*/*"
                                  },
                                  credentials: "include",
                                  body: JSON.stringify(data)
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error(
                                      `HTTP error! status: ${response.status}`
                                    );
                                  }
                                  return response.json();
                                })
                                .then(result => {
                                  $state.platformRequestStatus = result;
                                  console.log(
                                    "Response saved to state:",
                                    result
                                  );
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  $state.platformRequestStatus = {
                                    error: error.message
                                  };
                                });
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.modalDiscount.open = false)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] = await $steps[
                      "updateStateVariable"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7EcJe
                  )}
                >
                  {
                    "\u0627\u0639\u0645\u0627\u0644 \u062a\u062e\u0641\u06cc\u0641"
                  }
                </div>
              </Button>
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.columns__uafXv,
                "bordeRadius"
              )}
            >
              <div className={classNames(projectcss.all, sty.column__gtLCv)}>
                <Button
                  className={classNames("__wab_instance", sty.button__stUbj)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCount"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            variable: {
                              objRoot: $state,
                              variablePath: ["count"]
                            },
                            value: ($state.count = Math.min(
                              $state.count + 5,
                              60
                            ))
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCount"] != null &&
                      typeof $steps["updateCount"] === "object" &&
                      typeof $steps["updateCount"].then === "function"
                    ) {
                      $steps["updateCount"] = await $steps["updateCount"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zcq6V
                    )}
                  >
                    {"+"}
                  </div>
                </Button>
              </div>
              <div className={classNames(projectcss.all, sty.column__mrdnA)}>
                <AntdInputNumber
                  data-plasmic-name={"numberInput3"}
                  data-plasmic-override={overrides.numberInput3}
                  className={classNames("__wab_instance", sty.numberInput3)}
                  controls={false}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "numberInput3",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={"\u0645\u062b\u0644\u0627 \u06f2\u06f5"}
                  readOnly={true}
                  type={"number"}
                  value={generateStateValueProp($state, [
                    "numberInput3",
                    "value"
                  ])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___5WJZx)} />
            </div>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          cancelText={``}
          className={classNames("__wab_instance", sty.modal)}
          closeButtonClassName={classNames({
            [sty["pcls_4iJQsTeu7nKO"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={true}
          modalContentClassName={classNames({
            [sty["pcls_hIpFg-GsYxD9"]]: true
          })}
          modalScopeClassName={sty["modal__modal"]}
          okText={``}
          onOk={async () => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      undefined,
                      undefined,
                      (() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["modal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["modal", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox___38IXb)}>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__o6Rlj)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
              ? "320px"
              : "320px"
          }
        >
          <section
            className={classNames(projectcss.all, sty.section__al7ZD)}
            onClick={async event => {
              const $steps = {};

              $steps["updateBlockOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["block", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateBlockOpen"] != null &&
                typeof $steps["updateBlockOpen"] === "object" &&
                typeof $steps["updateBlockOpen"].then === "function"
              ) {
                $steps["updateBlockOpen"] = await $steps["updateBlockOpen"];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: ($state.modal.open = false)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kVwGl)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qMBy
                )}
              >
                {"\u067e\u064f\u0640\u0631"}
              </div>
              <Icon16Icon
                className={classNames(projectcss.all, sty.svg__zok6A)}
                role={"img"}
              />
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__ibNih)}
            onClick={async event => {
              const $steps = {};
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9E3Rt
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateFetchModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["fetchModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] = await $steps[
                    "updateFetchModalOpen"
                  ];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function convertPersianNumbersToEnglish(str) {
                              const persianNumbers = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              const englishNumbers = [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                              ];

                              return str.replace(
                                /[۰-۹]/g,
                                char =>
                                  englishNumbers[
                                    persianNumbers.indexOf(char)
                                  ] || char
                              );
                            }
                            function padZero(num) {
                              return num.length === 1 ? `0${num}` : num;
                            }
                            function convertTimestampToPersianDateWithEnglishNumbers(
                              timestamp
                            ) {
                              const date = new Date(timestamp * 1000);
                              const [year, month, day] = date
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(
                                year
                              )}-${padZero(
                                convertPersianNumbersToEnglish(month)
                              )}-${padZero(
                                convertPersianNumbersToEnglish(day)
                              )}`;
                              return formattedDate;
                            }
                            function getTodayInPersian() {
                              const today = new Date();
                              const [year, month, day] = today
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(
                                year
                              )}-${padZero(
                                convertPersianNumbersToEnglish(month)
                              )}-${padZero(
                                convertPersianNumbersToEnglish(day)
                              )}`;
                              return formattedDate;
                            }
                            const todayInPersian = getTodayInPersian();
                            const data = {
                              days: [$state.fragmentDatePicker.values],
                              property_id: $props.propertyId
                            };
                            $state.requestdata = data;
                            data.days = data.days
                              .map(timestampArray =>
                                timestampArray
                                  .map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                  .filter(day => day >= todayInPersian)
                              )
                              .flat();
                            fetch("https://api.rentamon.com/api/setunblock", {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                Accept: "*/*"
                              },
                              credentials: "include",
                              body: JSON.stringify(data)
                            })
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(
                                    `HTTP error! status: ${response.status}`
                                  );
                                }
                                return response.json();
                              })
                              .then(result => {
                                $state.platformRequestStatus = result;
                                console.log("Response saved to state:", result);
                              })
                              .catch(error => {
                                console.error("Error:", error);
                                $state.platformRequestStatus = {
                                  error: error.message
                                };
                              });
                            return console.log(data);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              {"\u062e\u0627\u0644\u06cc"}
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__sdXov)}
            onClick={async event => {
              const $steps = {};

              $steps["updateModalChangePriceOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modalChangePrice", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalChangePriceOpen"] != null &&
                typeof $steps["updateModalChangePriceOpen"] === "object" &&
                typeof $steps["updateModalChangePriceOpen"].then === "function"
              ) {
                $steps["updateModalChangePriceOpen"] = await $steps[
                  "updateModalChangePriceOpen"
                ];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        return ($state.modal.open = false);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tq8H)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wpXhV
                )}
              >
                {"\u0642\u06cc\u0645\u062a"}
              </div>
              <Icon16Icon
                className={classNames(projectcss.all, sty.svg__uLieY)}
                role={"img"}
              />
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__ueTtK)}
            onClick={async event => {
              const $steps = {};

              $steps["updateModalDiscountOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modalDiscount", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalDiscountOpen"] != null &&
                typeof $steps["updateModalDiscountOpen"] === "object" &&
                typeof $steps["updateModalDiscountOpen"].then === "function"
              ) {
                $steps["updateModalDiscountOpen"] = await $steps[
                  "updateModalDiscountOpen"
                ];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        return ($state.modal.open = false);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__v7MSq)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vvywp
                )}
              >
                {"\u062a\u062e\u0641\u06cc\u0641 \u066a"}
              </div>
              <Icon16Icon
                className={classNames(projectcss.all, sty.svg__bK0Xs)}
                role={"img"}
              />
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__dqDmY)}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://rentamon-api.liara.run/api/setblock",
                        undefined,
                        (() => {
                          try {
                            return {
                              days: $state.fragmentDatePicker.values.map(
                                value =>
                                  new Date(value * 1000)
                                    .toLocaleDateString("fa-IR")
                                    .replace(/\//g, "-")
                              ),
                              property_id: 1,
                              requested_by: "user",
                              request_for: "block"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        {
                          headers: {
                            Authorization:
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM0MjQ5MTYwLCJpYXQiOjE3MjM4ODExNjAsImp0aSI6IjZjZmQ0YWZhNjMwZTQ1Yzg4ZmY1ZGU4NmY4Y2YyNjAzIiwidXNlcl9pZCI6NDY2fQ.clklsxrxx5HrjKxBi8rmb1sl2lrmGJ2tc0_Lkb_4T84"
                          }
                        }
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dNbdd
              )}
            >
              {"\u06cc\u0627\u062f\u062f\u0627\u0634\u062a"}
            </div>
          </section>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modalChangePrice"}
          data-plasmic-override={overrides.modalChangePrice}
          cancelText={"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\u0634"}
          className={classNames("__wab_instance", sty.modalChangePrice)}
          closeButtonClassName={classNames({
            [sty["pcls_CTdwnbC1f2tm"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={true}
          modalScopeClassName={sty["modalChangePrice__modal"]}
          okText={"\u062a\u0627\u06cc\u06cc\u062f"}
          onOk={async () => {
            const $steps = {};

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: ($state.modalChangePrice.open = false)
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }

            $steps["updateFetchModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["fetchModal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateFetchModalOpen"] != null &&
              typeof $steps["updateFetchModalOpen"] === "object" &&
              typeof $steps["updateFetchModalOpen"].then === "function"
            ) {
              $steps["updateFetchModalOpen"] = await $steps[
                "updateFetchModalOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function convertPersianNumbersToEnglish(str) {
                          const persianNumbers = [
                            "۰",
                            "۱",
                            "۲",
                            "۳",
                            "۴",
                            "۵",
                            "۶",
                            "۷",
                            "۸",
                            "۹"
                          ];

                          const englishNumbers = [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9"
                          ];

                          return str.replace(
                            /[۰-۹]/g,
                            char =>
                              englishNumbers[persianNumbers.indexOf(char)] ||
                              char
                          );
                        }
                        function padZero(num) {
                          return num.length === 1 ? `0${num}` : num;
                        }
                        function convertTimestampToPersianDateWithEnglishNumbers(
                          timestamp
                        ) {
                          const date = new Date(timestamp * 1000);
                          const [year, month, day] = date
                            .toLocaleDateString("fa")
                            .split("/");
                          const formattedDate = `${convertPersianNumbersToEnglish(
                            year
                          )}-${padZero(
                            convertPersianNumbersToEnglish(month)
                          )}-${padZero(convertPersianNumbersToEnglish(day))}`;
                          return formattedDate;
                        }
                        function getTodayInPersian() {
                          const today = new Date();
                          const [year, month, day] = today
                            .toLocaleDateString("fa")
                            .split("/");
                          const formattedDate = `${convertPersianNumbersToEnglish(
                            year
                          )}-${padZero(
                            convertPersianNumbersToEnglish(month)
                          )}-${padZero(convertPersianNumbersToEnglish(day))}`;
                          return formattedDate;
                        }
                        const todayInPersian = getTodayInPersian();
                        const data = {
                          days: [$state.fragmentDatePicker.values],
                          property_id: $props.propertyId,
                          price: String($state.numberInput2.value)
                        };
                        $state.requestdata = data;
                        data.days = data.days
                          .map(timestampArray =>
                            timestampArray
                              .map(timestamp =>
                                convertTimestampToPersianDateWithEnglishNumbers(
                                  timestamp
                                )
                              )
                              .filter(day => day >= todayInPersian)
                          )
                          .flat();
                        fetch("https://api.rentamon.com/api/setprice", {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                            Accept: "*/*"
                          },
                          credentials: "include",
                          body: JSON.stringify(data)
                        })
                          .then(response => {
                            if (!response.ok) {
                              throw new Error(
                                `HTTP error! status: ${response.status}`
                              );
                            }
                            return response.json();
                          })
                          .then(result => {
                            $state.platformRequestStatus = result;
                            console.log("Response saved to state:", result);
                          })
                          .catch(error => {
                            console.error("Error:", error);
                            $state.platformRequestStatus = {
                              error: error.message
                            };
                          });
                        return ($state.numberInput2.value = "");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "modalChangePrice",
              "open"
            ]).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["modalChangePrice", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__rxDkw)}>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__jTpgk)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalChangePriceOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalChangePrice", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalChangePriceOpen"] != null &&
                    typeof $steps["updateModalChangePriceOpen"] === "object" &&
                    typeof $steps["updateModalChangePriceOpen"].then ===
                      "function"
                  ) {
                    $steps["updateModalChangePriceOpen"] = await $steps[
                      "updateModalChangePriceOpen"
                    ];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s9Qm0
                )}
              >
                {
                  "\u0646\u0631\u062e \ud83d\udcb5 \u0631\u0648 \u0628\u0647 \u062a\u0648\u0645\u0646 \u0648\u0627\u0631\u062f \u06a9\u0646"
                }
              </div>
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
              ? "320px"
              : "320px"
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__tSyQk)}>
            <div
              data-plasmic-name={"main2"}
              data-plasmic-override={overrides.main2}
              className={classNames(projectcss.all, sty.main2)}
            >
              <AntdInputNumber
                data-plasmic-name={"numberInput2"}
                data-plasmic-override={overrides.numberInput2}
                className={classNames("__wab_instance", sty.numberInput2)}
                controls={false}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "numberInput2",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  "\u06f2/\u06f0\u06f0\u06f0/\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                }
                readOnly={false}
                type={"number"}
                value={generateStateValueProp($state, [
                  "numberInput2",
                  "value"
                ])}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qda1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        function numberToPersian(num) {
                          const units = [
                            "",
                            "یک",
                            "دو",
                            "سه",
                            "چهار",
                            "پنج",
                            "شش",
                            "هفت",
                            "هشت",
                            "نه"
                          ];

                          const tens = [
                            "",
                            "ده",
                            "بیست",
                            "سی",
                            "چهل",
                            "پنجاه",
                            "شصت",
                            "هفتاد",
                            "هشتاد",
                            "نود"
                          ];

                          const teens = [
                            "ده",
                            "یازده",
                            "دوازده",
                            "سیزده",
                            "چهارده",
                            "پانزده",
                            "شانزده",
                            "هفده",
                            "هجده",
                            "نوزده"
                          ];

                          const hundreds = [
                            "",
                            "صد",
                            "دویست",
                            "سیصد",
                            "چهارصد",
                            "پانصد",
                            "ششصد",
                            "هفتصد",
                            "هشتصد",
                            "نهصد"
                          ];

                          const groupNames = ["", "هزار", "میلیون", "میلیارد"];

                          if (num == null || num === "" || num === 0)
                            return "صفر";
                          const splitNumber = n => {
                            const str = n.toString();
                            const len = str.length;
                            if (len <= 3) return [n];
                            const groups = [];
                            let i = len;
                            while (i > 0) {
                              groups.unshift(
                                Number(str.substring(Math.max(0, i - 3), i))
                              );
                              i -= 3;
                            }
                            return groups;
                          };
                          const convertGroup = n => {
                            if (n === 0) return "";
                            const h = Math.floor(n / 100);
                            const t = Math.floor((n % 100) / 10);
                            const u = n % 10;
                            const hundred = hundreds[h];
                            let tenUnit = "";
                            if (t === 1) {
                              tenUnit = teens[u];
                            } else {
                              tenUnit =
                                tens[t] + (u > 0 ? " و " + units[u] : "");
                            }
                            return [hundred, tenUnit]
                              .filter(Boolean)
                              .join(" و ")
                              .trim();
                          };
                          const groups = splitNumber(num);
                          const result = groups
                            .map((g, i) => {
                              const groupText = convertGroup(g);
                              if (groupText) {
                                return (
                                  groupText +
                                  (groupNames[groups.length - i - 1]
                                    ? " " + groupNames[groups.length - i - 1]
                                    : "")
                                );
                              }
                              return "";
                            })
                            .filter(Boolean)
                            .join(" و ");
                          const finalResult = result.startsWith("و ")
                            ? result.slice(2)
                            : result;
                          return finalResult.trim() + " تومان";
                        }
                        const input = $state.numberInput2?.value || "";
                        const output =
                          input === "" ? "صفر" : numberToPersian(Number(input));
                        return output;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3IXzA)}>
              <Button
                className={classNames("__wab_instance", sty.button__o6Iyl)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.modalChangePrice.open = false)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] = await $steps[
                      "updateStateVariable"
                    ];
                  }

                  $steps["updateFetchModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fetchModal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFetchModalOpen"] != null &&
                    typeof $steps["updateFetchModalOpen"] === "object" &&
                    typeof $steps["updateFetchModalOpen"].then === "function"
                  ) {
                    $steps["updateFetchModalOpen"] = await $steps[
                      "updateFetchModalOpen"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function convertPersianNumbersToEnglish(str) {
                                const persianNumbers = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                const englishNumbers = [
                                  "0",
                                  "1",
                                  "2",
                                  "3",
                                  "4",
                                  "5",
                                  "6",
                                  "7",
                                  "8",
                                  "9"
                                ];

                                return str.replace(
                                  /[۰-۹]/g,
                                  char =>
                                    englishNumbers[
                                      persianNumbers.indexOf(char)
                                    ] || char
                                );
                              }
                              function padZero(num) {
                                return num.length === 1 ? `0${num}` : num;
                              }
                              function convertTimestampToPersianDateWithEnglishNumbers(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                const [year, month, day] = date
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(
                                  year
                                )}-${padZero(
                                  convertPersianNumbersToEnglish(month)
                                )}-${padZero(
                                  convertPersianNumbersToEnglish(day)
                                )}`;
                                return formattedDate;
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                price: String($state.numberInput2.value)
                              };
                              $state.requestdata = data;
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                )
                                .flat();
                              fetch("https://api.rentamon.com/api/setprice", {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                  Accept: "*/*"
                                },
                                credentials: "include",
                                body: JSON.stringify(data)
                              })
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error(
                                      `HTTP error! status: ${response.status}`
                                    );
                                  }
                                  return response.json();
                                })
                                .then(result => {
                                  $state.platformRequestStatus = result;
                                  console.log(
                                    "Response saved to state:",
                                    result
                                  );
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  $state.platformRequestStatus = {
                                    error: error.message
                                  };
                                });
                              $state.numberInput2.value = "";
                              return console.log(data, "done");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0PeL1
                  )}
                >
                  {
                    "\u062b\u0628\u062a \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                  }
                </div>
              </Button>
            </div>
          </div>
        </AntdModal>
        <Button
          className={classNames("__wab_instance", sty.button__gI4Sq)}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modal", "open"]
                    },
                    operation: 0,
                    value: (() => {
                      if ($state.fragmentDatePicker.values == 0) {
                        return false;
                      } else {
                        return true;
                      }
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalOpen"] != null &&
              typeof $steps["updateModalOpen"] === "object" &&
              typeof $steps["updateModalOpen"].then === "function"
            ) {
              $steps["updateModalOpen"] = await $steps["updateModalOpen"];
            }

            $steps["invokeGlobalAction"] = (() => {
              if ($state.fragmentDatePicker.values == 0) {
                return true;
              } else {
                return false;
              }
            })()
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "\u0631\u0648\u0632 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f",
                      "top-center",
                      3000
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ogRts)}>
            {(() => {
              try {
                return (() => {
                  if ($state.apiRequest.loading == true) {
                    return true;
                  } else {
                    return false;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"45px"}
                loading={"lazy"}
                src={
                  "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                }
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iJ44
              )}
            >
              {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
            </div>
          </div>
        </Button>
        <AntdModal
          data-plasmic-name={"fetchModal"}
          data-plasmic-override={overrides.fetchModal}
          className={classNames("__wab_instance", sty.fetchModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={false}
          modalScopeClassName={sty["fetchModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["fetchModal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["fetchModal", "open"])}
          title={
            "\u0646\u062a\u06cc\u062c\u0647 \u062f\u0631\u062e\u0648\u0627\u0633\u062a :"
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
              ? "320px"
              : "320px"
          }
        >
          <ApiRequest
            data-plasmic-name={"userPlatform"}
            data-plasmic-override={overrides.userPlatform}
            className={classNames("__wab_instance", sty.userPlatform)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zr74A
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__jige3)}>
                {(() => {
                  try {
                    return (() => {
                      if (
                        !$state.platformRequestStatus ||
                        !$state.platformRequestStatus.data ||
                        Object.keys($state.platformRequestStatus.data)
                          .length === 0
                      ) {
                        return true;
                      } else {
                        return false;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"loading2"}
                    data-plasmic-override={overrides.loading2}
                    alt={""}
                    className={classNames(sty.loading2)}
                    displayHeight={"34px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userPlatform",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userPlatform",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["userPlatform", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["userPlatform"] = ref;
            }}
            url={(() => {
              try {
                return `https://api.rentamon.com/api/website_statuses/?property_id=${$props.propertyId}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zhOvV)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const status = $state.userPlatform.data.status;
                      const platforms = Object.keys(status);
                      return platforms;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iQeX)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xgjQo)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tz7Vm
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const nameMapping = {
                                  jajiga: "جاجیگا",
                                  mizboon: "میزبون",
                                  otaghak: "اتاقک",
                                  shab: "شب",
                                  homsa: "هومسا",
                                  jabama: "جاباما",
                                  mihmansho: "میهمانشو"
                                };
                                const translatedName =
                                  nameMapping[currentItem] || currentItem;
                                return translatedName;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j29Vl
                        )}
                      >
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !$state.platformRequestStatus ||
                                !$state.platformRequestStatus.data ||
                                Object.keys($state.platformRequestStatus.data)
                                  .length === 0
                              ) {
                                return false;
                              }
                              const platforms =
                                $state.platformRequestStatus.data;
                              if (platforms[currentItem]) {
                                if (
                                  platforms[currentItem].final_status === true
                                ) {
                                  return true;
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"ok"}
                            data-plasmic-override={overrides.ok}
                            alt={""}
                            className={classNames(sty.ok)}
                            displayHeight={"34px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image27.svg",
                              fullWidth: 26,
                              fullHeight: 26,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !$state.platformRequestStatus ||
                                !$state.platformRequestStatus.data ||
                                Object.keys($state.platformRequestStatus.data)
                                  .length === 0
                              ) {
                                return false;
                              }
                              const platforms =
                                $state.platformRequestStatus.data;
                              if (platforms[currentItem]) {
                                if (
                                  platforms[currentItem].final_status === false
                                ) {
                                  return true;
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"fail"}
                            data-plasmic-override={overrides.fail}
                            alt={""}
                            className={classNames(sty.fail)}
                            displayHeight={"34px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image28.svg",
                              fullWidth: 26,
                              fullHeight: 26,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !$state.platformRequestStatus ||
                                !$state.platformRequestStatus.data ||
                                Object.keys($state.platformRequestStatus.data)
                                  .length === 0
                              ) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"loading"}
                            data-plasmic-override={overrides.loading}
                            alt={""}
                            className={classNames(sty.loading)}
                            displayHeight={"34px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={
                              "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                            }
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              const platformStatus =
                                $state.platformRequestStatus?.data || {};
                              if (
                                Object.keys(platformStatus).length > 0 &&
                                !platformStatus[currentItem]
                              ) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uj0VW
                            )}
                          >
                            {
                              "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0646\u062f\u0627\u0631\u062f"
                            }
                          </div>
                        ) : null}
                      </div>
                    </div>
                  </div>
                );
              })}
              <Button
                className={classNames("__wab_instance", sty.button__pqZut)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFragmentDatePickerValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fragmentDatePicker", "value"]
                          },
                          operation: 0,
                          value: (() => {
                            $state.fetchModal.open = false;
                            $state.block.open = false;
                            $state.modal.open = false;
                            $state.modalDiscount.open = false;
                            $state.modalChangePrice.open = false;
                            const platformStatus = Object.values(
                              $state.platformRequestStatus.data || {}
                            );
                            const allFailed = platformStatus.every(
                              platform => platform.final_status === false
                            );
                            if (allFailed) {
                              console.log(
                                "تمام پلتفرم‌ها شکست خورده‌اند. تغییری اعمال نمی‌شود."
                              );
                              return;
                            }
                            const changedDaysTimestamps = (
                              $state.requestdata.days || []
                            ).flat();
                            const changedDaysDates = changedDaysTimestamps.map(
                              timestamp => {
                                const date = new Date(timestamp * 1000);
                                return date.toISOString().split("T")[0];
                              }
                            );
                            const updatedCalendar =
                              $state.apiRequest.data.calendar.map(day => {
                                if (changedDaysDates.includes(day.date)) {
                                  const updates = {};
                                  if (
                                    $state.requestdata.request_for === "block"
                                  ) {
                                    updates.status = "blocked";
                                  } else if (
                                    $state.requestdata.request_for === "reserve"
                                  ) {
                                    updates.status = "reserved";
                                  } else if (
                                    $state.requestdata.request_for ===
                                      "unblock" ||
                                    !$state.requestdata.request_for
                                  ) {
                                    updates.status = "unblocked";
                                  }
                                  if ($state.requestdata.price !== undefined) {
                                    updates.price = $state.requestdata.price;
                                  }
                                  if (
                                    $state.requestdata.discount !== undefined
                                  ) {
                                    updates.discount_percentage =
                                      $state.requestdata.discount;
                                  }
                                  return {
                                    ...day,
                                    ...updates
                                  };
                                }
                                return day;
                              });
                            $state.apiRequest.data.calendar = updatedCalendar;
                            console.log(
                              "Calendar updated with changes:",
                              updatedCalendar
                            );
                            $state.platformRequestStatus = [];
                            $state.requestdata = [];
                            return ($state.fragmentDatePicker.values = []);
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFragmentDatePickerValue"] != null &&
                    typeof $steps["updateFragmentDatePickerValue"] ===
                      "object" &&
                    typeof $steps["updateFragmentDatePickerValue"].then ===
                      "function"
                  ) {
                    $steps["updateFragmentDatePickerValue"] = await $steps[
                      "updateFragmentDatePickerValue"
                    ];
                  }
                }}
              >
                {"\u0628\u0627\u0634\u0647"}
              </Button>
            </div>
          </ApiRequest>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"block"}
          data-plasmic-override={overrides.block}
          className={classNames("__wab_instance", sty.block)}
          closeIcon={null}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          modalScopeClassName={sty["block__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["block", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["block", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__ks7Vi)}>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__dprym)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateBlockOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["block", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBlockOpen"] != null &&
                    typeof $steps["updateBlockOpen"] === "object" &&
                    typeof $steps["updateBlockOpen"].then === "function"
                  ) {
                    $steps["updateBlockOpen"] = await $steps["updateBlockOpen"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gbu3K
                )}
              >
                {"\u0686\u0631\u0627 \u067e\u0631\u0647\u061f"}
              </div>
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile") ? "320px" : "320px"
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dOd4S)}
          >
            <Icon25Icon
              className={classNames(projectcss.all, sty.svg__o77T1)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s1R2K
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: ($state.block.open = false)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }

                $steps["updateFetchModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["fetchModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] = await $steps[
                    "updateFetchModalOpen"
                  ];
                }

                $steps["reserveRequest"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function convertPersianNumbersToEnglish(str) {
                              const persianNumbers = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              const englishNumbers = [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                              ];

                              return str.replace(
                                /[۰-۹]/g,
                                char =>
                                  englishNumbers[
                                    persianNumbers.indexOf(char)
                                  ] || char
                              );
                            }
                            function padZero(num) {
                              return num.length === 1 ? `0${num}` : num;
                            }
                            function convertTimestampToPersianDateWithEnglishNumbers(
                              timestamp
                            ) {
                              const date = new Date(timestamp * 1000);
                              const [year, month, day] = date
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(
                                year
                              )}-${padZero(
                                convertPersianNumbersToEnglish(month)
                              )}-${padZero(
                                convertPersianNumbersToEnglish(day)
                              )}`;
                              return formattedDate;
                            }
                            function getTodayInPersian() {
                              const today = new Date();
                              const [year, month, day] = today
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(
                                year
                              )}-${padZero(
                                convertPersianNumbersToEnglish(month)
                              )}-${padZero(
                                convertPersianNumbersToEnglish(day)
                              )}`;
                              return formattedDate;
                            }
                            const todayInPersian = getTodayInPersian();
                            const data = {
                              days: [$state.fragmentDatePicker.values],
                              property_id: $props.propertyId,
                              requested_by: "user",
                              request_for: "reserve"
                            };
                            $state.requestdata = data;
                            data.days = data.days
                              .map(timestampArray =>
                                timestampArray
                                  .map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                  .filter(day => day >= todayInPersian)
                              )
                              .flat();
                            $state.requestdata = data;
                            return fetch(
                              "https://api.rentamon.com/api/setblock",
                              {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                  Accept: "*/*"
                                },
                                credentials: "include",
                                body: JSON.stringify(data)
                              }
                            )
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(
                                    `HTTP error! status: ${response.status}`
                                  );
                                }
                                return response.json();
                              })
                              .then(result => {
                                $state.platformRequestStatus = result;
                                console.log("Response saved to state:", result);
                              })
                              .catch(error => {
                                console.error("Error:", error);
                                $state.platformRequestStatus = {
                                  error: error.message
                                };
                              });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["reserveRequest"] != null &&
                  typeof $steps["reserveRequest"] === "object" &&
                  typeof $steps["reserveRequest"].then === "function"
                ) {
                  $steps["reserveRequest"] = await $steps["reserveRequest"];
                }
              }}
            >
              {"\u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u0645"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ycVpz)}
          >
            <Icon24Icon
              className={classNames(projectcss.all, sty.svg__j9BUv)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__znwTf
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: ($state.block.open = false)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }

                $steps["updateFetchModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["fetchModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] = await $steps[
                    "updateFetchModalOpen"
                  ];
                }

                $steps["blockRequest"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function convertPersianNumbersToEnglish(str) {
                              const persianNumbers = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              const englishNumbers = [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                              ];

                              return str.replace(
                                /[۰-۹]/g,
                                char =>
                                  englishNumbers[
                                    persianNumbers.indexOf(char)
                                  ] || char
                              );
                            }
                            function padZero(num) {
                              return num.length === 1 ? `0${num}` : num;
                            }
                            function convertTimestampToPersianDateWithEnglishNumbers(
                              timestamp
                            ) {
                              const date = new Date(timestamp * 1000);
                              const [year, month, day] = date
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(
                                year
                              )}-${padZero(
                                convertPersianNumbersToEnglish(month)
                              )}-${padZero(
                                convertPersianNumbersToEnglish(day)
                              )}`;
                              return formattedDate;
                            }
                            function getTodayInPersian() {
                              const today = new Date();
                              const [year, month, day] = today
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(
                                year
                              )}-${padZero(
                                convertPersianNumbersToEnglish(month)
                              )}-${padZero(
                                convertPersianNumbersToEnglish(day)
                              )}`;
                              return formattedDate;
                            }
                            const todayInPersian = getTodayInPersian();
                            const data = {
                              days: [$state.fragmentDatePicker.values],
                              property_id: $props.propertyId,
                              requested_by: "user",
                              request_for: "block"
                            };
                            $state.requestdata = data;
                            data.days = data.days
                              .map(timestampArray =>
                                timestampArray
                                  .map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                  .filter(day => day >= todayInPersian)
                              )
                              .flat();
                            return fetch(
                              "https://api.rentamon.com/api/setblock",
                              {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                  Accept: "*/*"
                                },
                                credentials: "include",
                                body: JSON.stringify(data)
                              }
                            )
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(
                                    `HTTP error! status: ${response.status}`
                                  );
                                }
                                return response.json();
                              })
                              .then(result => {
                                $state.platformRequestStatus = result;
                                console.log("Response saved to state:", result);
                              })
                              .catch(error => {
                                console.error("Error:", error);
                                $state.platformRequestStatus = {
                                  error: error.message
                                };
                              });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["blockRequest"] != null &&
                  typeof $steps["blockRequest"] === "object" &&
                  typeof $steps["blockRequest"].then === "function"
                ) {
                  $steps["blockRequest"] = await $steps["blockRequest"];
                }
              }}
            >
              {
                "\u0641\u0639\u0644\u0627 \u0627\u062c\u0627\u0631\u0647 \u0646\u0645\u06cc\u200c\u062f\u0645"
              }
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eZj2J
            )}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.rentamon.com/api/setblock",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function convertTimestampToPersianDate(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                return date
                                  .toLocaleDateString("fa")
                                  .replace(/\//g, "-");
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                requested_by: "user",
                                request_for: "block"
                              };
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDate(timestamp)
                                  )
                                )
                                .flat();
                              return data;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        $state.platformRequestStatus =
                          $steps.invokeGlobalAction.data;
                        return console.log($state.platformRequestStatus);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          >
            {
              "\u0648\u0627\u0633\u0634 \u0628\u0631\u0646\u0627\u0645\u0647 \u062f\u0627\u0631\u0645 \ud83d\ude0e"
            }
          </div>
        </AntdModal>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637",
    "fragmentDatePicker",
    "dayCell",
    "modalDiscount",
    "main",
    "numberInput4",
    "numberInput3",
    "modal",
    "modalChangePrice",
    "main2",
    "numberInput2",
    "img",
    "fetchModal",
    "userPlatform",
    "loading2",
    "ok",
    "fail",
    "loading",
    "block"
  ],
  apiRequest: [
    "apiRequest",
    "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
  ],
  مشکلدربرقراریارتط: [
    "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
  ],
  fragmentDatePicker: ["fragmentDatePicker", "dayCell"],
  dayCell: ["dayCell"],
  modalDiscount: ["modalDiscount", "main", "numberInput4", "numberInput3"],
  main: ["main", "numberInput4"],
  numberInput4: ["numberInput4"],
  numberInput3: ["numberInput3"],
  modal: ["modal"],
  modalChangePrice: ["modalChangePrice", "main2", "numberInput2"],
  main2: ["main2", "numberInput2"],
  numberInput2: ["numberInput2"],
  img: ["img"],
  fetchModal: [
    "fetchModal",
    "userPlatform",
    "loading2",
    "ok",
    "fail",
    "loading"
  ],
  userPlatform: ["userPlatform", "loading2", "ok", "fail", "loading"],
  loading2: ["loading2"],
  ok: ["ok"],
  fail: ["fail"],
  loading: ["loading"],
  block: ["block"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  مشکلدربرقراریارتط: "div";
  fragmentDatePicker: typeof DatePicker;
  dayCell: typeof DayCell;
  modalDiscount: typeof AntdModal;
  main: "div";
  numberInput4: typeof AntdInputNumber;
  numberInput3: typeof AntdInputNumber;
  modal: typeof AntdModal;
  modalChangePrice: typeof AntdModal;
  main2: "div";
  numberInput2: typeof AntdInputNumber;
  img: typeof PlasmicImg__;
  fetchModal: typeof AntdModal;
  userPlatform: typeof ApiRequest;
  loading2: typeof PlasmicImg__;
  ok: typeof PlasmicImg__;
  fail: typeof PlasmicImg__;
  loading: typeof PlasmicImg__;
  block: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCalendar22__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCalendar22__VariantsArgs;
    args?: PlasmicCalendar22__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCalendar22__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCalendar22__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCalendar22__ArgProps,
          internalVariantPropNames: PlasmicCalendar22__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCalendar22__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCalendar22";
  } else {
    func.displayName = `PlasmicCalendar22.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendar22 = Object.assign(
  // Top-level PlasmicCalendar22 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    مشکلدربرقراریارتط: makeNodeComponent(
      "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
    ),
    fragmentDatePicker: makeNodeComponent("fragmentDatePicker"),
    dayCell: makeNodeComponent("dayCell"),
    modalDiscount: makeNodeComponent("modalDiscount"),
    main: makeNodeComponent("main"),
    numberInput4: makeNodeComponent("numberInput4"),
    numberInput3: makeNodeComponent("numberInput3"),
    modal: makeNodeComponent("modal"),
    modalChangePrice: makeNodeComponent("modalChangePrice"),
    main2: makeNodeComponent("main2"),
    numberInput2: makeNodeComponent("numberInput2"),
    img: makeNodeComponent("img"),
    fetchModal: makeNodeComponent("fetchModal"),
    userPlatform: makeNodeComponent("userPlatform"),
    loading2: makeNodeComponent("loading2"),
    ok: makeNodeComponent("ok"),
    fail: makeNodeComponent("fail"),
    loading: makeNodeComponent("loading"),
    block: makeNodeComponent("block"),

    // Metadata about props expected for PlasmicCalendar22
    internalVariantProps: PlasmicCalendar22__VariantProps,
    internalArgProps: PlasmicCalendar22__ArgProps
  }
);

export default PlasmicCalendar22;
/* prettier-ignore-end */
