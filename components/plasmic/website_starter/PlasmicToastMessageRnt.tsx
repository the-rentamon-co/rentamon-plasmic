/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: _mkSLPxHmSdr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicToastMessageRnt.module.css"; // plasmic-import: _mkSLPxHmSdr/css

createPlasmicElementProxy;

export type PlasmicToastMessageRnt__VariantMembers = {};
export type PlasmicToastMessageRnt__VariantsArgs = {};
type VariantPropType = keyof PlasmicToastMessageRnt__VariantsArgs;
export const PlasmicToastMessageRnt__VariantProps =
  new Array<VariantPropType>();

export type PlasmicToastMessageRnt__ArgsType = {
  logo?: React.ComponentProps<typeof PlasmicImg__>["src"];
  message?: string;
  buttonText?: string;
  buttonLink?: string;
};
type ArgPropType = keyof PlasmicToastMessageRnt__ArgsType;
export const PlasmicToastMessageRnt__ArgProps = new Array<ArgPropType>(
  "logo",
  "message",
  "buttonText",
  "buttonLink"
);

export type PlasmicToastMessageRnt__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  alertIcon?: Flex__<"div">;
  alertText?: Flex__<"div">;
  alertButton?: Flex__<"div">;
  button?: Flex__<"div">;
  closeButton?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultToastMessageRntProps {
  logo?: React.ComponentProps<typeof PlasmicImg__>["src"];
  message?: string;
  buttonText?: string;
  buttonLink?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToastMessageRnt__RenderFunc(props: {
  variants: PlasmicToastMessageRnt__VariantsArgs;
  args: PlasmicToastMessageRnt__ArgsType;
  overrides: PlasmicToastMessageRnt__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "display",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    (() => {
      try {
        return $state.display;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, "fadein")}
        >
          <div
            data-plasmic-name={"alertIcon"}
            data-plasmic-override={overrides.alertIcon}
            className={classNames(projectcss.all, sty.alertIcon)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__vVbZm)}
              displayHeight={
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? "26px"
                  : hasVariant(globalVariants, "screen", "mobile")
                  ? "28px"
                  : "43px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobile") ? "26px" : "auto"
              }
              loading={"lazy"}
              src={(() => {
                try {
                  return $props.logo;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/website_starter/images/image72.svg",
                      fullWidth: 42,
                      fullHeight: 42,
                      aspectRatio: 1
                    };
                  }
                  throw e;
                }
              })()}
            />
          </div>
          <div
            data-plasmic-name={"alertText"}
            data-plasmic-override={overrides.alertText}
            className={classNames(projectcss.all, sty.alertText)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c238
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.message;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0628\u0631\u0627\u06cc \u0630\u062e\u06cc\u0631\u0647 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \u0627\u0632 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u060c \u0641\u0639\u0627\u0644\u0634 \u06a9\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.message;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0628\u0631\u0627\u06cc \u0630\u062e\u06cc\u0631\u0647 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f\u060c \u0641\u0639\u0627\u0644\u0634 \u06a9\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          </div>
          <div
            data-plasmic-name={"alertButton"}
            data-plasmic-override={overrides.alertButton}
            className={classNames(projectcss.all, sty.alertButton)}
          >
            <div
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(projectcss.all, sty.button, "clickable")}
              onClick={async event => {
                const $steps = {};

                $steps["goToSetting"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $props.buttonLink;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return `/settings`;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToSetting"] != null &&
                  typeof $steps["goToSetting"] === "object" &&
                  typeof $steps["goToSetting"].then === "function"
                ) {
                  $steps["goToSetting"] = await $steps["goToSetting"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rKwK3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.buttonText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"closeButton"}
            data-plasmic-override={overrides.closeButton}
            className={classNames(projectcss.all, sty.closeButton)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function setCookie(name, value, hours) {
                            let expires = "";
                            if (hours) {
                              const date = new Date();
                              date.setTime(
                                date.getTime() + hours * 60 * 60 * 1000
                              );
                              expires = "; expires=" + date.toUTCString();
                            }
                            document.cookie =
                              name + "=" + (value || "") + expires + "; path=/";
                          }
                          return setCookie("visit_alert", "true", 72);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateDisplay"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["display"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDisplay"] != null &&
                typeof $steps["updateDisplay"] === "object" &&
                typeof $steps["updateDisplay"].then === "function"
              ) {
                $steps["updateDisplay"] = await $steps["updateDisplay"];
              }
            }}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___3XJ7)}
              displayHeight={"18px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image24.svg",
                fullWidth: 20,
                fullHeight: 18,
                aspectRatio: 1.111111
              }}
            />
          </div>
        </div>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          onMount={async () => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        console.log("here");
                        if (!document.cookie.includes("visit_alert")) {
                          $state.display = true;
                          return console.log("here1");
                        } else {
                          $state.display = false;
                          return console.log("here2");
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "alertIcon",
    "alertText",
    "alertButton",
    "button",
    "closeButton",
    "sideEffect"
  ],
  freeBox: [
    "freeBox",
    "alertIcon",
    "alertText",
    "alertButton",
    "button",
    "closeButton"
  ],
  alertIcon: ["alertIcon"],
  alertText: ["alertText"],
  alertButton: ["alertButton", "button"],
  button: ["button"],
  closeButton: ["closeButton"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  alertIcon: "div";
  alertText: "div";
  alertButton: "div";
  button: "div";
  closeButton: "div";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToastMessageRnt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToastMessageRnt__VariantsArgs;
    args?: PlasmicToastMessageRnt__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicToastMessageRnt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicToastMessageRnt__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicToastMessageRnt__ArgProps,
          internalVariantPropNames: PlasmicToastMessageRnt__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToastMessageRnt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToastMessageRnt";
  } else {
    func.displayName = `PlasmicToastMessageRnt.${nodeName}`;
  }
  return func;
}

export const PlasmicToastMessageRnt = Object.assign(
  // Top-level PlasmicToastMessageRnt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    alertIcon: makeNodeComponent("alertIcon"),
    alertText: makeNodeComponent("alertText"),
    alertButton: makeNodeComponent("alertButton"),
    button: makeNodeComponent("button"),
    closeButton: makeNodeComponent("closeButton"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicToastMessageRnt
    internalVariantProps: PlasmicToastMessageRnt__VariantProps,
    internalArgProps: PlasmicToastMessageRnt__ArgProps
  }
);

export default PlasmicToastMessageRnt;
/* prettier-ignore-end */
