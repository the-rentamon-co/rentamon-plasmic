/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: KNLZ6uFxuV-7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import VilaType from "../../VilaType"; // plasmic-import: Ovb_QdBC9YkI/component
import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicFirstPropertyEdit.module.css"; // plasmic-import: KNLZ6uFxuV-7/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon

createPlasmicElementProxy;

export type PlasmicFirstPropertyEdit__VariantMembers = {};
export type PlasmicFirstPropertyEdit__VariantsArgs = {};
type VariantPropType = keyof PlasmicFirstPropertyEdit__VariantsArgs;
export const PlasmicFirstPropertyEdit__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFirstPropertyEdit__ArgsType = {};
type ArgPropType = keyof PlasmicFirstPropertyEdit__ArgsType;
export const PlasmicFirstPropertyEdit__ArgProps = new Array<ArgPropType>();

export type PlasmicFirstPropertyEdit__OverridesType = {
  root?: Flex__<"div">;
  type?: Flex__<"div">;
  name?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  newButtons?: Flex__<"div">;
  next?: Flex__<"div">;
  privious?: Flex__<"div">;
  name2?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  newButtons2?: Flex__<"div">;
  next2?: Flex__<"div">;
  privious2?: Flex__<"div">;
};

export interface DefaultFirstPropertyEditProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFirstPropertyEdit__RenderFunc(props: {
  variants: PlasmicFirstPropertyEdit__VariantsArgs;
  args: PlasmicFirstPropertyEdit__ArgsType;
  overrides: PlasmicFirstPropertyEdit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 2
      },
      {
        path: "hostType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return $state.step == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"type"}
              data-plasmic-override={overrides.type}
              hasGap={true}
              className={classNames(projectcss.all, sty.type)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ed6Oj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qgUHs
                  )}
                >
                  {
                    "\u0627\u06cc\u062c\u0627\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eLAe)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__we2Rp
                  )}
                >
                  {
                    "\u0646\u0648\u0639 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u0686\u06cc\u0647\u061f"
                  }
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ajOX)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHostType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hostType"]
                          },
                          operation: 0,
                          value: (() => {
                            return "Villa";
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHostType"] != null &&
                    typeof $steps["updateHostType"] === "object" &&
                    typeof $steps["updateHostType"].then === "function"
                  ) {
                    $steps["updateHostType"] = await $steps["updateHostType"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/property_type",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    prop_id: "1",
                                    host_type: $state.hostType
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = true
                    ? (() => {
                        const actionArgs = { args: [700] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <VilaType
                  className={classNames("__wab_instance", sty.vilaType__jKf5)}
                  select={(() => {
                    try {
                      return $state.hostType == "Villa";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={
                    "\u0648\u06cc\u0644\u0627/\u0648\u06cc\u0644\u0627\u06cc\u06cc"
                  }
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___6Ffep)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHostType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hostType"]
                          },
                          operation: 0,
                          value: (() => {
                            return "Apartment";
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHostType"] != null &&
                    typeof $steps["updateHostType"] === "object" &&
                    typeof $steps["updateHostType"].then === "function"
                  ) {
                    $steps["updateHostType"] = await $steps["updateHostType"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/property_type",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    prop_id: "1",
                                    hostType: $state.hostType
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = true
                    ? (() => {
                        const actionArgs = { args: [700] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <VilaType
                  className={classNames("__wab_instance", sty.vilaType__twHzx)}
                  select={(() => {
                    try {
                      return $state.hostType == "Apartment";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={
                    "\u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646/\u0633\u0648\u0626\u06cc\u062a"
                  }
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__uleua)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateHostType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["hostType"]
                          },
                          operation: 0,
                          value: (() => {
                            return "Hostel";
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateHostType"] != null &&
                    typeof $steps["updateHostType"] === "object" &&
                    typeof $steps["updateHostType"].then === "function"
                  ) {
                    $steps["updateHostType"] = await $steps["updateHostType"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/property_type",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    prop_id: "1",
                                    hostType: $state.hostType
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = true
                    ? (() => {
                        const actionArgs = { args: [700] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <VilaType
                  className={classNames("__wab_instance", sty.vilaType__coH0G)}
                  select={(() => {
                    try {
                      return $state.hostType == "Hostel";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={
                    "\u0628\u0648\u0645\u06af\u0631\u062f\u06cc/\u0647\u0627\u0633\u062a\u0644"
                  }
                />
              </div>
            </Stack__>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__qObmX)}>
            {(() => {
              try {
                return $state.step == 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                hasGap={true}
                className={classNames(projectcss.all, sty.name)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__pIhDn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cIgr2
                    )}
                  >
                    {
                      "\u0646\u0627\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ciqgx)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jrsHi
                    )}
                  >
                    {
                      "\u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627 \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0686\u06cc \u0628\u0627\u0634\u0647\u061f"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__n6Rn5)}>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      "\u0645\u062b\u0644\u0627: \u0633\u0648\u06cc\u06cc\u062a \u0645\u0628\u0644\u0647 \u0645\u0647\u062a\u0627\u0628"
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"newButtons"}
                  data-plasmic-override={overrides.newButtons}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.newButtons)}
                >
                  <div
                    data-plasmic-name={"next"}
                    data-plasmic-override={overrides.next}
                    className={classNames(projectcss.all, sty.next)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/change_property_name",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      let a = {
                                        prop_id: "1",
                                        property_name: $state.textInput.value
                                      };
                                      return a;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6AXjw
                      )}
                    >
                      {"\u0628\u0639\u062f"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"privious"}
                    data-plasmic-override={overrides.privious}
                    className={classNames(projectcss.all, sty.privious)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStep"] != null &&
                        typeof $steps["updateStep"] === "object" &&
                        typeof $steps["updateStep"].then === "function"
                      ) {
                        $steps["updateStep"] = await $steps["updateStep"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vlwK9
                      )}
                    >
                      {"\u0642\u0628\u0644"}
                    </div>
                  </div>
                </Stack__>
              </Stack__>
            ) : null}
          </div>
          {(() => {
            try {
              return $state.step == 2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"name2"}
              data-plasmic-override={overrides.name2}
              hasGap={true}
              className={classNames(projectcss.all, sty.name2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__vbgxX)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cwSnm
                  )}
                >
                  {
                    "\u062a\u0635\u0648\u06cc\u0631 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kcoma)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jCp65
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `برای «${$state.textInput.value}» یه عکس بذار`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qcZzg)}>
                <UploadWrapper
                  data-plasmic-name={"upload"}
                  data-plasmic-override={overrides.upload}
                  accept={"image/*"}
                  className={classNames("__wab_instance", sty.upload)}
                  dragAndDropFiles={false}
                  files={generateStateValueProp($state, ["upload", "files"])}
                  listType={"picture"}
                  onFilesChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "upload",
                      "files"
                    ]).apply(null, eventArgs);

                    (async files => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if ($state.upload.files.length > 1) {
                                    const files = [...$state.upload.files];
                                    files[0] = files[1];
                                    files.splice(1, 1);
                                    console.log(files);
                                    return files;
                                  } else {
                                    return console.log("ok");
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  showUploadList={true}
                >
                  {(() => {
                    try {
                      return $state.upload.files[0] != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dGo5A)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__rl70P)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        height={"100%"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return (
                              "data:image/png;base64," +
                              $state.upload.files[0].contents
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                src: "/plasmic/website_starter/images/group698Png.png",
                                fullWidth: 200,
                                fullHeight: 150,
                                aspectRatio: undefined
                              };
                            }
                            throw e;
                          }
                        })()}
                        width={"100%"}
                      />
                    </Stack__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.upload.files[0] == null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rpFix)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__g9CeJ)}
                        displayHeight={"55px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image112.svg",
                          fullWidth: 30,
                          fullHeight: 30,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7At0D
                        )}
                      >
                        {
                          "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u062a\u0635\u0648\u06cc\u0631"
                        }
                      </div>
                    </Stack__>
                  ) : null}
                </UploadWrapper>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"newButtons2"}
                data-plasmic-override={overrides.newButtons2}
                hasGap={true}
                className={classNames(projectcss.all, sty.newButtons2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"next2"}
                  data-plasmic-override={overrides.next2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.next2)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://gateway.rentamon.com/webhook/change_property_pic",
                              undefined,
                              (() => {
                                try {
                                  return (() => {
                                    let a = {
                                      prop_id: "1",
                                      property_pic: $state.upload.files[0]
                                    };
                                    return a;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }

                    $steps["goToProperties"] =
                      $steps.invokeGlobalAction.status == 200
                        ? (() => {
                            const actionArgs = { destination: `/properties` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToProperties"] != null &&
                      typeof $steps["goToProperties"] === "object" &&
                      typeof $steps["goToProperties"].then === "function"
                    ) {
                      $steps["goToProperties"] = await $steps["goToProperties"];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = { args: [1500] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading2"] != null &&
                      typeof $steps["updateLoading2"] === "object" &&
                      typeof $steps["updateLoading2"].then === "function"
                    ) {
                      $steps["updateLoading2"] = await $steps["updateLoading2"];
                    }
                  }}
                >
                  {(() => {
                    try {
                      return $state.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__umlBm)}
                      displayHeight={"37px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        "https://web.rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                      }
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dr2IG
                    )}
                  >
                    {"\u0630\u062e\u06cc\u0631\u0647"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"privious2"}
                  data-plasmic-override={overrides.privious2}
                  className={classNames(projectcss.all, sty.privious2)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 3
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue - 1);
                            return oldValue - 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fs21Y
                    )}
                  >
                    {"\u0642\u0628\u0644"}
                  </div>
                </div>
              </Stack__>
            </Stack__>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "type",
    "name",
    "textInput",
    "newButtons",
    "next",
    "privious",
    "name2",
    "upload",
    "newButtons2",
    "next2",
    "privious2"
  ],
  type: ["type"],
  name: ["name", "textInput", "newButtons", "next", "privious"],
  textInput: ["textInput"],
  newButtons: ["newButtons", "next", "privious"],
  next: ["next"],
  privious: ["privious"],
  name2: ["name2", "upload", "newButtons2", "next2", "privious2"],
  upload: ["upload"],
  newButtons2: ["newButtons2", "next2", "privious2"],
  next2: ["next2"],
  privious2: ["privious2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  type: "div";
  name: "div";
  textInput: typeof TextInput;
  newButtons: "div";
  next: "div";
  privious: "div";
  name2: "div";
  upload: typeof UploadWrapper;
  newButtons2: "div";
  next2: "div";
  privious2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFirstPropertyEdit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFirstPropertyEdit__VariantsArgs;
    args?: PlasmicFirstPropertyEdit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFirstPropertyEdit__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFirstPropertyEdit__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFirstPropertyEdit__ArgProps,
          internalVariantPropNames: PlasmicFirstPropertyEdit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFirstPropertyEdit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFirstPropertyEdit";
  } else {
    func.displayName = `PlasmicFirstPropertyEdit.${nodeName}`;
  }
  return func;
}

export const PlasmicFirstPropertyEdit = Object.assign(
  // Top-level PlasmicFirstPropertyEdit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    type: makeNodeComponent("type"),
    _name: makeNodeComponent("name"),
    textInput: makeNodeComponent("textInput"),
    newButtons: makeNodeComponent("newButtons"),
    next: makeNodeComponent("next"),
    privious: makeNodeComponent("privious"),
    name2: makeNodeComponent("name2"),
    upload: makeNodeComponent("upload"),
    newButtons2: makeNodeComponent("newButtons2"),
    next2: makeNodeComponent("next2"),
    privious2: makeNodeComponent("privious2"),

    // Metadata about props expected for PlasmicFirstPropertyEdit
    internalVariantProps: PlasmicFirstPropertyEdit__VariantProps,
    internalArgProps: PlasmicFirstPropertyEdit__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFirstPropertyEdit;
/* prettier-ignore-end */
