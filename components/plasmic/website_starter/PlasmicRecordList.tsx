/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: dDeToLEgGJS_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicRecordList.module.css"; // plasmic-import: dDeToLEgGJS_/css

createPlasmicElementProxy;

export type PlasmicRecordList__VariantMembers = {
  pastBookingsBox: "pastBookingsBox";
  cancelledBookings: "cancelledBookings";
  confirmedBookings: "confirmedBookings";
  pendingBookings: "pendingBookings";
};
export type PlasmicRecordList__VariantsArgs = {
  pastBookingsBox?: SingleBooleanChoiceArg<"pastBookingsBox">;
  cancelledBookings?: SingleBooleanChoiceArg<"cancelledBookings">;
  confirmedBookings?: SingleBooleanChoiceArg<"confirmedBookings">;
  pendingBookings?: SingleBooleanChoiceArg<"pendingBookings">;
};
type VariantPropType = keyof PlasmicRecordList__VariantsArgs;
export const PlasmicRecordList__VariantProps = new Array<VariantPropType>(
  "pastBookingsBox",
  "cancelledBookings",
  "confirmedBookings",
  "pendingBookings"
);

export type PlasmicRecordList__ArgsType = { currentIndex?: any; data?: any };
type ArgPropType = keyof PlasmicRecordList__ArgsType;
export const PlasmicRecordList__ArgProps = new Array<ArgPropType>(
  "currentIndex",
  "data"
);

export type PlasmicRecordList__OverridesType = {
  root?: Flex__<"div">;
  website?: Flex__<"div">;
  date?: Flex__<"div">;
  name?: Flex__<"div">;
};

export interface DefaultRecordListProps {
  currentIndex?: any;
  data?: any;
  pastBookingsBox?: SingleBooleanChoiceArg<"pastBookingsBox">;
  cancelledBookings?: SingleBooleanChoiceArg<"cancelledBookings">;
  confirmedBookings?: SingleBooleanChoiceArg<"confirmedBookings">;
  pendingBookings?: SingleBooleanChoiceArg<"pendingBookings">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRecordList__RenderFunc(props: {
  variants: PlasmicRecordList__VariantsArgs;
  args: PlasmicRecordList__ArgsType;
  overrides: PlasmicRecordList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pastBookingsBox",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pastBookingsBox
      },
      {
        path: "cancelledBookings",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.cancelledBookings
      },
      {
        path: "confirmedBookings",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.confirmedBookings
      },
      {
        path: "pendingBookings",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pendingBookings
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        hasVariant($state, "pendingBookings", "pendingBookings")
          ? "pendingStyle"
          : undefined,
        {
          [sty.rootcancelledBookings]: hasVariant(
            $state,
            "cancelledBookings",
            "cancelledBookings"
          ),
          [sty.rootconfirmedBookings]: hasVariant(
            $state,
            "confirmedBookings",
            "confirmedBookings"
          ),
          [sty.rootpastBookingsBox]: hasVariant(
            $state,
            "pastBookingsBox",
            "pastBookingsBox"
          ),
          [sty.rootpendingBookings]: hasVariant(
            $state,
            "pendingBookings",
            "pendingBookings"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"website"}
        data-plasmic-override={overrides.website}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.website
        )}
      >
        {hasVariant(globalVariants, "screen", "smallMobile") ? (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.GuestName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : hasVariant(globalVariants, "screen", "mobile") ? (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.GuestName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.GuestName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        )}
      </div>
      <div
        data-plasmic-name={"date"}
        data-plasmic-override={overrides.date}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.date)}
      >
        {hasVariant(globalVariants, "screen", "mobile") ? (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.checkIn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u06f1\u06f4\u06f0\u06f3/\u06f0\u06f4/\u06f1\u06f2";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.checkIn;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u06f1\u06f4\u06f0\u06f3/\u06f0\u06f4/\u06f1\u06f2";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        )}
      </div>
      <div
        data-plasmic-name={"name"}
        data-plasmic-override={overrides.name}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.name, {
          [sty.nameconfirmedBookings]: hasVariant(
            $state,
            "confirmedBookings",
            "confirmedBookings"
          ),
          [sty.namepastBookingsBox]: hasVariant(
            $state,
            "pastBookingsBox",
            "pastBookingsBox"
          )
        })}
      >
        {hasVariant(globalVariants, "screen", "smallMobile") ? (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.platformName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0634\u0628";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : hasVariant(globalVariants, "screen", "mobile") ? (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.platformName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0634\u0628";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : (
          <React.Fragment>
            {(() => {
              try {
                return $props.data.platformName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0634\u0628";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        )}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "website", "date", "name"],
  website: ["website"],
  date: ["date"],
  name: ["name"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  website: "div";
  date: "div";
  name: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRecordList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRecordList__VariantsArgs;
    args?: PlasmicRecordList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRecordList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRecordList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRecordList__ArgProps,
          internalVariantPropNames: PlasmicRecordList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRecordList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecordList";
  } else {
    func.displayName = `PlasmicRecordList.${nodeName}`;
  }
  return func;
}

export const PlasmicRecordList = Object.assign(
  // Top-level PlasmicRecordList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    website: makeNodeComponent("website"),
    date: makeNodeComponent("date"),
    _name: makeNodeComponent("name"),

    // Metadata about props expected for PlasmicRecordList
    internalVariantProps: PlasmicRecordList__VariantProps,
    internalArgProps: PlasmicRecordList__ArgProps
  }
);

export default PlasmicRecordList;
/* prettier-ignore-end */
