/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: wDX6CsUVKNmL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SidebarLite from "../../SidebarLite"; // plasmic-import: NKEuaTqYxvdh/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import Calendar2 from "../../Calendar2"; // plasmic-import: RNhZtlNmydsH/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicLitePanel.module.css"; // plasmic-import: wDX6CsUVKNmL/css

createPlasmicElementProxy;

export type PlasmicLitePanel__VariantMembers = {};
export type PlasmicLitePanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicLitePanel__VariantsArgs;
export const PlasmicLitePanel__VariantProps = new Array<VariantPropType>();

export type PlasmicLitePanel__ArgsType = {};
type ArgPropType = keyof PlasmicLitePanel__ArgsType;
export const PlasmicLitePanel__ArgProps = new Array<ArgPropType>();

export type PlasmicLitePanel__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  select?: Flex__<typeof Select>;
  clarity?: Flex__<typeof Embed>;
  sideBar?: Flex__<"div">;
  header?: Flex__<"div">;
  right?: Flex__<"div">;
  right1?: Flex__<"div">;
  right3?: Flex__<"div">;
  sidebarLite?: Flex__<typeof SidebarLite>;
  right4?: Flex__<"div">;
  right2?: Flex__<"div">;
  select2?: Flex__<typeof Select>;
  left?: Flex__<"div">;
  profile?: Flex__<typeof ApiRequest>;
  calendar2?: Flex__<typeof Calendar2>;
  sideEffect?: Flex__<typeof SideEffect>;
  userAvailableFeature?: Flex__<typeof ApiRequest>;
  modal?: Flex__<typeof AntdModal>;
  favicon?: Flex__<typeof Embed>;
  proPanelModal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultLitePanelProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLitePanel__RenderFunc(props: {
  variants: PlasmicLitePanel__VariantsArgs;
  args: PlasmicLitePanel__ArgsType;
  overrides: PlasmicLitePanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? (() => {
                try {
                  return $state.profile.data.properties[$state.propId - 1]
                    .property_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646";
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.profile.data.properties[$state.propId - 1]
                    .property_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646";
                  }
                  throw e;
                }
              })()
      },
      {
        path: "pageUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "propId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? (() => {
                try {
                  return $state.profile.data.properties[$state.propId - 1]
                    .property_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646";
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.profile.data.properties[$state.propId - 1]
                    .property_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646";
                  }
                  throw e;
                }
              })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "feature",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          reservation: false,
          auto_sync: false
        })
      },
      {
        path: "userAvailableFeature.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userAvailableFeature"
      },
      {
        path: "userAvailableFeature.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userAvailableFeature"
      },
      {
        path: "userAvailableFeature.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userAvailableFeature"
      },
      {
        path: "proPanelModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLitePanel.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLitePanel.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLitePanel.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8Ze4B)}>
            <div className={classNames(projectcss.all, sty.freeBox___4Tya)}>
              <div className={classNames(projectcss.all, sty.freeBox__makxt)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5MvWi)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ycGB)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "20px"
                        : "30px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image37.svg",
                      fullWidth: 21,
                      fullHeight: 24,
                      aspectRatio: 0.875
                    }}
                  />
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"main"}
                  data-plasmic-override={overrides.main}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.main)}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zhk9V)}
              >
                <Select
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["select", "value"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async value => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: (() => {
                                let value = $state.profile.data.properties.find(
                                  property =>
                                    property.property_name ===
                                    $state.select.value
                                );
                                $state.pageUrl = value.link;
                                return ($state.propId = value.id);
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  options={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? (() => {
                          try {
                            return $state.profile.data.properties.map(
                              property => property.property_name
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [{}];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.profile.data.properties.map(
                              property => property.property_name
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [{}];
                            }
                            throw e;
                          }
                        })()
                  }
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__okeXv
                      )}
                    >
                      {
                        "\u062f\u0631\u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                      }
                    </div>
                  }
                  value={generateStateValueProp($state, ["select", "value"])}
                />

                {(() => {
                  try {
                    return $state.profile.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wSeSn)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "39px"
                        : "45px"
                    }
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zU8D)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__uj6Nk)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "97px"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "100px"
                    : "150px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "220px"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "100%"
                    : "100%"
                }
                loading={"lazy"}
                src={(() => {
                  try {
                    return $state.profile.data.user_info.profile_pic_link;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <Embed
            data-plasmic-name={"clarity"}
            data-plasmic-override={overrides.clarity}
            className={classNames("__wab_instance", sty.clarity)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />

          <div
            data-plasmic-name={"sideBar"}
            data-plasmic-override={overrides.sideBar}
            className={classNames(projectcss.all, sty.sideBar)}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                data-plasmic-name={"right"}
                data-plasmic-override={overrides.right}
                className={classNames(projectcss.all, sty.right)}
              >
                <div
                  data-plasmic-name={"right1"}
                  data-plasmic-override={overrides.right1}
                  className={classNames(projectcss.all, sty.right1)}
                >
                  <div
                    data-plasmic-name={"right3"}
                    data-plasmic-override={overrides.right3}
                    className={classNames(projectcss.all, sty.right3)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wo8Kz)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "26px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "22px"
                          : "33px"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image37.svg",
                        fullWidth: 21,
                        fullHeight: 24,
                        aspectRatio: 0.875
                      }}
                    />

                    <SidebarLite
                      data-plasmic-name={"sidebarLite"}
                      data-plasmic-override={overrides.sidebarLite}
                      className={classNames("__wab_instance", sty.sidebarLite)}
                      isOpen={false}
                      userData={(() => {
                        try {
                          return $state.profile.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <div
                    data-plasmic-name={"right4"}
                    data-plasmic-override={overrides.right4}
                    className={classNames(projectcss.all, sty.right4)}
                  />
                </div>
                <div
                  data-plasmic-name={"right2"}
                  data-plasmic-override={overrides.right2}
                  className={classNames(projectcss.all, sty.right2)}
                >
                  <Select
                    data-plasmic-name={"select2"}
                    data-plasmic-override={overrides.select2}
                    className={classNames("__wab_instance", sty.select2)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["select2", "value"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async value => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  let value =
                                    $state.profile.data.properties.find(
                                      property =>
                                        property.property_name ===
                                        $state.select2.value
                                    );
                                  $state.pageUrl = value.link;
                                  return ($state.propId = value.id);
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? (() => {
                            try {
                              return $state.profile.data.properties.map(
                                property => property.property_name
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [{}];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.profile.data.properties.map(
                                property => property.property_name
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [{}];
                              }
                              throw e;
                            }
                          })()
                    }
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kFSkm
                        )}
                      >
                        {
                          "\u062f\u0631\u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                        }
                      </div>
                    }
                    value={generateStateValueProp($state, ["select2", "value"])}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"left"}
                data-plasmic-override={overrides.left}
                className={classNames(projectcss.all, sty.left)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rEnj)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "80px"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "80px"
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? "130px"
                      : "100%"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "220px"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "100%"
                      : "100%"
                  }
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.profile.data.user_info.profile_pic_link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/website_starter/images/untitled1Jpg.jpg",
                          fullWidth: 38,
                          fullHeight: 32,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
              <ApiRequest
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames("__wab_instance", sty.profile)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "error"]).apply(
                    null,
                    eventArgs
                  );

                  (async error => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (
                                  $state.profile.error.detail ===
                                  "No Profile matches the given query."
                                ) {
                                  console.log("go to activation");
                                  return (window.location.href =
                                    "https://app.rentamon.com/activation/1/");
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile"] = ref;
                }}
                url={(() => {
                  try {
                    return `https://api-v2.rentamon.com/api/user_info?property_id=${$state.propId}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ovxMl
                  )}
                >
                  {"Enter some text"}
                </div>
              </ApiRequest>
            </div>
          </div>
          <Calendar2
            data-plasmic-name={"calendar2"}
            data-plasmic-override={overrides.calendar2}
            calendarType={"lite"}
            className={classNames("__wab_instance", sty.calendar2)}
            featurePermission={(() => {
              try {
                return $state.userAvailableFeature.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            propertyId={(() => {
              try {
                return $state.propId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 1;
                }
                throw e;
              }
            })()}
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/calendar/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/calendar/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["checkOldUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://api-v2.rentamon.com/api/is_user_old"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["checkOldUser"] != null &&
                typeof $steps["checkOldUser"] === "object" &&
                typeof $steps["checkOldUser"].then === "function"
              ) {
                $steps["checkOldUser"] = await $steps["checkOldUser"];
              }

              $steps["updateStateVariable3"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        if ($steps.checkOldUser.data.flag == 3) {
                          return (window.location.href =
                            "https://web.rentamon.com/panels/?prop_id=1");
                        } else if ($steps.checkOldUser.data.flag == 1) {
                          return (window.location.href =
                            "https://app.rentamon.com/panel/");
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable3"] != null &&
                typeof $steps["updateStateVariable3"] === "object" &&
                typeof $steps["updateStateVariable3"].then === "function"
              ) {
                $steps["updateStateVariable3"] = await $steps[
                  "updateStateVariable3"
                ];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://gateway.rentamon.com/webhook/73e96117-8d0c-40c7-9a70-259bc1fd7077"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["runCode2"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          console.log("stage0");
                          if (document.cookie.includes("is_new")) {
                            console.log("stage1");
                            return setTimeout(() => {
                              console.log("stage2");
                              $state.proPanelModal.open = true;
                            }, 10000);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />

          <ApiRequest
            data-plasmic-name={"userAvailableFeature"}
            data-plasmic-override={overrides.userAvailableFeature}
            className={classNames("__wab_instance", sty.userAvailableFeature)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userAvailableFeature",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userAvailableFeature",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userAvailableFeature",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["userAvailableFeature"] = ref;
            }}
            url={(() => {
              try {
                return `https://gateway.rentamon.com/webhook/get_user_available_feature?prop_id=${$state.propId}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://gateway.rentamon.com/webhook/get_user_available_feature";
                }
                throw e;
              }
            })()}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={
              <div className={classNames(projectcss.all, sty.freeBox__janBh)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__c6GNw)}
                  displayHeight={"13px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/website_starter/images/image24.svg",
                    fullWidth: 20,
                    fullHeight: 18,
                    aspectRatio: 1.111111
                  }}
                />
              </div>
            }
            trigger={null}
            width={"320"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__b4Cs
              )}
            >
              {
                "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc \u0647\u0633\u062a\u06cc\u0645 \n\u0633\u067e\u0627\u0633 \u0627\u0632 \u0634\u06a9\u06cc\u0628\u0627\u06cc\u06cc \u0634\u0645\u0627\n \ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb"
              }
            </div>
          </AntdModal>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              '<script>\r\n  // \u0633\u0627\u062e\u062a\u0646 \u0644\u06cc\u0646\u06a9 favicon\r\n  const faviconLink = document.createElement("link");\r\n  faviconLink.rel = "icon";\r\n  faviconLink.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  faviconLink.sizes = "192x192";\r\n  document.head.appendChild(faviconLink);\r\n\r\n</script>\r\n\r\n'
            }
          />

          {false ? (
            <AntdModal
              data-plasmic-name={"proPanelModal"}
              data-plasmic-override={overrides.proPanelModal}
              className={classNames("__wab_instance", sty.proPanelModal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["proPanelModal__modal"]}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "proPanelModal",
                  "open"
                ]).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, ["proPanelModal", "open"])}
              title={"Modal title"}
              trigger={null}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__lsx6X
                      )}
                      label={"Name"}
                      name={"name"}
                    >
                      <AntdInput
                        className={classNames("__wab_instance", sty.input)}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__khbDb
                      )}
                      label={"Message"}
                      name={"message"}
                    >
                      <AntdTextArea
                        className={classNames("__wab_instance", sty.textArea)}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames("__wab_instance", sty.button)}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sgJfs
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </AntdModal>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "select",
    "clarity",
    "sideBar",
    "header",
    "right",
    "right1",
    "right3",
    "sidebarLite",
    "right4",
    "right2",
    "select2",
    "left",
    "profile",
    "calendar2",
    "sideEffect",
    "userAvailableFeature",
    "modal",
    "favicon",
    "proPanelModal",
    "form",
    "input",
    "textArea",
    "button"
  ],
  main: ["main"],
  select: ["select"],
  clarity: ["clarity"],
  sideBar: [
    "sideBar",
    "header",
    "right",
    "right1",
    "right3",
    "sidebarLite",
    "right4",
    "right2",
    "select2",
    "left",
    "profile"
  ],
  header: [
    "header",
    "right",
    "right1",
    "right3",
    "sidebarLite",
    "right4",
    "right2",
    "select2",
    "left",
    "profile"
  ],
  right: [
    "right",
    "right1",
    "right3",
    "sidebarLite",
    "right4",
    "right2",
    "select2"
  ],
  right1: ["right1", "right3", "sidebarLite", "right4"],
  right3: ["right3", "sidebarLite"],
  sidebarLite: ["sidebarLite"],
  right4: ["right4"],
  right2: ["right2", "select2"],
  select2: ["select2"],
  left: ["left"],
  profile: ["profile"],
  calendar2: ["calendar2"],
  sideEffect: ["sideEffect"],
  userAvailableFeature: ["userAvailableFeature"],
  modal: ["modal"],
  favicon: ["favicon"],
  proPanelModal: ["proPanelModal", "form", "input", "textArea", "button"],
  form: ["form", "input", "textArea", "button"],
  input: ["input"],
  textArea: ["textArea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  select: typeof Select;
  clarity: typeof Embed;
  sideBar: "div";
  header: "div";
  right: "div";
  right1: "div";
  right3: "div";
  sidebarLite: typeof SidebarLite;
  right4: "div";
  right2: "div";
  select2: typeof Select;
  left: "div";
  profile: typeof ApiRequest;
  calendar2: typeof Calendar2;
  sideEffect: typeof SideEffect;
  userAvailableFeature: typeof ApiRequest;
  modal: typeof AntdModal;
  favicon: typeof Embed;
  proPanelModal: typeof AntdModal;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLitePanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLitePanel__VariantsArgs;
    args?: PlasmicLitePanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLitePanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLitePanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLitePanel__ArgProps,
          internalVariantPropNames: PlasmicLitePanel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLitePanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLitePanel";
  } else {
    func.displayName = `PlasmicLitePanel.${nodeName}`;
  }
  return func;
}

export const PlasmicLitePanel = Object.assign(
  // Top-level PlasmicLitePanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    select: makeNodeComponent("select"),
    clarity: makeNodeComponent("clarity"),
    sideBar: makeNodeComponent("sideBar"),
    header: makeNodeComponent("header"),
    right: makeNodeComponent("right"),
    right1: makeNodeComponent("right1"),
    right3: makeNodeComponent("right3"),
    sidebarLite: makeNodeComponent("sidebarLite"),
    right4: makeNodeComponent("right4"),
    right2: makeNodeComponent("right2"),
    select2: makeNodeComponent("select2"),
    left: makeNodeComponent("left"),
    profile: makeNodeComponent("profile"),
    calendar2: makeNodeComponent("calendar2"),
    sideEffect: makeNodeComponent("sideEffect"),
    userAvailableFeature: makeNodeComponent("userAvailableFeature"),
    modal: makeNodeComponent("modal"),
    favicon: makeNodeComponent("favicon"),
    proPanelModal: makeNodeComponent("proPanelModal"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicLitePanel
    internalVariantProps: PlasmicLitePanel__VariantProps,
    internalArgProps: PlasmicLitePanel__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تقویم یکپارچه اقامتگاه",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLitePanel;
/* prettier-ignore-end */
