/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: kT-D_roF4qsx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./Plasmicقاصدک.module.css"; // plasmic-import: kT-D_roF4qsx/css

createPlasmicElementProxy;

export type Plasmicقاصدک__VariantMembers = {};
export type Plasmicقاصدک__VariantsArgs = {};
type VariantPropType = keyof Plasmicقاصدک__VariantsArgs;
export const Plasmicقاصدک__VariantProps = new Array<VariantPropType>();

export type Plasmicقاصدک__ArgsType = {};
type ArgPropType = keyof Plasmicقاصدک__ArgsType;
export const Plasmicقاصدک__ArgProps = new Array<ArgPropType>();

export type Plasmicقاصدک__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  headerTitle?: Flex__<"div">;
  notifCenter?: Flex__<"div">;
  messages?: Flex__<"div">;
  item1?: Flex__<"div">;
  right?: Flex__<"div">;
  mid?: Flex__<"div">;
  left?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultقاصدکProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmicقاصدک__RenderFunc(props: {
  variants: Plasmicقاصدک__VariantsArgs;
  args: Plasmicقاصدک__ArgsType;
  overrides: Plasmicقاصدک__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{Plasmicقاصدک.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={Plasmicقاصدک.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={Plasmicقاصدک.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"headerTitle"}
              data-plasmic-override={overrides.headerTitle}
              className={classNames(projectcss.all, sty.headerTitle)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gYbQ7
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "\u0642\u0627\u0635\u062f\u06a9"
                  : "\u0642\u0627\u0635\u062f\u06a9"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"notifCenter"}
            data-plasmic-override={overrides.notifCenter}
            className={classNames(
              projectcss.all,
              sty.notifCenter,
              hasVariant(globalVariants, "screen", "mobile") ? `` : undefined
            )}
          >
            <div
              data-plasmic-name={"messages"}
              data-plasmic-override={overrides.messages}
              className={classNames(
                projectcss.all,
                sty.messages,
                hasVariant(globalVariants, "screen", "mobile")
                  ? "fadeinf"
                  : undefined
              )}
            >
              <div
                data-plasmic-name={"item1"}
                data-plasmic-override={overrides.item1}
                className={classNames(
                  projectcss.all,
                  sty.item1,
                  `hidden${undefined}`
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToChannelManager"] = true
                    ? (() => {
                        const actionArgs = { destination: `/channel-manager` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToChannelManager"] != null &&
                    typeof $steps["goToChannelManager"] === "object" &&
                    typeof $steps["goToChannelManager"].then === "function"
                  ) {
                    $steps["goToChannelManager"] = await $steps[
                      "goToChannelManager"
                    ];
                  }
                }}
              >
                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cIbyu)}
                    displayHeight={"85px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image131.svg",
                      fullWidth: 58,
                      fullHeight: 62,
                      aspectRatio: 0.935484
                    }}
                  />
                </div>
                <div
                  data-plasmic-name={"mid"}
                  data-plasmic-override={overrides.mid}
                  className={classNames(projectcss.all, sty.mid)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dRib)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8XA0F
                      )}
                    >
                      {
                        "\u06a9\u0627\u0631\u0628\u0631 \u06af\u0631\u0627\u0645\u06cc \u0627\u067e\u200c\u0647\u0627\u06cc \u0633\u0627\u0632\u0645\u0627\u0646 rentamon \u0628\u0647 \u0639\u0644\u062a \u0645\u0646\u0641\u06cc \u0634\u062f\u0646 \u0627\u0639\u062a\u0628\u0627\u0631 \u0628\u0647 \u0632\u0648\u062f\u06cc \u062e\u0627\u0645\u0648\u0634 \u062e\u0648\u0627\u0647\u0646\u062f \u0634\u062f. \u062c\u0647\u062a \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u062e\u0627\u0645\u0648\u0634 \u0634\u062f\u0646 \u0627\u067e\u200c\u0647\u0627\u060c \u0646\u0633\u0628\u062a \u0628\u0647 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0627\u0639\u062a\u0628\u0627\u0631 \u0633\u0627\u0632\u0645\u0627\u0646 \u0627\u0642\u062f\u0627\u0645 \u0646\u0645\u0627\u06cc\u06cc\u062f. Hamravesh Cloud Services"
                      }
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___5Hmaw)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? "20px"
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? "24px"
                        : "28px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? "20px"
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? "24px"
                        : "28px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image130.svg",
                      fullWidth: 31,
                      fullHeight: 31,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            navPage={"menu"}
            userType={(() => {
              try {
                return $state.userType;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__nfCvz)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "headerTitle",
    "notifCenter",
    "messages",
    "item1",
    "right",
    "mid",
    "left",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  header: ["header", "headerTitle"],
  headerTitle: ["headerTitle"],
  notifCenter: ["notifCenter", "messages", "item1", "right", "mid", "left"],
  messages: ["messages", "item1", "right", "mid", "left"],
  item1: ["item1", "right", "mid", "left"],
  right: ["right"],
  mid: ["mid"],
  left: ["left"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  headerTitle: "div";
  notifCenter: "div";
  messages: "div";
  item1: "div";
  right: "div";
  mid: "div";
  left: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmicقاصدک__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmicقاصدک__VariantsArgs;
    args?: Plasmicقاصدک__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmicقاصدک__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmicقاصدک__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicقاصدک__ArgProps,
          internalVariantPropNames: Plasmicقاصدک__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicقاصدک__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic\u0642\u0627\u0635\u062f\u06a9";
  } else {
    func.displayName = `Plasmicقاصدک.${nodeName}`;
  }
  return func;
}

export const Plasmicقاصدک = Object.assign(
  // Top-level Plasmicقاصدک renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    headerTitle: makeNodeComponent("headerTitle"),
    notifCenter: makeNodeComponent("notifCenter"),
    messages: makeNodeComponent("messages"),
    item1: makeNodeComponent("item1"),
    right: makeNodeComponent("right"),
    mid: makeNodeComponent("mid"),
    left: makeNodeComponent("left"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for Plasmicقاصدک
    internalVariantProps: Plasmicقاصدک__VariantProps,
    internalArgProps: Plasmicقاصدک__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "قاصدک",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmicقاصدک;
/* prettier-ignore-end */
