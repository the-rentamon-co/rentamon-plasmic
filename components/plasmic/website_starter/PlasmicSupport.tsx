/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: _jWDmDgs08t7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component
import NavigationRntFooter from "../../NavigationRntFooter"; // plasmic-import: y37kcAs9RXYg/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSupport.module.css"; // plasmic-import: _jWDmDgs08t7/css

import Icon39Icon from "./icons/PlasmicIcon__Icon39"; // plasmic-import: inxaF87iP7F9/icon
import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: Sg0oqZa4zTiY/icon
import Icon40Icon from "./icons/PlasmicIcon__Icon40"; // plasmic-import: 9Cw4HWV6MTy2/icon

createPlasmicElementProxy;

export type PlasmicSupport__VariantMembers = {};
export type PlasmicSupport__VariantsArgs = {};
type VariantPropType = keyof PlasmicSupport__VariantsArgs;
export const PlasmicSupport__VariantProps = new Array<VariantPropType>();

export type PlasmicSupport__ArgsType = {};
type ArgPropType = keyof PlasmicSupport__ArgsType;
export const PlasmicSupport__ArgProps = new Array<ArgPropType>();

export type PlasmicSupport__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  mainContents?: Flex__<"div">;
  introduction?: Flex__<"div">;
  teamImage?: Flex__<"div">;
  introCalendarLeft?: Flex__<"div">;
  accessWays?: Flex__<"div">;
  sectionTitle?: Flex__<"div">;
  ways?: Flex__<"div">;
  contact6?: Flex__<"div">;
  icon6?: Flex__<"div">;
  title6?: Flex__<"div">;
  caption6?: Flex__<"div">;
  contact10?: Flex__<"div">;
  icon10?: Flex__<"div">;
  title10?: Flex__<"div">;
  caption10?: Flex__<"div">;
  contact7?: Flex__<"div">;
  icon7?: Flex__<"div">;
  title7?: Flex__<"div">;
  caption7?: Flex__<"div">;
  contact8?: Flex__<"div">;
  icon8?: Flex__<"div">;
  title8?: Flex__<"div">;
  caption8?: Flex__<"div">;
  contact9?: Flex__<"div">;
  icon9?: Flex__<"div">;
  title9?: Flex__<"div">;
  caption9?: Flex__<"div">;
  contact11?: Flex__<"div">;
  icon11?: Flex__<"div">;
  title11?: Flex__<"div">;
  caption11?: Flex__<"div">;
  sectionTitle2?: Flex__<"div">;
  address?: Flex__<"div">;
  content?: Flex__<"div">;
  addressText?: Flex__<"div">;
  map?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  html?: Flex__<"div">;
  clarity2?: Flex__<typeof Embed>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
  navigationRntFooter?: Flex__<typeof NavigationRntFooter>;
};

export interface DefaultSupportProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSupport__RenderFunc(props: {
  variants: PlasmicSupport__VariantsArgs;
  args: PlasmicSupport__ArgsType;
  overrides: PlasmicSupport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSupport.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSupport.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSupport.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fil3J)}>
              <SideBar2
                data-plasmic-name={"sideBar2"}
                data-plasmic-override={overrides.sideBar2}
                className={classNames("__wab_instance", sty.sideBar2)}
                isOpen={
                  hasVariant(globalVariants, "screen", "mobile") ? false : false
                }
                userData={(() => {
                  try {
                    return $state.profile2.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__maJ5L)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fyrea
                )}
              >
                {
                  "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627"
                }
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"profile2"}
              data-plasmic-override={overrides.profile2}
              className={classNames("__wab_instance", sty.profile2)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "profile2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile2"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <div
            data-plasmic-name={"mainContents"}
            data-plasmic-override={overrides.mainContents}
            className={classNames(projectcss.all, sty.mainContents)}
          >
            <div
              data-plasmic-name={"introduction"}
              data-plasmic-override={overrides.introduction}
              className={classNames(projectcss.all, sty.introduction)}
            >
              <div
                data-plasmic-name={"teamImage"}
                data-plasmic-override={overrides.teamImage}
                className={classNames(projectcss.all, sty.teamImage)}
              >
                <div
                  data-plasmic-name={"introCalendarLeft"}
                  data-plasmic-override={overrides.introCalendarLeft}
                  className={classNames(projectcss.all, sty.introCalendarLeft)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__bnyHr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/teamJpg.jpg",
                      fullWidth: 800,
                      fullHeight: 222,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__edH9K
                )}
              >
                {
                  "\u0645\u0627 \u0627\u06cc\u0646\u062c\u0627 \u0647\u0633\u062a\u06cc\u0645 \u062a\u0627 \u0628\u0647 \u0634\u0645\u0627 \u0645\u06cc\u0632\u0628\u0627\u0646 \u0639\u0632\u06cc\u0632 \u06a9\u0645\u06a9 \u06a9\u0646\u06cc\u0645 \u062a\u062c\u0631\u0628\u0647\u200c\u0627\u06cc \u0628\u06cc\u200c\u062f\u0631\u062f\u0633\u0631 \u062f\u0631 \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc \u0648 \u0628\u0647\u200c\u0631\u0627\u062d\u062a\u06cc \u0628\u0627 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u062a\u0639\u0627\u0645\u0644 \u06a9\u0646\u06cc. \u0645\u0648\u0642\u0639 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c \u0647\u0631 \u062c\u0627 \u0633\u0648\u0627\u0644 \u0648 \u06cc\u0627 \u0627\u0628\u0647\u0627\u0645\u06cc \u062f\u0627\u0634\u062a\u06cc\u060c \u06a9\u0627\u0641\u06cc\u0647 \u0628\u0647 \u0645\u0627 \u067e\u06cc\u0627\u0645 \u0628\u062f\u06cc :)"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"accessWays"}
              data-plasmic-override={overrides.accessWays}
              className={classNames(projectcss.all, sty.accessWays)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yjk5I)}>
                <div
                  data-plasmic-name={"sectionTitle"}
                  data-plasmic-override={overrides.sectionTitle}
                  className={classNames(projectcss.all, sty.sectionTitle)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nIXpV
                    )}
                  >
                    {
                      "\u0631\u0627\u0647\u200c\u0647\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tt6Mw)}>
                  <div
                    data-plasmic-name={"ways"}
                    data-plasmic-override={overrides.ways}
                    className={classNames(projectcss.all, sty.ways)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ryaQa)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"contact6"}
                        data-plasmic-override={overrides.contact6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.contact6)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.open(`tel:02191096227`);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"icon6"}
                          data-plasmic-override={overrides.icon6}
                          className={classNames(projectcss.all, sty.icon6)}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__bmxP)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"30%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image79.svg",
                              fullWidth: 24,
                              fullHeight: 24,
                              aspectRatio: 1
                            }}
                          />
                        </div>
                        <div
                          data-plasmic-name={"title6"}
                          data-plasmic-override={overrides.title6}
                          className={classNames(projectcss.all, sty.title6)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mtUqr
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePropertyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["propertyId"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePropertyId"] != null &&
                                typeof $steps["updatePropertyId"] ===
                                  "object" &&
                                typeof $steps["updatePropertyId"].then ===
                                  "function"
                              ) {
                                $steps["updatePropertyId"] = await $steps[
                                  "updatePropertyId"
                                ];
                              }
                            }}
                          >
                            {
                              "\u062a\u0645\u0627\u0633 \u062a\u0644\u0641\u0646\u06cc"
                            }
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"caption6"}
                          data-plasmic-override={overrides.caption6}
                          className={classNames(projectcss.all, sty.caption6)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r5HTk
                            )}
                          >
                            {
                              "\u06f0\u06f2\u06f1-\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7"
                            }
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Eyto
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"contact10"}
                        data-plasmic-override={overrides.contact10}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.contact10)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.open(
                                        "https://goftino.com/c/WgsGXv",
                                        "_blank"
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"icon10"}
                          data-plasmic-override={overrides.icon10}
                          className={classNames(projectcss.all, sty.icon10)}
                        >
                          <Icon39Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__m8Afc
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          data-plasmic-name={"title10"}
                          data-plasmic-override={overrides.title10}
                          className={classNames(projectcss.all, sty.title10)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5Uugk
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePropertyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["propertyId"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePropertyId"] != null &&
                                typeof $steps["updatePropertyId"] ===
                                  "object" &&
                                typeof $steps["updatePropertyId"].then ===
                                  "function"
                              ) {
                                $steps["updatePropertyId"] = await $steps[
                                  "updatePropertyId"
                                ];
                              }
                            }}
                          >
                            {
                              "\u06af\u0641\u062a\u06af\u0648\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646"
                            }
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"caption10"}
                          data-plasmic-override={overrides.caption10}
                          className={classNames(projectcss.all, sty.caption10)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__thdzA
                            )}
                          >
                            {"(\u0686\u062a)"}
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zZfjf)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"contact7"}
                        data-plasmic-override={overrides.contact7}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.contact7)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.open(
                                        `https://wa.me/989038778606`,
                                        "_blank"
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"icon7"}
                          data-plasmic-override={overrides.icon7}
                          className={classNames(projectcss.all, sty.icon7)}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__yOfmf)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "28%"
                                : "30%"
                            }
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image75.svg",
                              fullWidth: 48,
                              fullHeight: 48,
                              aspectRatio: 1
                            }}
                          />
                        </div>
                        <div
                          data-plasmic-name={"title7"}
                          data-plasmic-override={overrides.title7}
                          className={classNames(projectcss.all, sty.title7)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yenud
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePropertyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["propertyId"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePropertyId"] != null &&
                                typeof $steps["updatePropertyId"] ===
                                  "object" &&
                                typeof $steps["updatePropertyId"].then ===
                                  "function"
                              ) {
                                $steps["updatePropertyId"] = await $steps[
                                  "updatePropertyId"
                                ];
                              }
                            }}
                          >
                            {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"caption7"}
                          data-plasmic-override={overrides.caption7}
                          className={classNames(projectcss.all, sty.caption7)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5Nm2
                            )}
                          >
                            {
                              "\u06f0\u06f9\u06f0\u06f3\u06f8\u06f7\u06f7\u06f8\u06f6\u06f0\u06f6"
                            }
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a5Scl)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"contact8"}
                        data-plasmic-override={overrides.contact8}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.contact8)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.open(
                                        "https://t.me/+989038778606",
                                        "_blank"
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"icon8"}
                          data-plasmic-override={overrides.icon8}
                          className={classNames(projectcss.all, sty.icon8)}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__kJqsc)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={
                              hasVariant(globalVariants, "screen", "tablet")
                                ? "28%"
                                : "30%"
                            }
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image76.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: 1
                            }}
                          />
                        </div>
                        <div
                          data-plasmic-name={"title8"}
                          data-plasmic-override={overrides.title8}
                          className={classNames(projectcss.all, sty.title8)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rv0Au
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePropertyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["propertyId"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePropertyId"] != null &&
                                typeof $steps["updatePropertyId"] ===
                                  "object" &&
                                typeof $steps["updatePropertyId"].then ===
                                  "function"
                              ) {
                                $steps["updatePropertyId"] = await $steps[
                                  "updatePropertyId"
                                ];
                              }
                            }}
                          >
                            {"\u062a\u0644\u06af\u0631\u0627\u0645"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"caption8"}
                          data-plasmic-override={overrides.caption8}
                          className={classNames(projectcss.all, sty.caption8)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2Sg7Z
                            )}
                          >
                            {
                              "\u06f0\u06f9\u06f0\u06f3\u06f8\u06f7\u06f7\u06f8\u06f6\u06f0\u06f6"
                            }
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rcAYr)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"contact9"}
                        data-plasmic-override={overrides.contact9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.contact9)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.open(
                                        "https://eitaa.org/rentamon_support",
                                        "_blank"
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"icon9"}
                          data-plasmic-override={overrides.icon9}
                          className={classNames(projectcss.all, sty.icon9)}
                        >
                          <Icon49Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__brztz
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          data-plasmic-name={"title9"}
                          data-plasmic-override={overrides.title9}
                          className={classNames(projectcss.all, sty.title9)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Ygg3
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePropertyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["propertyId"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePropertyId"] != null &&
                                typeof $steps["updatePropertyId"] ===
                                  "object" &&
                                typeof $steps["updatePropertyId"].then ===
                                  "function"
                              ) {
                                $steps["updatePropertyId"] = await $steps[
                                  "updatePropertyId"
                                ];
                              }
                            }}
                          >
                            {"\u0627\u06cc\u062a\u0627"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"caption9"}
                          data-plasmic-override={overrides.caption9}
                          className={classNames(projectcss.all, sty.caption9)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pgFiv
                            )}
                          >
                            {
                              "\u06f0\u06f9\u06f0\u06f3\u06f8\u06f7\u06f7\u06f8\u06f6\u06f0\u06f6"
                            }
                          </div>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cdAo)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"contact11"}
                        data-plasmic-override={overrides.contact11}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.contact11)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.open(
                                        "mailto:info@rentamon.com",
                                        "_blank"
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"icon11"}
                          data-plasmic-override={overrides.icon11}
                          className={classNames(projectcss.all, sty.icon11)}
                        >
                          <Icon40Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__eXlOd
                            )}
                            role={"img"}
                          />
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"title11"}
                          data-plasmic-override={overrides.title11}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.title11)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__or6Za
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatePropertyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["propertyId"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePropertyId"] != null &&
                                typeof $steps["updatePropertyId"] ===
                                  "object" &&
                                typeof $steps["updatePropertyId"].then ===
                                  "function"
                              ) {
                                $steps["updatePropertyId"] = await $steps[
                                  "updatePropertyId"
                                ];
                              }
                            }}
                          >
                            {"\u0627\u06cc\u0645\u06cc\u0644"}
                          </div>
                        </Stack__>
                        <div
                          data-plasmic-name={"caption11"}
                          data-plasmic-override={overrides.caption11}
                          className={classNames(projectcss.all, sty.caption11)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rxk2A
                            )}
                          >
                            {"info@rentamon.com"}
                          </div>
                        </div>
                      </Stack__>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"sectionTitle2"}
                  data-plasmic-override={overrides.sectionTitle2}
                  className={classNames(projectcss.all, sty.sectionTitle2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jqKIv
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc \u06f9 \u0627\u0644\u06cc \u06f1\u06f7 \u0631\u0648\u0632\u0647\u0627\u06cc \u063a\u06cc\u0631\u062a\u0639\u0637\u06cc\u0644"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc \u0627\u0632 \u0633\u0627\u0639\u062a \u06f9 \u0627\u0644\u06cc \u06f1\u06f7 \u0631\u0648\u0632\u0647\u0627\u06cc \u063a\u06cc\u0631\u062a\u0639\u0637\u06cc\u0644"
                      : "\u0633\u0627\u0639\u0627\u062a \u067e\u0627\u0633\u062e\u06af\u0648\u06cc\u06cc: \u0627\u0632 \u0633\u0627\u0639\u062a \u06f9 \u0627\u0644\u06cc \u06f1\u06f7 \u0631\u0648\u0632\u0647\u0627\u06cc \u063a\u06cc\u0631\u062a\u0639\u0637\u06cc\u0644"}
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"address"}
              data-plasmic-override={overrides.address}
              className={classNames(projectcss.all, sty.address)}
            >
              <div
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                className={classNames(projectcss.all, sty.content)}
              >
                <div
                  data-plasmic-name={"addressText"}
                  data-plasmic-override={overrides.addressText}
                  className={classNames(projectcss.all, sty.addressText)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Ye7H
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"\u0622\u062f\u0631\u0633 \u0634\u0631\u06a9\u062a:"}
                      </span>
                      <React.Fragment>
                        {
                          "\n\u0642\u0645\u060c \u067e\u0631\u062f\u06cc\u0633\u0627\u0646\u060c \u0628\u0644\u0648\u0627\u0631 \u0645\u0648\u0644\u0648\u06cc\u060c \u067e\u0627\u0631\u06a9 \u0639\u0644\u0645 \u0648 \u0641\u0646\u0627\u0648\u0631\u06cc \u0642\u0645\u060c \u0628\u0644\u0648\u06a9 \u06f1\u060c \u0637\u0628\u0642\u0647 \u06f3\u060c \u0634\u0631\u06a9\u062a \u062a\u0648\u0633\u0639\u0647 \u0641\u0646\u0627\u0648\u0631\u06cc \u0648 \u062a\u0648\u0627\u0646\u0645\u0646\u062f\u0633\u0627\u0632\u06cc \u0634\u0631\u06cc\u0641\r\n\n\u06a9\u062f \u067e\u0633\u062a\u06cc: \u06f3\u06f7\u06f4\u06f9\u06f1\u06f1\u06f3\u06f9\u06f1\u06f6\r"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"map"}
                  data-plasmic-override={overrides.map}
                  className={classNames(projectcss.all, sty.map)}
                >
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="width: 100%; height: 100%;">\r\n  <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3285.336332222352!2d50.80808741151561!3d34.57035540330491!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3f93a3007be0a67b%3A0x5974548a77f028da!2z2LTYsdqp2Kog2LHZhtiq2KfZhdmI2YYgfCBSZW50YW1vbg!5e0!3m2!1sen!2s!4v1739718249338!5m2!1sen!2s" style="width: 100%; height: 100%; border: 0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>\r\n</div>\r\n'
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? '<div style="width: 100%; height: 100%;">\r\n  <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3285.336332222352!2d50.80808741151561!3d34.57035540330491!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3f93a3007be0a67b%3A0x5974548a77f028da!2z2LTYsdqp2Kog2LHZhtiq2KfZhdmI2YYgfCBSZW50YW1vbg!5e0!3m2!1sen!2s!4v1739718249338!5m2!1sen!2s" style="width: 100%; height: 100%; border: 0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>\r\n</div>\r\n'
                        : '<div style="width: 100%; height: 100%;">\r\n  <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3285.336332222352!2d50.80808741151561!3d34.57035540330491!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3f93a3007be0a67b%3A0x5974548a77f028da!2z2LTYsdqp2Kog2LHZhtiq2KfZhdmI2YYgfCBSZW50YW1vbg!5e0!3m2!1sen!2s!4v1739718249338!5m2!1sen!2s" style="width: 100%; height: 100%; border: 0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>\r\n</div>\r\n'
                    }
                  />
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"clarity2"}
              data-plasmic-override={overrides.clarity2}
              className={classNames("__wab_instance", sty.clarity2)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />

          <NavigationRntFooter
            data-plasmic-name={"navigationRntFooter"}
            data-plasmic-override={overrides.navigationRntFooter}
            className={classNames("__wab_instance", sty.navigationRntFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile2",
    "mainContents",
    "introduction",
    "teamImage",
    "introCalendarLeft",
    "accessWays",
    "sectionTitle",
    "ways",
    "contact6",
    "icon6",
    "title6",
    "caption6",
    "contact10",
    "icon10",
    "title10",
    "caption10",
    "contact7",
    "icon7",
    "title7",
    "caption7",
    "contact8",
    "icon8",
    "title8",
    "caption8",
    "contact9",
    "icon9",
    "title9",
    "caption9",
    "contact11",
    "icon11",
    "title11",
    "caption11",
    "sectionTitle2",
    "address",
    "content",
    "addressText",
    "map",
    "embedHtml",
    "html",
    "clarity2",
    "rentamonFooter",
    "navigationRntFooter"
  ],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  mainContents: [
    "mainContents",
    "introduction",
    "teamImage",
    "introCalendarLeft",
    "accessWays",
    "sectionTitle",
    "ways",
    "contact6",
    "icon6",
    "title6",
    "caption6",
    "contact10",
    "icon10",
    "title10",
    "caption10",
    "contact7",
    "icon7",
    "title7",
    "caption7",
    "contact8",
    "icon8",
    "title8",
    "caption8",
    "contact9",
    "icon9",
    "title9",
    "caption9",
    "contact11",
    "icon11",
    "title11",
    "caption11",
    "sectionTitle2",
    "address",
    "content",
    "addressText",
    "map",
    "embedHtml"
  ],
  introduction: ["introduction", "teamImage", "introCalendarLeft"],
  teamImage: ["teamImage", "introCalendarLeft"],
  introCalendarLeft: ["introCalendarLeft"],
  accessWays: [
    "accessWays",
    "sectionTitle",
    "ways",
    "contact6",
    "icon6",
    "title6",
    "caption6",
    "contact10",
    "icon10",
    "title10",
    "caption10",
    "contact7",
    "icon7",
    "title7",
    "caption7",
    "contact8",
    "icon8",
    "title8",
    "caption8",
    "contact9",
    "icon9",
    "title9",
    "caption9",
    "contact11",
    "icon11",
    "title11",
    "caption11",
    "sectionTitle2"
  ],
  sectionTitle: ["sectionTitle"],
  ways: [
    "ways",
    "contact6",
    "icon6",
    "title6",
    "caption6",
    "contact10",
    "icon10",
    "title10",
    "caption10",
    "contact7",
    "icon7",
    "title7",
    "caption7",
    "contact8",
    "icon8",
    "title8",
    "caption8",
    "contact9",
    "icon9",
    "title9",
    "caption9",
    "contact11",
    "icon11",
    "title11",
    "caption11"
  ],
  contact6: ["contact6", "icon6", "title6", "caption6"],
  icon6: ["icon6"],
  title6: ["title6"],
  caption6: ["caption6"],
  contact10: ["contact10", "icon10", "title10", "caption10"],
  icon10: ["icon10"],
  title10: ["title10"],
  caption10: ["caption10"],
  contact7: ["contact7", "icon7", "title7", "caption7"],
  icon7: ["icon7"],
  title7: ["title7"],
  caption7: ["caption7"],
  contact8: ["contact8", "icon8", "title8", "caption8"],
  icon8: ["icon8"],
  title8: ["title8"],
  caption8: ["caption8"],
  contact9: ["contact9", "icon9", "title9", "caption9"],
  icon9: ["icon9"],
  title9: ["title9"],
  caption9: ["caption9"],
  contact11: ["contact11", "icon11", "title11", "caption11"],
  icon11: ["icon11"],
  title11: ["title11"],
  caption11: ["caption11"],
  sectionTitle2: ["sectionTitle2"],
  address: ["address", "content", "addressText", "map", "embedHtml"],
  content: ["content", "addressText", "map", "embedHtml"],
  addressText: ["addressText"],
  map: ["map", "embedHtml"],
  embedHtml: ["embedHtml"],
  html: ["html", "clarity2"],
  clarity2: ["clarity2"],
  rentamonFooter: ["rentamonFooter"],
  navigationRntFooter: ["navigationRntFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  mainContents: "div";
  introduction: "div";
  teamImage: "div";
  introCalendarLeft: "div";
  accessWays: "div";
  sectionTitle: "div";
  ways: "div";
  contact6: "div";
  icon6: "div";
  title6: "div";
  caption6: "div";
  contact10: "div";
  icon10: "div";
  title10: "div";
  caption10: "div";
  contact7: "div";
  icon7: "div";
  title7: "div";
  caption7: "div";
  contact8: "div";
  icon8: "div";
  title8: "div";
  caption8: "div";
  contact9: "div";
  icon9: "div";
  title9: "div";
  caption9: "div";
  contact11: "div";
  icon11: "div";
  title11: "div";
  caption11: "div";
  sectionTitle2: "div";
  address: "div";
  content: "div";
  addressText: "div";
  map: "div";
  embedHtml: typeof Embed;
  html: "div";
  clarity2: typeof Embed;
  rentamonFooter: typeof RentamonFooter;
  navigationRntFooter: typeof NavigationRntFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSupport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSupport__VariantsArgs;
    args?: PlasmicSupport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSupport__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSupport__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSupport__ArgProps,
          internalVariantPropNames: PlasmicSupport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSupport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSupport";
  } else {
    func.displayName = `PlasmicSupport.${nodeName}`;
  }
  return func;
}

export const PlasmicSupport = Object.assign(
  // Top-level PlasmicSupport renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    mainContents: makeNodeComponent("mainContents"),
    introduction: makeNodeComponent("introduction"),
    teamImage: makeNodeComponent("teamImage"),
    introCalendarLeft: makeNodeComponent("introCalendarLeft"),
    accessWays: makeNodeComponent("accessWays"),
    sectionTitle: makeNodeComponent("sectionTitle"),
    ways: makeNodeComponent("ways"),
    contact6: makeNodeComponent("contact6"),
    icon6: makeNodeComponent("icon6"),
    title6: makeNodeComponent("title6"),
    caption6: makeNodeComponent("caption6"),
    contact10: makeNodeComponent("contact10"),
    icon10: makeNodeComponent("icon10"),
    title10: makeNodeComponent("title10"),
    caption10: makeNodeComponent("caption10"),
    contact7: makeNodeComponent("contact7"),
    icon7: makeNodeComponent("icon7"),
    title7: makeNodeComponent("title7"),
    caption7: makeNodeComponent("caption7"),
    contact8: makeNodeComponent("contact8"),
    icon8: makeNodeComponent("icon8"),
    title8: makeNodeComponent("title8"),
    caption8: makeNodeComponent("caption8"),
    contact9: makeNodeComponent("contact9"),
    icon9: makeNodeComponent("icon9"),
    title9: makeNodeComponent("title9"),
    caption9: makeNodeComponent("caption9"),
    contact11: makeNodeComponent("contact11"),
    icon11: makeNodeComponent("icon11"),
    title11: makeNodeComponent("title11"),
    caption11: makeNodeComponent("caption11"),
    sectionTitle2: makeNodeComponent("sectionTitle2"),
    address: makeNodeComponent("address"),
    content: makeNodeComponent("content"),
    addressText: makeNodeComponent("addressText"),
    map: makeNodeComponent("map"),
    embedHtml: makeNodeComponent("embedHtml"),
    html: makeNodeComponent("html"),
    clarity2: makeNodeComponent("clarity2"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),
    navigationRntFooter: makeNodeComponent("navigationRntFooter"),

    // Metadata about props expected for PlasmicSupport
    internalVariantProps: PlasmicSupport__VariantProps,
    internalArgProps: PlasmicSupport__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "درباره رنتامونی‌ها",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSupport;
/* prettier-ignore-end */
