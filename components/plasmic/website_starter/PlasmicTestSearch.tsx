/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: kZSAE7HA3zLq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { Switch } from "@/fragment/components/switch"; // plasmic-import: fYS4AeYPi-91/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicTestSearch.module.css"; // plasmic-import: kZSAE7HA3zLq/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicTestSearch__VariantMembers = {};
export type PlasmicTestSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestSearch__VariantsArgs;
export const PlasmicTestSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicTestSearch__ArgsType = {};
type ArgPropType = keyof PlasmicTestSearch__ArgsType;
export const PlasmicTestSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicTestSearch__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  checkVpn?: Flex__<typeof SideEffect>;
  vpnModal?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile2?: Flex__<typeof ApiRequest>;
  topContainer?: Flex__<"section">;
  topContainer2?: Flex__<"section">;
  alertIcon?: Flex__<"div">;
  alertText?: Flex__<"div">;
  alertButton?: Flex__<"div">;
  button?: Flex__<"div">;
  mainSection?: Flex__<"section">;
  properties?: Flex__<typeof ApiRequest>;
  selectProperty?: Flex__<typeof Select>;
  shabContainer?: Flex__<"div">;
  shabSwitch?: Flex__<typeof Switch>;
  otaghakContainer?: Flex__<"div">;
  otaghakSwitch?: Flex__<typeof Switch>;
  jabamaContainer?: Flex__<"div">;
  fragmentSwitch3?: Flex__<typeof Switch>;
  jajigaContainer?: Flex__<"div">;
  fragmentSwitch5?: Flex__<typeof Switch>;
  mihmanshoContainer?: Flex__<"div">;
  fragmentSwitch7?: Flex__<typeof Switch>;
  homsaContainer?: Flex__<"div">;
  fragmentSwitch4?: Flex__<typeof Switch>;
  desc?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  returnButton?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultTestSearchProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestSearch__RenderFunc(props: {
  variants: PlasmicTestSearch__VariantsArgs;
  args: PlasmicTestSearch__ArgsType;
  overrides: PlasmicTestSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isVpnOn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "properties.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "properties.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "properties.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "properties"
      },
      {
        path: "selectProperty.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shabSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otaghakSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch3.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch5.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch7.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentSwitch4.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___1WkQu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w07Om
              )}
            >
              {
                "\u0628\u0648\u06cc \u06af\u0644 \u0645\u062d\u0645\u062f\u06cc\n\u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u062e\u0648\u0634 \u0622\u0645\u062f\u06cc"
              }
            </div>
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              config={(() => {
                try {
                  return (() => {
                    const accessToken = document.cookie
                      .split("; ")
                      .find(row => row.startsWith("access_token"))
                      .split("=")[1];
                    console.log("accessToken", accessToken);
                    return {
                      header: {
                        Authorization: accessToken,
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }
                    };
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2QmW1
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fTkse
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["apiRequest"] = ref;
              }}
              url={"https://dev.rentamon.com/webhook/test-cors"}
            />
          </div>
          <SideEffect
            data-plasmic-name={"checkVpn"}
            data-plasmic-override={overrides.checkVpn}
            className={classNames("__wab_instance", sty.checkVpn)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          async function checkVPN() {
                            const res = await fetch("https://ipapi.co/json/");
                            const data = await res.json();
                            const country = data.country;
                            const org = data.org || "";
                            if (country !== "IR") {
                              $state.isVpnOn = true;
                              return "";
                            }
                            const datacenterKeywords = [
                              "Arvan",
                              "MihanWeb",
                              "Hetzner",
                              "OVH",
                              "Google",
                              "AWS"
                            ];

                            if (datacenterKeywords.some(k => org.includes(k))) {
                              $state.isVpnOn = true;
                              return "";
                            }
                            $state.isVpnOn = false;
                            return "";
                          }
                          return await checkVPN();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <div
            data-plasmic-name={"vpnModal"}
            data-plasmic-override={overrides.vpnModal}
            className={classNames(
              projectcss.all,
              sty.vpnModal,
              (() => {
                try {
                  return $state.isVpnOn == true
                    ? "modal-overlay open"
                    : "modal-overlay";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___3MCwL,
                (() => {
                  try {
                    return $state.isVpnOn == true
                      ? "modal-content open"
                      : "modal-content open";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox__eZlvd)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rt61I)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsVpnOn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isVpnOn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsVpnOn"] != null &&
                      typeof $steps["updateIsVpnOn"] === "object" &&
                      typeof $steps["updateIsVpnOn"].then === "function"
                    ) {
                      $steps["updateIsVpnOn"] = await $steps["updateIsVpnOn"];
                    }
                  }}
                  src={{
                    src: "/plasmic/website_starter/images/image166.svg",
                    fullWidth: 18,
                    fullHeight: 18,
                    aspectRatio: undefined
                  }}
                />
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Sbos
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    "\u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646 \u0631\u0648\u0634\u0646\u0647!"
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "شواهد و قرائن نشون می‌ده شما با وی‌پی‌ان اومدی\nلطفا هر چه سریع‌تر خاموشش کن";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
              ) : null}
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__rpI9)}
                displayHeight={"191px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? {
                        src: "/plasmic/website_starter/images/vpnIconSvg.svg",
                        fullWidth: 800,
                        fullHeight: 800,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/website_starter/images/vpnIconSvg.svg",
                        fullWidth: 800,
                        fullHeight: 800,
                        aspectRatio: undefined
                      }
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lEVw
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile") ? (
                  "\u0628\u0631\u0627\u06cc \u0633\u0631\u0639\u062a \u0628\u0627\u0644\u0627\u062a\u0631 \u0648 \u0639\u0645\u0644\u06a9\u0631\u062f \u0628\u0647\u062a\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c\r\n\u0644\u0637\u0641\u0627 \u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646\u062a \u0631\u0648 \u062e\u0627\u0645\u0648\u0634 \u06a9\u0646."
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return "شواهد و قرائن نشون می‌ده شما با وی‌پی‌ان اومدی\nلطفا هر چه سریع‌تر خاموشش کن";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___76C3)}>
                <Button
                  className={classNames("__wab_instance", sty.button__nBkn)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsVpnOn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isVpnOn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsVpnOn"] != null &&
                      typeof $steps["updateIsVpnOn"] === "object" &&
                      typeof $steps["updateIsVpnOn"].then === "function"
                    ) {
                      $steps["updateIsVpnOn"] = await $steps["updateIsVpnOn"];
                    }
                  }}
                >
                  {"\u0628\u0627\u0634\u0647"}
                </Button>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___2VoEb)}>
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___32DGi)}>
                <SideBar2
                  data-plasmic-name={"sideBar2"}
                  data-plasmic-override={overrides.sideBar2}
                  className={classNames("__wab_instance", sty.sideBar2)}
                  isOpen={false}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__aIpQo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Qa,
                    "fadeinf"
                  )}
                >
                  {
                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc\u26a1\ufe0f"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9GMF)}>
                <ApiRequest
                  data-plasmic-name={"profile2"}
                  data-plasmic-override={overrides.profile2}
                  className={classNames("__wab_instance", sty.profile2)}
                  errorDisplay={null}
                  loadingDisplay={null}
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "profile2",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "profile2",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "profile2",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["profile2"] = ref;
                  }}
                  url={
                    "https://api-v2.rentamon.com/api/user_info?property_id=1"
                  }
                />
              </div>
            </div>
            <section
              data-plasmic-name={"topContainer"}
              data-plasmic-override={overrides.topContainer}
              className={classNames(
                projectcss.all,
                sty.topContainer,
                "fadeinf"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cAxul
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062a\u063a\u06cc\u06cc\u0631 \u062d\u0627\u0644\u062a \u0631\u0632\u0631\u0648\u0647\u0627 \u0628\u0647 \u00ab\u0622\u0646\u06cc\u00bb \u062a\u0627 \u062a\u0627\u0631\u06cc\u062e "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"\u06f3\u06f1 \u062a\u06cc\u0631"}
                  </span>
                </React.Fragment>
              </div>
            </section>
            <section
              data-plasmic-name={"topContainer2"}
              data-plasmic-override={overrides.topContainer2}
              className={classNames(projectcss.all, sty.topContainer2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pmTOr)}>
                <div
                  data-plasmic-name={"alertIcon"}
                  data-plasmic-override={overrides.alertIcon}
                  className={classNames(projectcss.all, sty.alertIcon)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vVH9)}
                    displayHeight={"43px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image72.svg",
                      fullWidth: 42,
                      fullHeight: 42,
                      aspectRatio: 1
                    }}
                  />
                </div>
                <div
                  data-plasmic-name={"alertText"}
                  data-plasmic-override={overrides.alertText}
                  className={classNames(projectcss.all, sty.alertText)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pUbDz
                    )}
                  >
                    {
                      "\u0628\u0647 \u062f\u0644\u06cc\u0644 \u0627\u062e\u062a\u0644\u0627\u0644\u0627\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u060c \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u0645\u0648\u0642\u062a\u0627 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0646\u06cc\u0633\u062a."
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"alertButton"}
                  data-plasmic-override={overrides.alertButton}
                  className={classNames(projectcss.all, sty.alertButton)}
                >
                  <div
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(projectcss.all, sty.button)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1PIJl
                      )}
                    >
                      {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
                    </div>
                  </div>
                </div>
              </div>
            </section>
            <section
              data-plasmic-name={"mainSection"}
              data-plasmic-override={overrides.mainSection}
              className={classNames(projectcss.all, sty.mainSection, "fadein")}
            >
              <ApiRequest
                data-plasmic-name={"properties"}
                data-plasmic-override={overrides.properties}
                className={classNames("__wab_instance", sty.properties)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lix79
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v5Z7U
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "properties",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "properties",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "properties",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["properties"] = ref;
                }}
                url={
                  "https://gateway.rentamon.com/webhook/property-instant?v=2"
                }
              >
                <Select
                  data-plasmic-name={"selectProperty"}
                  data-plasmic-override={overrides.selectProperty}
                  className={classNames("__wab_instance", sty.selectProperty)}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "selectProperty",
                        "value"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  options={[
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ]}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oV9Sq
                      )}
                    >
                      {"\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647.."}
                    </div>
                  }
                  value={generateStateValueProp($state, [
                    "selectProperty",
                    "value"
                  ])}
                />

                <div className={classNames(projectcss.all, sty.freeBox__ycc03)}>
                  <div
                    data-plasmic-name={"shabContainer"}
                    data-plasmic-override={overrides.shabContainer}
                    className={classNames(projectcss.all, sty.shabContainer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ta2Nr)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__p7Jyb)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image.png",
                          fullWidth: 88,
                          fullHeight: 88,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g34PM
                        )}
                      >
                        {"\u0634\u0628"}
                      </div>
                    </div>
                    <Switch
                      data-plasmic-name={"shabSwitch"}
                      data-plasmic-override={overrides.shabSwitch}
                      checked={generateStateValueProp($state, [
                        "shabSwitch",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.shabSwitch)}
                      disabled={false}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "shabSwitch",
                          "checked"
                        ]).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"otaghakContainer"}
                    data-plasmic-override={overrides.otaghakContainer}
                    className={classNames(projectcss.all, sty.otaghakContainer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rUmz)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__s4Jls)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/otaghakPng.png",
                          fullWidth: 140,
                          fullHeight: 140,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zDPdn
                        )}
                      >
                        {"\u0627\u062a\u0627\u0642\u06a9"}
                      </div>
                    </div>
                    <Switch
                      data-plasmic-name={"otaghakSwitch"}
                      data-plasmic-override={overrides.otaghakSwitch}
                      checked={generateStateValueProp($state, [
                        "otaghakSwitch",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.otaghakSwitch
                      )}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "otaghakSwitch",
                          "checked"
                        ]).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"jabamaContainer"}
                    data-plasmic-override={overrides.jabamaContainer}
                    className={classNames(projectcss.all, sty.jabamaContainer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iKdi)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___6Zgsm)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/jabamaWebp.webp",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pboq6
                        )}
                      >
                        {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                      </div>
                    </div>
                    <Switch
                      data-plasmic-name={"fragmentSwitch3"}
                      data-plasmic-override={overrides.fragmentSwitch3}
                      checked={generateStateValueProp($state, [
                        "fragmentSwitch3",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentSwitch3
                      )}
                      disabled={true}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch3",
                          "checked"
                        ]).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"jajigaContainer"}
                    data-plasmic-override={overrides.jajigaContainer}
                    className={classNames(projectcss.all, sty.jajigaContainer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sOsAn)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__izbH2)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/jajigaWebp.webp",
                          fullWidth: 192,
                          fullHeight: 192,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sTviN
                        )}
                      >
                        {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                      </div>
                    </div>
                    <Switch
                      data-plasmic-name={"fragmentSwitch5"}
                      data-plasmic-override={overrides.fragmentSwitch5}
                      checked={generateStateValueProp($state, [
                        "fragmentSwitch5",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentSwitch5
                      )}
                      disabled={true}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch5",
                          "checked"
                        ]).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"mihmanshoContainer"}
                    data-plasmic-override={overrides.mihmanshoContainer}
                    className={classNames(
                      projectcss.all,
                      sty.mihmanshoContainer
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y53Rm)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__f5S6T)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/mihmanshoPng.png",
                          fullWidth: 140,
                          fullHeight: 140,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3IeOr
                        )}
                      >
                        {"\u0645\u06cc\u0647\u0645\u0627\u0646\u0634\u0648"}
                      </div>
                    </div>
                    <Switch
                      data-plasmic-name={"fragmentSwitch7"}
                      data-plasmic-override={overrides.fragmentSwitch7}
                      checked={generateStateValueProp($state, [
                        "fragmentSwitch7",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentSwitch7
                      )}
                      disabled={true}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch7",
                          "checked"
                        ]).apply(null, eventArgs);
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"homsaContainer"}
                    data-plasmic-override={overrides.homsaContainer}
                    className={classNames(projectcss.all, sty.homsaContainer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vlveQ)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__pNmP6)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/homsaWebp.webp",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vvIAe
                        )}
                      >
                        {"\u0647\u0648\u0645\u0633\u0627"}
                      </div>
                    </div>
                    <Switch
                      data-plasmic-name={"fragmentSwitch4"}
                      data-plasmic-override={overrides.fragmentSwitch4}
                      checked={generateStateValueProp($state, [
                        "fragmentSwitch4",
                        "checked"
                      ])}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentSwitch4
                      )}
                      disabled={true}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch4",
                          "checked"
                        ]).apply(null, eventArgs);
                      }}
                    />
                  </div>
                </div>
              </ApiRequest>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox__iMtD0)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oBat4
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FCFCFC" }}
                  >
                    {
                      "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645"
                    }
                  </span>
                </React.Fragment>
              </div>
            </div>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__mRhF4)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__lAbsi)}>
              <div
                data-plasmic-name={"desc"}
                data-plasmic-override={overrides.desc}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.desc
                )}
              >
                {
                  "\u00ab\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc\u00bb \u0628\u0647 \u0645\u0647\u0645\u0627\u0646 \u0627\u062c\u0627\u0632\u0647 \u0645\u06cc\u062f\u0647 \u06a9\u0647 \u0628\u062f\u0648\u0646 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062a\u0627\u06cc\u06cc\u062f \u0645\u06cc\u0632\u0628\u0627\u0646\u060c \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0631\u0648 \u0628\u0644\u0627\u0641\u0627\u0635\u0644\u0647 \u0631\u0632\u0631\u0648 \u06a9\u0646\u0647. \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0628\u0627\u0639\u062b \u0628\u06cc\u0634\u062a\u0631 \u0634\u062f\u0646 \u062a\u0639\u062f\u0627\u062f \u0631\u0632\u0631\u0648\u0647\u0627\u060c \u06a9\u0627\u0647\u0634 \u0632\u0645\u0627\u0646 \u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a\u200c\u0647\u0627 \u0648 \u0628\u0627\u0644\u0627\u062a\u0631 \u0631\u0641\u062a\u0646 \u062f\u0631 \u0646\u062a\u0627\u06cc\u062c \u062c\u0633\u062a\u062c\u0648\u06cc \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0622\u06af\u0647\u06cc \u0648\u06cc\u0644\u0627 \u0645\u06cc\u200c\u0634\u0647."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__x6LZx)} />

            <Embed
              className={classNames("__wab_instance", sty.embedHtml__mvy9S)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
            />

            <div
              data-plasmic-name={"returnButton"}
              data-plasmic-override={overrides.returnButton}
              className={classNames(projectcss.all, sty.returnButton, "fix")}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__cYq78,
                  "clickable"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9O4YN
                  )}
                >
                  {"\u0628\u0627\u0632\u06af\u0634\u062a "}
                </div>
              </div>
            </div>
            <NavbarRntFooter
              data-plasmic-name={"navbarRntFooter"}
              data-plasmic-override={overrides.navbarRntFooter}
              className={classNames("__wab_instance", sty.navbarRntFooter)}
              userType={(() => {
                try {
                  return (() => {
                    return null;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div className={classNames(projectcss.all, sty.freeBox__yXNd5)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "checkVpn",
    "vpnModal",
    "header",
    "sideBar2",
    "profile2",
    "topContainer",
    "topContainer2",
    "alertIcon",
    "alertText",
    "alertButton",
    "button",
    "mainSection",
    "properties",
    "selectProperty",
    "shabContainer",
    "shabSwitch",
    "otaghakContainer",
    "otaghakSwitch",
    "jabamaContainer",
    "fragmentSwitch3",
    "jajigaContainer",
    "fragmentSwitch5",
    "mihmanshoContainer",
    "fragmentSwitch7",
    "homsaContainer",
    "fragmentSwitch4",
    "desc",
    "sideEffect",
    "returnButton",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  apiRequest: ["apiRequest"],
  checkVpn: ["checkVpn"],
  vpnModal: ["vpnModal"],
  header: ["header", "sideBar2", "profile2"],
  sideBar2: ["sideBar2"],
  profile2: ["profile2"],
  topContainer: ["topContainer"],
  topContainer2: [
    "topContainer2",
    "alertIcon",
    "alertText",
    "alertButton",
    "button"
  ],
  alertIcon: ["alertIcon"],
  alertText: ["alertText"],
  alertButton: ["alertButton", "button"],
  button: ["button"],
  mainSection: [
    "mainSection",
    "properties",
    "selectProperty",
    "shabContainer",
    "shabSwitch",
    "otaghakContainer",
    "otaghakSwitch",
    "jabamaContainer",
    "fragmentSwitch3",
    "jajigaContainer",
    "fragmentSwitch5",
    "mihmanshoContainer",
    "fragmentSwitch7",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  properties: [
    "properties",
    "selectProperty",
    "shabContainer",
    "shabSwitch",
    "otaghakContainer",
    "otaghakSwitch",
    "jabamaContainer",
    "fragmentSwitch3",
    "jajigaContainer",
    "fragmentSwitch5",
    "mihmanshoContainer",
    "fragmentSwitch7",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  selectProperty: ["selectProperty"],
  shabContainer: ["shabContainer", "shabSwitch"],
  shabSwitch: ["shabSwitch"],
  otaghakContainer: ["otaghakContainer", "otaghakSwitch"],
  otaghakSwitch: ["otaghakSwitch"],
  jabamaContainer: ["jabamaContainer", "fragmentSwitch3"],
  fragmentSwitch3: ["fragmentSwitch3"],
  jajigaContainer: ["jajigaContainer", "fragmentSwitch5"],
  fragmentSwitch5: ["fragmentSwitch5"],
  mihmanshoContainer: ["mihmanshoContainer", "fragmentSwitch7"],
  fragmentSwitch7: ["fragmentSwitch7"],
  homsaContainer: ["homsaContainer", "fragmentSwitch4"],
  fragmentSwitch4: ["fragmentSwitch4"],
  desc: ["desc"],
  sideEffect: ["sideEffect"],
  returnButton: ["returnButton"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  checkVpn: typeof SideEffect;
  vpnModal: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile2: typeof ApiRequest;
  topContainer: "section";
  topContainer2: "section";
  alertIcon: "div";
  alertText: "div";
  alertButton: "div";
  button: "div";
  mainSection: "section";
  properties: typeof ApiRequest;
  selectProperty: typeof Select;
  shabContainer: "div";
  shabSwitch: typeof Switch;
  otaghakContainer: "div";
  otaghakSwitch: typeof Switch;
  jabamaContainer: "div";
  fragmentSwitch3: typeof Switch;
  jajigaContainer: "div";
  fragmentSwitch5: typeof Switch;
  mihmanshoContainer: "div";
  fragmentSwitch7: typeof Switch;
  homsaContainer: "div";
  fragmentSwitch4: typeof Switch;
  desc: "div";
  sideEffect: typeof SideEffect;
  returnButton: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestSearch__VariantsArgs;
    args?: PlasmicTestSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicTestSearch__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicTestSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestSearch__ArgProps,
          internalVariantPropNames: PlasmicTestSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestSearch";
  } else {
    func.displayName = `PlasmicTestSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicTestSearch = Object.assign(
  // Top-level PlasmicTestSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    checkVpn: makeNodeComponent("checkVpn"),
    vpnModal: makeNodeComponent("vpnModal"),
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile2: makeNodeComponent("profile2"),
    topContainer: makeNodeComponent("topContainer"),
    topContainer2: makeNodeComponent("topContainer2"),
    alertIcon: makeNodeComponent("alertIcon"),
    alertText: makeNodeComponent("alertText"),
    alertButton: makeNodeComponent("alertButton"),
    button: makeNodeComponent("button"),
    mainSection: makeNodeComponent("mainSection"),
    properties: makeNodeComponent("properties"),
    selectProperty: makeNodeComponent("selectProperty"),
    shabContainer: makeNodeComponent("shabContainer"),
    shabSwitch: makeNodeComponent("shabSwitch"),
    otaghakContainer: makeNodeComponent("otaghakContainer"),
    otaghakSwitch: makeNodeComponent("otaghakSwitch"),
    jabamaContainer: makeNodeComponent("jabamaContainer"),
    fragmentSwitch3: makeNodeComponent("fragmentSwitch3"),
    jajigaContainer: makeNodeComponent("jajigaContainer"),
    fragmentSwitch5: makeNodeComponent("fragmentSwitch5"),
    mihmanshoContainer: makeNodeComponent("mihmanshoContainer"),
    fragmentSwitch7: makeNodeComponent("fragmentSwitch7"),
    homsaContainer: makeNodeComponent("homsaContainer"),
    fragmentSwitch4: makeNodeComponent("fragmentSwitch4"),
    desc: makeNodeComponent("desc"),
    sideEffect: makeNodeComponent("sideEffect"),
    returnButton: makeNodeComponent("returnButton"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicTestSearch
    internalVariantProps: PlasmicTestSearch__VariantProps,
    internalArgProps: PlasmicTestSearch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestSearch;
/* prettier-ignore-end */
