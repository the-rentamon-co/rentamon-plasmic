/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: kZSAE7HA3zLq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput2 from "../../TextInput2"; // plasmic-import: MGm7xuldRCuA/component
import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicTestSearch.module.css"; // plasmic-import: kZSAE7HA3zLq/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon

createPlasmicElementProxy;

export type PlasmicTestSearch__VariantMembers = {};
export type PlasmicTestSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestSearch__VariantsArgs;
export const PlasmicTestSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicTestSearch__ArgsType = {};
type ArgPropType = keyof PlasmicTestSearch__ArgsType;
export const PlasmicTestSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicTestSearch__OverridesType = {
  root?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput2>;
  textInput?: Flex__<typeof TextInput>;
};

export interface DefaultTestSearchProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestSearch__RenderFunc(props: {
  variants: PlasmicTestSearch__VariantsArgs;
  args: PlasmicTestSearch__ArgsType;
  overrides: PlasmicTestSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "searchResults",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "isSearching",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const searchTimeoutRef = React.useRef<ReturnType<typeof setTimeout> | null>(null);
  
  // پاک کردن تایمر وقتی کامپوننت unmount می‌شود
  React.useEffect(() => {
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, []);
  
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
      <TextInput2
        data-plasmic-name={"textInput2"}
        data-plasmic-override={overrides.textInput2}
        className={classNames("__wab_instance", sty.textInput2)}
        inputMode={"search"}
        inputType={"search"}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["textInput2", "value"]).apply(
            null,
            eventArgs
          );
      
          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
      
          // پاک کردن تایمر قبلی
          if (searchTimeoutRef.current) {
            clearTimeout(searchTimeoutRef.current);
          }
      
          // ساخت تایمر جدید با 500ms فاصله
          searchTimeoutRef.current = setTimeout(() => {
            (async val => {
              const $steps = {};
              
              console.log("Searching for:", $state.textInput2.value);
              
              // تنظیم وضعیت جستجو
              $stateSet($state, ["isSearching"], true);
      
              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://gateway.rentamon.com/webhook/0c5061e8-5706-4dbb-a2c7-0f029bb481ad",
                        (() => {
                          try {
                            return {
                              q: $state.textInput2.value
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    console.log("Sending API request with params:", actionArgs.args[2]);
                    return $globalActions["Fragment.apiRequest"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                const result = await $steps["invokeGlobalAction"];
                console.log("API request completed", result);
                
                // ذخیره نتایج
                if (result && result.data) {
                  $stateSet($state, ["searchResults"], result.data);
                }
                
                // پایان وضعیت جستجو
                $stateSet($state, ["isSearching"], false);
              }
            }).apply(null, eventArgs);
          }, 500); // ← اینجا 500 میلی‌ثانیه تاخیر داریم
        }}
      />

          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
          />
          
          {/* نمایش وضعیت جستجو */}
          {generateStateValueProp($state, ["isSearching"]) && (
            <div style={{ padding: "10px", color: "#666" }}>
              در حال جستجو...
            </div>
          )}
          
          {/* نمایش نتایج جستجو */}
          {generateStateValueProp($state, ["searchResults"]) && 
           generateStateValueProp($state, ["searchResults"]).length > 0 && (
            <div style={{ padding: "10px" }}>
              <h3>نتایج جستجو:</h3>
              <pre style={{ background: "#f5f5f5", padding: "10px", borderRadius: "4px" }}>
                {JSON.stringify(generateStateValueProp($state, ["searchResults"]), null, 2)}
              </pre>
            </div>
          )}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textInput2", "textInput"],
  textInput2: ["textInput2"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput2: typeof TextInput2;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestSearch__VariantsArgs;
    args?: PlasmicTestSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestSearch__ArgProps,
          internalVariantPropNames: PlasmicTestSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestSearch";
  } else {
    func.displayName = `PlasmicTestSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicTestSearch = Object.assign(
  // Top-level PlasmicTestSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput2: makeNodeComponent("textInput2"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicTestSearch
    internalVariantProps: PlasmicTestSearch__VariantProps,
    internalArgProps: PlasmicTestSearch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestSearch;
/* prettier-ignore-end */
