/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: kZSAE7HA3zLq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicTestSearch.module.css"; // plasmic-import: kZSAE7HA3zLq/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicTestSearch__VariantMembers = {};
export type PlasmicTestSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestSearch__VariantsArgs;
export const PlasmicTestSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicTestSearch__ArgsType = {};
type ArgPropType = keyof PlasmicTestSearch__ArgsType;
export const PlasmicTestSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicTestSearch__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  checkVpn?: Flex__<typeof SideEffect>;
  vpnModal?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultTestSearchProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestSearch__RenderFunc(props: {
  variants: PlasmicTestSearch__VariantsArgs;
  args: PlasmicTestSearch__ArgsType;
  overrides: PlasmicTestSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isVpnOn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___1WkQu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w07Om
              )}
            >
              {
                "\u0628\u0648\u06cc \u06af\u0644 \u0645\u062d\u0645\u062f\u06cc\n\u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u062e\u0648\u0634 \u0622\u0645\u062f\u06cc"
              }
            </div>
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2QmW1
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fTkse
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["apiRequest"] = ref;
              }}
              url={"https://api-v2.rentamon.com/api/"}
            />
          </div>
          <SideEffect
            data-plasmic-name={"checkVpn"}
            data-plasmic-override={overrides.checkVpn}
            className={classNames("__wab_instance", sty.checkVpn)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          async function checkVPN() {
                            const res = await fetch("https://ipapi.co/json/");
                            const data = await res.json();
                            const country = data.country;
                            const org = data.org || "";
                            if (country !== "IR") {
                              $state.isVpnOn = true;
                              return "";
                            }
                            const datacenterKeywords = [
                              "Arvan",
                              "MihanWeb",
                              "Hetzner",
                              "OVH",
                              "Google",
                              "AWS"
                            ];

                            if (datacenterKeywords.some(k => org.includes(k))) {
                              $state.isVpnOn = true;
                              return "";
                            }
                            $state.isVpnOn = false;
                            return "";
                          }
                          return await checkVPN();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <div
            data-plasmic-name={"vpnModal"}
            data-plasmic-override={overrides.vpnModal}
            className={classNames(
              projectcss.all,
              sty.vpnModal,
              (() => {
                try {
                  return $state.isVpnOn == true
                    ? "modal-overlay open"
                    : "modal-overlay";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___3MCwL,
                (() => {
                  try {
                    return $state.isVpnOn == true
                      ? "modal-content open"
                      : "modal-content open";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox__eZlvd)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rt61I)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsVpnOn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isVpnOn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsVpnOn"] != null &&
                      typeof $steps["updateIsVpnOn"] === "object" &&
                      typeof $steps["updateIsVpnOn"].then === "function"
                    ) {
                      $steps["updateIsVpnOn"] = await $steps["updateIsVpnOn"];
                    }
                  }}
                  src={{
                    src: "/plasmic/website_starter/images/image166.svg",
                    fullWidth: 18,
                    fullHeight: 18,
                    aspectRatio: undefined
                  }}
                />
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Sbos
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    "\u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646 \u0631\u0648\u0634\u0646\u0647!"
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "شواهد و قرائن نشون می‌ده شما با وی‌پی‌ان اومدی\nلطفا هر چه سریع‌تر خاموشش کن";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
              ) : null}
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__rpI9)}
                displayHeight={"191px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? {
                        src: "/plasmic/website_starter/images/vpnIconSvg.svg",
                        fullWidth: 800,
                        fullHeight: 800,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/website_starter/images/vpnIconSvg.svg",
                        fullWidth: 800,
                        fullHeight: 800,
                        aspectRatio: undefined
                      }
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lEVw
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile") ? (
                  "\u0628\u0631\u0627\u06cc \u0633\u0631\u0639\u062a \u0628\u0627\u0644\u0627\u062a\u0631 \u0648 \u0639\u0645\u0644\u06a9\u0631\u062f \u0628\u0647\u062a\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u060c\r\n\u0644\u0637\u0641\u0627 \u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646\u062a \u0631\u0648 \u062e\u0627\u0645\u0648\u0634 \u06a9\u0646."
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return "شواهد و قرائن نشون می‌ده شما با وی‌پی‌ان اومدی\nلطفا هر چه سریع‌تر خاموشش کن";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___76C3)}>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsVpnOn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isVpnOn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsVpnOn"] != null &&
                      typeof $steps["updateIsVpnOn"] === "object" &&
                      typeof $steps["updateIsVpnOn"].then === "function"
                    ) {
                      $steps["updateIsVpnOn"] = await $steps["updateIsVpnOn"];
                    }
                  }}
                >
                  {"\u0628\u0627\u0634\u0647"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "checkVpn", "vpnModal", "button"],
  apiRequest: ["apiRequest"],
  checkVpn: ["checkVpn"],
  vpnModal: ["vpnModal", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  checkVpn: typeof SideEffect;
  vpnModal: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestSearch__VariantsArgs;
    args?: PlasmicTestSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestSearch__ArgProps,
          internalVariantPropNames: PlasmicTestSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestSearch";
  } else {
    func.displayName = `PlasmicTestSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicTestSearch = Object.assign(
  // Top-level PlasmicTestSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    checkVpn: makeNodeComponent("checkVpn"),
    vpnModal: makeNodeComponent("vpnModal"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicTestSearch
    internalVariantProps: PlasmicTestSearch__VariantProps,
    internalArgProps: PlasmicTestSearch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestSearch;
/* prettier-ignore-end */
