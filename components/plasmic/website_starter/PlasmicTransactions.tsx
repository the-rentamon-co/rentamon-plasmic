/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: N1STB8Bv46WD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicTransactions.module.css"; // plasmic-import: N1STB8Bv46WD/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicTransactions__VariantMembers = {};
export type PlasmicTransactions__VariantsArgs = {};
type VariantPropType = keyof PlasmicTransactions__VariantsArgs;
export const PlasmicTransactions__VariantProps = new Array<VariantPropType>();

export type PlasmicTransactions__ArgsType = {};
type ArgPropType = keyof PlasmicTransactions__ArgsType;
export const PlasmicTransactions__ArgProps = new Array<ArgPropType>();

export type PlasmicTransactions__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile?: Flex__<typeof ApiRequest>;
  tableHeader?: Flex__<"div">;
  item?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  apiRequest?: Flex__<typeof ApiRequest>;
  returnButton?: Flex__<"div">;
  withdraw?: Flex__<typeof AntdModal>;
  giftEmoji?: Flex__<"div">;
  comment?: Flex__<"div">;
  deposit?: Flex__<typeof AntdModal>;
  comment2?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  withdraw2?: Flex__<"div">;
  title?: Flex__<"div">;
  date?: Flex__<"div">;
  properties?: Flex__<"div">;
  totalAmount?: Flex__<"div">;
  reserveCode?: Flex__<"div">;
  commission?: Flex__<"div">;
  title2?: Flex__<"div">;
  feature?: Flex__<"div">;
  sum?: Flex__<"div">;
  comment3?: Flex__<"div">;
  deposit2?: Flex__<"div">;
  title3?: Flex__<"div">;
  date2?: Flex__<"div">;
  properties2?: Flex__<"div">;
  totalAmount2?: Flex__<"div">;
  comment4?: Flex__<"div">;
};

export interface DefaultTransactionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransactions__RenderFunc(props: {
  variants: PlasmicTransactions__VariantsArgs;
  args: PlasmicTransactions__ArgsType;
  overrides: PlasmicTransactions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "withdraw.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : hasVariant(globalVariants, "screen", "tablet")
                ? false
                : false
      },
      {
        path: "deposit.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : hasVariant(globalVariants, "screen", "tablet")
                ? false
                : false
      },
      {
        path: "modalData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "showDetails",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicTransactions.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicTransactions.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicTransactions.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__sDWy4)}>
              <div className={classNames(projectcss.all, sty.freeBox__jmasE)}>
                <SideBar2
                  data-plasmic-name={"sideBar2"}
                  data-plasmic-override={overrides.sideBar2}
                  className={classNames("__wab_instance", sty.sideBar2)}
                  isOpen={false}
                  userData={(() => {
                    try {
                      return $state.profile.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__pfauu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gX6Ao,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "fadeinf"
                      : "fadeinf"
                  )}
                >
                  {
                    "\u06af\u0632\u0627\u0631\u0634 \u0645\u0635\u0631\u0641 \u0627\u0639\u062a\u0628\u0627\u0631"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vWmj6)}>
                <ApiRequest
                  data-plasmic-name={"profile"}
                  data-plasmic-override={overrides.profile}
                  children={null}
                  className={classNames("__wab_instance", sty.profile)}
                  errorDisplay={null}
                  loadingDisplay={null}
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "profile",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "profile",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "profile",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["profile"] = ref;
                  }}
                  url={
                    "https://api-v2.rentamon.com/api/user_info?property_id=1"
                  }
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__prOxi)}>
              <div
                data-plasmic-name={"tableHeader"}
                data-plasmic-override={overrides.tableHeader}
                className={classNames(
                  projectcss.all,
                  sty.tableHeader,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "fadeinf"
                    : "fadeinf"
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fk6Iq)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yUNg1)}
                    displayHeight={"15px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image38.svg",
                      fullWidth: 14,
                      fullHeight: 12,
                      aspectRatio: 1.166667
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dqFdj
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0639\u0646\u0648\u0627\u0646"
                      : hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0639\u0646\u0648\u0627\u0646"
                        : hasVariant(globalVariants, "screen", "tablet")
                          ? "\u0639\u0646\u0648\u0627\u0646"
                          : "\u0639\u0646\u0648\u0627\u0646"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__o5AF)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e0KU
                    )}
                  >
                    {"\u062a\u0627\u0631\u06cc\u062e"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tnAne)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yuf6G
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {"\u0645\u0628\u0644\u063a "}
                        </React.Fragment>
                        {
                          <sup
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.sup__a5ZK7
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <sub
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.sub__niRhG
                                  )}
                                >
                                  {"(\u062a\u0648\u0645\u0627\u0646)"}
                                </sub>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </sup>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "mobile") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {"\u0645\u0628\u0644\u063a "}
                        </React.Fragment>
                        {
                          <sup
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.sup__xljuz
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <sub
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.sub__yaPeF
                                  )}
                                >
                                  {"(\u062a\u0648\u0645\u0627\u0646)"}
                                </sub>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </sup>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : (
                      "\u0645\u0628\u0644\u063a (\u062a\u0648\u0645\u0627\u0646)"
                    )}
                  </div>
                </div>
              </div>
              {(() => {
                try {
                  return (
                    // $state.apiRequest.data[0].reason !=null
                    true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
                ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        data-plasmic-name={"item"}
                        data-plasmic-override={overrides.item}
                        className={classNames(
                          projectcss.all,
                          sty.item,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "clickable fadeinf"
                            : "clickable fadein"
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStateVariable2"] = true
                            ? (() => {
                                const actionArgs = {
                                  operation: 0,
                                  value: (() => {
                                    if (
                                      $state.apiRequest.data[currentIndex]
                                        .is_reserved == true
                                    ) {
                                      return ($state.modalData = {
                                        date: $state.apiRequest.data[
                                          currentIndex
                                        ].transaction_created_at,
                                        total_commition:
                                          $state.apiRequest.data[
                                            currentIndex
                                          ].totalCommission.toLocaleString(
                                            "fa"
                                          ),
                                        property_name:
                                          $state.apiRequest.data[currentIndex]
                                            .property_name,
                                        reserved_amount:
                                          $state.apiRequest.data[
                                            currentIndex
                                          ].total_amount.toLocaleString("fa"),
                                        feature:
                                          $state.apiRequest.data[currentIndex]
                                            .features,
                                        is_reserved:
                                          $state.apiRequest.data[currentIndex]
                                            .is_reserved,
                                        comment:
                                          $state.apiRequest.data[currentIndex]
                                            .comment,
                                        booking_id: currentItem.booking_id,
                                        transaction_type:
                                          currentItem.transaction_type
                                      });
                                    } else {
                                      return ($state.modalData = {
                                        date: $state.apiRequest.data[
                                          currentIndex
                                        ].transaction_created_at,
                                        reserved_amount:
                                          $state.apiRequest.data[
                                            currentIndex
                                          ].total_amount.toLocaleString("fa"),
                                        transaction_cause:
                                          $state.apiRequest.data[currentIndex]
                                            .transaction_cause,
                                        is_reserved:
                                          $state.apiRequest.data[currentIndex]
                                            .is_reserved,
                                        comment:
                                          $state.apiRequest.data[currentIndex]
                                            .comment,
                                        transaction_type:
                                          currentItem.transaction_type
                                      });
                                    }
                                  })()
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateVariable2"] != null &&
                            typeof $steps["updateStateVariable2"] ===
                              "object" &&
                            typeof $steps["updateStateVariable2"].then ===
                              "function"
                          ) {
                            $steps["updateStateVariable2"] =
                              await $steps["updateStateVariable2"];
                          }

                          $steps["updateStateVariable"] = true
                            ? (() => {
                                const actionArgs = {
                                  operation: 0,
                                  value:
                                    // if ($state.apiRequest.data[currentIndex].transaction_type == "withdraw") {
                                    //   return $state.withdraw.open = true
                                    // } else {
                                    //   return $state.showDetails = true
                                    // }

                                    ($state.showDetails = true)
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateVariable"] != null &&
                            typeof $steps["updateStateVariable"] === "object" &&
                            typeof $steps["updateStateVariable"].then ===
                              "function"
                          ) {
                            $steps["updateStateVariable"] =
                              await $steps["updateStateVariable"];
                          }
                        }}
                      >
                        {(() => {
                          try {
                            return (() => {
                              if (currentItem.features == null) {
                                return false;
                              }
                              return currentItem.features.some(
                                feature => feature.is_free
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xAaK7
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___0GJUp)}
                              displayHeight={"23px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image147.svg",
                                fullWidth: 18,
                                fullHeight: 20,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l4Nm
                          )}
                        >
                          {(() => {
                            try {
                              return (
                                $state.apiRequest.data[currentIndex]
                                  .transaction_type == "deposit"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__jklRg)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "13px"
                                  : "15px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image38.svg",
                                fullWidth: 14,
                                fullHeight: 12,
                                aspectRatio: 1.166667
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $state.apiRequest.data[currentIndex]
                                  .transaction_type == "withdraw"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__uxrTx)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "13px"
                                  : "15px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image39.svg",
                                fullWidth: 14,
                                fullHeight: 12,
                                aspectRatio: 1.166667
                              }}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kv54W
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.apiRequest.data[currentIndex]
                                    .transaction_type == "withdraw"
                                    ? "برداشت"
                                    : $state.apiRequest.data[currentIndex]
                                        .transaction_cause;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return " ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__njSro
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tYydp
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function formatLondonTimeToTehranPersian(
                                      dateString
                                    ) {
                                      const date = new Date(dateString);
                                      const datePart = date.toLocaleDateString(
                                        "fa-IR",
                                        {
                                          timeZone: "Asia/Tehran",
                                          year: "numeric",
                                          month: "2-digit",
                                          day: "2-digit"
                                        }
                                      );
                                      const timePart = date.toLocaleTimeString(
                                        "fa-IR",
                                        {
                                          timeZone: "Asia/Tehran",
                                          hour12: false,
                                          hour: "2-digit",
                                          minute: "2-digit"
                                        }
                                      );
                                      return `${timePart} - ${datePart}`;
                                    }
                                    const inputTime =
                                      $state.apiRequest.data[currentIndex]
                                        .transaction_created_at;
                                    const outputTime =
                                      formatLondonTimeToTehranPersian(
                                        inputTime
                                      );
                                    return outputTime;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06f1\u06f4\u06f0\u06f3/\u06f0\u06f9/\u06f2\u06f5";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nyRbP
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jQXc
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const currentItem =
                                      $state.apiRequest.data[currentIndex];
                                    if (currentItem.is_reserved) {
                                      const sumOfCommissions =
                                        currentItem.features.reduce(
                                          (total, feature) => {
                                            if (feature.is_free) {
                                              return total;
                                            }
                                            const commission =
                                              Number(
                                                feature.commission_amount
                                              ) || 0;
                                            return total + commission;
                                          },
                                          0
                                        );
                                      currentItem.totalCommission = Math.floor(
                                        sumOfCommissions / 10
                                      );
                                      return currentItem.totalCommission.toLocaleString(
                                        "fa"
                                      );
                                    } else {
                                      return Math.floor(
                                        Number(currentItem.total_amount) || 0
                                      ).toLocaleString("fa");
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06f2\u06f0\u06f0/\u06f0\u06f0\u06f0";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    );
                  })
                : null}
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2) {
                              return parts.pop().split(";").shift();
                            }
                          }
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "وضعیت توکن دسترسی: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            console.log(
                              "توکن دسترسی یافت نشد. در حال هدایت به صفحه ورود..."
                            );
                            return (window.location.href =
                              "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/transactions/");
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            !document.cookie.includes("transactions_notify")
                          ) {
                            return ($state.showDetails = true);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />

          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___05ZQ
                )}
              >
                {
                  "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637"
                }
              </div>
            }
            loadingDisplay={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__eb7Hm)}
                displayHeight={"76px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={
                  "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                }
              />
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={"https://gateway.rentamon.com/webhook/get_transactions"}
          >
            {(() => {
              try {
                return $state.apiRequest.data[0].staus == "false";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6V8Xa,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "fadein"
                    : "fadein"
                )}
              >
                {
                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
                }
              </div>
            ) : null}
          </ApiRequest>
          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div className={classNames(projectcss.all, sty.freeBox__du7Qu)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__woCao
                )}
              >
                {
                  "\u0645\u0648\u062c\u0648\u062f\u06cc: \u06f5\u06f5\u06f0/\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                }
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__i6Ki,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gpLd3
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <AntdModal
            data-plasmic-name={"withdraw"}
            data-plasmic-override={overrides.withdraw}
            className={classNames("__wab_instance", sty.withdraw)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_X5_hvOZjO8NQ"]]: hasVariant(
                globalVariants,
                "screen",
                "smallMobile"
              )
            })}
            modalScopeClassName={sty["withdraw__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["withdraw", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["withdraw", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uuoV
                )}
              >
                {"\u0628\u0631\u062f\u0627\u0634\u062a"}
              </div>
            }
            trigger={null}
            width={"450"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tfDx8)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hVyIc
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__frq2E
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        function formatLondonTimeToTehranPersian(dateString) {
                          const date = new Date(dateString);
                          const datePart = date.toLocaleDateString("fa-IR", {
                            timeZone: "Asia/Tehran",
                            year: "numeric",
                            month: "2-digit",
                            day: "2-digit"
                          });
                          const timePart = date.toLocaleTimeString("fa-IR", {
                            timeZone: "Asia/Tehran",
                            hour12: false,
                            hour: "2-digit",
                            minute: "2-digit"
                          });
                          return `${timePart} - ${datePart}`;
                        }
                        const inputTime = $state.modalData.date;
                        const outputTime =
                          formatLondonTimeToTehranPersian(inputTime);
                        return outputTime;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u06f1\u06f4\u06f0\u06f3/\u06f0\u06f4/\u06f1\u06f2  -  \u06f1\u06f2:\u06f3\u06f3";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yqD1W)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i0Rh5
                )}
              >
                {"\u0628\u0631\u062f\u0627\u0634\u062a:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qZiGr
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        if ($state.modalData.is_reserved == true) {
                          return $state.modalData.total_commition + " تومان";
                        } else {
                          return $state.modalData.reserved_amount;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " \u06f2\u06f2\u06f5/\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            {(() => {
              try {
                return $state.modalData.is_reserved == true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__fN5N3)}>
                <div className={classNames(projectcss.all, sty.freeBox__jejNk)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e0thR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xIgzj
                      )}
                    >
                      {"\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xfyuQ
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData.property_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u06cc\u06af\u0648\u0631\u06cc\u0627 \u0633\u0627\u062d\u0644\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Ttq6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pVwub
                      )}
                    >
                      {"\u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m5E7S
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData.reserved_amount + " تومان";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u06f9/\u06f0\u06f0\u06f0/\u06f0\u06f0\u06f0";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zVbvm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox___744G)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iTwrt
                        )}
                      >
                        {
                          "\u062c\u0645\u0639 \u06a9\u0627\u0631\u0645\u0632\u062f:"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6A576
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6974B
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const features = $state.modalData.feature;
                                const sumOfCommissions = features.reduce(
                                  (total, feature) => {
                                    if (feature.is_free) {
                                      return total;
                                    }
                                    const commission =
                                      Number(feature.commission_rate) || 0;
                                    return total + commission;
                                  },
                                  0
                                );
                                $state.modalData.feature.totalCommission =
                                  sumOfCommissions;
                                return (
                                  "%" + sumOfCommissions.toLocaleString("fa")
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06f2.\u06f5 \u066a";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.modalData.feature;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mVjGv
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mzNeA
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " - " +
                                  (currentItem.feature_name == "auto_sync"
                                    ? "بروز رسانی خودکار"
                                    : "رزرو هوشمند")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "- \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646 ";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return currentItem.is_free;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"giftEmoji"}
                            data-plasmic-override={overrides.giftEmoji}
                            className={classNames(
                              projectcss.all,
                              sty.giftEmoji
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__dig8)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? {
                                      src: "/plasmic/website_starter/images/image147.svg",
                                      fullWidth: 18,
                                      fullHeight: 20,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: "/plasmic/website_starter/images/image147.svg",
                                      fullWidth: 18,
                                      fullHeight: 20,
                                      aspectRatio: undefined
                                    }
                              }
                            />
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Ijce
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.is_free;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yL5Bl
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "smallMobile"
                              )
                                ? "\u06f0 %"
                                : hasVariant(globalVariants, "screen", "mobile")
                                  ? "\u06f0 %"
                                  : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "tablet"
                                      )
                                    ? "\u06f0 %"
                                    : "\u06f0 %"}
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return currentItem.is_free;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2J9Y
                              )}
                              style={{
                                "text-decoration-line": "line-through",
                                "text-decoration-color": "red",
                                "text-decoration-thickness": "1.5px"
                              }}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "%" +
                                      currentItem.commission_rate.toLocaleString(
                                        "fa"
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0 \u066a";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return currentItem.is_free == false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__feifQ
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "%" +
                                      currentItem.commission_rate.toLocaleString(
                                        "fa"
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06f1 \u066a";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            ) : null}
            <div
              data-plasmic-name={"comment"}
              data-plasmic-override={overrides.comment}
              className={classNames(projectcss.all, sty.comment)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___5YFh)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cpYxA
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.modalData.comment;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a: ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__dve9A)}
              onClick={async event => {
                const $steps = {};

                $steps["goToقوانینرنتامون"] = true
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "/\u0642\u0648\u0627\u0646\u06cc\u0646-\u0631\u0646\u062a\u0627\u0645\u0648\u0646\n"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToقوانینرنتامون"] != null &&
                  typeof $steps["goToقوانینرنتامون"] === "object" &&
                  typeof $steps["goToقوانینرنتامون"].then === "function"
                ) {
                  $steps["goToقوانینرنتامون"] =
                    await $steps["goToقوانینرنتامون"];
                }
              }}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___7GKEv)}
                displayHeight={"14px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image84.svg",
                  fullWidth: 16,
                  fullHeight: 15,
                  aspectRatio: 1.066667
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fjPbP
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToTermsOfUse"] = true
                    ? (() => {
                        const actionArgs = { destination: `/terms-of-use` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToTermsOfUse"] != null &&
                    typeof $steps["goToTermsOfUse"] === "object" &&
                    typeof $steps["goToTermsOfUse"].then === "function"
                  ) {
                    $steps["goToTermsOfUse"] = await $steps["goToTermsOfUse"];
                  }
                }}
              >
                {
                  "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0645\u0627\u0644\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nqsCd)}>
              <Button
                className={classNames("__wab_instance", sty.button__clK7)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateWithdrawOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["withdraw", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateWithdrawOpen"] != null &&
                    typeof $steps["updateWithdrawOpen"] === "object" &&
                    typeof $steps["updateWithdrawOpen"].then === "function"
                  ) {
                    $steps["updateWithdrawOpen"] =
                      await $steps["updateWithdrawOpen"];
                  }
                }}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a"}
              </Button>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"deposit"}
            data-plasmic-override={overrides.deposit}
            className={classNames("__wab_instance", sty.deposit)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            hideFooter={true}
            modalScopeClassName={sty["deposit__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["deposit", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["deposit", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zctZd
                )}
              >
                {"\u0648\u0627\u0631\u06cc\u0632"}
              </div>
            }
            trigger={null}
            width={"450"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__w4W8G)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3BRyM
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dlXrR
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        function formatLondonTimeToTehranPersian(dateString) {
                          const date = new Date(dateString);
                          const datePart = date.toLocaleDateString("fa-IR", {
                            timeZone: "Asia/Tehran",
                            year: "numeric",
                            month: "2-digit",
                            day: "2-digit"
                          });
                          const timePart = date.toLocaleTimeString("fa-IR", {
                            timeZone: "Asia/Tehran",
                            hour12: false,
                            hour: "2-digit",
                            minute: "2-digit"
                          });
                          return `${timePart} - ${datePart}`;
                        }
                        const inputTime = $state.modalData.date;
                        const outputTime =
                          formatLondonTimeToTehranPersian(inputTime);
                        return outputTime;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u06f1\u06f4\u06f0\u06f3/\u06f0\u06f4/\u06f1\u06f2  -  \u06f1\u06f2:\u06f3\u06f3";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pqnZc)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__beO5F
                )}
              >
                {"\u0648\u0627\u0631\u06cc\u0632:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fj6Tl
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.modalData.reserved_amount + " تومان";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " \u06f2\u06f2\u06f5/\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__me8Qa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__doo8C
                )}
              >
                {"\u0639\u0646\u0648\u0627\u0646:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lVNwL
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.modalData.transaction_cause;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return $state.modalData.comment !== null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.modalData.comment !== null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div
                data-plasmic-name={"comment2"}
                data-plasmic-override={overrides.comment2}
                className={classNames(projectcss.all, sty.comment2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__g3LRp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h9Qe
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "توضیحات: " + $state.modalData.comment;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a: ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__t01L4)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___5ZlpU)}
                displayHeight={"14px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image84.svg",
                  fullWidth: 16,
                  fullHeight: 15,
                  aspectRatio: 1.066667
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__riJhy
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToTermsOfUse"] = true
                    ? (() => {
                        const actionArgs = { destination: `/terms-of-use` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToTermsOfUse"] != null &&
                    typeof $steps["goToTermsOfUse"] === "object" &&
                    typeof $steps["goToTermsOfUse"].then === "function"
                  ) {
                    $steps["goToTermsOfUse"] = await $steps["goToTermsOfUse"];
                  }
                }}
              >
                {
                  "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u0645\u0627\u0644\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ySiur)}>
              <Button
                className={classNames("__wab_instance", sty.button__axw4)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDepositOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["deposit", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDepositOpen"] != null &&
                    typeof $steps["updateDepositOpen"] === "object" &&
                    typeof $steps["updateDepositOpen"].then === "function"
                  ) {
                    $steps["updateDepositOpen"] =
                      await $steps["updateDepositOpen"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kXffx
                  )}
                >
                  {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                </div>
              </Button>
            </div>
          </AntdModal>
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            userType={(() => {
              try {
                return (() => {
                  return null;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <ClarityRntComponent
            data-plasmic-name={"clarityRntComponent"}
            data-plasmic-override={overrides.clarityRntComponent}
            className={classNames("__wab_instance", sty.clarityRntComponent)}
          />

          <FaviconRntComponent
            data-plasmic-name={"faviconRntComponent"}
            data-plasmic-override={overrides.faviconRntComponent}
            className={classNames("__wab_instance", sty.faviconRntComponent)}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__soTXc,
              (() => {
                try {
                  return (() => {
                    if ($state.showDetails == true) {
                      return "modal-overlay open";
                    }
                    return "modal-overlay";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          >
            <div
              data-plasmic-name={"withdraw2"}
              data-plasmic-override={overrides.withdraw2}
              className={classNames(
                projectcss.all,
                sty.withdraw2,
                (() => {
                  try {
                    return $state.showDetails &&
                      $state.modalData.transaction_type == "withdraw"
                      ? "modal-content open"
                      : "modal-content";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bqRzj)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__mVg1B)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateShowDetails"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showDetails"]
                              },
                              operation: 0,
                              value: ($state.showDetails = false)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShowDetails"] != null &&
                        typeof $steps["updateShowDetails"] === "object" &&
                        typeof $steps["updateShowDetails"].then === "function"
                      ) {
                        $steps["updateShowDetails"] =
                          await $steps["updateShowDetails"];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image166.svg",
                      fullWidth: 18,
                      fullHeight: 18,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rOwmd)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gzRXd
                    )}
                  >
                    {"\u0628\u0631\u062f\u0627\u0634\u062a"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__l8Dbt)}
                    displayHeight={"15px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image176.svg",
                      fullWidth: 14,
                      fullHeight: 12,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"date"}
                data-plasmic-override={overrides.date}
                className={classNames(projectcss.all, sty.date)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__uFEj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b6OdK
                    )}
                  >
                    {
                      "\u062a\u0627\u0631\u06cc\u062e \u062a\u0631\u0627\u06a9\u0646\u0634"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kDgqy)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bvrN
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const persianMonths = [
                              "فروردین",
                              "اردیبهشت",
                              "خرداد",
                              "تیر",
                              "مرداد",
                              "شهریور",
                              "مهر",
                              "آبان",
                              "آذر",
                              "دی",
                              "بهمن",
                              "اسفند"
                            ];

                            const persianWeekdays = [
                              "یک‌شنبه",
                              "دوشنبه",
                              "سه‌شنبه",
                              "چهارشنبه",
                              "پنج‌شنبه",
                              "جمعه",
                              "شنبه"
                            ];

                            function toPersianDigits(input) {
                              const persianDigits = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              return input
                                .toString()
                                .replace(/\d/g, d => persianDigits[d]);
                            }
                            function toJalali(gYear, gMonth, gDay) {
                              const gDaysInMonth = [
                                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                              ];

                              const jDaysInMonth = [
                                31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                              ];

                              let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                              let gm = gMonth - 1;
                              let gd = gDay - 1;
                              let gDayNo =
                                365 * gy +
                                Math.floor((gy + 3) / 4) -
                                Math.floor((gy + 99) / 100) +
                                Math.floor((gy + 399) / 400);
                              for (let i = 0; i < gm; ++i)
                                gDayNo += gDaysInMonth[i];
                              gDayNo += gd;
                              let jDayNo = gDayNo - (gYear >= 1600 ? 79 : 0);
                              let jNp = Math.floor(jDayNo / 12053);
                              jDayNo %= 12053;
                              let jYear =
                                979 + 33 * jNp + 4 * Math.floor(jDayNo / 1461);
                              jDayNo %= 1461;
                              if (jDayNo >= 366) {
                                jYear += Math.floor((jDayNo - 1) / 365);
                                jDayNo = (jDayNo - 1) % 365;
                              }
                              let jMonth;
                              for (
                                jMonth = 0;
                                jMonth < 11 && jDayNo >= jDaysInMonth[jMonth];
                                ++jMonth
                              )
                                jDayNo -= jDaysInMonth[jMonth];
                              let jDay = jDayNo + 1;
                              return {
                                jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                jm: jMonth + 1,
                                jd: jDay
                              };
                            }
                            function formatLondonTimeToTehranPersian(
                              dateString
                            ) {
                              const date = new Date(dateString);
                              const timePart = date.toLocaleTimeString(
                                "fa-IR",
                                {
                                  timeZone: "Asia/Tehran",
                                  hour12: false,
                                  hour: "2-digit",
                                  minute: "2-digit"
                                }
                              );
                              const tehranDate = new Date(
                                date.toLocaleString("en-US", {
                                  timeZone: "Asia/Tehran"
                                })
                              );
                              const gYear = tehranDate.getFullYear();
                              const gMonth = tehranDate.getMonth() + 1;
                              const gDay = tehranDate.getDate();
                              const weekdayIndex = tehranDate.getDay();
                              const { jm, jd } = toJalali(gYear, gMonth, gDay);
                              const weekday = persianWeekdays[weekdayIndex];
                              const monthName = persianMonths[jm - 1];
                              return `${timePart} - ${weekday} ${toPersianDigits(jd)} ${monthName}`;
                            }
                            const inputTime = $state.modalData.date;
                            const outputTime =
                              formatLondonTimeToTehranPersian(inputTime);
                            return outputTime;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ujSyz)}>
                <div
                  data-plasmic-name={"properties"}
                  data-plasmic-override={overrides.properties}
                  className={classNames(projectcss.all, sty.properties)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ab711)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ws6Ey
                      )}
                    >
                      {"\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oKk2K)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aj3T
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData.property_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___3SsPf)}>
                <div
                  data-plasmic-name={"totalAmount"}
                  data-plasmic-override={overrides.totalAmount}
                  className={classNames(projectcss.all, sty.totalAmount)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dg3NX)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0YUa1
                      )}
                    >
                      {"\u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__necMc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hPr6A
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData.reserved_amount + " تومان";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ntJma)}>
                <div
                  data-plasmic-name={"reserveCode"}
                  data-plasmic-override={overrides.reserveCode}
                  className={classNames(projectcss.all, sty.reserveCode)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                let result = "";
                                const bookingId = $state.modalData.booking_id;
                                return window.open(
                                  `https://rentamon.com/bookings/${bookingId}`,
                                  "_blank"
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7TiX)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dxj9F
                      )}
                    >
                      {"\u06a9\u062f \u0631\u0632\u0631\u0648"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fbZuj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zZqaz
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData.booking_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cnMt2)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image174.svg",
                              fullWidth: 14,
                              fullHeight: 14,
                              aspectRatio: undefined
                            }
                          : {
                              src: "/plasmic/website_starter/images/image174.svg",
                              fullWidth: 14,
                              fullHeight: 14,
                              aspectRatio: undefined
                            }
                      }
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"commission"}
                data-plasmic-override={overrides.commission}
                className={classNames(projectcss.all, sty.commission)}
              >
                <div
                  data-plasmic-name={"title2"}
                  data-plasmic-override={overrides.title2}
                  className={classNames(projectcss.all, sty.title2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ebvQ9
                    )}
                  >
                    {
                      "\u06a9\u0627\u0631\u0645\u0632\u062f \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                    }
                  </div>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.modalData.feature;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"feature"}
                      data-plasmic-override={overrides.feature}
                      className={classNames(projectcss.all, sty.feature)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yktVa
                        )}
                        style={(() => {
                          try {
                            return (() => {
                              if (currentItem.is_free == true) {
                                return {
                                  "text-decoration-line": "line-through",
                                  "text-decoration-color": "red",
                                  "text-decoration-thickness": "1.5px"
                                };
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        {hasVariant(globalVariants, "screen", "mobile") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  let a = currentItem.commission_amount / 10;
                                  return a.toLocaleString("fa") + " تومان";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06f1\u06f2\u06f0/\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  let a = currentItem.commission_amount / 10;
                                  return a.toLocaleString("fa") + " تومان";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06f1\u06f2\u06f0/\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h09EG
                        )}
                        style={(() => {
                          try {
                            return (() => {
                              if (currentItem.is_free == true) {
                                return {
                                  "text-decoration-line": "line-through",
                                  "text-decoration-color": "red",
                                  "text-decoration-thickness": "1.5px"
                                };
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "%" +
                                currentItem.commission_rate.toLocaleString("fa")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.freeBox__pW9)}
                      >
                        {(() => {
                          try {
                            return currentItem.is_free;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__a7Nc4)}
                            displayHeight={"24px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image175.svg",
                              fullWidth: 16,
                              fullHeight: 17,
                              aspectRatio: undefined
                            }}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jd6Yw
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                " - " +
                                (currentItem.feature_name == "auto_sync"
                                  ? "بروز رسانی خودکار"
                                  : "رزرو هوشمند")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  );
                })}
                <div
                  data-plasmic-name={"sum"}
                  data-plasmic-override={overrides.sum}
                  className={classNames(projectcss.all, sty.sum)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eoTv
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totalCommission = features.reduce(
                                (sum, item) => {
                                  return sum + (item.commission_amount || 0);
                                },
                                0
                              );
                              let total = totalCommission / 10;
                              return total.toLocaleString("fa") + " تومان";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "mobile") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totalCommission = features.reduce(
                                (sum, item) => {
                                  if (!item.is_free) {
                                    return sum + (item.commission_amount || 0);
                                  }
                                  return sum;
                                },
                                0
                              );
                              let total = totalCommission / 10;
                              return total.toLocaleString("fa") + " تومان";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "tablet") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totalCommission = features.reduce(
                                (sum, item) => {
                                  return sum + (item.commission_amount || 0);
                                },
                                0
                              );
                              let total = totalCommission / 10;
                              return total.toLocaleString("fa") + " تومان";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totalCommission = features.reduce(
                                (sum, item) => {
                                  if (!item.is_free) {
                                    return sum + (item.commission_amount || 0);
                                  }
                                  return sum;
                                },
                                0
                              );
                              let total = totalCommission / 10;
                              return total.toLocaleString("fa") + " تومان";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nopq8
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totals = features.reduce(
                                (acc, item) => {
                                  acc.amount += item.commission_amount || 0;
                                  acc.rate += item.commission_rate || 0;
                                  return acc;
                                },
                                {
                                  amount: 0,
                                  rate: 0
                                }
                              );
                              return "%" + totals.rate.toLocaleString("fa");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "mobile") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totals = features.reduce(
                                (acc, item) => {
                                  if (!item.is_free) {
                                    acc.amount += item.commission_amount || 0;
                                    acc.rate += item.commission_rate || 0;
                                  }
                                  return acc;
                                },
                                {
                                  amount: 0,
                                  rate: 0
                                }
                              );
                              return "%" + totals.rate.toLocaleString("fa");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "tablet") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totals = features.reduce(
                                (acc, item) => {
                                  acc.amount += item.commission_amount || 0;
                                  acc.rate += item.commission_rate || 0;
                                  return acc;
                                },
                                {
                                  amount: 0,
                                  rate: 0
                                }
                              );
                              return "%" + totals.rate.toLocaleString("fa");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const features = $state.modalData.feature;
                              const totals = features.reduce(
                                (acc, item) => {
                                  if (!item.is_free) {
                                    acc.amount += item.commission_amount || 0;
                                    acc.rate += item.commission_rate || 0;
                                  }
                                  return acc;
                                },
                                {
                                  amount: 0,
                                  rate: 0
                                }
                              );
                              return "%" + totals.rate.toLocaleString("fa");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bOoM)}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rZ3Do
                    )}
                  >
                    {"\u062c\u0645\u0639"}
                  </div>
                </div>
                {(() => {
                  try {
                    return $state.modalData.comment == true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"comment3"}
                    data-plasmic-override={overrides.comment3}
                    className={classNames(projectcss.all, sty.comment3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uN9V4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData.comment;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return " ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
            <div
              data-plasmic-name={"deposit2"}
              data-plasmic-override={overrides.deposit2}
              className={classNames(
                projectcss.all,
                sty.deposit2,
                (() => {
                  try {
                    return $state.showDetails &&
                      $state.modalData.transaction_type == "deposit"
                      ? "modal-content open"
                      : "modal-content";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              <div
                data-plasmic-name={"title3"}
                data-plasmic-override={overrides.title3}
                className={classNames(projectcss.all, sty.title3)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rfIm5)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___4UhIh)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateShowDetails"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showDetails"]
                              },
                              operation: 0,
                              value: ($state.showDetails = false)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShowDetails"] != null &&
                        typeof $steps["updateShowDetails"] === "object" &&
                        typeof $steps["updateShowDetails"].then === "function"
                      ) {
                        $steps["updateShowDetails"] =
                          await $steps["updateShowDetails"];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image166.svg",
                      fullWidth: 18,
                      fullHeight: 18,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hh4Gh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pZnY6
                    )}
                  >
                    {"\u0648\u0627\u0631\u06cc\u0632"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__riPsW)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image177.svg",
                      fullWidth: 14,
                      fullHeight: 12,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"date2"}
                data-plasmic-override={overrides.date2}
                className={classNames(projectcss.all, sty.date2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__gEdhn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ogEu
                    )}
                  >
                    {
                      "\u062a\u0627\u0631\u06cc\u062e \u062a\u0631\u0627\u06a9\u0646\u0634"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__agn3J)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uf6EM
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const persianMonths = [
                              "فروردین",
                              "اردیبهشت",
                              "خرداد",
                              "تیر",
                              "مرداد",
                              "شهریور",
                              "مهر",
                              "آبان",
                              "آذر",
                              "دی",
                              "بهمن",
                              "اسفند"
                            ];

                            const persianWeekdays = [
                              "یک‌شنبه",
                              "دوشنبه",
                              "سه‌شنبه",
                              "چهارشنبه",
                              "پنج‌شنبه",
                              "جمعه",
                              "شنبه"
                            ];

                            function toPersianDigits(input) {
                              const persianDigits = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              return input
                                .toString()
                                .replace(/\d/g, d => persianDigits[d]);
                            }
                            function toJalali(gYear, gMonth, gDay) {
                              const gDaysInMonth = [
                                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                              ];

                              const jDaysInMonth = [
                                31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                              ];

                              let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                              let gm = gMonth - 1;
                              let gd = gDay - 1;
                              let gDayNo =
                                365 * gy +
                                Math.floor((gy + 3) / 4) -
                                Math.floor((gy + 99) / 100) +
                                Math.floor((gy + 399) / 400);
                              for (let i = 0; i < gm; ++i)
                                gDayNo += gDaysInMonth[i];
                              gDayNo += gd;
                              let jDayNo = gDayNo - (gYear >= 1600 ? 79 : 0);
                              let jNp = Math.floor(jDayNo / 12053);
                              jDayNo %= 12053;
                              let jYear =
                                979 + 33 * jNp + 4 * Math.floor(jDayNo / 1461);
                              jDayNo %= 1461;
                              if (jDayNo >= 366) {
                                jYear += Math.floor((jDayNo - 1) / 365);
                                jDayNo = (jDayNo - 1) % 365;
                              }
                              let jMonth;
                              for (
                                jMonth = 0;
                                jMonth < 11 && jDayNo >= jDaysInMonth[jMonth];
                                ++jMonth
                              )
                                jDayNo -= jDaysInMonth[jMonth];
                              let jDay = jDayNo + 1;
                              return {
                                jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                jm: jMonth + 1,
                                jd: jDay
                              };
                            }
                            function formatLondonTimeToTehranPersian(
                              dateString
                            ) {
                              const date = new Date(dateString);
                              const timePart = date.toLocaleTimeString(
                                "fa-IR",
                                {
                                  timeZone: "Asia/Tehran",
                                  hour12: false,
                                  hour: "2-digit",
                                  minute: "2-digit"
                                }
                              );
                              const tehranDate = new Date(
                                date.toLocaleString("en-US", {
                                  timeZone: "Asia/Tehran"
                                })
                              );
                              const gYear = tehranDate.getFullYear();
                              const gMonth = tehranDate.getMonth() + 1;
                              const gDay = tehranDate.getDate();
                              const weekdayIndex = tehranDate.getDay();
                              const { jm, jd } = toJalali(gYear, gMonth, gDay);
                              const weekday = persianWeekdays[weekdayIndex];
                              const monthName = persianMonths[jm - 1];
                              return `${timePart} - ${weekday} ${toPersianDigits(jd)} ${monthName}`;
                            }
                            const inputTime = $state.modalData.date;
                            const outputTime =
                              formatLondonTimeToTehranPersian(inputTime);
                            return outputTime;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"properties2"}
                data-plasmic-override={overrides.properties2}
                className={classNames(projectcss.all, sty.properties2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ydP9)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qzZ7V
                    )}
                  >
                    {"\u0648\u0627\u0631\u06cc\u0632"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wOc0)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bZe3M
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData.reserved_amount + " تومان";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"totalAmount2"}
                data-plasmic-override={overrides.totalAmount2}
                className={classNames(projectcss.all, sty.totalAmount2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__jEfup)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___09Sx
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__dd3QZ)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fwVVf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData.transaction_cause;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0639\u0648\u062f\u062a \u0648\u062c\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              {(() => {
                try {
                  return $state.modalData.comment != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"comment4"}
                  data-plasmic-override={overrides.comment4}
                  className={classNames(projectcss.all, sty.comment4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aGe3G
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData.comment;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sideBar2",
    "profile",
    "tableHeader",
    "item",
    "sideEffect",
    "apiRequest",
    "returnButton",
    "withdraw",
    "giftEmoji",
    "comment",
    "deposit",
    "comment2",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent",
    "withdraw2",
    "title",
    "date",
    "properties",
    "totalAmount",
    "reserveCode",
    "commission",
    "title2",
    "feature",
    "sum",
    "comment3",
    "deposit2",
    "title3",
    "date2",
    "properties2",
    "totalAmount2",
    "comment4"
  ],
  header: ["header", "sideBar2", "profile", "tableHeader", "item"],
  sideBar2: ["sideBar2"],
  profile: ["profile"],
  tableHeader: ["tableHeader"],
  item: ["item"],
  sideEffect: ["sideEffect"],
  apiRequest: ["apiRequest"],
  returnButton: ["returnButton"],
  withdraw: ["withdraw", "giftEmoji", "comment"],
  giftEmoji: ["giftEmoji"],
  comment: ["comment"],
  deposit: ["deposit", "comment2"],
  comment2: ["comment2"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  withdraw2: [
    "withdraw2",
    "title",
    "date",
    "properties",
    "totalAmount",
    "reserveCode",
    "commission",
    "title2",
    "feature",
    "sum",
    "comment3"
  ],
  title: ["title"],
  date: ["date"],
  properties: ["properties"],
  totalAmount: ["totalAmount"],
  reserveCode: ["reserveCode"],
  commission: ["commission", "title2", "feature", "sum", "comment3"],
  title2: ["title2"],
  feature: ["feature"],
  sum: ["sum"],
  comment3: ["comment3"],
  deposit2: [
    "deposit2",
    "title3",
    "date2",
    "properties2",
    "totalAmount2",
    "comment4"
  ],
  title3: ["title3"],
  date2: ["date2"],
  properties2: ["properties2"],
  totalAmount2: ["totalAmount2"],
  comment4: ["comment4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  sideBar2: typeof SideBar2;
  profile: typeof ApiRequest;
  tableHeader: "div";
  item: "div";
  sideEffect: typeof SideEffect;
  apiRequest: typeof ApiRequest;
  returnButton: "div";
  withdraw: typeof AntdModal;
  giftEmoji: "div";
  comment: "div";
  deposit: typeof AntdModal;
  comment2: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  withdraw2: "div";
  title: "div";
  date: "div";
  properties: "div";
  totalAmount: "div";
  reserveCode: "div";
  commission: "div";
  title2: "div";
  feature: "div";
  sum: "div";
  comment3: "div";
  deposit2: "div";
  title3: "div";
  date2: "div";
  properties2: "div";
  totalAmount2: "div";
  comment4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransactions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransactions__VariantsArgs;
    args?: PlasmicTransactions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicTransactions__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicTransactions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransactions__ArgProps,
          internalVariantPropNames: PlasmicTransactions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransactions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransactions";
  } else {
    func.displayName = `PlasmicTransactions.${nodeName}`;
  }
  return func;
}

export const PlasmicTransactions = Object.assign(
  // Top-level PlasmicTransactions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    profile: makeNodeComponent("profile"),
    tableHeader: makeNodeComponent("tableHeader"),
    item: makeNodeComponent("item"),
    sideEffect: makeNodeComponent("sideEffect"),
    apiRequest: makeNodeComponent("apiRequest"),
    returnButton: makeNodeComponent("returnButton"),
    withdraw: makeNodeComponent("withdraw"),
    giftEmoji: makeNodeComponent("giftEmoji"),
    comment: makeNodeComponent("comment"),
    deposit: makeNodeComponent("deposit"),
    comment2: makeNodeComponent("comment2"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    withdraw2: makeNodeComponent("withdraw2"),
    title: makeNodeComponent("title"),
    date: makeNodeComponent("date"),
    properties: makeNodeComponent("properties"),
    totalAmount: makeNodeComponent("totalAmount"),
    reserveCode: makeNodeComponent("reserveCode"),
    commission: makeNodeComponent("commission"),
    title2: makeNodeComponent("title2"),
    feature: makeNodeComponent("feature"),
    sum: makeNodeComponent("sum"),
    comment3: makeNodeComponent("comment3"),
    deposit2: makeNodeComponent("deposit2"),
    title3: makeNodeComponent("title3"),
    date2: makeNodeComponent("date2"),
    properties2: makeNodeComponent("properties2"),
    totalAmount2: makeNodeComponent("totalAmount2"),
    comment4: makeNodeComponent("comment4"),

    // Metadata about props expected for PlasmicTransactions
    internalVariantProps: PlasmicTransactions__VariantProps,
    internalArgProps: PlasmicTransactions__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "گزارشات مصرف کیف پول",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTransactions;
/* prettier-ignore-end */
