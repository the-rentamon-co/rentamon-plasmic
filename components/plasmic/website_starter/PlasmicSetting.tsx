// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: Gu50HL8TWrKF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSetting.module.css"; // plasmic-import: Gu50HL8TWrKF/css

createPlasmicElementProxy;

export type PlasmicSetting__VariantMembers = {};
export type PlasmicSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicSetting__VariantsArgs;
export const PlasmicSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicSetting__ArgsType = {};
type ArgPropType = keyof PlasmicSetting__ArgsType;
export const PlasmicSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicSetting__OverridesType = {
  setting?: Flex__<"div">;
  main?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  title?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  title2?: Flex__<"div">;
  intro?: Flex__<"div">;
  caption?: Flex__<"div">;
};

export interface DefaultSettingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSetting__RenderFunc(props: {
  variants: PlasmicSetting__VariantsArgs;
  args: PlasmicSetting__ArgsType;
  overrides: PlasmicSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSetting.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSetting.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSetting.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"setting"}
          data-plasmic-override={overrides.setting}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.setting
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <SideBar2
                  data-plasmic-name={"sideBar2"}
                  data-plasmic-override={overrides.sideBar2}
                  className={classNames("__wab_instance", sty.sideBar2)}
                  isOpen={false}
                />
              </div>
              <div
                data-plasmic-name={"title2"}
                data-plasmic-override={overrides.title2}
                className={classNames(projectcss.all, sty.title2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___25OK7
                  )}
                >
                  {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"intro"}
              data-plasmic-override={overrides.intro}
              className={classNames(projectcss.all, sty.intro)}
            >
              <div
                data-plasmic-name={"caption"}
                data-plasmic-override={overrides.caption}
                className={classNames(projectcss.all, sty.caption)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l6H3I
                  )}
                >
                  {
                    "\u0627\u0632 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0648\u06cc\u0698\u06af\u06cc\u200c\u0647\u0627\u06cc \u06a9\u0644\u06cc\u062f\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0641\u0639\u0627\u0644 \u0648 \u06cc\u0627 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u06a9\u0646\u06cc."
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  setting: [
    "setting",
    "main",
    "freeBox",
    "title",
    "sideBar2",
    "title2",
    "intro",
    "caption"
  ],
  main: ["main", "freeBox", "title", "sideBar2", "title2", "intro", "caption"],
  freeBox: ["freeBox", "title", "sideBar2", "title2"],
  title: ["title", "sideBar2"],
  sideBar2: ["sideBar2"],
  title2: ["title2"],
  intro: ["intro", "caption"],
  caption: ["caption"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  setting: "div";
  main: "div";
  freeBox: "div";
  title: "div";
  sideBar2: typeof SideBar2;
  title2: "div";
  intro: "div";
  caption: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSetting__VariantsArgs;
    args?: PlasmicSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSetting__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSetting__ArgProps,
          internalVariantPropNames: PlasmicSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "setting") {
    func.displayName = "PlasmicSetting";
  } else {
    func.displayName = `PlasmicSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicSetting = Object.assign(
  // Top-level PlasmicSetting renders the root element
  makeNodeComponent("setting"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    freeBox: makeNodeComponent("freeBox"),
    title: makeNodeComponent("title"),
    sideBar2: makeNodeComponent("sideBar2"),
    title2: makeNodeComponent("title2"),
    intro: makeNodeComponent("intro"),
    caption: makeNodeComponent("caption"),

    // Metadata about props expected for PlasmicSetting
    internalVariantProps: PlasmicSetting__VariantProps,
    internalArgProps: PlasmicSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تنظیمات",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSetting;
/* prettier-ignore-end */
