// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: cQPw0-BlyPGu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicContacts.module.css"; // plasmic-import: cQPw0-BlyPGu/css

createPlasmicElementProxy;

export type PlasmicContacts__VariantMembers = {};
export type PlasmicContacts__VariantsArgs = {};
type VariantPropType = keyof PlasmicContacts__VariantsArgs;
export const PlasmicContacts__VariantProps = new Array<VariantPropType>();

export type PlasmicContacts__ArgsType = {};
type ArgPropType = keyof PlasmicContacts__ArgsType;
export const PlasmicContacts__ArgProps = new Array<ArgPropType>();

export type PlasmicContacts__OverridesType = {
  contacts?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  title?: Flex__<"div">;
  pageTitle?: Flex__<"div">;
  frame?: Flex__<"div">;
  contactsRow?: Flex__<"div">;
  names?: Flex__<"div">;
  guestName?: Flex__<"div">;
  phones?: Flex__<"div">;
  guestPhone?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultContactsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContacts__RenderFunc(props: {
  variants: PlasmicContacts__VariantsArgs;
  args: PlasmicContacts__ArgsType;
  overrides: PlasmicContacts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"contacts"}
          data-plasmic-override={overrides.contacts}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.contacts
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                data-plasmic-name={"pageTitle"}
                data-plasmic-override={overrides.pageTitle}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.pageTitle
                )}
              >
                {"\u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame"}
              data-plasmic-override={overrides.frame}
              className={classNames(projectcss.all, sty.frame)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                2, 3, 4
              ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"contactsRow"}
                    data-plasmic-override={overrides.contactsRow}
                    className={classNames(projectcss.all, sty.contactsRow)}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"names"}
                      data-plasmic-override={overrides.names}
                      className={classNames(projectcss.all, sty.names)}
                    >
                      <div
                        data-plasmic-name={"guestName"}
                        data-plasmic-override={overrides.guestName}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.guestName
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest.data[currentIndex].name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"phones"}
                      data-plasmic-override={overrides.phones}
                      className={classNames(projectcss.all, sty.phones)}
                    >
                      <div
                        data-plasmic-name={"guestPhone"}
                        data-plasmic-override={overrides.guestPhone}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.guestPhone
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      const handleClick = number => {
                                        // Code to send the number to the phone caller section
                                        console.log(number);
                                      };

                                      return handleClick(currentItem);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest.data[
                                currentIndex
                              ].phone.replace(/[0-9]/g, function (d) {
                                return String.fromCharCode(
                                  d.charCodeAt(0) + 1728
                                );
                              });
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jmExN
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___18Aeb
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={"https://gateway.rentamon.com/webhook/get_guest"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  contacts: [
    "contacts",
    "freeBox",
    "title",
    "pageTitle",
    "frame",
    "contactsRow",
    "names",
    "guestName",
    "phones",
    "guestPhone",
    "apiRequest"
  ],
  freeBox: [
    "freeBox",
    "title",
    "pageTitle",
    "frame",
    "contactsRow",
    "names",
    "guestName",
    "phones",
    "guestPhone"
  ],
  title: ["title", "pageTitle"],
  pageTitle: ["pageTitle"],
  frame: ["frame", "contactsRow", "names", "guestName", "phones", "guestPhone"],
  contactsRow: ["contactsRow", "names", "guestName", "phones", "guestPhone"],
  names: ["names", "guestName"],
  guestName: ["guestName"],
  phones: ["phones", "guestPhone"],
  guestPhone: ["guestPhone"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  contacts: "div";
  freeBox: "div";
  title: "div";
  pageTitle: "div";
  frame: "div";
  contactsRow: "div";
  names: "div";
  guestName: "div";
  phones: "div";
  guestPhone: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContacts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContacts__VariantsArgs;
    args?: PlasmicContacts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContacts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContacts__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContacts__ArgProps,
          internalVariantPropNames: PlasmicContacts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContacts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "contacts") {
    func.displayName = "PlasmicContacts";
  } else {
    func.displayName = `PlasmicContacts.${nodeName}`;
  }
  return func;
}

export const PlasmicContacts = Object.assign(
  // Top-level PlasmicContacts renders the root element
  makeNodeComponent("contacts"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    title: makeNodeComponent("title"),
    pageTitle: makeNodeComponent("pageTitle"),
    frame: makeNodeComponent("frame"),
    contactsRow: makeNodeComponent("contactsRow"),
    names: makeNodeComponent("names"),
    guestName: makeNodeComponent("guestName"),
    phones: makeNodeComponent("phones"),
    guestPhone: makeNodeComponent("guestPhone"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicContacts
    internalVariantProps: PlasmicContacts__VariantProps,
    internalArgProps: PlasmicContacts__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContacts;
/* prettier-ignore-end */
