/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: cQPw0-BlyPGu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavigationRntFooter from "../../NavigationRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import SidebarLite from "../../SidebarLite"; // plasmic-import: NKEuaTqYxvdh/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicContacts.module.css"; // plasmic-import: cQPw0-BlyPGu/css

createPlasmicElementProxy;

export type PlasmicContacts__VariantMembers = {};
export type PlasmicContacts__VariantsArgs = {};
type VariantPropType = keyof PlasmicContacts__VariantsArgs;
export const PlasmicContacts__VariantProps = new Array<VariantPropType>();

export type PlasmicContacts__ArgsType = {};
type ArgPropType = keyof PlasmicContacts__ArgsType;
export const PlasmicContacts__ArgProps = new Array<ArgPropType>();

export type PlasmicContacts__OverridesType = {
  contacts?: Flex__<"div">;
  navigationRntFooter?: Flex__<typeof NavigationRntFooter>;
  sideBar2?: Flex__<typeof SideBar2>;
  sidebarLite?: Flex__<typeof SidebarLite>;
  profile?: Flex__<typeof ApiRequest>;
  clarity?: Flex__<typeof Embed>;
  apiRequest?: Flex__<typeof ApiRequest>;
  frame?: Flex__<"div">;
  contactsRow?: Flex__<"div">;
  names?: Flex__<"div">;
  guestName?: Flex__<"div">;
  phones?: Flex__<"div">;
  guestPhone?: Flex__<"a"> & Partial<LinkProps>;
  returnButton?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultContactsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContacts__RenderFunc(props: {
  variants: PlasmicContacts__VariantsArgs;
  args: PlasmicContacts__ArgsType;
  overrides: PlasmicContacts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"contacts"}
          data-plasmic-override={overrides.contacts}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.contacts
          )}
        >
          <NavigationRntFooter
            data-plasmic-name={"navigationRntFooter"}
            data-plasmic-override={overrides.navigationRntFooter}
            className={classNames("__wab_instance", sty.navigationRntFooter)}
            userType={(() => {
              try {
                return (() => {
                  return null;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tdKik)}>
            <div className={classNames(projectcss.all, sty.freeBox__wmfUa)}>
              <SideBar2
                data-plasmic-name={"sideBar2"}
                data-plasmic-override={overrides.sideBar2}
                className={classNames("__wab_instance", sty.sideBar2)}
                isOpen={false}
                userData={(() => {
                  try {
                    return $state.profile.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : (() => {
                    try {
                      return $state.userType == "2";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__vVaUo)}>
                <SidebarLite
                  data-plasmic-name={"sidebarLite"}
                  data-plasmic-override={overrides.sidebarLite}
                  className={classNames("__wab_instance", sty.sidebarLite)}
                  isOpen={false}
                  userData={(() => {
                    try {
                      return $state.profile.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__ogaDu)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hQvko,
                  "fadeinf"
                )}
              >
                {"\u062f\u0641\u062a\u0631 \u062a\u0644\u0641\u0646"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fVt6O)}>
              <ApiRequest
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames("__wab_instance", sty.profile)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
            <Embed
              data-plasmic-name={"clarity"}
              data-plasmic-override={overrides.clarity}
              className={classNames("__wab_instance", sty.clarity)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["apiRequest"] = ref;
            }}
            url={"https://gateway.rentamon.com/webhook/get_guest"}
          >
            {(() => {
              try {
                return $state.apiRequest.data[0].name != null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"frame"}
                data-plasmic-override={overrides.frame}
                className={classNames(projectcss.all, sty.frame, "fadein")}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.apiRequest.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"contactsRow"}
                      data-plasmic-override={overrides.contactsRow}
                      className={classNames(
                        projectcss.all,
                        sty.contactsRow,
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "clickable"
                          : undefined
                      )}
                      key={currentIndex}
                    >
                      <div
                        data-plasmic-name={"names"}
                        data-plasmic-override={overrides.names}
                        className={classNames(projectcss.all, sty.names)}
                      >
                        <div
                          data-plasmic-name={"guestName"}
                          data-plasmic-override={overrides.guestName}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.guestName
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.apiRequest.data[currentIndex]
                                  .name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"phones"}
                        data-plasmic-override={overrides.phones}
                        className={classNames(projectcss.all, sty.phones)}
                      >
                        <PlasmicLink__
                          data-plasmic-name={"guestPhone"}
                          data-plasmic-override={overrides.guestPhone}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.guestPhone
                          )}
                          component={Link}
                          href={(() => {
                            try {
                              return `tel:${$state.apiRequest.data[currentIndex].phone}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          platform={"nextjs"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.apiRequest.data[
                                  currentIndex
                                ].phone.replace(/[0-9]/g, function (d) {
                                  return String.fromCharCode(
                                    d.charCodeAt(0) + 1728
                                  );
                                });
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </PlasmicLink__>
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : null}
            {(() => {
              try {
                return $state.apiRequest.data[0].name == null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s4743
                )}
              >
                {
                  "\u0647\u0646\u0648\u0632 \u0647\u06cc\u0686 \u0634\u0645\u0627\u0631\u0647 \u0645\u0633\u0627\u0641\u0631\u06cc \u062b\u0628\u062a \u0646\u06a9\u0631\u062f\u06cc"
                }
              </div>
            ) : null}
          </ApiRequest>
          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__w39Ju,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__neAgp
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.history.back();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/contacts//");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/contacts//";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateStateVariable2"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://api-v2.rentamon.com/api/is_user_old"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable2"] != null &&
                typeof $steps["updateStateVariable2"] === "object" &&
                typeof $steps["updateStateVariable2"].then === "function"
              ) {
                $steps["updateStateVariable2"] = await $steps[
                  "updateStateVariable2"
                ];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        $state.userType = $steps.runCode.data.flag;
                        return console.log($state.userType);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          />

          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              '<script>\r\n  // \u0633\u0627\u062e\u062a\u0646 \u0644\u06cc\u0646\u06a9 favicon\r\n  const faviconLink = document.createElement("link");\r\n  faviconLink.rel = "icon";\r\n  faviconLink.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  faviconLink.sizes = "192x192";\r\n  document.head.appendChild(faviconLink);\r\n\r\n  // // \u0633\u0627\u062e\u062a\u0646 \u0644\u06cc\u0646\u06a9 apple-touch-icon \u0628\u0631\u0627\u06cc iOS\r\n  // const appleTouchIcon = document.createElement("link");\r\n  // appleTouchIcon.rel = "apple-touch-icon";\r\n  // appleTouchIcon.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  // appleTouchIcon.sizes = "180x180";\r\n  // document.head.appendChild(appleTouchIcon);\r\n\r\n  // // \u062a\u0646\u0638\u06cc\u0645\u0627\u062a PWA\r\n  // const themeColorMeta = document.createElement("meta");\r\n  // themeColorMeta.name = "theme-color";\r\n  // themeColorMeta.content = "#8165D6";\r\n  // document.head.appendChild(themeColorMeta);\r\n\r\n  // const appleWebAppMeta = document.createElement("meta");\r\n  // appleWebAppMeta.name = "apple-mobile-web-app-capable";\r\n  // appleWebAppMeta.content = "yes";\r\n  // document.head.appendChild(appleWebAppMeta);\r\n\r\n  // const appleWebAppTitle = document.createElement("meta");\r\n  // appleWebAppTitle.name = "apple-mobile-web-app-title";\r\n  // appleWebAppTitle.content = "\u0645\u062f\u06cc\u0631\u06cc\u062a \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647";\r\n  // document.head.appendChild(appleWebAppTitle);\r\n\r\n  // // \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 manifest.json\r\n  // const manifestLink = document.createElement("link");\r\n  // manifestLink.rel = "manifest";\r\n  // document.head.appendChild(manifestLink);\r\n\r\n  // // \u0633\u0627\u062e\u062a \u0648 \u062b\u0628\u062a manifest.json \u062f\u0627\u062e\u0644 \u0635\u0641\u062d\u0647\r\n  // const manifestContent = {\r\n  //   name: "Rentamon",\r\n  //   short_name: "\u0631\u0646\u062a\u0627\u0645\u0648\u0646",\r\n  //   icons: [\r\n  //     {\r\n  //       src: "https://rentamon-files.storage.iran.liara.space/icon/icon.svg",\r\n  //       sizes: "192x192",\r\n  //       type: "image/png"\r\n  //     },\r\n  //     {\r\n  //       src: "https://rentamon-files.storage.iran.liara.space/icon/icon.svg",\r\n  //       sizes: "512x512",\r\n  //       type: "image/png"\r\n  //     }\r\n  //   ],\r\n  //   theme_color: "#8165D6",\r\n  //   background_color: "#8165D6",\r\n  //   display: "standalone",\r\n  //   start_url: "/"\r\n  // };\r\n\r\n  // // \u0627\u06cc\u062c\u0627\u062f \u0641\u0627\u06cc\u0644 \u0648 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0628\u0647 \u0645\u0631\u0648\u0631\u06af\u0631\r\n  // const manifestBlob = new Blob([JSON.stringify(manifestContent)], { type: "application/json" });\r\n  // const manifestURL = URL.createObjectURL(manifestBlob);\r\n  // manifestLink.href = manifestURL;\r\n\r\n  // // \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 Splash Screen \u0628\u0631\u0627\u06cc iOS\r\n  // const splashScreen = document.createElement("link");\r\n  // splashScreen.rel = "apple-touch-startup-image";\r\n  // splashScreen.href = "https://rentamon-files.storage.iran.liara.space/icon/icon.svg";\r\n  // document.head.appendChild(splashScreen);\r\n</script>\r\n'
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__syTfP)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bBxfN,
                "fadein"
              )}
            >
              {
                "\u0627\u06af\u0647 \u0627\u0632 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0631\u0632\u0631\u0648 \u062c\u062f\u06cc\u062f \u0628\u06af\u06cc\u0631\u06cc \u0648 \u06cc\u0627 \u0628\u0635\u0648\u0631\u062a \u062f\u0633\u062a\u06cc \u0631\u0632\u0631\u0648 \u0631\u0648 \u062b\u0628\u062a \u06a9\u0646\u06cc\u060c \u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0645\u0647\u0645\u0627\u0646 \u0628\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u06cc\u0646\u062c\u0627 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u200c\u0634\u0647."
              }
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  contacts: [
    "contacts",
    "navigationRntFooter",
    "sideBar2",
    "sidebarLite",
    "profile",
    "clarity",
    "apiRequest",
    "frame",
    "contactsRow",
    "names",
    "guestName",
    "phones",
    "guestPhone",
    "returnButton",
    "sideEffect",
    "favicon"
  ],
  navigationRntFooter: ["navigationRntFooter"],
  sideBar2: ["sideBar2"],
  sidebarLite: ["sidebarLite"],
  profile: ["profile"],
  clarity: ["clarity"],
  apiRequest: [
    "apiRequest",
    "frame",
    "contactsRow",
    "names",
    "guestName",
    "phones",
    "guestPhone"
  ],
  frame: ["frame", "contactsRow", "names", "guestName", "phones", "guestPhone"],
  contactsRow: ["contactsRow", "names", "guestName", "phones", "guestPhone"],
  names: ["names", "guestName"],
  guestName: ["guestName"],
  phones: ["phones", "guestPhone"],
  guestPhone: ["guestPhone"],
  returnButton: ["returnButton"],
  sideEffect: ["sideEffect"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  contacts: "div";
  navigationRntFooter: typeof NavigationRntFooter;
  sideBar2: typeof SideBar2;
  sidebarLite: typeof SidebarLite;
  profile: typeof ApiRequest;
  clarity: typeof Embed;
  apiRequest: typeof ApiRequest;
  frame: "div";
  contactsRow: "div";
  names: "div";
  guestName: "div";
  phones: "div";
  guestPhone: "a";
  returnButton: "div";
  sideEffect: typeof SideEffect;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContacts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContacts__VariantsArgs;
    args?: PlasmicContacts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContacts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContacts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContacts__ArgProps,
          internalVariantPropNames: PlasmicContacts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContacts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "contacts") {
    func.displayName = "PlasmicContacts";
  } else {
    func.displayName = `PlasmicContacts.${nodeName}`;
  }
  return func;
}

export const PlasmicContacts = Object.assign(
  // Top-level PlasmicContacts renders the root element
  makeNodeComponent("contacts"),
  {
    // Helper components rendering sub-elements
    navigationRntFooter: makeNodeComponent("navigationRntFooter"),
    sideBar2: makeNodeComponent("sideBar2"),
    sidebarLite: makeNodeComponent("sidebarLite"),
    profile: makeNodeComponent("profile"),
    clarity: makeNodeComponent("clarity"),
    apiRequest: makeNodeComponent("apiRequest"),
    frame: makeNodeComponent("frame"),
    contactsRow: makeNodeComponent("contactsRow"),
    names: makeNodeComponent("names"),
    guestName: makeNodeComponent("guestName"),
    phones: makeNodeComponent("phones"),
    guestPhone: makeNodeComponent("guestPhone"),
    returnButton: makeNodeComponent("returnButton"),
    sideEffect: makeNodeComponent("sideEffect"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicContacts
    internalVariantProps: PlasmicContacts__VariantProps,
    internalArgProps: PlasmicContacts__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicContacts;
/* prettier-ignore-end */
