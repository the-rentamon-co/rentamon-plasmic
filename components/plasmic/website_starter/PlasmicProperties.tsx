/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: A6vFyD-Zpe1c

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import SidebarLite from "../../SidebarLite"; // plasmic-import: NKEuaTqYxvdh/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicProperties.module.css"; // plasmic-import: A6vFyD-Zpe1c/css

createPlasmicElementProxy;

export type PlasmicProperties__VariantMembers = {};
export type PlasmicProperties__VariantsArgs = {};
type VariantPropType = keyof PlasmicProperties__VariantsArgs;
export const PlasmicProperties__VariantProps = new Array<VariantPropType>();

export type PlasmicProperties__ArgsType = {};
type ArgPropType = keyof PlasmicProperties__ArgsType;
export const PlasmicProperties__ArgProps = new Array<ArgPropType>();

export type PlasmicProperties__OverridesType = {
  root?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  header?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  sidebarLite?: Flex__<typeof SidebarLite>;
  profile2?: Flex__<typeof ApiRequest>;
  property?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  propGuide?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultPropertiesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProperties__RenderFunc(props: {
  variants: PlasmicProperties__VariantsArgs;
  args: PlasmicProperties__ArgsType;
  overrides: PlasmicProperties__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "profile2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "profile2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile2"
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "propTour",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <NavbarRntFooter
              data-plasmic-name={"navbarRntFooter"}
              data-plasmic-override={overrides.navbarRntFooter}
              className={classNames("__wab_instance", sty.navbarRntFooter)}
              navPage={"properties"}
              userType={(() => {
                try {
                  return $state.userType;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__thBtN)}>
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return $state.userType == "1";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox___6EuQ)}>
                  <SideBar2
                    data-plasmic-name={"sideBar2"}
                    data-plasmic-override={overrides.sideBar2}
                    className={classNames("__wab_instance", sty.sideBar2)}
                    isOpen={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? false
                        : false
                    }
                    userData={(() => {
                      try {
                        return $state.profile2.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return $state.userType == "2";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__oEewg)}>
                  <SidebarLite
                    data-plasmic-name={"sidebarLite"}
                    data-plasmic-override={overrides.sidebarLite}
                    className={classNames("__wab_instance", sty.sidebarLite)}
                    isOpen={false}
                    userData={(() => {
                      try {
                        return $state.profile2.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              ) : null}
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__ykwHb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f1AbN,
                    "fadeinf"
                  )}
                >
                  {
                    "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u200c\u0647\u0627"
                  }
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__hwczB)}>
              <ApiRequest
                data-plasmic-name={"profile2"}
                data-plasmic-override={overrides.profile2}
                className={classNames("__wab_instance", sty.profile2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile2", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile2"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hIpz)}>
            <div
              data-plasmic-name={"property"}
              data-plasmic-override={overrides.property}
              className={classNames(projectcss.all, sty.property, "fadeinf")}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__mjr7H,
                  hasVariant(globalVariants, "screen", "mobile") ? "fadein" : ``
                )}
              >
                <ApiRequest
                  data-plasmic-name={"apiRequest"}
                  data-plasmic-override={overrides.apiRequest}
                  className={classNames("__wab_instance", sty.apiRequest)}
                  errorDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xkWcY
                      )}
                    >
                      {
                        "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                      }
                    </div>
                  }
                  loadingDisplay={
                    <React.Fragment>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__gFugq)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "40px"
                            : "50px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={
                          "https://web.rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kyYbv
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return (() => {
                                const storedData =
                                  localStorage.getItem("property_data");
                                if (
                                  JSON.parse(storedData)[0].property_name ==
                                    "اقامتگاه ۱" &&
                                  JSON.parse(storedData).length == 1
                                ) {
                                  return "";
                                } else {
                                  return JSON.parse(storedData);
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9MxO,
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "clickable"
                                  : "clickable fadeinf"
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToProperty"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: `/property/${(() => {
                                          try {
                                            return currentItem.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}`
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToProperty"] != null &&
                                  typeof $steps["goToProperty"] === "object" &&
                                  typeof $steps["goToProperty"].then ===
                                    "function"
                                ) {
                                  $steps["goToProperty"] = await $steps[
                                    "goToProperty"
                                  ];
                                }
                              }}
                            >
                              {(() => {
                                try {
                                  return true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rfVv
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(
                                      sty.img__ai6A,
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? "shine"
                                        : ``
                                    )}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? "100%"
                                        : "100%"
                                    }
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobile"
                                      )
                                        ? "100%"
                                        : "100%"
                                    }
                                    height={``}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return currentItem.profile_pic_link;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__oqlgW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wir2D
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.property_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0633\u0648\u0626\u06cc\u062a \u0645\u0628\u0644\u0647 \u0645\u0647\u062a\u0627\u0628";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sBuze,
                            "clickable fadein"
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToPropertyEditFirstProperty"] =
                              $state.apiRequest.data.properties.filter(
                                item => item.property_name !== "اقامتگاه ۱"
                              ).length == 0
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/property/edit/first-property`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToPropertyEditFirstProperty"] != null &&
                              typeof $steps["goToPropertyEditFirstProperty"] ===
                                "object" &&
                              typeof $steps["goToPropertyEditFirstProperty"]
                                .then === "function"
                            ) {
                              $steps["goToPropertyEditFirstProperty"] =
                                await $steps["goToPropertyEditFirstProperty"];
                            }

                            $steps["goToPropertyCreate"] =
                              $state.apiRequest.data.properties.filter(
                                item => item.property_name !== "اقامتگاه ۱"
                              ).length >= 1
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/property/create`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToPropertyCreate"] != null &&
                              typeof $steps["goToPropertyCreate"] ===
                                "object" &&
                              typeof $steps["goToPropertyCreate"].then ===
                                "function"
                            ) {
                              $steps["goToPropertyCreate"] = await $steps[
                                "goToPropertyCreate"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mooUv
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__siplE)}
                              displayHeight={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "60px"
                                  : "52px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image110.svg",
                                fullWidth: 51,
                                fullHeight: 51,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___10ONd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nIC
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                                : "\u0627\u06cc\u062c\u0627\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </React.Fragment>
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "data"
                    ]).apply(null, eventArgs);

                    (async data => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const data = $state.apiRequest.data;
                                  if (
                                    data?.user_info &&
                                    Object.keys(data.user_info).length > 0
                                  ) {
                                    return localStorage.setItem(
                                      "property_data",
                                      JSON.stringify(data.properties)
                                    );
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["apiRequest"] = ref;
                  }}
                  url={
                    "https://api-v2.rentamon.com/api/user_info?property_id=1"
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q1Cc)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apiRequest.data.properties.filter(
                            item => item.property_name !== "اقامتگاه ۱"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gAlJf,
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "clickable"
                              : "clickable fadeinf"
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToPropertyEdit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/property/edit/${(() => {
                                      try {
                                        return currentItem.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPropertyEdit"] != null &&
                              typeof $steps["goToPropertyEdit"] === "object" &&
                              typeof $steps["goToPropertyEdit"].then ===
                                "function"
                            ) {
                              $steps["goToPropertyEdit"] = await $steps[
                                "goToPropertyEdit"
                              ];
                            }
                          }}
                        >
                          {(() => {
                            try {
                              return true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kzgsv
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(
                                  sty.img__yFlfQ,
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "shine"
                                    : ``
                                )}
                                displayHeight={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "100%"
                                    : "100%"
                                }
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={
                                  hasVariant(globalVariants, "screen", "mobile")
                                    ? "100%"
                                    : "100%"
                                }
                                height={``}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return currentItem.profile_pic_link;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gb4Nj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a827Q
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.property_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0633\u0648\u0626\u06cc\u062a \u0645\u0628\u0644\u0647 \u0645\u0647\u062a\u0627\u0628";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ojr5X,
                        "clickable fadeinf"
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPropertyEditFirstProperty"] =
                          $state.apiRequest.data.properties.filter(
                            item => item.property_name !== "اقامتگاه ۱"
                          ).length == 0
                            ? (() => {
                                const actionArgs = {
                                  destination: `/property/edit/first-property`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToPropertyEditFirstProperty"] != null &&
                          typeof $steps["goToPropertyEditFirstProperty"] ===
                            "object" &&
                          typeof $steps["goToPropertyEditFirstProperty"]
                            .then === "function"
                        ) {
                          $steps["goToPropertyEditFirstProperty"] =
                            await $steps["goToPropertyEditFirstProperty"];
                        }

                        $steps["goToPropertyCreate"] =
                          $state.apiRequest.data.properties.filter(
                            item => item.property_name !== "اقامتگاه ۱"
                          ).length >= 1
                            ? (() => {
                                const actionArgs = {
                                  destination: `/property/create`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToPropertyCreate"] != null &&
                          typeof $steps["goToPropertyCreate"] === "object" &&
                          typeof $steps["goToPropertyCreate"].then ===
                            "function"
                        ) {
                          $steps["goToPropertyCreate"] = await $steps[
                            "goToPropertyCreate"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aIuYj
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___1Anx)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "60px"
                              : "52px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image110.svg",
                            fullWidth: 51,
                            fullHeight: 51,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6NZL
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__c15Hn
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile")
                            ? "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                            : "\u0627\u06cc\u062c\u0627\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sAki9)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? (() => {
                            try {
                              return $state.propTour === true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.propTour === true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <div
                        data-plasmic-name={"propGuide"}
                        data-plasmic-override={overrides.propGuide}
                        className={classNames(projectcss.all, sty.propGuide)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vAuf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qFn33
                            )}
                          >
                            {
                              "\u0631\u0648\u06cc \u062f\u06a9\u0645\u0647  +  \u0628\u0632\u0646 \u062a\u0627 \u0632\u06cc\u0631 \u06f1 \u062f\u0642\u06cc\u0642\u0647\n\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a\u0648 \u062b\u0628\u062a \u06a9\u0646\u06cc"
                            }
                          </div>
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.propTour === true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hyTnZ
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["deleteCookie"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      function deleteCookie(name) {
                                        document.cookie =
                                          name +
                                          "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/";
                                      }
                                      deleteCookie("prop_tour");
                                      console.log("delete cookie");
                                      $state.tourSteps = 0;
                                      return console.log(
                                        "delete cookie",
                                        $state.tourSteps
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["deleteCookie"] != null &&
                            typeof $steps["deleteCookie"] === "object" &&
                            typeof $steps["deleteCookie"].then === "function"
                          ) {
                            $steps["deleteCookie"] = await $steps[
                              "deleteCookie"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gin1Y
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["deleteCookie"] = false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        function deleteCookie(name) {
                                          document.cookie =
                                            name +
                                            "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/";
                                        }
                                        deleteCookie("prop_tour");
                                        console.log("delete cookie");
                                        $state.tourSteps = 0;
                                        return console.log(
                                          "delete cookie",
                                          $state.tourSteps
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["deleteCookie"] != null &&
                              typeof $steps["deleteCookie"] === "object" &&
                              typeof $steps["deleteCookie"].then === "function"
                            ) {
                              $steps["deleteCookie"] = await $steps[
                                "deleteCookie"
                              ];
                            }
                          }}
                        >
                          {"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                </ApiRequest>
              </div>
            </div>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["updateStep2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/reservations/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/reservations/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStep2"] != null &&
                typeof $steps["updateStep2"] === "object" &&
                typeof $steps["updateStep2"].then === "function"
              ) {
                $steps["updateStep2"] = await $steps["updateStep2"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://gateway.rentamon.com/webhook/get_user_segment"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateStep"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["step"]
                      },
                      operation: 0,
                      value: ($state.userType =
                        $steps.invokeGlobalAction.data.flag)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStep"] != null &&
                typeof $steps["updateStep"] === "object" &&
                typeof $steps["updateStep"].then === "function"
              ) {
                $steps["updateStep"] = await $steps["updateStep"];
              }

              $steps["checkPropTourCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          if (document.cookie.includes("prop_tour")) {
                            console.log("in the visit");
                            const prop_tour = getCookieValue("prop_tour");
                            if (prop_tour != null) {
                              $state.propTour = true;
                            }
                            return console.log("prop_tour:", $state.propTour);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkPropTourCookie"] != null &&
                typeof $steps["checkPropTourCookie"] === "object" &&
                typeof $steps["checkPropTourCookie"].then === "function"
              ) {
                $steps["checkPropTourCookie"] = await $steps[
                  "checkPropTourCookie"
                ];
              }
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ei3Q2)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarRntFooter",
    "header",
    "sideBar2",
    "sidebarLite",
    "profile2",
    "property",
    "apiRequest",
    "propGuide",
    "sideEffect",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  navbarRntFooter: ["navbarRntFooter"],
  header: ["header", "sideBar2", "sidebarLite", "profile2"],
  sideBar2: ["sideBar2"],
  sidebarLite: ["sidebarLite"],
  profile2: ["profile2"],
  property: ["property", "apiRequest", "propGuide"],
  apiRequest: ["apiRequest", "propGuide"],
  propGuide: ["propGuide"],
  sideEffect: ["sideEffect"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  header: "div";
  sideBar2: typeof SideBar2;
  sidebarLite: typeof SidebarLite;
  profile2: typeof ApiRequest;
  property: "div";
  apiRequest: typeof ApiRequest;
  propGuide: "div";
  sideEffect: typeof SideEffect;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProperties__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProperties__VariantsArgs;
    args?: PlasmicProperties__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProperties__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProperties__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProperties__ArgProps,
          internalVariantPropNames: PlasmicProperties__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProperties__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProperties";
  } else {
    func.displayName = `PlasmicProperties.${nodeName}`;
  }
  return func;
}

export const PlasmicProperties = Object.assign(
  // Top-level PlasmicProperties renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    header: makeNodeComponent("header"),
    sideBar2: makeNodeComponent("sideBar2"),
    sidebarLite: makeNodeComponent("sidebarLite"),
    profile2: makeNodeComponent("profile2"),
    property: makeNodeComponent("property"),
    apiRequest: makeNodeComponent("apiRequest"),
    propGuide: makeNodeComponent("propGuide"),
    sideEffect: makeNodeComponent("sideEffect"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicProperties
    internalVariantProps: PlasmicProperties__VariantProps,
    internalArgProps: PlasmicProperties__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProperties;
/* prettier-ignore-end */
