/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: A6vFyD-Zpe1c

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicProperties.module.css"; // plasmic-import: A6vFyD-Zpe1c/css

createPlasmicElementProxy;

export type PlasmicProperties__VariantMembers = {};
export type PlasmicProperties__VariantsArgs = {};
type VariantPropType = keyof PlasmicProperties__VariantsArgs;
export const PlasmicProperties__VariantProps = new Array<VariantPropType>();

export type PlasmicProperties__ArgsType = {};
type ArgPropType = keyof PlasmicProperties__ArgsType;
export const PlasmicProperties__ArgProps = new Array<ArgPropType>();

export type PlasmicProperties__OverridesType = {
  root?: Flex__<"div">;
  profile?: Flex__<"div">;
  property?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultPropertiesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProperties__RenderFunc(props: {
  variants: PlasmicProperties__VariantsArgs;
  args: PlasmicProperties__ArgsType;
  overrides: PlasmicProperties__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"profile"}
            data-plasmic-override={overrides.profile}
            className={classNames(projectcss.all, sty.profile)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mYg23)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__oi2Gl)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "74px"
                    : "141px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "80px"
                    : "145px"
                }
                loading={"lazy"}
                src={(() => {
                  try {
                    return $state.apiRequest.data.user_info.profile_image;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__y4Rt)}>
              <div className={classNames(projectcss.all, sty.freeBox__jcNu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bYx4X
                  )}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.apiRequest.loading == true
                            ? "درحال بارگذاری"
                            : $state.apiRequest.data.user_info.first_name +
                                " " +
                                $state.apiRequest.data.user_info.last_name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u06cc\u0627\u0641\u062a \u0646\u0634\u062f";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.apiRequest.loading == true
                            ? "درحال بارگذاری"
                            : $state.apiRequest.data.user_info.first_name +
                                " " +
                                $state.apiRequest.data.user_info.last_name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u06cc\u0627\u0641\u062a \u0646\u0634\u062f";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bg05S)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hkYl5
                  )}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.apiRequest.loading == true
                            ? "درحال بارگذاری"
                            : $state.apiRequest.data.user_info.phone_number.replace(
                                /\d/g,
                                d => "۰۱۲۳۴۵۶۷۸۹"[d]
                              );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.apiRequest.loading == true
                            ? "درحال بارگذاری"
                            : $state.apiRequest.data.user_info.phone_number.replace(
                                /\d/g,
                                d => "۰۱۲۳۴۵۶۷۸۹"[d]
                              );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ul21Y)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "21px"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "23px"
                      : "43px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image111.svg",
                    fullWidth: 20,
                    fullHeight: 20,
                    aspectRatio: 1
                  }}
                />
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"property"}
            data-plasmic-override={overrides.property}
            className={classNames(projectcss.all, sty.property)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tgmu7)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kpMpY
                )}
              >
                {"\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mjr7H)}>
              <ApiRequest
                data-plasmic-name={"apiRequest"}
                data-plasmic-override={overrides.apiRequest}
                className={classNames("__wab_instance", sty.apiRequest)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xkWcY
                    )}
                  >
                    {"Error fetching data"}
                  </div>
                }
                loadingDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hzrsi
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["apiRequest"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__q1Cc)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data.properties;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gAlJf
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kzgsv
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__yFlfQ)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return currentItem.profile_pic_link;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gb4Nj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a827Q
                            )}
                          >
                            {
                              "\u0633\u0648\u0626\u06cc\u062a \u0645\u0628\u0644\u0647 \u0645\u0647\u062a\u0627\u0628"
                            }
                          </div>
                        </div>
                      </div>
                    );
                  })}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ojr5X)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aIuYj)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___1Anx)}
                        displayHeight={"52px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image110.svg",
                          fullWidth: 51,
                          fullHeight: 51,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c15Hn
                      )}
                    >
                      {
                        "\u0627\u06cc\u062c\u0627\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                      }
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__gaAh)}
                />
              </ApiRequest>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "profile", "property", "apiRequest"],
  profile: ["profile"],
  property: ["property", "apiRequest"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profile: "div";
  property: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProperties__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProperties__VariantsArgs;
    args?: PlasmicProperties__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProperties__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProperties__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProperties__ArgProps,
          internalVariantPropNames: PlasmicProperties__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProperties__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProperties";
  } else {
    func.displayName = `PlasmicProperties.${nodeName}`;
  }
  return func;
}

export const PlasmicProperties = Object.assign(
  // Top-level PlasmicProperties renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profile: makeNodeComponent("profile"),
    property: makeNodeComponent("property"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicProperties
    internalVariantProps: PlasmicProperties__VariantProps,
    internalArgProps: PlasmicProperties__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProperties;
/* prettier-ignore-end */
