/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: wDX6CsUVKNmL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import SidebarLite from "../../SidebarLite"; // plasmic-import: NKEuaTqYxvdh/component
import Calendar2 from "../../Calendar2"; // plasmic-import: RNhZtlNmydsH/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicLiteCalendar.module.css"; // plasmic-import: wDX6CsUVKNmL/css

createPlasmicElementProxy;

export type PlasmicLiteCalendar__VariantMembers = {};
export type PlasmicLiteCalendar__VariantsArgs = {};
type VariantPropType = keyof PlasmicLiteCalendar__VariantsArgs;
export const PlasmicLiteCalendar__VariantProps = new Array<VariantPropType>();

export type PlasmicLiteCalendar__ArgsType = {};
type ArgPropType = keyof PlasmicLiteCalendar__ArgsType;
export const PlasmicLiteCalendar__ArgProps = new Array<ArgPropType>();

export type PlasmicLiteCalendar__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  headerMain?: Flex__<"div">;
  header?: Flex__<"div">;
  right?: Flex__<"div">;
  right2?: Flex__<"div">;
  select2?: Flex__<typeof Select>;
  left?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  profile?: Flex__<typeof ApiRequest>;
  deskTablet?: Flex__<"div">;
  sidebarLite?: Flex__<typeof SidebarLite>;
  calendar2?: Flex__<typeof Calendar2>;
  userAvailableFeature?: Flex__<typeof ApiRequest>;
  spacerDontTouch?: Flex__<"div">;
  proPanelModal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  button?: Flex__<typeof AntdButton>;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultLiteCalendarProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLiteCalendar__RenderFunc(props: {
  variants: PlasmicLiteCalendar__VariantsArgs;
  args: PlasmicLiteCalendar__ArgsType;
  overrides: PlasmicLiteCalendar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "pageUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "propId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? (() => {
                try {
                  return $state.profile.data.properties[$state.propId - 1]
                    .property_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646";
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.profile.data.properties[$state.propId - 1]
                    .property_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646";
                  }
                  throw e;
                }
              })()
      },
      {
        path: "feature",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          reservation: false,
          auto_sync: false
        })
      },
      {
        path: "userAvailableFeature.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userAvailableFeature"
      },
      {
        path: "userAvailableFeature.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userAvailableFeature"
      },
      {
        path: "userAvailableFeature.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userAvailableFeature"
      },
      {
        path: "proPanelModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "isTheFirstVisit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "vtStatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLiteCalendar.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLiteCalendar.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLiteCalendar.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getLcalStorageData"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.profile.loading ||
                            !$state.profile.data ||
                            !$state.profile.data.properties ||
                            $state.profile.data.properties.length <= 0
                          ) {
                            const storedData =
                              localStorage.getItem("user_info");
                            if (storedData) {
                              try {
                                const parsedData = JSON.parse(storedData);
                                if (
                                  parsedData &&
                                  typeof parsedData === "object"
                                ) {
                                  return ($state.profile.data = {
                                    user_info: parsedData.user_info,
                                    properties: parsedData.properties
                                  });
                                }
                              } catch (e) {}
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getLcalStorageData"] != null &&
                typeof $steps["getLcalStorageData"] === "object" &&
                typeof $steps["getLcalStorageData"].then === "function"
              ) {
                $steps["getLcalStorageData"] = await $steps[
                  "getLcalStorageData"
                ];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/splash/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/splash/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["checkVtCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          let vt = null;
                          const vtRaw = getCookieValue("vt");
                          if (vtRaw !== null) {
                            vt = parseInt(vtRaw, 10);
                            $state.vtStatus = vt;
                            if (vt === 1) {
                              return (window.location.href =
                                "https://rentamon.com/panel/");
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkVtCookie"] != null &&
                typeof $steps["checkVtCookie"] === "object" &&
                typeof $steps["checkVtCookie"].then === "function"
              ) {
                $steps["checkVtCookie"] = await $steps["checkVtCookie"];
              }

              $steps["checkOldUser"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://gateway.rentamon.com/webhook/get_user_segment"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["checkOldUser"] != null &&
                typeof $steps["checkOldUser"] === "object" &&
                typeof $steps["checkOldUser"].then === "function"
              ) {
                $steps["checkOldUser"] = await $steps["checkOldUser"];
              }

              $steps["updateStateVariable3"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        function setCookie(name, value, hours) {
                          let expires = "";
                          if (hours) {
                            const date = new Date();
                            date.setTime(
                              date.getTime() + hours * 60 * 60 * 1000
                            );
                            expires = "; expires=" + date.toUTCString();
                          }
                          document.cookie =
                            name + "=" + (value || "") + expires + "; path=/";
                        }
                        const flag = $steps.checkOldUser.data.flag;
                        const current = parseInt($state.vtStatus, 10);
                        if (isNaN(current)) {
                          setCookie("vt", flag.toString(), 0.3333);
                          if (flag === 1) {
                            return (window.location.href =
                              "https://rentamon.com/panel/");
                          }
                        } else if (flag !== current) {
                          setCookie("vt", flag.toString(), 0.3333);
                          if (flag === 1) {
                            return (window.location.href =
                              "https://rentamon.com/panel/");
                          }
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable3"] != null &&
                typeof $steps["updateStateVariable3"] === "object" &&
                typeof $steps["updateStateVariable3"].then === "function"
              ) {
                $steps["updateStateVariable3"] = await $steps[
                  "updateStateVariable3"
                ];
              }

              $steps["runCode3"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          if (document.cookie.includes("first_visit")) {
                            const first_visit = getCookieValue("first_visit");
                            if (first_visit != null) {
                              return ($state.isTheFirstVisit = true);
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode3"] != null &&
                typeof $steps["runCode3"] === "object" &&
                typeof $steps["runCode3"].then === "function"
              ) {
                $steps["runCode3"] = await $steps["runCode3"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (function redirectIfAppSubdomain() {
                          const { protocol, hostname, pathname, search, hash } =
                            window.location;
                          console.log("here");
                          if (hostname === "app.rentamon.com") {
                            const targetHost = "rentamon.com";
                            const newUrl = `${protocol}//${targetHost}${pathname}${search}${hash}`;
                            console.log("newUrl", newUrl);
                            window.location.replace(newUrl);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://gateway.rentamon.com/webhook/process_calendar_followUp",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              let a = { prop_id: $state.propId };
                              return a;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          />

          <div
            data-plasmic-name={"headerMain"}
            data-plasmic-override={overrides.headerMain}
            className={classNames(
              projectcss.all,
              sty.headerMain,
              hasVariant(globalVariants, "screen", "mobile")
                ? "fadeinf"
                : "fadeinf"
            )}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                data-plasmic-name={"right"}
                data-plasmic-override={overrides.right}
                className={classNames(projectcss.all, sty.right)}
              >
                <div
                  data-plasmic-name={"right2"}
                  data-plasmic-override={overrides.right2}
                  className={classNames(projectcss.all, sty.right2)}
                >
                  <Select
                    data-plasmic-name={"select2"}
                    data-plasmic-override={overrides.select2}
                    className={classNames("__wab_instance", sty.select2)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["select2", "value"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async value => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value: (() => {
                                  let value =
                                    $state.profile.data.properties.find(
                                      property =>
                                        property.property_name ===
                                        $state.select2.value
                                    );
                                  $state.pageUrl = value.link;
                                  return ($state.propId = value.id);
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/process_calendar_followUp",
                                  undefined,
                                  (() => {
                                    try {
                                      return (() => {
                                        let a = { prop_id: $state.propId };
                                        return a;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? (() => {
                            try {
                              return $state.profile.data.properties.map(
                                property => property.property_name
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [{}];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.profile.data.properties.map(
                                property => property.property_name
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [{}];
                              }
                              throw e;
                            }
                          })()
                    }
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kFSkm
                        )}
                      >
                        {
                          "\u062f\u0631\u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                        }
                      </div>
                    }
                    value={generateStateValueProp($state, ["select2", "value"])}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"left"}
                data-plasmic-override={overrides.left}
                className={classNames(projectcss.all, sty.left)}
              >
                {(() => {
                  try {
                    return (
                      $state.profile.data.properties[$state.propId - 1]
                        .property_name != "اقامتگاه ۱"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__y2KmV,
                      "fadein"
                    )}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "smallMobile")
                          ? "80px"
                          : hasVariant(globalVariants, "screen", "mobile")
                          ? "100%"
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? "130px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? "80px"
                          : "0"
                      }
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "smallMobile")
                          ? "220px"
                          : "auto"
                      }
                      height={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? ``
                          : undefined
                      }
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.profile.data.user_info.profile_pic_link;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/website_starter/images/untitled1Jpg.jpg",
                              fullWidth: 38,
                              fullHeight: 32,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return (
                            $state.profile.data.properties[$state.propId - 1]
                              .property_name == "اقامتگاه ۱"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            $state.profile.data.properties[$state.propId - 1]
                              .property_name == "اقامتگاه ۱"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j6D2M)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToProperties"] = true
                        ? (() => {
                            const actionArgs = { destination: `/properties` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToProperties"] != null &&
                        typeof $steps["goToProperties"] === "object" &&
                        typeof $steps["goToProperties"].then === "function"
                      ) {
                        $steps["goToProperties"] = await $steps[
                          "goToProperties"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cQc5Q
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "\u0627\u06cc\u062c\u0627\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                        : "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                    </div>
                  </div>
                ) : null}
              </div>
              <ApiRequest
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames("__wab_instance", sty.profile)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "error"]).apply(
                    null,
                    eventArgs
                  );

                  (async error => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (
                                  $state.profile.error.detail ===
                                  "No Profile matches the given query."
                                ) {
                                  return (window.location.href =
                                    "https://rentamon.com/activation/1/");
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const data = $state.profile.data;
                                if (
                                  data?.user_info &&
                                  Object.keys(data.user_info).length > 0
                                ) {
                                  return localStorage.setItem(
                                    "user_info",
                                    JSON.stringify(data)
                                  );
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["profile"] = ref;
                }}
                url={(() => {
                  try {
                    return `https://api-v2.rentamon.com/api/user_info?property_id=${$state.propId}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ovxMl
                  )}
                >
                  {"Enter some text"}
                </div>
              </ApiRequest>
            </div>
            <div
              data-plasmic-name={"deskTablet"}
              data-plasmic-override={overrides.deskTablet}
              className={classNames(projectcss.all, sty.deskTablet)}
            >
              <SidebarLite
                data-plasmic-name={"sidebarLite"}
                data-plasmic-override={overrides.sidebarLite}
                className={classNames("__wab_instance", sty.sidebarLite)}
                isFirstVisit={(() => {
                  try {
                    return $state.isTheFirstVisit;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                isOpen={false}
                userData={(() => {
                  try {
                    return $state.profile.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <Calendar2
            data-plasmic-name={"calendar2"}
            data-plasmic-override={overrides.calendar2}
            calendarType={"lite"}
            className={classNames("__wab_instance", sty.calendar2)}
            featurePermission={(() => {
              try {
                return $state.userAvailableFeature.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isFirstVisit={(() => {
              try {
                return $state.isTheFirstVisit;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            propertyId={(() => {
              try {
                return $state.propId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 1;
                }
                throw e;
              }
            })()}
          />

          <ApiRequest
            data-plasmic-name={"userAvailableFeature"}
            data-plasmic-override={overrides.userAvailableFeature}
            className={classNames("__wab_instance", sty.userAvailableFeature)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userAvailableFeature",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userAvailableFeature",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "userAvailableFeature",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["userAvailableFeature"] = ref;
            }}
            url={(() => {
              try {
                return `https://gateway.rentamon.com/webhook/get_user_available_feature?prop_id=${$state.propId}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://gateway.rentamon.com/webhook/get_user_available_feature";
                }
                throw e;
              }
            })()}
          />

          <div
            data-plasmic-name={"spacerDontTouch"}
            data-plasmic-override={overrides.spacerDontTouch}
            className={classNames(projectcss.all, sty.spacerDontTouch)}
          />

          {false ? (
            <AntdModal
              data-plasmic-name={"proPanelModal"}
              data-plasmic-override={overrides.proPanelModal}
              className={classNames("__wab_instance", sty.proPanelModal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["proPanelModal__modal"]}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "proPanelModal",
                  "open"
                ]).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, ["proPanelModal", "open"])}
              title={"Modal title"}
              trigger={null}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__tfRnS
                      )}
                      label={"Name"}
                      name={"name"}
                    >
                      <AntdInput
                        className={classNames("__wab_instance", sty.input)}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__wapnk
                      )}
                      label={"Message"}
                      name={"message"}
                    >
                      <AntdTextArea
                        className={classNames("__wab_instance", sty.textArea)}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames("__wab_instance", sty.button)}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ab93Y
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </AntdModal>
          ) : null}
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            navPage={"calendar"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__aHy6S)}>
            <ClarityRntComponent
              data-plasmic-name={"clarityRntComponent"}
              data-plasmic-override={overrides.clarityRntComponent}
              className={classNames("__wab_instance", sty.clarityRntComponent)}
            />

            <FaviconRntComponent
              data-plasmic-name={"faviconRntComponent"}
              data-plasmic-override={overrides.faviconRntComponent}
              className={classNames("__wab_instance", sty.faviconRntComponent)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "headerMain",
    "header",
    "right",
    "right2",
    "select2",
    "left",
    "img",
    "profile",
    "deskTablet",
    "sidebarLite",
    "calendar2",
    "userAvailableFeature",
    "spacerDontTouch",
    "proPanelModal",
    "form",
    "input",
    "textArea",
    "button",
    "navbarRntFooter",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  sideEffect: ["sideEffect"],
  headerMain: [
    "headerMain",
    "header",
    "right",
    "right2",
    "select2",
    "left",
    "img",
    "profile",
    "deskTablet",
    "sidebarLite"
  ],
  header: ["header", "right", "right2", "select2", "left", "img", "profile"],
  right: ["right", "right2", "select2"],
  right2: ["right2", "select2"],
  select2: ["select2"],
  left: ["left", "img"],
  img: ["img"],
  profile: ["profile"],
  deskTablet: ["deskTablet", "sidebarLite"],
  sidebarLite: ["sidebarLite"],
  calendar2: ["calendar2"],
  userAvailableFeature: ["userAvailableFeature"],
  spacerDontTouch: ["spacerDontTouch"],
  proPanelModal: ["proPanelModal", "form", "input", "textArea", "button"],
  form: ["form", "input", "textArea", "button"],
  input: ["input"],
  textArea: ["textArea"],
  button: ["button"],
  navbarRntFooter: ["navbarRntFooter"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  headerMain: "div";
  header: "div";
  right: "div";
  right2: "div";
  select2: typeof Select;
  left: "div";
  img: typeof PlasmicImg__;
  profile: typeof ApiRequest;
  deskTablet: "div";
  sidebarLite: typeof SidebarLite;
  calendar2: typeof Calendar2;
  userAvailableFeature: typeof ApiRequest;
  spacerDontTouch: "div";
  proPanelModal: typeof AntdModal;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
  navbarRntFooter: typeof NavbarRntFooter;
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLiteCalendar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLiteCalendar__VariantsArgs;
    args?: PlasmicLiteCalendar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLiteCalendar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLiteCalendar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLiteCalendar__ArgProps,
          internalVariantPropNames: PlasmicLiteCalendar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLiteCalendar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLiteCalendar";
  } else {
    func.displayName = `PlasmicLiteCalendar.${nodeName}`;
  }
  return func;
}

export const PlasmicLiteCalendar = Object.assign(
  // Top-level PlasmicLiteCalendar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    headerMain: makeNodeComponent("headerMain"),
    header: makeNodeComponent("header"),
    right: makeNodeComponent("right"),
    right2: makeNodeComponent("right2"),
    select2: makeNodeComponent("select2"),
    left: makeNodeComponent("left"),
    img: makeNodeComponent("img"),
    profile: makeNodeComponent("profile"),
    deskTablet: makeNodeComponent("deskTablet"),
    sidebarLite: makeNodeComponent("sidebarLite"),
    calendar2: makeNodeComponent("calendar2"),
    userAvailableFeature: makeNodeComponent("userAvailableFeature"),
    spacerDontTouch: makeNodeComponent("spacerDontTouch"),
    proPanelModal: makeNodeComponent("proPanelModal"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicLiteCalendar
    internalVariantProps: PlasmicLiteCalendar__VariantProps,
    internalArgProps: PlasmicLiteCalendar__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "تقویم یکپارچه اقامتگاه",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLiteCalendar;
/* prettier-ignore-end */
