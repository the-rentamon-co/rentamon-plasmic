// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: SXQexie-iAHy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavbarRentamonComponent from "../../NavbarRentamonComponent"; // plasmic-import: gWac1FMbIJat/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import RentamonFooter from "../../RentamonFooter"; // plasmic-import: DSdlo5kdtbOe/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicReferral.module.css"; // plasmic-import: SXQexie-iAHy/css

createPlasmicElementProxy;

export type PlasmicReferral__VariantMembers = {};
export type PlasmicReferral__VariantsArgs = {};
type VariantPropType = keyof PlasmicReferral__VariantsArgs;
export const PlasmicReferral__VariantProps = new Array<VariantPropType>();

export type PlasmicReferral__ArgsType = {};
type ArgPropType = keyof PlasmicReferral__ArgsType;
export const PlasmicReferral__ArgProps = new Array<ArgPropType>();

export type PlasmicReferral__OverridesType = {
  root?: Flex__<"div">;
  navbarRentamonComponent?: Flex__<typeof NavbarRentamonComponent>;
  mainContents?: Flex__<"div">;
  intro1st?: Flex__<"div">;
  introTitle?: Flex__<"div">;
  teamImage?: Flex__<"div">;
  introImage?: Flex__<"div">;
  introduction?: Flex__<"div">;
  smsImage?: Flex__<"div">;
  introCalendarLeft2?: Flex__<"div">;
  introduction2?: Flex__<"div">;
  cta?: Flex__<"div">;
  ctaText?: Flex__<"div">;
  ctaButton?: Flex__<"div">;
  html?: Flex__<"div">;
  clarity2?: Flex__<typeof Embed>;
  goftino?: Flex__<typeof Embed>;
  rentamonFooter?: Flex__<typeof RentamonFooter>;
};

export interface DefaultReferralProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReferral__RenderFunc(props: {
  variants: PlasmicReferral__VariantsArgs;
  args: PlasmicReferral__ArgsType;
  overrides: PlasmicReferral__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicReferral.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicReferral.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicReferral.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavbarRentamonComponent
            data-plasmic-name={"navbarRentamonComponent"}
            data-plasmic-override={overrides.navbarRentamonComponent}
            className={classNames(
              "__wab_instance",
              sty.navbarRentamonComponent
            )}
          />

          <div
            data-plasmic-name={"mainContents"}
            data-plasmic-override={overrides.mainContents}
            className={classNames(projectcss.all, sty.mainContents)}
          >
            <div
              data-plasmic-name={"intro1st"}
              data-plasmic-override={overrides.intro1st}
              className={classNames(projectcss.all, sty.intro1st)}
            >
              <div
                data-plasmic-name={"introTitle"}
                data-plasmic-override={overrides.introTitle}
                className={classNames(projectcss.all, sty.introTitle)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r0SZ
                  )}
                >
                  {
                    "\u0628\u0627 \u0645\u0639\u0631\u0641\u06cc \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0647 \u062f\u06cc\u06af\u0631\u0627\u0646\u060c \u0628\u0647 \u06a9\u0633\u0628\u200c\u0648\u06a9\u0627\u0631 \u0627\u0648\u0646\u200c\u0647\u0627 \u0631\u0648\u0646\u0642 \u0628\u062f\u0647\u060c\n\u0648 \u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\r"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"teamImage"}
                data-plasmic-override={overrides.teamImage}
                className={classNames(projectcss.all, sty.teamImage)}
              >
                <div
                  data-plasmic-name={"introImage"}
                  data-plasmic-override={overrides.introImage}
                  className={classNames(projectcss.all, sty.introImage)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___0Yxcz)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image80.png",
                      fullWidth: 1104,
                      fullHeight: 503,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  data-plasmic-name={"introduction"}
                  data-plasmic-override={overrides.introduction}
                  className={classNames(projectcss.all, sty.introduction)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uXKee
                    )}
                  >
                    {
                      "\u0627\u06af\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0628\u0647 \u0633\u0627\u06cc\u0631 \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u060c \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0646\u0641\u0631 \u0645\u0628\u0644\u063a \u06f1\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0646 \u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \ud83c\udf81 \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0647."
                    }
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"smsImage"}
                data-plasmic-override={overrides.smsImage}
                className={classNames(projectcss.all, sty.smsImage)}
              >
                <div
                  data-plasmic-name={"introCalendarLeft2"}
                  data-plasmic-override={overrides.introCalendarLeft2}
                  className={classNames(projectcss.all, sty.introCalendarLeft2)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__uxHdh)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image81.png",
                      fullWidth: 800,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  data-plasmic-name={"introduction2"}
                  data-plasmic-override={overrides.introduction2}
                  className={classNames(projectcss.all, sty.introduction2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fzwa0
                    )}
                  >
                    {
                      "\u2714\ufe0f \u0628\u0639\u062f \u0627\u0632 \u0641\u0639\u0627\u0644 \u0634\u062f\u0646 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0641\u0631\u062f \u062f\u0639\u0648\u062a \u0634\u062f\u0647\u060c \u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0647."
                    }
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"cta"}
                data-plasmic-override={overrides.cta}
                className={classNames(projectcss.all, sty.cta)}
              >
                <div
                  data-plasmic-name={"ctaText"}
                  data-plasmic-override={overrides.ctaText}
                  className={classNames(projectcss.all, sty.ctaText)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7S8Zm
                    )}
                  >
                    {
                      "\u2714\ufe0f \u0628\u0639\u062f \u0627\u0632 \u0641\u0639\u0627\u0644 \u0634\u062f\u0646 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0641\u0631\u062f \u062f\u0639\u0648\u062a \u0634\u062f\u0647\u060c \u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \u0628\u0647 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627 \u0627\u0636\u0627\u0641\u0647 \u0645\u06cc\u200c\u0634\u0647."
                    }
                  </div>
                </div>
                <div
                  data-plasmic-name={"ctaButton"}
                  data-plasmic-override={overrides.ctaButton}
                  className={classNames(projectcss.all, sty.ctaButton)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vvG7H
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToFeatures"] = true
                        ? (() => {
                            const actionArgs = { destination: `/features` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToFeatures"] != null &&
                        typeof $steps["goToFeatures"] === "object" &&
                        typeof $steps["goToFeatures"].then === "function"
                      ) {
                        $steps["goToFeatures"] = await $steps["goToFeatures"];
                      }
                    }}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "\u062c\u0632\u06cc\u06cc\u0627\u062a \u0646\u0633\u062e\u0647\u200c\u06cc \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 "
                      : "\u062c\u0632\u06cc\u06cc\u0627\u062a \u0646\u0633\u062e\u0647\u200c\u06cc \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <Embed
              data-plasmic-name={"clarity2"}
              data-plasmic-override={overrides.clarity2}
              className={classNames("__wab_instance", sty.clarity2)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
              }
            />

            <Embed
              data-plasmic-name={"goftino"}
              data-plasmic-override={overrides.goftino}
              className={classNames("__wab_instance", sty.goftino)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />
          </div>
          <RentamonFooter
            data-plasmic-name={"rentamonFooter"}
            data-plasmic-override={overrides.rentamonFooter}
            className={classNames("__wab_instance", sty.rentamonFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarRentamonComponent",
    "mainContents",
    "intro1st",
    "introTitle",
    "teamImage",
    "introImage",
    "introduction",
    "smsImage",
    "introCalendarLeft2",
    "introduction2",
    "cta",
    "ctaText",
    "ctaButton",
    "html",
    "clarity2",
    "goftino",
    "rentamonFooter"
  ],
  navbarRentamonComponent: ["navbarRentamonComponent"],
  mainContents: [
    "mainContents",
    "intro1st",
    "introTitle",
    "teamImage",
    "introImage",
    "introduction",
    "smsImage",
    "introCalendarLeft2",
    "introduction2",
    "cta",
    "ctaText",
    "ctaButton"
  ],
  intro1st: [
    "intro1st",
    "introTitle",
    "teamImage",
    "introImage",
    "introduction",
    "smsImage",
    "introCalendarLeft2",
    "introduction2",
    "cta",
    "ctaText",
    "ctaButton"
  ],
  introTitle: ["introTitle"],
  teamImage: ["teamImage", "introImage", "introduction"],
  introImage: ["introImage"],
  introduction: ["introduction"],
  smsImage: ["smsImage", "introCalendarLeft2", "introduction2"],
  introCalendarLeft2: ["introCalendarLeft2"],
  introduction2: ["introduction2"],
  cta: ["cta", "ctaText", "ctaButton"],
  ctaText: ["ctaText"],
  ctaButton: ["ctaButton"],
  html: ["html", "clarity2", "goftino"],
  clarity2: ["clarity2"],
  goftino: ["goftino"],
  rentamonFooter: ["rentamonFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarRentamonComponent: typeof NavbarRentamonComponent;
  mainContents: "div";
  intro1st: "div";
  introTitle: "div";
  teamImage: "div";
  introImage: "div";
  introduction: "div";
  smsImage: "div";
  introCalendarLeft2: "div";
  introduction2: "div";
  cta: "div";
  ctaText: "div";
  ctaButton: "div";
  html: "div";
  clarity2: typeof Embed;
  goftino: typeof Embed;
  rentamonFooter: typeof RentamonFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReferral__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReferral__VariantsArgs;
    args?: PlasmicReferral__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReferral__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReferral__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReferral__ArgProps,
          internalVariantPropNames: PlasmicReferral__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReferral__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReferral";
  } else {
    func.displayName = `PlasmicReferral.${nodeName}`;
  }
  return func;
}

export const PlasmicReferral = Object.assign(
  // Top-level PlasmicReferral renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarRentamonComponent: makeNodeComponent("navbarRentamonComponent"),
    mainContents: makeNodeComponent("mainContents"),
    intro1st: makeNodeComponent("intro1st"),
    introTitle: makeNodeComponent("introTitle"),
    teamImage: makeNodeComponent("teamImage"),
    introImage: makeNodeComponent("introImage"),
    introduction: makeNodeComponent("introduction"),
    smsImage: makeNodeComponent("smsImage"),
    introCalendarLeft2: makeNodeComponent("introCalendarLeft2"),
    introduction2: makeNodeComponent("introduction2"),
    cta: makeNodeComponent("cta"),
    ctaText: makeNodeComponent("ctaText"),
    ctaButton: makeNodeComponent("ctaButton"),
    html: makeNodeComponent("html"),
    clarity2: makeNodeComponent("clarity2"),
    goftino: makeNodeComponent("goftino"),
    rentamonFooter: makeNodeComponent("rentamonFooter"),

    // Metadata about props expected for PlasmicReferral
    internalVariantProps: PlasmicReferral__VariantProps,
    internalArgProps: PlasmicReferral__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "دعوت دوستان به رنتامون",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReferral;
/* prettier-ignore-end */
