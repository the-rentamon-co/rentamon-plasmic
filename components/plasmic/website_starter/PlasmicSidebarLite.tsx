/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: NKEuaTqYxvdh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSidebarLite.module.css"; // plasmic-import: NKEuaTqYxvdh/css

import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: re7g4HwqLfNb/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 7-GvAf5G7Hmg/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: k9GL3C4d3WqP/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: 52h8XtG_2_Y1/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: PfTCttn7BvdX/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: mmPtFHknd4hG/icon

createPlasmicElementProxy;

export type PlasmicSidebarLite__VariantMembers = {};
export type PlasmicSidebarLite__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebarLite__VariantsArgs;
export const PlasmicSidebarLite__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebarLite__ArgsType = {
  isOpen?: boolean;
  userData?: any;
  isFirstVisit?: boolean;
};
type ArgPropType = keyof PlasmicSidebarLite__ArgsType;
export const PlasmicSidebarLite__ArgProps = new Array<ArgPropType>(
  "isOpen",
  "userData",
  "isFirstVisit"
);

export type PlasmicSidebarLite__OverridesType = {
  modalSidebar?: Flex__<typeof AntdModal>;
  profile?: Flex__<"div">;
  favicon?: Flex__<typeof Embed>;
  checkUserPendingReserve?: Flex__<typeof ApiRequest>;
};

export interface DefaultSidebarLiteProps {
  isOpen?: boolean;
  userData?: any;
  isFirstVisit?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebarLite__RenderFunc(props: {
  variants: PlasmicSidebarLite__VariantsArgs;
  args: PlasmicSidebarLite__ArgsType;
  overrides: PlasmicSidebarLite__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isOpen: true,
          isFirstVisit: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modalSidebar.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkUserPendingReserve.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkUserPendingReserve"
      },
      {
        path: "checkUserPendingReserve.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkUserPendingReserve"
      },
      {
        path: "checkUserPendingReserve.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkUserPendingReserve"
      },
      {
        path: "reserveCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <AntdModal
      data-plasmic-name={"modalSidebar"}
      data-plasmic-override={overrides.modalSidebar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.modalSidebar
      )}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens
      )}
      hideFooter={true}
      maskClosable={true}
      modalContentClassName={classNames({
        [sty["pcls_5-xVnXxYFT26"]]: hasVariant(
          globalVariants,
          "screen",
          "mobile"
        ),
        [sty["pcls_6uO5EoaemhPe"]]: true
      })}
      modalScopeClassName={sty["modalSidebar__modal"]}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["modalSidebar", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["modalSidebar", "open"])}
      title={
        <div
          className={classNames(projectcss.all, sty.freeBox__kk5Ux)}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    variable: {
                      objRoot: $state,
                      variablePath: ["modalSidebar", "open"]
                    }
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalOpen"] != null &&
              typeof $steps["updateModalOpen"] === "object" &&
              typeof $steps["updateModalOpen"].then === "function"
            ) {
              $steps["updateModalOpen"] = await $steps["updateModalOpen"];
            }
          }}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__h277)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"24px"}
            loading={"lazy"}
            src={
              hasVariant(globalVariants, "screen", "mobile")
                ? {
                    src: "/plasmic/website_starter/images/image36.svg",
                    fullWidth: 21,
                    fullHeight: 24,
                    aspectRatio: 0.875
                  }
                : {
                    src: "/plasmic/website_starter/images/image36.svg",
                    fullWidth: 21,
                    fullHeight: 24,
                    aspectRatio: 0.875
                  }
            }
          />
        </div>
      }
      trigger={
        <React.Fragment>
          <div className={classNames(projectcss.all, sty.freeBox___1Ji3)}>
            <div className={classNames(projectcss.all, sty.freeBox__kYudi)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__by4VB)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "20px"
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? "27px"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "30px"
                    : "30px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image37.svg",
                  fullWidth: 21,
                  fullHeight: 24,
                  aspectRatio: 0.875
                }}
              />

              {(() => {
                try {
                  return !(
                    $state.checkUserPendingReserve.data == null ||
                    $state.checkUserPendingReserve.loading == true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__iubDy)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vl7Py
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.checkUserPendingReserve.data[0].count_id.toLocaleString(
                            "fa"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "1";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"checkUserPendingReserve"}
            data-plasmic-override={overrides.checkUserPendingReserve}
            className={classNames(
              "__wab_instance",
              sty.checkUserPendingReserve
            )}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "checkUserPendingReserve",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "checkUserPendingReserve",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "checkUserPendingReserve",
                "data"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["checkUserPendingReserve"] = ref;
            }}
            url={
              "https://gateway.rentamon.com/webhook/check_user_pending_request"
            }
          />
        </React.Fragment>
      }
      width={
        hasVariant(globalVariants, "screen", "smallMobile")
          ? "96%"
          : hasVariant(globalVariants, "screen", "mobile")
          ? "90%"
          : hasVariant(globalVariants, "screen", "tablet")
          ? "60%"
          : "30%"
      }
      wrapClassName={classNames({ [sty["pcls_Z730rzLN63NE"]]: true })}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jMgG, "vh")}>
        <div
          data-plasmic-name={"profile"}
          data-plasmic-override={overrides.profile}
          className={classNames(projectcss.all, sty.profile)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__btFs)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobile") ? "60px" : "auto"
            }
            height={"50px"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.userData.user_info.profile_image;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/website_starter/images/image31.svg",
                    fullWidth: 96,
                    fullHeight: 96,
                    aspectRatio: 1
                  };
                }
                throw e;
              }
            })()}
            width={"50px"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mzpOl
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.userData.user_info.first_name.concat(
                    " ",
                    $props.userData.user_info.last_name
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__j7EUv)} />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.freeBox__lIV5,
            (() => {
              try {
                return $props.isFirstVisit == true
                  ? "blinkBorderTourGuide clickable"
                  : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalSidebarOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modalSidebar", "open"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalSidebarOpen"] != null &&
              typeof $steps["updateModalSidebarOpen"] === "object" &&
              typeof $steps["updateModalSidebarOpen"].then === "function"
            ) {
              $steps["updateModalSidebarOpen"] = await $steps[
                "updateModalSidebarOpen"
              ];
            }

            $steps["goToReservations"] = true
              ? (() => {
                  const actionArgs = { destination: `/reservations` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToReservations"] != null &&
              typeof $steps["goToReservations"] === "object" &&
              typeof $steps["goToReservations"].then === "function"
            ) {
              $steps["goToReservations"] = await $steps["goToReservations"];
            }
          }}
        >
          <Icon26Icon
            className={classNames(projectcss.all, sty.svg__oIo1I)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cynG0
            )}
          >
            {"\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.freeBox__l095F,
            "clickable"
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalSidebarOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modalSidebar", "open"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalSidebarOpen"] != null &&
              typeof $steps["updateModalSidebarOpen"] === "object" &&
              typeof $steps["updateModalSidebarOpen"].then === "function"
            ) {
              $steps["updateModalSidebarOpen"] = await $steps[
                "updateModalSidebarOpen"
              ];
            }

            $steps["goToLitePanel"] = true
              ? (() => {
                  const actionArgs = { destination: `/calendar` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToLitePanel"] != null &&
              typeof $steps["goToLitePanel"] === "object" &&
              typeof $steps["goToLitePanel"].then === "function"
            ) {
              $steps["goToLitePanel"] = await $steps["goToLitePanel"];
            }
          }}
        >
          <Icon6Icon
            className={classNames(projectcss.all, sty.svg__iQzsq)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zb2Fb
            )}
          >
            {
              "\u062a\u0642\u0648\u06cc\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
            }
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.freeBox__tlNZb,
            "clickable"
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalSidebarOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modalSidebar", "open"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalSidebarOpen"] != null &&
              typeof $steps["updateModalSidebarOpen"] === "object" &&
              typeof $steps["updateModalSidebarOpen"].then === "function"
            ) {
              $steps["updateModalSidebarOpen"] = await $steps[
                "updateModalSidebarOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return window.open(
                          "https://goftino.com/c/WgsGXv",
                          "_blank"
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__dPlwQ)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__u5Iri
            )}
            onClick={async event => {
              const $steps = {};
            }}
          >
            {
              "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0645\u062a\u0646\u06cc (\u0686\u062a)"
            }
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.freeBox__leQpu,
            "clickable"
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalSidebarOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modalSidebar", "open"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalSidebarOpen"] != null &&
              typeof $steps["updateModalSidebarOpen"] === "object" &&
              typeof $steps["updateModalSidebarOpen"].then === "function"
            ) {
              $steps["updateModalSidebarOpen"] = await $steps[
                "updateModalSidebarOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return (window.location.href = "tel:02191096227");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <Icon47Icon
            className={classNames(projectcss.all, sty.svg__f5Gw0)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b8G0B
            )}
            onClick={async event => {
              const $steps = {};
            }}
          >
            {
              "\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u062a\u0644\u0641\u0646\u06cc \u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7-\u06f0\u06f2\u06f1"
            }
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.freeBox__eQk8M,
            "clickable"
          )}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalSidebarOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modalSidebar", "open"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalSidebarOpen"] != null &&
              typeof $steps["updateModalSidebarOpen"] === "object" &&
              typeof $steps["updateModalSidebarOpen"].then === "function"
            ) {
              $steps["updateModalSidebarOpen"] = await $steps[
                "updateModalSidebarOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return (window.location.href =
                          "https://sso.rentamon.com/auth/logout?callback=https://rentamon.com/panel");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <Icon11Icon
            className={classNames(projectcss.all, sty.svg__tb8Uf)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b7Az
            )}
          >
            {"\u062e\u0631\u0648\u062c"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ccSrh)}
        >
          <Icon15Icon
            className={classNames(projectcss.all, sty.svg__s4Q44)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return (window.location.href =
                            "https://rentamon.com/");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hNZ
            )}
          >
            {
              "\u06f0\u06f2\u06f1-\u06f9\u06f1\u06f0\u06f9\u06f6\u06f2\u06f2\u06f7\n\u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u062f\u0627\u0631\u06cc \u0627\u0632 \u06f9 \u062a\u0627 \u06f1\u06f7"
            }
          </div>
        </Stack__>
      </div>
      <Embed
        data-plasmic-name={"favicon"}
        data-plasmic-override={overrides.favicon}
        className={classNames("__wab_instance", sty.favicon)}
        code={
          '<script>\r\n  // \u0633\u0627\u062e\u062a\u0646 \u0644\u06cc\u0646\u06a9 favicon\r\n  const faviconLink = document.createElement("link");\r\n  faviconLink.rel = "icon";\r\n  faviconLink.href = "https://media.rentamon.com/icon%2Ficon.svg";\r\n  faviconLink.sizes = "192x192";\r\n  document.head.appendChild(faviconLink);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \u062a\u0646\u0638\u06cc\u0645\u0627\u062a PWA \r\nconst appleTouchIcon = document.createElement("link");\r\nappleTouchIcon.rel = "apple-touch-icon";\r\nappleTouchIcon.href = "https://media.rentamon.com/icon%2Fappicon.png";\r\nappleTouchIcon.sizes = "180x180";\r\ndocument.head.appendChild(appleTouchIcon);\r\n\r\n// \u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0646\u06af \u0648 \u0646\u0645\u0627\u06cc\u0634 PWA\r\nconst themeColorMeta = document.createElement("meta");\r\nthemeColorMeta.name = "theme-color";\r\nthemeColorMeta.content = "#fcfcfc";\r\ndocument.head.appendChild(themeColorMeta);\r\n\r\nconst appleWebAppMeta = document.createElement("meta");\r\nappleWebAppMeta.name = "apple-mobile-web-app-capable";\r\nappleWebAppMeta.content = "yes";\r\ndocument.head.appendChild(appleWebAppMeta);\r\n\r\nconst appleWebAppTitle = document.createElement("meta");\r\nappleWebAppTitle.name = "apple-mobile-web-app-title";\r\nappleWebAppTitle.content = "\u0631\u0646\u062a\u0627\u0645\u0648\u0646";\r\ndocument.head.appendChild(appleWebAppTitle);\r\n\r\nconst metaAppleWebAppStatusBar = document.createElement("meta");\r\nmetaAppleWebAppStatusBar.name = "apple-mobile-web-app-status-bar-style";\r\nmetaAppleWebAppStatusBar.content = "default";\r\ndocument.head.appendChild(metaAppleWebAppStatusBar);\r\n\r\n// \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 manifest.json\r\nconst manifestLink = document.createElement("link");\r\nmanifestLink.rel = "manifest";\r\ndocument.head.appendChild(manifestLink);\r\n\r\n// \u0633\u0627\u062e\u062a \u0648 \u062b\u0628\u062a manifest.json \u062f\u0627\u062e\u0644 \u0635\u0641\u062d\u0647\r\nconst manifestContent = {\r\n  name: "\u0631\u0646\u062a\u0627\u0645\u0648\u0646",\r\n  short_name: "\u0631\u0646\u062a\u0627\u0645\u0648\u0646",\r\n  icons: [\r\n    {\r\n      src: "https://media.rentamon.com/icon%2Fappicon.png",\r\n      sizes: "192x192",\r\n      type: "image/png"\r\n    },\r\n    {\r\n      src: "https://media.rentamon.com/icon%2Fappicon.png",\r\n      sizes: "512x512",\r\n      type: "image/png"\r\n    }\r\n  ],\r\n  theme_color: "#fcfcfc",\r\n  background_color: "#fcfcfc",\r\n  display: "standalone",\r\n  start_url: "/",\r\n  scope: "/",\r\n  \r\n};\r\n\r\n// \u0627\u06cc\u062c\u0627\u062f \u0641\u0627\u06cc\u0644 \u0648 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0628\u0647 \u0645\u0631\u0648\u0631\u06af\u0631\r\nconst manifestBlob = new Blob([JSON.stringify(manifestContent)], { type: "application/json" });\r\nconst manifestURL = URL.createObjectURL(manifestBlob);\r\nmanifestLink.href = manifestURL;\r\n\r\n// \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 Splash Screen \u0628\u0631\u0627\u06cc iOS\r\nconst splashScreen = document.createElement("link");\r\nsplashScreen.rel = "apple-touch-startup-image";\r\nsplashScreen.href = "https://media.rentamon.com/icon%2Fappicon.png";\r\ndocument.head.appendChild(splashScreen);\r\n\r\n\r\n// \u062b\u0628\u062a Service Worker \u0628\u0631\u0627\u06cc \u0642\u0627\u0628\u0644\u06cc\u062a\u200c\u0647\u0627\u06cc PWA\r\nif ("serviceWorker" in navigator) {\r\n  window.addEventListener("load", () => {\r\n    navigator.serviceWorker\r\n      .register("sw.js")\r\n      .then(reg => console.log("Service Worker \u062b\u0628\u062a \u0634\u062f", reg))\r\n      .catch(err => console.error("\u062e\u0637\u0627 \u062f\u0631 \u062b\u0628\u062a Service Worker", err));\r\n  });\r\n}\r\n</script>\r\n\r\n<!-- Service Worker \u062f\u0627\u062e\u0644\u06cc (sw.js) -->\r\n<script>\r\nif (!navigator.serviceWorker.controller) {\r\n  const swScript = document.createElement("script");\r\n  swScript.textContent = `\r\n    self.addEventListener("install", event => {\r\n      console.log("Service Worker \u0646\u0635\u0628 \u0634\u062f.");\r\n      event.waitUntil(\r\n        caches.open("rentamon-cache").then(cache => {\r\n          return cache.addAll([\r\n            "/",\r\n            "/index.html",\r\n            "/styles.css",\r\n            "/script.js",\r\n            "https://media.rentamon.com/icon%2Ficon.svg",\r\n            "https://media.rentamon.com/icon%2Fsplashscreen.svg"\r\n          ]);\r\n        })\r\n      );\r\n    });\r\n\r\n    self.addEventListener("fetch", event => {\r\n      event.respondWith(\r\n        caches.match(event.request).then(response => {\r\n          return response || fetch(event.request);\r\n        })\r\n      );\r\n    });\r\n  `;\r\n  document.body.appendChild(swScript);\r\n}\r\n</script>\r\n\r\n'
        }
      />
    </AntdModal>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  modalSidebar: [
    "modalSidebar",
    "profile",
    "favicon",
    "checkUserPendingReserve"
  ],
  profile: ["profile"],
  favicon: ["favicon"],
  checkUserPendingReserve: ["checkUserPendingReserve"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  modalSidebar: typeof AntdModal;
  profile: "div";
  favicon: typeof Embed;
  checkUserPendingReserve: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarLite__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarLite__VariantsArgs;
    args?: PlasmicSidebarLite__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarLite__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarLite__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebarLite__ArgProps,
          internalVariantPropNames: PlasmicSidebarLite__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebarLite__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modalSidebar") {
    func.displayName = "PlasmicSidebarLite";
  } else {
    func.displayName = `PlasmicSidebarLite.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarLite = Object.assign(
  // Top-level PlasmicSidebarLite renders the root element
  makeNodeComponent("modalSidebar"),
  {
    // Helper components rendering sub-elements
    profile: makeNodeComponent("profile"),
    favicon: makeNodeComponent("favicon"),
    checkUserPendingReserve: makeNodeComponent("checkUserPendingReserve"),

    // Metadata about props expected for PlasmicSidebarLite
    internalVariantProps: PlasmicSidebarLite__VariantProps,
    internalArgProps: PlasmicSidebarLite__ArgProps
  }
);

export default PlasmicSidebarLite;
/* prettier-ignore-end */
