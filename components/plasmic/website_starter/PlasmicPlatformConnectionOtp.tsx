// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: R8Lwj3DU9BxT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicPlatformConnectionOtp.module.css"; // plasmic-import: R8Lwj3DU9BxT/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicPlatformConnectionOtp__VariantMembers = {};
export type PlasmicPlatformConnectionOtp__VariantsArgs = {};
type VariantPropType = keyof PlasmicPlatformConnectionOtp__VariantsArgs;
export const PlasmicPlatformConnectionOtp__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPlatformConnectionOtp__ArgsType = {};
type ArgPropType = keyof PlasmicPlatformConnectionOtp__ArgsType;
export const PlasmicPlatformConnectionOtp__ArgProps = new Array<ArgPropType>();

export type PlasmicPlatformConnectionOtp__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  homsaDis?: Flex__<typeof PlasmicImg__>;
  homsaCon?: Flex__<typeof PlasmicImg__>;
  jajigaDis?: Flex__<typeof PlasmicImg__>;
  jajigaCon?: Flex__<typeof PlasmicImg__>;
  jabamaDis?: Flex__<typeof PlasmicImg__>;
  jabamaCon?: Flex__<typeof PlasmicImg__>;
  otaghakDis?: Flex__<typeof PlasmicImg__>;
  otaghakCon?: Flex__<typeof PlasmicImg__>;
  shabDis?: Flex__<typeof PlasmicImg__>;
  shabCon?: Flex__<typeof PlasmicImg__>;
  mizboonDis?: Flex__<typeof PlasmicImg__>;
  mizboonCon?: Flex__<typeof PlasmicImg__>;
  mihmanshoDis?: Flex__<typeof PlasmicImg__>;
  mihmanshoCon?: Flex__<typeof PlasmicImg__>;
  jabamaModal?: Flex__<typeof AntdModal>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  jajigaModal?: Flex__<typeof AntdModal>;
  numberJajiga?: Flex__<typeof AntdInputNumber>;
  otpJajiga?: Flex__<typeof AntdInputNumber>;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultPlatformConnectionOtpProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlatformConnectionOtp__RenderFunc(props: {
  variants: PlasmicPlatformConnectionOtp__VariantsArgs;
  args: PlasmicPlatformConnectionOtp__ArgsType;
  overrides: PlasmicPlatformConnectionOtp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "jabamaModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jajigaModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "numberJajiga.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otpJajiga.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <DataFetcher
        data-plasmic-name={"httpRestApiFetcher"}
        data-plasmic-override={overrides.httpRestApiFetcher}
        className={classNames("__wab_instance", sty.httpRestApiFetcher)}
        dataName={"fetchedData"}
        errorDisplay={
          <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
        }
        errorName={"fetchError"}
        headers={{
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            Authorization:
              "Bearer ${document.cookie.split('; ').find(row => row.startsWith('usso_access_token')).split('=')[1]}"
          },
          withCredentials: true
        }}
        loadingDisplay={
          <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
        }
        method={"GET"}
        noLayout={false}
        url={(() => {
          try {
            return "https://rentamon-api.liara.run/api/website_statuses/?property_id=1";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx => (
            <div className={classNames(projectcss.all, sty.freeBox__zPjhK)}>
              <div className={classNames(projectcss.all, sty.freeBox__duSl)}>
                <PlasmicImg__
                  data-plasmic-name={"homsaDis"}
                  data-plasmic-override={overrides.homsaDis}
                  alt={""}
                  className={classNames(sty.homsaDis)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/01/homsa.png"
                  }
                  width={"40"}
                />

                {(() => {
                  try {
                    return $ctx.fetchedData.status.homsa === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"homsaCon"}
                    data-plasmic-override={overrides.homsaCon}
                    alt={""}
                    className={classNames(sty.homsaCon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/01/homsa.png"
                    }
                    width={"40"}
                  />
                ) : null}
                <PlasmicImg__
                  data-plasmic-name={"jajigaDis"}
                  data-plasmic-override={overrides.jajigaDis}
                  alt={""}
                  className={classNames(sty.jajigaDis)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2023/12/jajiga.png"
                  }
                  width={"40"}
                />

                {(() => {
                  try {
                    return $ctx.fetchedData.status.jajiga === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"jajigaCon"}
                    data-plasmic-override={overrides.jajigaCon}
                    alt={""}
                    className={classNames(sty.jajigaCon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateJajigaModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["jajigaModal", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateJajigaModalOpen"] != null &&
                        typeof $steps["updateJajigaModalOpen"] === "object" &&
                        typeof $steps["updateJajigaModalOpen"].then ===
                          "function"
                      ) {
                        $steps["updateJajigaModalOpen"] = await $steps[
                          "updateJajigaModalOpen"
                        ];
                      }
                    }}
                    src={
                      "https://rentamon.com/wp-content/uploads/2023/12/jajiga.png"
                    }
                    width={"40"}
                  />
                ) : null}
                <PlasmicImg__
                  data-plasmic-name={"jabamaDis"}
                  data-plasmic-override={overrides.jabamaDis}
                  alt={""}
                  className={classNames(sty.jabamaDis)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2023/12/jabama.png"
                  }
                  width={"40"}
                />

                {(() => {
                  try {
                    return $ctx.fetchedData.status.jabama === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"jabamaCon"}
                    data-plasmic-override={overrides.jabamaCon}
                    alt={""}
                    className={classNames(sty.jabamaCon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateJabamaModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["jabamaModal", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateJabamaModalOpen"] != null &&
                        typeof $steps["updateJabamaModalOpen"] === "object" &&
                        typeof $steps["updateJabamaModalOpen"].then ===
                          "function"
                      ) {
                        $steps["updateJabamaModalOpen"] = await $steps[
                          "updateJabamaModalOpen"
                        ];
                      }
                    }}
                    src={
                      "https://rentamon.com/wp-content/uploads/2023/12/jabama.png"
                    }
                    width={"40"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $ctx.fetchedData.status.otaghak === false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"otaghakDis"}
                    data-plasmic-override={overrides.otaghakDis}
                    alt={""}
                    className={classNames(sty.otaghakDis)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2023/12/otaghak-1.png"
                    }
                    width={"40"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $ctx.fetchedData.status.otaghak === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"otaghakCon"}
                    data-plasmic-override={overrides.otaghakCon}
                    alt={""}
                    className={classNames(sty.otaghakCon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2023/12/otaghak-1.png"
                    }
                    width={"40"}
                  />
                ) : null}
                <PlasmicImg__
                  data-plasmic-name={"shabDis"}
                  data-plasmic-override={overrides.shabDis}
                  alt={""}
                  className={classNames(sty.shabDis)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/01/shab.png"
                  }
                  width={"40"}
                />

                {(() => {
                  try {
                    return $ctx.fetchedData.status.shab === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"shabCon"}
                    data-plasmic-override={overrides.shabCon}
                    alt={""}
                    className={classNames(sty.shabCon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/01/shab.png"
                    }
                    width={"40"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $ctx.fetchedData.status.mizboon === false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"mizboonDis"}
                    data-plasmic-override={overrides.mizboonDis}
                    alt={""}
                    className={classNames(sty.mizboonDis)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/01/mizboon.png"
                    }
                    width={"40"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $ctx.fetchedData.status.mizboon === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"mizboonCon"}
                    data-plasmic-override={overrides.mizboonCon}
                    alt={""}
                    className={classNames(sty.mizboonCon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={"40"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/01/mizboon.png"
                    }
                    width={"40"}
                  />
                ) : null}
                <PlasmicImg__
                  data-plasmic-name={"mihmanshoDis"}
                  data-plasmic-override={overrides.mihmanshoDis}
                  alt={""}
                  className={classNames(sty.mihmanshoDis)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/01/mihmansho2.png"
                  }
                  width={"40"}
                />

                <PlasmicImg__
                  data-plasmic-name={"mihmanshoCon"}
                  data-plasmic-override={overrides.mihmanshoCon}
                  alt={""}
                  className={classNames(sty.mihmanshoCon)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/01/mihmansho2.png"
                  }
                  width={"40"}
                />

                <AntdModal
                  data-plasmic-name={"jabamaModal"}
                  data-plasmic-override={overrides.jabamaModal}
                  children={null}
                  className={classNames("__wab_instance", sty.jabamaModal)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  modalScopeClassName={sty["jabamaModal__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "jabamaModal",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, ["jabamaModal", "open"])}
                  title={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hQm67
                        )}
                      >
                        {
                          "\u0647\u0646\u0648\u0632 \u0628\u0647 \u062c\u0627\u0628\u0627\u0645\u0627 \u0648\u0635\u0644 \u0646\u06cc\u0633\u062a\u06cc\n\u0648 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0627\u0648\u0646\u200c\u062c\u0627 \u062b\u0628\u062a \u0646\u0645\u06cc\u200c\u0634\u0647!"
                        }
                      </div>
                      <AntdInputNumber
                        data-plasmic-name={"numberInput"}
                        data-plasmic-override={overrides.numberInput}
                        addonBefore={null}
                        className={classNames(
                          "__wab_instance",
                          sty.numberInput
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "numberInput",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        prefix={null}
                        type={"number"}
                        value={generateStateValueProp($state, [
                          "numberInput",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xIja
                        )}
                      >
                        {
                          "\u0645\u0648\u0628\u0627\u06cc\u0644\u06cc \u06a9\u0647 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627 \u062b\u0628\u062a \u06a9\u0631\u062f\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646"
                        }
                      </div>
                    </React.Fragment>
                  }
                  trigger={null}
                />

                <AntdModal
                  data-plasmic-name={"jajigaModal"}
                  data-plasmic-override={overrides.jajigaModal}
                  className={classNames("__wab_instance", sty.jajigaModal)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalContentClassName={classNames({
                    [sty["pcls_O95Ml4aFoLAP"]]: true
                  })}
                  modalScopeClassName={sty["jajigaModal__modal"]}
                  okText={"\u0627\u0631\u0633\u0627\u0644"}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "jajigaModal",
                      "open"
                    ]).apply(null, eventArgs);
                  }}
                  open={generateStateValueProp($state, ["jajigaModal", "open"])}
                  title={
                    <div
                      data-plasmic-name={"columns"}
                      data-plasmic-override={overrides.columns}
                      className={classNames(projectcss.all, sty.columns)}
                      dir={"rtl"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__dFOmf
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          height={"42"}
                          loading={"lazy"}
                          src={
                            "https://rentamon.com/wp-content/uploads/2023/12/jajiga.png"
                          }
                          width={"42"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__bFDaK
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ut7Ym
                          )}
                        >
                          {
                            "\u0647\u0646\u0648\u0632 \u0628\u0647 \u062c\u0627\u062c\u06cc\u06af\u0627 \u0648\u0635\u0644 \u0646\u06cc\u0633\u062a\u06cc \u0648 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0627\u0648\u0646\u200c\u062c\u0627 \u062b\u0628\u062a \u0646\u0645\u06cc\u200c\u0634\u0647!"
                          }
                        </div>
                      </div>
                    </div>
                  }
                  trigger={null}
                  wrapClassName={classNames({
                    [sty["pcls_XYS7wya5C2Qg"]]: true
                  })}
                >
                  <AntdInputNumber
                    data-plasmic-name={"numberJajiga"}
                    data-plasmic-override={overrides.numberJajiga}
                    bordered={true}
                    className={classNames("__wab_instance", sty.numberJajiga)}
                    controls={false}
                    disabled={false}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "numberJajiga",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644\u06cc \u06a9\u0647 \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627 \u062b\u0628\u062a \u06a9\u0631\u062f\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646"
                    }
                    step={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={"number"}
                    value={generateStateValueProp($state, [
                      "numberJajiga",
                      "value"
                    ])}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__h5GIo)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                (() => {
                                  try {
                                    return "https://rentamon-api.liara.run/api/sendotp";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      $state.numberJajiga.phone =
                                        $state.numberJajiga.number;
                                      return ($state.numberJajiga.website =
                                        "jajiga");
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wp840
                      )}
                    >
                      {"\u0627\u0631\u0633\u0627\u0644"}
                    </div>
                  </Button>
                  <AntdInputNumber
                    data-plasmic-name={"otpJajiga"}
                    data-plasmic-override={overrides.otpJajiga}
                    className={classNames("__wab_instance", sty.otpJajiga)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "otpJajiga",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\ud83d\udcac \u06a9\u062f \u0648\u0631\u0648\u062f \u067e\u06cc\u0627\u0645\u06a9\u06cc \u06a9\u0647 \u0627\u0644\u0627\u0646 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0631\u062f\u06cc"
                    }
                    type={"number"}
                    value={generateStateValueProp($state, [
                      "otpJajiga",
                      "value"
                    ])}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__d6Geh)}
                  >
                    {"\u062b\u0628\u062a \u06a9\u062f"}
                  </Button>
                </AntdModal>
              </div>
            </div>
          )}
        </DataCtxReader__>
      </DataFetcher>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "homsaDis",
    "homsaCon",
    "jajigaDis",
    "jajigaCon",
    "jabamaDis",
    "jabamaCon",
    "otaghakDis",
    "otaghakCon",
    "shabDis",
    "shabCon",
    "mizboonDis",
    "mizboonCon",
    "mihmanshoDis",
    "mihmanshoCon",
    "jabamaModal",
    "numberInput",
    "jajigaModal",
    "numberJajiga",
    "otpJajiga",
    "columns",
    "img"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "homsaDis",
    "homsaCon",
    "jajigaDis",
    "jajigaCon",
    "jabamaDis",
    "jabamaCon",
    "otaghakDis",
    "otaghakCon",
    "shabDis",
    "shabCon",
    "mizboonDis",
    "mizboonCon",
    "mihmanshoDis",
    "mihmanshoCon",
    "jabamaModal",
    "numberInput",
    "jajigaModal",
    "numberJajiga",
    "otpJajiga",
    "columns",
    "img"
  ],
  homsaDis: ["homsaDis"],
  homsaCon: ["homsaCon"],
  jajigaDis: ["jajigaDis"],
  jajigaCon: ["jajigaCon"],
  jabamaDis: ["jabamaDis"],
  jabamaCon: ["jabamaCon"],
  otaghakDis: ["otaghakDis"],
  otaghakCon: ["otaghakCon"],
  shabDis: ["shabDis"],
  shabCon: ["shabCon"],
  mizboonDis: ["mizboonDis"],
  mizboonCon: ["mizboonCon"],
  mihmanshoDis: ["mihmanshoDis"],
  mihmanshoCon: ["mihmanshoCon"],
  jabamaModal: ["jabamaModal", "numberInput"],
  numberInput: ["numberInput"],
  jajigaModal: ["jajigaModal", "numberJajiga", "otpJajiga", "columns", "img"],
  numberJajiga: ["numberJajiga"],
  otpJajiga: ["otpJajiga"],
  columns: ["columns", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  homsaDis: typeof PlasmicImg__;
  homsaCon: typeof PlasmicImg__;
  jajigaDis: typeof PlasmicImg__;
  jajigaCon: typeof PlasmicImg__;
  jabamaDis: typeof PlasmicImg__;
  jabamaCon: typeof PlasmicImg__;
  otaghakDis: typeof PlasmicImg__;
  otaghakCon: typeof PlasmicImg__;
  shabDis: typeof PlasmicImg__;
  shabCon: typeof PlasmicImg__;
  mizboonDis: typeof PlasmicImg__;
  mizboonCon: typeof PlasmicImg__;
  mihmanshoDis: typeof PlasmicImg__;
  mihmanshoCon: typeof PlasmicImg__;
  jabamaModal: typeof AntdModal;
  numberInput: typeof AntdInputNumber;
  jajigaModal: typeof AntdModal;
  numberJajiga: typeof AntdInputNumber;
  otpJajiga: typeof AntdInputNumber;
  columns: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlatformConnectionOtp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPlatformConnectionOtp__VariantsArgs;
    args?: PlasmicPlatformConnectionOtp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPlatformConnectionOtp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPlatformConnectionOtp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlatformConnectionOtp__ArgProps,
          internalVariantPropNames: PlasmicPlatformConnectionOtp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlatformConnectionOtp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlatformConnectionOtp";
  } else {
    func.displayName = `PlasmicPlatformConnectionOtp.${nodeName}`;
  }
  return func;
}

export const PlasmicPlatformConnectionOtp = Object.assign(
  // Top-level PlasmicPlatformConnectionOtp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    homsaDis: makeNodeComponent("homsaDis"),
    homsaCon: makeNodeComponent("homsaCon"),
    jajigaDis: makeNodeComponent("jajigaDis"),
    jajigaCon: makeNodeComponent("jajigaCon"),
    jabamaDis: makeNodeComponent("jabamaDis"),
    jabamaCon: makeNodeComponent("jabamaCon"),
    otaghakDis: makeNodeComponent("otaghakDis"),
    otaghakCon: makeNodeComponent("otaghakCon"),
    shabDis: makeNodeComponent("shabDis"),
    shabCon: makeNodeComponent("shabCon"),
    mizboonDis: makeNodeComponent("mizboonDis"),
    mizboonCon: makeNodeComponent("mizboonCon"),
    mihmanshoDis: makeNodeComponent("mihmanshoDis"),
    mihmanshoCon: makeNodeComponent("mihmanshoCon"),
    jabamaModal: makeNodeComponent("jabamaModal"),
    numberInput: makeNodeComponent("numberInput"),
    jajigaModal: makeNodeComponent("jajigaModal"),
    numberJajiga: makeNodeComponent("numberJajiga"),
    otpJajiga: makeNodeComponent("otpJajiga"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicPlatformConnectionOtp
    internalVariantProps: PlasmicPlatformConnectionOtp__VariantProps,
    internalArgProps: PlasmicPlatformConnectionOtp__ArgProps
  }
);

export default PlasmicPlatformConnectionOtp;
/* prettier-ignore-end */
