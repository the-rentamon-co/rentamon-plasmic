// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: gvjKIi6-pXeG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicReservations.module.css"; // plasmic-import: gvjKIi6-pXeG/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicReservations__VariantMembers = {};
export type PlasmicReservations__VariantsArgs = {};
type VariantPropType = keyof PlasmicReservations__VariantsArgs;
export const PlasmicReservations__VariantProps = new Array<VariantPropType>();

export type PlasmicReservations__ArgsType = {};
type ArgPropType = keyof PlasmicReservations__ArgsType;
export const PlasmicReservations__ArgProps = new Array<ArgPropType>();

export type PlasmicReservations__OverridesType = {
  root?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  profile?: Flex__<typeof ApiRequest>;
  container?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  main?: Flex__<"div">;
  _1?: Flex__<"div">;
  _11?: Flex__<"div">;
  _12?: Flex__<"div">;
  userPhone?: Flex__<"div">;
  _2?: Flex__<"div">;
  _16?: Flex__<"div">;
  _13?: Flex__<"div">;
  _14?: Flex__<"div">;
  _15?: Flex__<"div">;
  shab?: Flex__<typeof PlasmicImg__>;
  jabama?: Flex__<typeof PlasmicImg__>;
  jajiga?: Flex__<typeof PlasmicImg__>;
  mihmansho?: Flex__<typeof PlasmicImg__>;
  mizbon?: Flex__<typeof PlasmicImg__>;
  homsa?: Flex__<typeof PlasmicImg__>;
  otaghak?: Flex__<typeof PlasmicImg__>;
  reserveMainStack?: Flex__<"div">;
  website?: Flex__<"div">;
  date?: Flex__<"div">;
  name?: Flex__<"div">;
  reserveData?: Flex__<typeof ApiRequest>;
  img?: Flex__<typeof PlasmicImg__>;
  returnButton?: Flex__<"div">;
  favicon?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultReservationsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReservations__RenderFunc(props: {
  variants: PlasmicReservations__VariantsArgs;
  args: PlasmicReservations__ArgsType;
  overrides: PlasmicReservations__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reserveData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "reserveData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "reserveData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "modalData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nZsBh)}>
            <SideBar2
              data-plasmic-name={"sideBar2"}
              data-plasmic-override={overrides.sideBar2}
              className={classNames("__wab_instance", sty.sideBar2)}
              isOpen={false}
              userData={(() => {
                try {
                  return $state.profile.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div className={classNames(projectcss.all, sty.freeBox__bMTr4)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ia94Z
                )}
              >
                {
                  "\u0644\u06cc\u0633\u062a \u0631\u0632\u0631\u0648\u0647\u0627"
                }
              </div>
            </div>
            <ApiRequest
              data-plasmic-name={"profile"}
              data-plasmic-override={overrides.profile}
              className={classNames("__wab_instance", sty.profile)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["profile", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["profile"] = ref;
              }}
              url={"https://api.rentamon.com/api/user_info?property_id=1"}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(projectcss.all, sty.container)}
          >
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["modal", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3CnqH)}
                >
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "شب";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"shab"}
                      data-plasmic-override={overrides.shab}
                      alt={""}
                      className={classNames(sty.shab)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image20.svg",
                        fullWidth: 46,
                        fullHeight: 45,
                        aspectRatio: 1.022222
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "جاباما";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"jabama"}
                      data-plasmic-override={overrides.jabama}
                      alt={""}
                      className={classNames(sty.jabama)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image19.svg",
                              fullWidth: 45,
                              fullHeight: 46,
                              aspectRatio: 0.978261
                            }
                          : {
                              src: "/plasmic/website_starter/images/image19.svg",
                              fullWidth: 45,
                              fullHeight: 46,
                              aspectRatio: 0.978261
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "جاجیگا";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"jajiga"}
                      data-plasmic-override={overrides.jajiga}
                      alt={""}
                      className={classNames(sty.jajiga)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/jajigaWebp.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "مهمانشو";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"mihmansho"}
                      data-plasmic-override={overrides.mihmansho}
                      alt={""}
                      className={classNames(sty.mihmansho)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image21.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                          : {
                              src: "/plasmic/website_starter/images/image21.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "میزبون";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"mizbon"}
                      data-plasmic-override={overrides.mizbon}
                      alt={""}
                      className={classNames(sty.mizbon)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image15.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                          : {
                              src: "/plasmic/website_starter/images/image15.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "هومسا";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"homsa"}
                      data-plasmic-override={overrides.homsa}
                      alt={""}
                      className={classNames(sty.homsa)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image18.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                          : {
                              src: "/plasmic/website_starter/images/image18.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "اتاقک";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"otaghak"}
                      data-plasmic-override={overrides.otaghak}
                      alt={""}
                      className={classNames(sty.otaghak)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image13.svg",
                              fullWidth: 46,
                              fullHeight: 46,
                              aspectRatio: 1
                            }
                          : {
                              src: "/plasmic/website_starter/images/image13.svg",
                              fullWidth: 46,
                              fullHeight: 46,
                              aspectRatio: 1
                            }
                      }
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cmWvx
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].platfromName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              }
              trigger={null}
              width={"350"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"main"}
                data-plasmic-override={overrides.main}
                hasGap={true}
                className={classNames(projectcss.all, sty.main)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"_1"}
                  data-plasmic-override={overrides._1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._1)}
                >
                  <div
                    data-plasmic-name={"_11"}
                    data-plasmic-override={overrides._11}
                    className={classNames(projectcss.all, sty._11)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ueQv
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData[0].GuestName;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7AhQ6
                      )}
                    >
                      {"\u06cc\u0627\u0641\u062a \u0646\u0634\u062f"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zpJea
                      )}
                    >
                      {"\u06cc\u0627\u0641\u062a \u0646\u0634\u062f"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"_12"}
                    data-plasmic-override={overrides._12}
                    className={classNames(projectcss.all, sty._12)}
                  >
                    <div
                      data-plasmic-name={"userPhone"}
                      data-plasmic-override={overrides.userPhone}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.userPhone
                      )}
                    >
                      {"\u06cc\u0627\u0641\u062a \u0646\u0634\u062f"}
                    </div>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._2)}
                >
                  <div
                    data-plasmic-name={"_16"}
                    data-plasmic-override={overrides._16}
                    className={classNames(projectcss.all, sty._16)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gBs01
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData[0].propertyName;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "1403/4/5";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"_13"}
                    data-plasmic-override={overrides._13}
                    className={classNames(projectcss.all, sty._13)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9S9Bm
                      )}
                    >
                      {"\u0648\u0631\u0648\u062f:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v23TN
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData[0].enterDate;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "1403/4/5";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"_14"}
                    data-plasmic-override={overrides._14}
                    className={classNames(projectcss.all, sty._14)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hBBpW
                      )}
                    >
                      {"\u062e\u0631\u0648\u062c:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jGiIb
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.modalData[0].lavedate;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "1403/4/5";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"_15"}
                    data-plasmic-override={overrides._15}
                    className={classNames(projectcss.all, sty._15)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Zpvl
                      )}
                    >
                      {"\u0645\u0628\u0644\u063a \u06a9\u0644:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ityMc
                      )}
                    >
                      {"\u06cc\u0627\u0641\u062a \u0646\u0634\u062f"}
                    </div>
                  </div>
                </Stack__>
              </Stack__>
              <Button
                className={classNames("__wab_instance", sty.button__cJdtF)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          }
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a"}
              </Button>
            </AntdModal>
            <Stack__
              as={"div"}
              data-plasmic-name={"reserveMainStack"}
              data-plasmic-override={overrides.reserveMainStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.reserveMainStack)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.reserveData.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uJ85I)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen2"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.modalData = [
                                {
                                  GuestName:
                                    $state.reserveData.data[currentIndex]
                                      .GuestName,
                                  platfromName:
                                    $state.reserveData.data[currentIndex]
                                      .platfromName,
                                  enterDate:
                                    $state.reserveData.data[
                                      currentIndex
                                    ].enterDate.split(" ")[0],
                                  lavedate:
                                    $state.reserveData.data[currentIndex]
                                      .laveDate,
                                  platfromName:
                                    $state.reserveData.data[currentIndex]
                                      .houseName,
                                  propertyName:
                                    $state.reserveData.data[currentIndex]
                                      .property_name
                                }
                              ])
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen2"] != null &&
                        typeof $steps["updateModalOpen2"] === "object" &&
                        typeof $steps["updateModalOpen2"].then === "function"
                      ) {
                        $steps["updateModalOpen2"] = await $steps[
                          "updateModalOpen2"
                        ];
                      }

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                  >
                    <div
                      data-plasmic-name={"website"}
                      data-plasmic-override={overrides.website}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.website
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.reserveData.data[currentIndex]
                                .GuestName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.reserveData.data[currentIndex]
                                .GuestName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.reserveData.data[currentIndex]
                                .GuestName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                    <div
                      data-plasmic-name={"date"}
                      data-plasmic-override={overrides.date}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.date
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.reserveData.data[
                              currentIndex
                            ].enterDate.split(" ")[0];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u06f1\u06f4\u06f0\u06f3/\u06f0\u06f4/\u06f1\u06f2";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      data-plasmic-name={"name"}
                      data-plasmic-override={overrides.name}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.name
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "smallMobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.reserveData.data[currentIndex]
                                .houseName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0634\u0628";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.reserveData.data[currentIndex]
                                .houseName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0634\u0628";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.reserveData.data[currentIndex]
                                .houseName;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0634\u0628";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                );
              })}
              <ApiRequest
                data-plasmic-name={"reserveData"}
                data-plasmic-override={overrides.reserveData}
                children={null}
                className={classNames("__wab_instance", sty.reserveData)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eqa1B
                    )}
                  >
                    {
                      "\u062e\u0637 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637"
                    }
                  </div>
                }
                loadingDisplay={
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"160px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["reserveData"] = ref;
                }}
                url={
                  "https://gateway.rentamon.com/webhook/2beea5b6-eb8c-47d6-9746-fe093e22ea39"
                }
              />
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zwnkN)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__maw5U
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          <Button className={classNames("__wab_instance", sty.button__x5Anb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tqdbP
              )}
            >
              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
            </div>
          </Button>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              '<script>\r\n  // \u0633\u0627\u062e\u062a\u0646 \u06cc\u06a9 \u062a\u06af link\r\n  const link = document.createElement("link");\r\n  link.rel = "icon"; // \u0646\u0648\u0639 \u0644\u06cc\u0646\u06a9: \u0622\u06cc\u06a9\u0648\u0646\r\n  link.href = "https://rentamon.com/wp-content/uploads/2023/08/R-Logo-7059df.png"; // \u0622\u062f\u0631\u0633 \u062a\u0635\u0648\u06cc\u0631\r\n  link.sizes = "192x192"; // \u0633\u0627\u06cc\u0632 \u0622\u06cc\u06a9\u0648\u0646\r\n\r\n  // \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0644\u06cc\u0646\u06a9 \u0628\u0647 \u062a\u06af <head>\r\n  document.head.appendChild(link);\r\n</script>\r\n'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://app.rentamon.com/panel/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideBar2",
    "profile",
    "container",
    "modal",
    "main",
    "_1",
    "_11",
    "_12",
    "userPhone",
    "_2",
    "_16",
    "_13",
    "_14",
    "_15",
    "shab",
    "jabama",
    "jajiga",
    "mihmansho",
    "mizbon",
    "homsa",
    "otaghak",
    "reserveMainStack",
    "website",
    "date",
    "name",
    "reserveData",
    "img",
    "returnButton",
    "favicon",
    "sideEffect"
  ],
  sideBar2: ["sideBar2"],
  profile: ["profile"],
  container: [
    "container",
    "modal",
    "main",
    "_1",
    "_11",
    "_12",
    "userPhone",
    "_2",
    "_16",
    "_13",
    "_14",
    "_15",
    "shab",
    "jabama",
    "jajiga",
    "mihmansho",
    "mizbon",
    "homsa",
    "otaghak",
    "reserveMainStack",
    "website",
    "date",
    "name",
    "reserveData",
    "img"
  ],
  modal: [
    "modal",
    "main",
    "_1",
    "_11",
    "_12",
    "userPhone",
    "_2",
    "_16",
    "_13",
    "_14",
    "_15",
    "shab",
    "jabama",
    "jajiga",
    "mihmansho",
    "mizbon",
    "homsa",
    "otaghak"
  ],
  main: [
    "main",
    "_1",
    "_11",
    "_12",
    "userPhone",
    "_2",
    "_16",
    "_13",
    "_14",
    "_15"
  ],
  _1: ["_1", "_11", "_12", "userPhone"],
  _11: ["_11"],
  _12: ["_12", "userPhone"],
  userPhone: ["userPhone"],
  _2: ["_2", "_16", "_13", "_14", "_15"],
  _16: ["_16"],
  _13: ["_13"],
  _14: ["_14"],
  _15: ["_15"],
  shab: ["shab"],
  jabama: ["jabama"],
  jajiga: ["jajiga"],
  mihmansho: ["mihmansho"],
  mizbon: ["mizbon"],
  homsa: ["homsa"],
  otaghak: ["otaghak"],
  reserveMainStack: [
    "reserveMainStack",
    "website",
    "date",
    "name",
    "reserveData",
    "img"
  ],
  website: ["website"],
  date: ["date"],
  name: ["name"],
  reserveData: ["reserveData", "img"],
  img: ["img"],
  returnButton: ["returnButton"],
  favicon: ["favicon"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideBar2: typeof SideBar2;
  profile: typeof ApiRequest;
  container: "div";
  modal: typeof AntdModal;
  main: "div";
  _1: "div";
  _11: "div";
  _12: "div";
  userPhone: "div";
  _2: "div";
  _16: "div";
  _13: "div";
  _14: "div";
  _15: "div";
  shab: typeof PlasmicImg__;
  jabama: typeof PlasmicImg__;
  jajiga: typeof PlasmicImg__;
  mihmansho: typeof PlasmicImg__;
  mizbon: typeof PlasmicImg__;
  homsa: typeof PlasmicImg__;
  otaghak: typeof PlasmicImg__;
  reserveMainStack: "div";
  website: "div";
  date: "div";
  name: "div";
  reserveData: typeof ApiRequest;
  img: typeof PlasmicImg__;
  returnButton: "div";
  favicon: typeof Embed;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReservations__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReservations__VariantsArgs;
    args?: PlasmicReservations__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReservations__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReservations__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReservations__ArgProps,
          internalVariantPropNames: PlasmicReservations__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReservations__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReservations";
  } else {
    func.displayName = `PlasmicReservations.${nodeName}`;
  }
  return func;
}

export const PlasmicReservations = Object.assign(
  // Top-level PlasmicReservations renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideBar2: makeNodeComponent("sideBar2"),
    profile: makeNodeComponent("profile"),
    container: makeNodeComponent("container"),
    modal: makeNodeComponent("modal"),
    main: makeNodeComponent("main"),
    _1: makeNodeComponent("_1"),
    _11: makeNodeComponent("_11"),
    _12: makeNodeComponent("_12"),
    userPhone: makeNodeComponent("userPhone"),
    _2: makeNodeComponent("_2"),
    _16: makeNodeComponent("_16"),
    _13: makeNodeComponent("_13"),
    _14: makeNodeComponent("_14"),
    _15: makeNodeComponent("_15"),
    shab: makeNodeComponent("shab"),
    jabama: makeNodeComponent("jabama"),
    jajiga: makeNodeComponent("jajiga"),
    mihmansho: makeNodeComponent("mihmansho"),
    mizbon: makeNodeComponent("mizbon"),
    homsa: makeNodeComponent("homsa"),
    otaghak: makeNodeComponent("otaghak"),
    reserveMainStack: makeNodeComponent("reserveMainStack"),
    website: makeNodeComponent("website"),
    date: makeNodeComponent("date"),
    _name: makeNodeComponent("name"),
    reserveData: makeNodeComponent("reserveData"),
    img: makeNodeComponent("img"),
    returnButton: makeNodeComponent("returnButton"),
    favicon: makeNodeComponent("favicon"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicReservations
    internalVariantProps: PlasmicReservations__VariantProps,
    internalArgProps: PlasmicReservations__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReservations;
/* prettier-ignore-end */
