/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: gvjKIi6-pXeG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import SideBar2 from "../../SideBar2"; // plasmic-import: 03ZPQfFyBXgI/component
import SidebarLite from "../../SidebarLite"; // plasmic-import: NKEuaTqYxvdh/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import ToastMessageRnt from "../../ToastMessageRnt"; // plasmic-import: _mkSLPxHmSdr/component
import TextInput2 from "../../TextInput2"; // plasmic-import: MGm7xuldRCuA/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import ReservationsRecordList from "../../ReservationsRecordList"; // plasmic-import: dDeToLEgGJS_/component
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Switch } from "@/fragment/components/switch"; // plasmic-import: fYS4AeYPi-91/codeComponent

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicReservations.module.css"; // plasmic-import: gvjKIi6-pXeG/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicReservations__VariantMembers = {};
export type PlasmicReservations__VariantsArgs = {};
type VariantPropType = keyof PlasmicReservations__VariantsArgs;
export const PlasmicReservations__VariantProps = new Array<VariantPropType>();

export type PlasmicReservations__ArgsType = {};
type ArgPropType = keyof PlasmicReservations__ArgsType;
export const PlasmicReservations__ArgProps = new Array<ArgPropType>();

export type PlasmicReservations__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  header?: Flex__<"div">;
  sidebar?: Flex__<"div">;
  sideBar2?: Flex__<typeof SideBar2>;
  sidebarLite?: Flex__<typeof SidebarLite>;
  profile?: Flex__<typeof ApiRequest>;
  checkFeatureStatus?: Flex__<typeof ApiRequest>;
  toastMessageRnt?: Flex__<typeof ToastMessageRnt>;
  filterSection?: Flex__<"div">;
  filterAndSearch?: Flex__<"div">;
  search?: Flex__<"div">;
  searchBox?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput2>;
  searchIcon?: Flex__<"div">;
  filter?: Flex__<"div">;
  filterMenu?: Flex__<typeof AntdModal>;
  sort?: Flex__<"div">;
  container?: Flex__<"div">;
  titles?: Flex__<"div">;
  property?: Flex__<"div">;
  guestName?: Flex__<"div">;
  arriveDate?: Flex__<"div">;
  source?: Flex__<"div">;
  reserveMainStack2?: Flex__<"div">;
  reserveData2?: Flex__<typeof ApiRequest>;
  reserveMainStack?: Flex__<"div">;
  reserveData?: Flex__<typeof ApiRequest>;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  pagination2?: Flex__<"div">;
  pagination?: Flex__<typeof AntdPagination>;
  intro?: Flex__<"div">;
  returnButton?: Flex__<"div">;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
  finalModal?: Flex__<typeof AntdModal>;
  title2?: Flex__<"div">;
  cancelle?: Flex__<typeof AntdButton>;
  confirmed?: Flex__<typeof AntdModal>;
  main2?: Flex__<"div">;
  _3?: Flex__<"div">;
  _17?: Flex__<"div">;
  _18?: Flex__<"div">;
  status2?: Flex__<"div">;
  falseStatus2?: Flex__<"div">;
  _4?: Flex__<"div">;
  _19?: Flex__<"div">;
  _110?: Flex__<"div">;
  _111?: Flex__<"div">;
  _112?: Flex__<"div">;
  shab2?: Flex__<typeof PlasmicImg__>;
  jabama2?: Flex__<typeof PlasmicImg__>;
  jajiga2?: Flex__<typeof PlasmicImg__>;
  mihmansho2?: Flex__<typeof PlasmicImg__>;
  mizbon2?: Flex__<typeof PlasmicImg__>;
  homsa2?: Flex__<typeof PlasmicImg__>;
  otaghak2?: Flex__<typeof PlasmicImg__>;
  title?: Flex__<"div">;
  source2?: Flex__<"div">;
  property2?: Flex__<"div">;
  settlement?: Flex__<"div">;
  settlement2?: Flex__<typeof Switch>;
  confierm?: Flex__<"div">;
  confierm2?: Flex__<typeof Switch>;
  cancelled?: Flex__<"div">;
  cancelled3?: Flex__<typeof Switch>;
  button?: Flex__<"div">;
};

export interface DefaultReservationsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReservations__RenderFunc(props: {
  variants: PlasmicReservations__VariantsArgs;
  args: PlasmicReservations__ArgsType;
  overrides: PlasmicReservations__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reserveData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "reserveData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "reserveData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "modalData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "confirmed.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
            ? false
            : false
      },
      {
        path: "finalModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "selectedAction",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reserveData2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData2"
      },
      {
        path: "reserveData2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData2"
      },
      {
        path: "reserveData2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData2"
      },
      {
        path: "checkFeatureStatus.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkFeatureStatus"
      },
      {
        path: "checkFeatureStatus.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkFeatureStatus"
      },
      {
        path: "checkFeatureStatus.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "checkFeatureStatus"
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isTheFirstVisit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tourSteps",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "isSeenEditReserve",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                function isReserveEditSeen() {
                  return localStorage.getItem("reserveedit_seen") !== null;
                }
                if (isReserveEditSeen()) {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "bookingId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showMobileError",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "phoneError",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.reserveData.data[0].meta.current_page;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.reserveData.data[0].meta.page_size;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "reserveDataPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 50
      },
      {
        path: "dataSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 50
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reservations",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "filterMenu.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showFilter",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "settlement2.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "confierm2.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancelled3.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["checkUserIsLoging"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          const isPlasmicStudio =
                            Object.values($ctx.Fragment.previewApiConfig)
                              .length > 0;
                          console.log("side effect started");
                          async function refreshToken() {
                            if (isPlasmicStudio) return;
                            console.log("side effect in the cudition");
                            try {
                              const response = await fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              );
                              console.log("Refreshed Token in 10 minutes");
                              if (response.ok) {
                                const data = await response.json();
                                console.log(
                                  "Token refreshed successfully:",
                                  data
                                );
                              } else {
                                console.error(
                                  "Failed to refresh token:",
                                  response.status
                                );
                              }
                            } catch (error) {
                              console.error("Error refreshing token:", error);
                            }
                          }
                          setInterval(refreshToken, 300000);
                          refreshToken();
                          function getCookie(name) {
                            const value = `; ${globalThis.document.cookie}`;
                            const parts = value.split(`; ${name}=`);
                            if (parts.length === 2)
                              return parts.pop().split(";").shift();
                          }
                          const ussoRefreshAvailable =
                            getCookie("usso_refresh_available") || false;
                          console.log(
                            "this is ussoRefresh: ",
                            ussoRefreshAvailable
                          );
                          const ussoAccessAvailable =
                            getCookie("usso_access_available") || false;
                          console.log(
                            "this is ussoAccessAvailable: ",
                            ussoAccessAvailable
                          );
                          if (!ussoAccessAvailable && !isPlasmicStudio) {
                            if (!ussoRefreshAvailable) {
                              console.log("got here in redirect");
                              return (window.location.href =
                                "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/reservations/");
                            } else {
                              console.log("got here in refreshToken");
                              return fetch(
                                "https://sso.rentamon.com/auth/refresh",
                                {
                                  method: "GET",
                                  credentials: "include"
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error("Failed to refresh token");
                                  }
                                  return response.json();
                                })
                                .then(data => {
                                  console.log("Token refreshed:", data);
                                  window.location.reload();
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  window.location.href =
                                    "https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/reservations/";
                                });
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkUserIsLoging"] != null &&
                typeof $steps["checkUserIsLoging"] === "object" &&
                typeof $steps["checkUserIsLoging"].then === "function"
              ) {
                $steps["checkUserIsLoging"] = await $steps["checkUserIsLoging"];
              }

              $steps["runCode3"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          let vt = null;
                          const vtRaw = getCookieValue("vt");
                          if (vtRaw !== null) {
                            vt = parseInt(vtRaw, 10);
                            return ($state.userType = vt);
                          } else {
                            return ($state.userType = null);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode3"] != null &&
                typeof $steps["runCode3"] === "object" &&
                typeof $steps["runCode3"].then === "function"
              ) {
                $steps["runCode3"] = await $steps["runCode3"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://gateway.rentamon.com/webhook/get_user_segment"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        function setCookie(name, value, hours) {
                          let expires = "";
                          if (hours) {
                            const date = new Date();
                            date.setTime(
                              date.getTime() + hours * 60 * 60 * 1000
                            );
                            expires = "; expires=" + date.toUTCString();
                          }
                          document.cookie =
                            name + "=" + (value || "") + expires + "; path=/";
                        }
                        const flag = $steps.invokeGlobalAction.data.flag;
                        const existing = $state.userType;
                        if (
                          typeof existing === "undefined" ||
                          existing === null
                        ) {
                          $state.userType = flag;
                          return setCookie("vt", flag.toString(), 0.3333);
                        } else if (parseInt(existing, 10) !== flag) {
                          $state.userType = flag;
                          return setCookie("vt", flag.toString(), 0.3333);
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function getCookieValue(cookieName) {
                            const cookies = document.cookie
                              .split(";")
                              .map(cookie => cookie.trim());
                            for (const cookie of cookies) {
                              const [name, value] = cookie.split("=");
                              if (name === cookieName) {
                                return value;
                              }
                            }
                            return null;
                          }
                          if (document.cookie.includes("first_visit")) {
                            console.log("in the visit");
                            const first_visit = getCookieValue("first_visit");
                            if (first_visit != null) {
                              $state.isTheFirstVisit = true;
                            }
                            return console.log(
                              "first_visit:",
                              $state.isTheFirstVisit
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["removeSmartBookingAlert"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function setCookie(name, value, hours) {
                            let expires = "";
                            if (hours) {
                              const date = new Date();
                              date.setTime(
                                date.getTime() + hours * 60 * 60 * 1000
                              );
                              expires = "; expires=" + date.toUTCString();
                            }
                            document.cookie =
                              name + "=" + (value || "") + expires + "; path=/";
                          }
                          return setCookie("visit_alert", "true", 72);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["removeSmartBookingAlert"] != null &&
                typeof $steps["removeSmartBookingAlert"] === "object" &&
                typeof $steps["removeSmartBookingAlert"].then === "function"
              ) {
                $steps["removeSmartBookingAlert"] = await $steps[
                  "removeSmartBookingAlert"
                ];
              }
            }}
          />

          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"sidebar"}
              data-plasmic-override={overrides.sidebar}
              className={classNames(projectcss.all, sty.sidebar)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__itHf)}>
                <SideBar2
                  data-plasmic-name={"sideBar2"}
                  data-plasmic-override={overrides.sideBar2}
                  className={classNames("__wab_instance", sty.sideBar2)}
                  isOpen={false}
                  userData={(() => {
                    try {
                      return $state.profile.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : (() => {
                    try {
                      return $state.userType == "1";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__jyxIz)}>
                <SideBar2
                  className={classNames("__wab_instance", sty.sideBar2__xw7PR)}
                  isOpen={false}
                  userData={(() => {
                    try {
                      return $state.profile.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : (() => {
                    try {
                      return $state.userType == "2";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___2XtMn)}>
                <SidebarLite
                  data-plasmic-name={"sidebarLite"}
                  data-plasmic-override={overrides.sidebarLite}
                  className={classNames("__wab_instance", sty.sidebarLite)}
                  isOpen={false}
                  userData={(() => {
                    try {
                      return $state.profile.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__bMTr4,
                hasVariant(globalVariants, "screen", "mobile")
                  ? "fadeinf"
                  : undefined
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ia94Z,
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ``
                    : "fadeinf"
                )}
              >
                {"\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ihmaM)}>
              <ApiRequest
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames("__wab_instance", sty.profile)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "profile",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["profile", "data"]).apply(
                    null,
                    eventArgs
                  );
                }}
                ref={ref => {
                  $refs["profile"] = ref;
                }}
                url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
              />
            </div>
          </div>
          <ApiRequest
            data-plasmic-name={"checkFeatureStatus"}
            data-plasmic-override={overrides.checkFeatureStatus}
            className={classNames("__wab_instance", sty.checkFeatureStatus)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m3Gfd
                )}
              >
                {" "}
              </div>
            }
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "checkFeatureStatus",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "checkFeatureStatus",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "checkFeatureStatus",
                "data"
              ]).apply(null, eventArgs);
            }}
            params={{ feature_name: "reservations" }}
            ref={ref => {
              $refs["checkFeatureStatus"] = ref;
            }}
            url={"https://gateway.rentamon.com/webhook/user_access"}
          >
            {(() => {
              try {
                return (() => {
                  return (
                    $state.checkFeatureStatus.data.status !== "ok" &&
                    $state.userType !== "2" &&
                    $state.isTheFirstVisit === false
                  );
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___7ZJdP)}>
                <ToastMessageRnt
                  data-plasmic-name={"toastMessageRnt"}
                  data-plasmic-override={overrides.toastMessageRnt}
                  buttonLink={`/settings`}
                  buttonText={"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
                  className={classNames("__wab_instance", sty.toastMessageRnt)}
                  logo={{
                    src: "/plasmic/website_starter/images/image72.svg",
                    fullWidth: 42,
                    fullHeight: 42,
                    aspectRatio: 1
                  }}
                  message={
                    "\u0628\u0631\u0627\u06cc \u0630\u062e\u06cc\u0631\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648 \u0633\u0627\u06cc\u062a \u0647\u0627\u060c \u00ab\u0631\u0632\u0631\u0648 \u0647\u0648\u0634\u0645\u0646\u062f\u00bb \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646"
                  }
                />
              </div>
            ) : null}
          </ApiRequest>
          <div
            data-plasmic-name={"filterSection"}
            data-plasmic-override={overrides.filterSection}
            className={classNames(projectcss.all, sty.filterSection)}
          >
            <div
              data-plasmic-name={"filterAndSearch"}
              data-plasmic-override={overrides.filterAndSearch}
              className={classNames(projectcss.all, sty.filterAndSearch)}
            >
              <div
                data-plasmic-name={"search"}
                data-plasmic-override={overrides.search}
                className={classNames(projectcss.all, sty.search)}
              >
                <div
                  data-plasmic-name={"searchBox"}
                  data-plasmic-override={overrides.searchBox}
                  className={classNames(projectcss.all, sty.searchBox)}
                >
                  <TextInput2
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    flat={[]}
                    inputMode={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "search"
                        : "search"
                    }
                    inputType={"text"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["search"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://gateway.rentamon.com/webhook/0c5061e8-5706-4dbb-a2c7-0f029bb481ad",
                                  (() => {
                                    try {
                                      return { q: $state.textInput2.value };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["search"] != null &&
                          typeof $steps["search"] === "object" &&
                          typeof $steps["search"].then === "function"
                        ) {
                          $steps["search"] = await $steps["search"];
                        }

                        $steps["updateData"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.reservations =
                                    $steps.search.data);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateData"] != null &&
                          typeof $steps["updateData"] === "object" &&
                          typeof $steps["updateData"].then === "function"
                        ) {
                          $steps["updateData"] = await $steps["updateData"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    padded={[]}
                    placeholder={"\u062c\u0633\u062a\u062c\u0648..."}
                  />

                  <div
                    data-plasmic-name={"searchIcon"}
                    data-plasmic-override={overrides.searchIcon}
                    className={classNames(projectcss.all, sty.searchIcon)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__s47Jd)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"22px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image168.svg",
                        fullWidth: 17,
                        fullHeight: 18,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"filter"}
                data-plasmic-override={overrides.filter}
                className={classNames(projectcss.all, sty.filter)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__xcOzY)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateTest"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showFilter"]
                            },
                            operation: 4,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateTest"] != null &&
                      typeof $steps["updateTest"] === "object" &&
                      typeof $steps["updateTest"].then === "function"
                    ) {
                      $steps["updateTest"] = await $steps["updateTest"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Pw5O
                    )}
                  >
                    {"\u0641\u06cc\u0644\u062a\u0631"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vuYJn)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image169.svg",
                      fullWidth: 19,
                      fullHeight: 16,
                      aspectRatio: undefined
                    }}
                  />

                  <AntdModal
                    data-plasmic-name={"filterMenu"}
                    data-plasmic-override={overrides.filterMenu}
                    children={null}
                    className={classNames("__wab_instance", sty.filterMenu)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["filterMenu__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "filterMenu",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "filterMenu",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___32O6F
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oWhg4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iosRu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1OLsG
                              )}
                            >
                              {"\u0641\u06cc\u0644\u062a\u0631\u0647\u0627"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__h9IvM
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__zSafx)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image169.svg",
                                fullWidth: 19,
                                fullHeight: 16,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__d9VvJ
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__uNm4E)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateFilterMenuOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["filterMenu", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateFilterMenuOpen"] != null &&
                                typeof $steps["updateFilterMenuOpen"] ===
                                  "object" &&
                                typeof $steps["updateFilterMenuOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateFilterMenuOpen"] = await $steps[
                                  "updateFilterMenuOpen"
                                ];
                              }
                            }}
                            src={{
                              src: "/plasmic/website_starter/images/image170.svg",
                              fullWidth: 18,
                              fullHeight: 18,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                      </div>
                    }
                    trigger={null}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"sort"}
                data-plasmic-override={overrides.sort}
                className={classNames(projectcss.all, sty.sort)}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : (() => {
                    try {
                      return $state.reserveData.data[0].item != "empty";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div
                data-plasmic-name={"titles"}
                data-plasmic-override={overrides.titles}
                className={classNames(projectcss.all, sty.titles, "fadeinf")}
              >
                <div
                  data-plasmic-name={"property"}
                  data-plasmic-override={overrides.property}
                  className={classNames(projectcss.all, sty.property)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dxAlP
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"
                      : "\u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"guestName"}
                  data-plasmic-override={overrides.guestName}
                  className={classNames(projectcss.all, sty.guestName)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yOpPu
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0645\u0647\u0645\u0627\u0646"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0645\u0647\u0645\u0627\u0646"
                      : "\u0646\u0627\u0645 \u0645\u0647\u0645\u0627\u0646"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"arriveDate"}
                  data-plasmic-override={overrides.arriveDate}
                  className={classNames(projectcss.all, sty.arriveDate)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m4Cx2
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "smallMobile")
                      ? "\u0648\u0631\u0648\u062f"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "\u0648\u0631\u0648\u062f"
                      : "\u062a\u0627\u0631\u06cc\u062e \u0648\u0631\u0648\u062f"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"source"}
                  data-plasmic-override={overrides.source}
                  className={classNames(projectcss.all, sty.source)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o8Lk1
                    )}
                  >
                    {"\u0645\u0639\u0631\u0641"}
                  </div>
                </div>
              </div>
            ) : null}
            <div
              data-plasmic-name={"reserveMainStack2"}
              data-plasmic-override={overrides.reserveMainStack2}
              className={classNames(projectcss.all, sty.reserveMainStack2)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.reserveData2.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__roKyl,
                      "clickable"
                    )}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: ($state.modalData = [
                                {
                                  GuestName:
                                    $state.reserveData2.data[currentIndex]
                                      .GuestName,
                                  platfromName:
                                    $state.reserveData2.data[currentIndex]
                                      .platformName,
                                  enterDate:
                                    $state.reserveData2.data[currentIndex]
                                      .checkIn,
                                  laveDate:
                                    $state.reserveData2.data[currentIndex]
                                      .checkOut,
                                  propertyName:
                                    $state.reserveData2.data[currentIndex]
                                      .property_name,
                                  status: "Pending",
                                  phone_number:
                                    $state.reserveData2.data[currentIndex]
                                      .phone_number,
                                  amount:
                                    $state.reserveData2.data[currentIndex]
                                      .amount,
                                  night:
                                    $state.reserveData2.data[currentIndex]
                                      .night,
                                  guests_count:
                                    $state.reserveData2.data[currentIndex]
                                      .guests_count,
                                  reserve_id:
                                    $state.reserveData2.data[currentIndex]
                                      .reserve_id,
                                  room_id:
                                    $state.reserveData2.data[currentIndex]
                                      .room_id,
                                  id: $state.reserveData2.data[currentIndex].id
                                }
                              ])
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }

                      $steps["updateModalOpen2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["confirmed", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen2"] != null &&
                        typeof $steps["updateModalOpen2"] === "object" &&
                        typeof $steps["updateModalOpen2"].then === "function"
                      ) {
                        $steps["updateModalOpen2"] = await $steps[
                          "updateModalOpen2"
                        ];
                      }
                    }}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return (
                                $state.reserveData.data.status !=
                                "access denied"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (
                                $state.reserveData.data.status !=
                                "access denied"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <ReservationsRecordList
                        cancelledBookings={(() => {
                          try {
                            return (
                              $state.reserveData2.data[currentIndex].status ==
                              "Cancelled"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.reservationsRecordList__j2Fns
                        )}
                        confirmedBookings={(() => {
                          try {
                            return (
                              $state.reserveData2.data[currentIndex].status ==
                              "Confirmed"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        currentIndex={currentIndex}
                        data={(() => {
                          try {
                            return $state.reserveData2.data[currentIndex];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        pastBookingsBox={(() => {
                          try {
                            return (
                              $state.reserveData2.data[currentIndex].status ==
                              "Past"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        pendingBookings={(() => {
                          try {
                            return true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                  </div>
                );
              })}
              <ApiRequest
                data-plasmic-name={"reserveData2"}
                data-plasmic-override={overrides.reserveData2}
                children={null}
                className={classNames("__wab_instance", sty.reserveData2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData2",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["reserveData2"] = ref;
                }}
                url={
                  "https://gateway.rentamon.com/webhook/get_pending_reserve?v=2"
                }
              />
            </div>
            <div
              data-plasmic-name={"reserveMainStack"}
              data-plasmic-override={overrides.reserveMainStack}
              className={classNames(projectcss.all, sty.reserveMainStack)}
              onScroll={async event => {
                const $steps = {};
              }}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.reservations;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uUMnB)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              value: (() => {
                                $state.bookingId = currentItem.reserve_id;
                                return ($state.modalData = [
                                  {
                                    GuestName: currentItem.guest_name,
                                    platfromName: currentItem.website,
                                    enterDate: currentItem.check_in,
                                    laveDate: currentItem.check_out,
                                    propertyName: currentItem.property_name,
                                    status: currentItem.status,
                                    phone_number: currentItem.phone_number,
                                    amount: currentItem.amount,
                                    night: currentItem.nights,
                                    guests_count: currentItem.guests_count,
                                    reserve_id: currentItem.booking_id,
                                    id: currentItem.id,
                                    created_at: currentItem.created_at,
                                    is_sattled: currentItem.is_settled,
                                    booking_id: currentItem.booking_id,
                                    alternative_booking_id:
                                      currentItem.alternative_booking_id
                                  }
                                ]);
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateVariable"] != null &&
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await $steps[
                          "updateStateVariable"
                        ];
                      }

                      $steps["updateModalOpen3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["tourSteps"]
                              },
                              operation: 0,
                              value:
                                $state.tourSteps == 0
                                  ? ($state.tourSteps = 1)
                                  : ($state.tourSteps = 0)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen3"] != null &&
                        typeof $steps["updateModalOpen3"] === "object" &&
                        typeof $steps["updateModalOpen3"].then === "function"
                      ) {
                        $steps["updateModalOpen3"] = await $steps[
                          "updateModalOpen3"
                        ];
                      }

                      $steps["updateModalOpen5"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let result = "";
                                  const bookingId =
                                    currentItem.alternative_booking_id;
                                  if (
                                    bookingId &&
                                    bookingId.startsWith("RNT")
                                  ) {
                                    result = bookingId.substring(3);
                                  } else {
                                    result = bookingId;
                                  }
                                  return window.open(
                                    `https://rentamon.com/bookings/${result}`,
                                    "_blank"
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen5"] != null &&
                        typeof $steps["updateModalOpen5"] === "object" &&
                        typeof $steps["updateModalOpen5"].then === "function"
                      ) {
                        $steps["updateModalOpen5"] = await $steps[
                          "updateModalOpen5"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__lAff,
                        (() => {
                          try {
                            return $state.isTheFirstVisit == true
                              ? "blinkBorderTourGuide clickable"
                              : "clickable";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? (() => {
                              try {
                                return (
                                  currentItem.alternative_booking_id != null
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return (
                                  currentItem.alternative_booking_id != null
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <ReservationsRecordList
                          cancelledBookings={(() => {
                            try {
                              return currentItem.status == "Cancelled";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.reservationsRecordList__lPd
                          )}
                          confirmedBookings={(() => {
                            try {
                              return currentItem.status == "Confirmed";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          currentIndex={currentIndex}
                          data={(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          firstVisit={(() => {
                            try {
                              return $state.isTheFirstVisit;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()}
                          pastBookingsBox={(() => {
                            try {
                              return currentItem.status == "Past";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          pendingBookings={(() => {
                            try {
                              return currentItem.status == "Pending";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            if (
                              currentItem.is_settled == false &&
                              currentItem.status === "Past"
                            ) {
                              return true;
                            } else {
                              return false;
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__wBj6S)}
                          displayHeight={"25px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image141.svg",
                            fullWidth: 23,
                            fullHeight: 23,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            if (
                              currentItem.is_settled == null &&
                              currentItem.status === "Past"
                            ) {
                              return true;
                            } else {
                              return false;
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__zkyxz)}
                          displayHeight={"25px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image142.svg",
                            fullWidth: 23,
                            fullHeight: 23,
                            aspectRatio: undefined
                          }}
                        />
                      ) : null}
                    </div>
                  </div>
                );
              })}
              {(() => {
                try {
                  return (
                    ($state.reservations.message != null) &
                    ($state.isTheFirstVisit != true)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rjo3V
                  )}
                >
                  {
                    "\u0645\u0648\u0631\u062f\u06cc \u067e\u06cc\u062f\u0627 \u0646\u0634\u062f"
                  }
                </div>
              ) : null}
              <ApiRequest
                data-plasmic-name={"reserveData"}
                data-plasmic-override={overrides.reserveData}
                children={null}
                className={classNames("__wab_instance", sty.reserveData)}
                errorDisplay={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eqa1B
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637"
                    }
                  </div>
                }
                loadingDisplay={(_par =>
                  !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                  (() => {
                    try {
                      return (() => {
                        const storedData = localStorage.getItem("reservations");
                        if (storedData) {
                          const parsedData = JSON.parse(storedData);
                          return parsedData;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItems = __plasmic_item_0;
                  const currentIndexs = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__giYau)}
                      key={currentIndexs}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToBookingInNewTab"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    let result = "";
                                    const bookingId =
                                      currentItem.alternative_booking_id;
                                    if (
                                      bookingId &&
                                      bookingId.startsWith("RNT")
                                    ) {
                                      result = bookingId.substring(3);
                                    } else {
                                      result = bookingId;
                                    }
                                    return window.open(
                                      `https://rentamon.com/bookings/${result}`,
                                      "_blank"
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToBookingInNewTab"] != null &&
                          typeof $steps["goToBookingInNewTab"] === "object" &&
                          typeof $steps["goToBookingInNewTab"].then ===
                            "function"
                        ) {
                          $steps["goToBookingInNewTab"] = await $steps[
                            "goToBookingInNewTab"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__strKl
                        )}
                      >
                        <ReservationsRecordList
                          cancelledBookings={(() => {
                            try {
                              return currentItems.status == "Cancelled";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.reservationsRecordList__lgeZv
                          )}
                          confirmedBookings={(() => {
                            try {
                              return currentItems.status == "Confirmed";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          currentIndex={(() => {
                            try {
                              return currentIndexs;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          data={(() => {
                            try {
                              return currentItems;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          pastBookingsBox={(() => {
                            try {
                              return currentItems.status == "Past";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          pendingBookings={(() => {
                            try {
                              return currentItems.status == "Pending";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    </div>
                  );
                })}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reserveData",
                    "data"
                  ]).apply(null, eventArgs);

                  (async data => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const reservations =
                                  $state.reserveData.data.result.data;
                                if (
                                  Array.isArray(reservations) &&
                                  reservations.length > 0
                                ) {
                                  localStorage.setItem(
                                    "reservations",
                                    JSON.stringify(reservations)
                                  );
                                }
                                $state.reservations = reservations.result.data;
                                return console.log(
                                  "$state.reservations",
                                  $state.reservations
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["reserveData"] = ref;
                }}
                url={(() => {
                  try {
                    return `https://gateway.rentamon.com/webhook/getReserve?v=2&limit=${$state.dataSize}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              {(() => {
                try {
                  return $state.isTheFirstVisit && $state.tourSteps == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__p8NEt)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return $state.reserveData.data[0].item == null;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.reserveData.data[0].item == null;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cRiIk
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u0627\u06cc\u0646\u062c\u0627 \u0644\u06cc\u0633\u062a \u0631\u0632\u0631\u0648 \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u062b\u0628\u062a \u06a9\u0631\u062f\u06cc \u0631\u0648 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc\n\n"
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 600 }}
                        >
                          {
                            "\u062d\u0627\u0644\u0627 \u0631\u0648\u06cc \u0631\u0632\u0631\u0648 \u0628\u0632\u0646"
                          }
                        </span>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? (() => {
                          try {
                            return $state.reserveData.data[0].item != null;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.reserveData.data[0].item != null;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xK6Af
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {
                              "\u0647\u0646\u0648\u0632 \u0647\u06cc\u0686 \u0631\u0632\u0631\u0648\u06cc \u062b\u0628\u062a \u0646\u06a9\u0631\u062f\u06cc \u0627\u0648\u0644 \u0628\u0647 \u062a\u0642\u0648\u06cc\u0645 \u0628\u0631\u0648 \u0648 \u06cc\u06a9 \u0631\u0632\u0631\u0648 \u062b\u0628\u062a \u06a9\u0646"
                            }
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {
                              "\u0647\u0646\u0648\u0632 \u0647\u06cc\u0686 \u0631\u0632\u0631\u0648\u06cc \u062b\u0628\u062a \u0646\u06a9\u0631\u062f\u06cc!\r\n\u0627\u0648\u0644 \u0627\u0632 \u0645\u0646\u0648\u06cc \u067e\u0627\u06cc\u06cc\u0646 \u0628\u0631\u0648 \u0628\u0647 \u00ab\u062a\u0642\u0648\u06cc\u0645\u00bb \u0648 \u06cc\u06a9 \u0631\u0648\u0632 \u0631\u0648 \u00ab\u067e\u0631\u00bb \u06a9\u0646."
                            }
                          </span>
                        </React.Fragment>
                      )}
                    </div>
                  ) : null}
                </div>
              ) : null}
            </div>
          </div>
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            navPage={"reservations"}
            userType={(() => {
              try {
                return $state.userType;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            try {
              return !$state.isTheFirstVisit;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"pagination2"}
              data-plasmic-override={overrides.pagination2}
              className={classNames(projectcss.all, sty.pagination2)}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.pagination),
                  current: generateStateValueProp($state, [
                    "pagination",
                    "currentPage"
                  ]),
                  defaultCurrent: (() => {
                    try {
                      return $state.reserveData.data[0].meta.current_page;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1;
                      }
                      throw e;
                    }
                  })(),
                  defaultPageSize: (() => {
                    try {
                      return $state.reserveData.data[0].meta.page_size;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1;
                      }
                      throw e;
                    }
                  })(),
                  disabled: false,
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentPage",
                      ["pagination", "currentPage"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "startIndex",
                      ["pagination", "startIndex"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "endIndex",
                      ["pagination", "endIndex"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);

                    (async (page, pageSize) => {
                      const $steps = {};

                      $steps["updateReserveDataPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["reserveDataPage"]
                              },
                              operation: 0,
                              value: ($state.reserveDataPage =
                                $state.pagination.currentPage)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateReserveDataPage"] != null &&
                        typeof $steps["updateReserveDataPage"] === "object" &&
                        typeof $steps["updateReserveDataPage"].then ===
                          "function"
                      ) {
                        $steps["updateReserveDataPage"] = await $steps[
                          "updateReserveDataPage"
                        ];
                      }
                    }).apply(null, eventArgs);
                  },
                  onShowSizeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "pageSize",
                      ["pagination", "pageSize"],
                      AntdPagination_Helpers
                    ).apply(null, eventArgs);
                  },
                  pageSize: generateStateValueProp($state, [
                    "pagination",
                    "pageSize"
                  ]),
                  pageSizeOptions: [
                    { pageSize: 10 },
                    { pageSize: 20 },
                    { pageSize: 50 },
                    { pageSize: 100 }
                  ],
                  showQuickJumper: false,
                  simple: false,
                  size: "default",
                  total: (() => {
                    try {
                      return $state.reserveData.data[0].meta.total_count;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 30;
                      }
                      throw e;
                    }
                  })()
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentPage",
                      plasmicStateName: "pagination.currentPage"
                    },
                    {
                      name: "pageSize",
                      plasmicStateName: "pagination.pageSize"
                    },
                    {
                      name: "startIndex",
                      plasmicStateName: "pagination.startIndex"
                    },
                    {
                      name: "endIndex",
                      plasmicStateName: "pagination.endIndex"
                    }
                  ],
                  [],
                  AntdPagination_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdPagination
                    data-plasmic-name={"pagination"}
                    data-plasmic-override={overrides.pagination}
                    {...child$Props}
                  />
                );
              })()}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return (
                          $state.reservations.message == null &&
                          ($state.textInput2.value == "" ||
                            $state.textInput2.value == null) &&
                          !(
                            $state.cancelled3.checked ||
                            $state.confierm2.checked ||
                            $state.settlement2.checked
                          ) &&
                          $state.reserveData.data.result.data.length !=
                            $state.reserveData.data.result.meta.total_count
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $state.reservations.message == null &&
                          ($state.textInput2.value == "" ||
                            $state.textInput2.value == null) &&
                          !(
                            $state.cancelled3.checked ||
                            $state.confierm2.checked ||
                            $state.settlement2.checked
                          ) &&
                          $state.reserveData.data.result.data.length !=
                            $state.reserveData.data.result.meta.total_count
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__asROr)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDataSize"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dataSize"]
                            },
                            operation: 0,
                            value: ($state.dataSize = $state.dataSize + 30)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDataSize"] != null &&
                      typeof $steps["updateDataSize"] === "object" &&
                      typeof $steps["updateDataSize"].then === "function"
                    ) {
                      $steps["updateDataSize"] = await $steps["updateDataSize"];
                    }

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value: ($state.loading = true)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wcUHs
                    )}
                  >
                    {
                      "\u0646\u0645\u0627\u06cc\u0634 \u0628\u06cc\u0634\u062a\u0631"
                    }
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : (() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"intro"}
              data-plasmic-override={overrides.intro}
              className={classNames(projectcss.all, sty.intro)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return $state.textInput2.value == null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.textInput2.value == null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dMWfE
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0647\u0631 \u0632\u0645\u0627\u0646 \u0631\u0632\u0631\u0648 \u062c\u062f\u06cc\u062f\u06cc \u062f\u0631 \u062a\u0642\u0648\u06cc\u0645\u062a \u062b\u0628\u062a \u0634\u0647\u060c \u062c\u0632\u06cc\u06cc\u0627\u062a \u0627\u0648\u0646 \u0631\u0632\u0631\u0648 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u06cc\u0646\u062c\u0627 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u200c\u0634\u0647. \u0627\u06cc\u0646\u200c\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u062a\u0627\u0631\u06cc\u062e\u0686\u0647\u200c\u06cc \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u06af\u0630\u0634\u062a\u0647 \u0648 \u0622\u06cc\u0646\u062f\u0647 \u0631\u0648 \u0628\u0628\u06cc\u0646\u06cc."
                    : "\u0647\u0631 \u0632\u0645\u0627\u0646 \u0631\u0632\u0631\u0648 \u062c\u062f\u06cc\u062f\u06cc \u062f\u0631 \u062a\u0642\u0648\u06cc\u0645\u062a \u062b\u0628\u062a \u0634\u0647\u060c \u062c\u0632\u06cc\u06cc\u0627\u062a \u0627\u0648\u0646 \u0631\u0632\u0631\u0648 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u06cc\u0646\u062c\u0627 \u0630\u062e\u06cc\u0631\u0647 \u0645\u06cc\u200c\u0634\u0647. \u0627\u06cc\u0646\u200c\u062c\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u062a\u0627\u0631\u06cc\u062e\u0686\u0647\u200c\u06cc \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u06af\u0630\u0634\u062a\u0647 \u0648 \u0622\u06cc\u0646\u062f\u0647 \u0631\u0648 \u0628\u0628\u06cc\u0646\u06cc."}
                </div>
              ) : null}
            </div>
          ) : null}
          <div
            data-plasmic-name={"returnButton"}
            data-plasmic-override={overrides.returnButton}
            className={classNames(projectcss.all, sty.returnButton, "fix")}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__xhWvn,
                "clickable"
              )}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fx84W
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a "}
              </div>
            </div>
          </div>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div className={classNames(projectcss.all, sty.freeBox__pqKvw)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          ) : null}
          <AntdModal
            data-plasmic-name={"finalModal"}
            data-plasmic-override={overrides.finalModal}
            className={classNames("__wab_instance", sty.finalModal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["finalModal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["finalModal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["finalModal", "open"])}
            title={null}
            trigger={null}
            width={"320"}
          >
            <div
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(projectcss.all, sty.title2)}
            >
              {(() => {
                try {
                  return $state.selectedAction == "accept";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rTlw0
                  )}
                >
                  {"\u062a\u0627\u06cc\u06cc\u062f \u0631\u0632\u0631\u0648"}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.selectedAction != "accept";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Sx6O
                  )}
                >
                  {
                    "\u0631\u062f \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648"
                  }
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bmCxi)}>
              {(() => {
                try {
                  return $state.selectedAction == "accept";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__voHy
                  )}
                >
                  {
                    "\u0622\u06cc\u0627 \u0628\u0631\u0627\u06cc \u062a\u0627\u06cc\u06cc\u062f \u0627\u06cc\u0646 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u061f"
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.selectedAction != "accept";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2AOv
                  )}
                >
                  {
                    "\u0622\u06cc\u0627 \u0628\u0631\u0627\u06cc \u0631\u062f \u0627\u06cc\u0646 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u061f"
                  }
                </div>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u66Pv
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        return `از ${$state.modalData[0].enterDate} تا ${$state.modalData[0].laveDate}`;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0622\u06cc\u0627 \u0628\u0631\u0627\u06cc \u062a\u0627\u06cc\u06cc\u062f \u0627\u06cc\u0646 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u061f";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__frYnp
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.modalData[0].propertyName;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0622\u06cc\u0627 \u0628\u0631\u0627\u06cc \u062a\u0627\u06cc\u06cc\u062f \u0627\u06cc\u0646 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0631\u0632\u0631\u0648 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u061f";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__s4Gyp)}>
              {(() => {
                try {
                  return $state.selectedAction != "accept";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  className={classNames("__wab_instance", sty.button__rlPuY)}
                  color={"red"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://gateway.rentamon.com/webhook-test/cancel_reserve",
                              (() => {
                                try {
                                  return {
                                    reserve_id: $state.modalData[0].reserve_id,
                                    website: $state.modalData[0].platfromName,
                                    id: $state.modalData[0].id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateStateVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: ($state.reserveData2.data =
                              $state.reserveData2.data.filter(
                                item => item.id != $state.modalData[0].id
                              ))
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateVariable"] != null &&
                      typeof $steps["updateStateVariable"] === "object" &&
                      typeof $steps["updateStateVariable"].then === "function"
                    ) {
                      $steps["updateStateVariable"] = await $steps[
                        "updateStateVariable"
                      ];
                    }

                    $steps["updateFinalModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["finalModal", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFinalModalOpen"] != null &&
                      typeof $steps["updateFinalModalOpen"] === "object" &&
                      typeof $steps["updateFinalModalOpen"].then === "function"
                    ) {
                      $steps["updateFinalModalOpen"] = await $steps[
                        "updateFinalModalOpen"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__itsm2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oe8Iy
                      )}
                    >
                      {"\u0631\u062f "}
                    </div>
                  </div>
                </Button>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.selectedAction == "accept" &&
                    $state.modalData[0].platfromName == "مهمانشو"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  className={classNames("__wab_instance", sty.button__oVsZ)}
                  color={"green"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.open(
                                "https://www.mihmansho.com/account/home/requests"
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://gateway.rentamon.com/webhook/accept",
                              (() => {
                                try {
                                  return {
                                    reserve_id: $state.modalData[0].reserve_id,
                                    website: $state.modalData[0].platfromName,
                                    id: $state.modalData[0].id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateStateVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: ($state.reserveData2.data =
                              $state.reserveData2.data.filter(
                                item => item.id != $state.modalData[0].id
                              ))
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateVariable"] != null &&
                      typeof $steps["updateStateVariable"] === "object" &&
                      typeof $steps["updateStateVariable"].then === "function"
                    ) {
                      $steps["updateStateVariable"] = await $steps[
                        "updateStateVariable"
                      ];
                    }

                    $steps["updateFinalModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["finalModal", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFinalModalOpen"] != null &&
                      typeof $steps["updateFinalModalOpen"] === "object" &&
                      typeof $steps["updateFinalModalOpen"].then === "function"
                    ) {
                      $steps["updateFinalModalOpen"] = await $steps[
                        "updateFinalModalOpen"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__onQgL)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gjpqi
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__crffN)}
                      displayHeight={"14px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image47.svg",
                        fullWidth: 20,
                        fullHeight: 16,
                        aspectRatio: 1.25
                      }}
                    />
                  </div>
                </Button>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.selectedAction == "accept" &&
                    $state.modalData[0].platfromName != "مهمانشو"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  className={classNames("__wab_instance", sty.button__lAp9Z)}
                  color={"green"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://gateway.rentamon.com/webhook/accept",
                              (() => {
                                try {
                                  return {
                                    reserve_id: $state.modalData[0].reserve_id,
                                    website: $state.modalData[0].platfromName,
                                    id: $state.modalData[0].id,
                                    room_id: $state.modalData[0].room_id
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateStateVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: ($state.reserveData2.data =
                              $state.reserveData2.data.filter(
                                item => item.id != $state.modalData[0].id
                              ))
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateVariable"] != null &&
                      typeof $steps["updateStateVariable"] === "object" &&
                      typeof $steps["updateStateVariable"].then === "function"
                    ) {
                      $steps["updateStateVariable"] = await $steps[
                        "updateStateVariable"
                      ];
                    }

                    $steps["updateFinalModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["finalModal", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFinalModalOpen"] != null &&
                      typeof $steps["updateFinalModalOpen"] === "object" &&
                      typeof $steps["updateFinalModalOpen"].then === "function"
                    ) {
                      $steps["updateFinalModalOpen"] = await $steps[
                        "updateFinalModalOpen"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bqdUl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oCeS
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__fVfF)}
                      displayHeight={"14px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image47.svg",
                        fullWidth: 20,
                        fullHeight: 16,
                        aspectRatio: 1.25
                      }}
                    />
                  </div>
                </Button>
              ) : null}
              <AntdButton
                data-plasmic-name={"cancelle"}
                data-plasmic-override={overrides.cancelle}
                className={classNames("__wab_instance", sty.cancelle)}
                onClick={async () => {
                  const $steps = {};

                  $steps["updateAcceptModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["finalModal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAcceptModalOpen"] != null &&
                    typeof $steps["updateAcceptModalOpen"] === "object" &&
                    typeof $steps["updateAcceptModalOpen"].then === "function"
                  ) {
                    $steps["updateAcceptModalOpen"] = await $steps[
                      "updateAcceptModalOpen"
                    ];
                  }

                  $steps["updateConfirmedOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["confirmed", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateConfirmedOpen"] != null &&
                    typeof $steps["updateConfirmedOpen"] === "object" &&
                    typeof $steps["updateConfirmedOpen"].then === "function"
                  ) {
                    $steps["updateConfirmedOpen"] = await $steps[
                      "updateConfirmedOpen"
                    ];
                  }
                }}
                submitsForm={true}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7D8Vc
                  )}
                >
                  {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                </div>
              </AntdButton>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"confirmed"}
            data-plasmic-override={overrides.confirmed}
            className={classNames("__wab_instance", sty.confirmed)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["confirmed__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["confirmed", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["confirmed", "open"])}
            title={
              <React.Fragment>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5Y4YM)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__mcLi1)}
                    displayHeight={"14px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateConfirmedOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["confirmed", "open"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateConfirmedOpen"] != null &&
                        typeof $steps["updateConfirmedOpen"] === "object" &&
                        typeof $steps["updateConfirmedOpen"].then === "function"
                      ) {
                        $steps["updateConfirmedOpen"] = await $steps[
                          "updateConfirmedOpen"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image48.svg",
                      fullWidth: 18,
                      fullHeight: 18,
                      aspectRatio: 1
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Uxt4)}
                >
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "شب";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"shab2"}
                      data-plasmic-override={overrides.shab2}
                      alt={""}
                      className={classNames(sty.shab2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image20.svg",
                        fullWidth: 46,
                        fullHeight: 45,
                        aspectRatio: 1.022222
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "جاباما";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"jabama2"}
                      data-plasmic-override={overrides.jabama2}
                      alt={""}
                      className={classNames(sty.jabama2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image19.svg",
                              fullWidth: 45,
                              fullHeight: 46,
                              aspectRatio: 0.978261
                            }
                          : {
                              src: "/plasmic/website_starter/images/image19.svg",
                              fullWidth: 45,
                              fullHeight: 46,
                              aspectRatio: 0.978261
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "جاجیگا";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"jajiga2"}
                      data-plasmic-override={overrides.jajiga2}
                      alt={""}
                      className={classNames(sty.jajiga2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/jajigaWebp.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "مهمانشو";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"mihmansho2"}
                      data-plasmic-override={overrides.mihmansho2}
                      alt={""}
                      className={classNames(sty.mihmansho2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image21.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                          : {
                              src: "/plasmic/website_starter/images/image21.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "میزبون";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"mizbon2"}
                      data-plasmic-override={overrides.mizbon2}
                      alt={""}
                      className={classNames(sty.mizbon2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image15.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                          : {
                              src: "/plasmic/website_starter/images/image15.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "هومسا";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"homsa2"}
                      data-plasmic-override={overrides.homsa2}
                      alt={""}
                      className={classNames(sty.homsa2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image18.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                          : {
                              src: "/plasmic/website_starter/images/image18.svg",
                              fullWidth: 46,
                              fullHeight: 45,
                              aspectRatio: 1.022222
                            }
                      }
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.modalData[0].platfromName == "اتاقک";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"otaghak2"}
                      data-plasmic-override={overrides.otaghak2}
                      alt={""}
                      className={classNames(sty.otaghak2)}
                      displayHeight={"42px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        hasVariant(globalVariants, "screen", "mobile")
                          ? {
                              src: "/plasmic/website_starter/images/image13.svg",
                              fullWidth: 46,
                              fullHeight: 46,
                              aspectRatio: 1
                            }
                          : {
                              src: "/plasmic/website_starter/images/image13.svg",
                              fullWidth: 46,
                              fullHeight: 46,
                              aspectRatio: 1
                            }
                      }
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jqOs9
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].platfromName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </React.Fragment>
            }
            trigger={null}
            width={"350"}
          >
            <div
              data-plasmic-name={"main2"}
              data-plasmic-override={overrides.main2}
              className={classNames(projectcss.all, sty.main2)}
            >
              <div
                data-plasmic-name={"_3"}
                data-plasmic-override={overrides._3}
                className={classNames(projectcss.all, sty._3)}
              >
                <div
                  data-plasmic-name={"_17"}
                  data-plasmic-override={overrides._17}
                  className={classNames(projectcss.all, sty._17)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vtE6W
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].GuestName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nuOy2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].guests_count + " نفر";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "-";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oYiYb
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].night + " شب";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "-";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"_18"}
                  data-plasmic-override={overrides._18}
                  className={classNames(projectcss.all, sty._18)}
                >
                  <div className={classNames(projectcss.all, sty.freeBox__w2I)}>
                    {(() => {
                      try {
                        return $state.modalData[0].status == "Confirmed";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"status2"}
                        data-plasmic-override={overrides.status2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.status2
                        )}
                      >
                        {"\u0646\u0647\u0627\u06cc\u06cc \u0634\u062f\u0647"}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.modalData[0].status == "Cancelled";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"falseStatus2"}
                        data-plasmic-override={overrides.falseStatus2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.falseStatus2
                        )}
                      >
                        {"\u0644\u063a\u0648 \u0634\u062f\u0647"}
                      </div>
                    ) : null}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"_4"}
                data-plasmic-override={overrides._4}
                className={classNames(projectcss.all, sty._4)}
              >
                <div
                  data-plasmic-name={"_19"}
                  data-plasmic-override={overrides._19}
                  className={classNames(projectcss.all, sty._19)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aQF8
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].propertyName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "1403/4/5";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"_110"}
                  data-plasmic-override={overrides._110}
                  className={classNames(projectcss.all, sty._110)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lu5B
                    )}
                  >
                    {"\u0648\u0631\u0648\u062f:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vOGlR
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].enterDate;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "1403/4/5";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"_111"}
                  data-plasmic-override={overrides._111}
                  className={classNames(projectcss.all, sty._111)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__juapI
                    )}
                  >
                    {"\u062e\u0631\u0648\u062c:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xQaPv
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].laveDate;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "1403/4/5";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"_112"}
                  data-plasmic-override={overrides._112}
                  className={classNames(projectcss.all, sty._112)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nq9U
                    )}
                  >
                    {"\u0645\u0628\u0644\u063a \u06a9\u0644:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t2Zt
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.modalData[0].amount + " تومان";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "-";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yf6X9)}>
              <Button
                className={classNames("__wab_instance", sty.button__iyqlk)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen3"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectedAction"]
                          },
                          operation: 0,
                          value: "accept"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen3"] != null &&
                    typeof $steps["updateModalOpen3"] === "object" &&
                    typeof $steps["updateModalOpen3"].then === "function"
                  ) {
                    $steps["updateModalOpen3"] = await $steps[
                      "updateModalOpen3"
                    ];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          variable: {
                            objRoot: $state,
                            variablePath: ["finalModal", "open"]
                          },
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }

                  $steps["updateModalOpen2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["confirmed", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen2"] != null &&
                    typeof $steps["updateModalOpen2"] === "object" &&
                    typeof $steps["updateModalOpen2"].then === "function"
                  ) {
                    $steps["updateModalOpen2"] = await $steps[
                      "updateModalOpen2"
                    ];
                  }
                }}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tEXkb)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mzfBy
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f \u0631\u0632\u0631\u0648"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yf06V)}
                    displayHeight={"16px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image47.svg",
                      fullWidth: 20,
                      fullHeight: 16,
                      aspectRatio: 1.25
                    }}
                  />
                </div>
              </Button>
              {(() => {
                try {
                  return (
                    $state.modalData[0].platfromName !== "هومسا" &&
                    $state.modalData[0].platfromName !== "مهمانشو"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <AntdButton
                  className={classNames("__wab_instance", sty.button__am3Oc)}
                  danger={false}
                  loading={false}
                  onClick={async () => {
                    const $steps = {};

                    $steps["updateSelectedAction"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedAction"]
                            },
                            operation: 0,
                            value: "cancele"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedAction"] != null &&
                      typeof $steps["updateSelectedAction"] === "object" &&
                      typeof $steps["updateSelectedAction"].then === "function"
                    ) {
                      $steps["updateSelectedAction"] = await $steps[
                        "updateSelectedAction"
                      ];
                    }

                    $steps["updateConfirmedOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["confirmed", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateConfirmedOpen"] != null &&
                      typeof $steps["updateConfirmedOpen"] === "object" &&
                      typeof $steps["updateConfirmedOpen"].then === "function"
                    ) {
                      $steps["updateConfirmedOpen"] = await $steps[
                        "updateConfirmedOpen"
                      ];
                    }

                    $steps["updateAcceptModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["finalModal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAcceptModalOpen"] != null &&
                      typeof $steps["updateAcceptModalOpen"] === "object" &&
                      typeof $steps["updateAcceptModalOpen"].then === "function"
                    ) {
                      $steps["updateAcceptModalOpen"] = await $steps[
                        "updateAcceptModalOpen"
                      ];
                    }
                  }}
                  size={"medium"}
                  type={"primary"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zzp7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eGsx1
                      )}
                    >
                      {"\u0631\u062f"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__h39QQ)}
                      displayHeight={"19px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image46.svg",
                        fullWidth: 17,
                        fullHeight: 16,
                        aspectRatio: 1.0625
                      }}
                    />
                  </div>
                </AntdButton>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.modalData[0].platfromName === "هومسا" ||
                    $state.modalData[0].platfromName === "مهمانشو"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <AntdButton
                  className={classNames("__wab_instance", sty.button___5KCXe)}
                  danger={false}
                  loading={false}
                  onClick={async () => {
                    const $steps = {};

                    $steps["updateConfirmedOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["confirmed", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateConfirmedOpen"] != null &&
                      typeof $steps["updateConfirmedOpen"] === "object" &&
                      typeof $steps["updateConfirmedOpen"].then === "function"
                    ) {
                      $steps["updateConfirmedOpen"] = await $steps[
                        "updateConfirmedOpen"
                      ];
                    }
                  }}
                  size={"medium"}
                  type={"primary"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kgKnF)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yMg1I
                      )}
                    >
                      {"\u0641\u0639\u0644\u0627 \u0646\u0647"}
                    </div>
                  </div>
                </AntdButton>
              ) : null}
            </div>
          </AntdModal>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__kxmPc,
              (() => {
                try {
                  return $state.showFilter
                    ? "modal-overlay open"
                    : "modal-overlay";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
            onClick={async event => {
              const $steps = {};
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__iBmls,
                (() => {
                  try {
                    return $state.showFilter
                      ? "modal-content open"
                      : "modal-content";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__juHHj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vTVaO)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0K7Wf
                      )}
                    >
                      {"\u0641\u06cc\u0644\u062a\u0631\u0647\u0627"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__joDmZ)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___8Qts4)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image169.svg",
                        fullWidth: 19,
                        fullHeight: 16,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cwHUg)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___7Rv1C)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateTest"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showFilter"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTest"] != null &&
                        typeof $steps["updateTest"] === "object" &&
                        typeof $steps["updateTest"].then === "function"
                      ) {
                        $steps["updateTest"] = await $steps["updateTest"];
                      }
                    }}
                    src={{
                      src: "/plasmic/website_starter/images/image170.svg",
                      fullWidth: 18,
                      fullHeight: 18,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"source2"}
                  data-plasmic-override={overrides.source2}
                  className={classNames(projectcss.all, sty.source2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zCkiP)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__trYSx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fRy0
                        )}
                      >
                        {
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u0645\u0639\u0631\u0641"
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ztlh)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__v52DG)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image171.svg",
                        fullWidth: 11,
                        fullHeight: 22,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"property2"}
                  data-plasmic-override={overrides.property2}
                  className={classNames(projectcss.all, sty.property2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Qtox)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bs1X)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zoP1Y
                        )}
                      >
                        {
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u0648\u06cc\u0644\u0627"
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___50W93)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__aoRrn)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image171.svg",
                        fullWidth: 11,
                        fullHeight: 22,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"settlement"}
                  data-plasmic-override={overrides.settlement}
                  className={classNames(projectcss.all, sty.settlement)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xjxqe)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o4J6C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Ap1D
                        )}
                      >
                        {
                          "\u062a\u0633\u0648\u06cc\u0647 \u0646\u0634\u062f\u0647\u200c"
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aaslL)}
                  >
                    <Switch
                      data-plasmic-name={"settlement2"}
                      data-plasmic-override={overrides.settlement2}
                      checked={generateStateValueProp($state, [
                        "settlement2",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.settlement2)}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "settlement2",
                          "checked"
                        ]).apply(null, eventArgs);

                        (async checked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.cancelled3.checked = false;
                                      return ($state.confierm2.checked = false);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["generateUrl"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      const baseUrl =
                                        "https://gateway.rentamon.com/webhook/getReserve";
                                      const queryParams = [];
                                      queryParams.push(`v=2`);
                                      queryParams.push(
                                        `limit=${$state.dataSize}`
                                      );
                                      if ($state.settlement2.checked) {
                                        queryParams.push(
                                          `is_settled=${!$state.settlement2
                                            .checked}&status=Past`
                                        );
                                      }
                                      if ($state.confierm2.checked) {
                                        queryParams.push(`status=Confirmed`);
                                      } else if ($state.cancelled3.checked) {
                                        queryParams.push(`status=Cancelled`);
                                      }
                                      $state.filterUrl = `${baseUrl}?${queryParams.join(
                                        "&"
                                      )}`;
                                      return $state.filterUrl;
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["generateUrl"] != null &&
                            typeof $steps["generateUrl"] === "object" &&
                            typeof $steps["generateUrl"].then === "function"
                          ) {
                            $steps["generateUrl"] = await $steps["generateUrl"];
                          }

                          $steps["sendRequest"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    (() => {
                                      try {
                                        return $state.filterUrl;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["sendRequest"] != null &&
                            typeof $steps["sendRequest"] === "object" &&
                            typeof $steps["sendRequest"].then === "function"
                          ) {
                            $steps["sendRequest"] = await $steps["sendRequest"];
                          }

                          $steps["updateReservations"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.reservations =
                                        $steps.sendRequest.data;
                                      return console.log($state.reservations);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateReservations"] != null &&
                            typeof $steps["updateReservations"] === "object" &&
                            typeof $steps["updateReservations"].then ===
                              "function"
                          ) {
                            $steps["updateReservations"] = await $steps[
                              "updateReservations"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0641\u06cc\u0644\u062a\u0631 \u0627\u0639\u0645\u0627\u0644 \u0634\u062f",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"confierm"}
                  data-plasmic-override={overrides.confierm}
                  className={classNames(projectcss.all, sty.confierm)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mDfWz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2MrUv
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fcz08
                        )}
                      >
                        {"\u0646\u0647\u0627\u06cc\u06cc \u0634\u062f\u0647"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ckgdr)}
                  >
                    <Switch
                      data-plasmic-name={"confierm2"}
                      data-plasmic-override={overrides.confierm2}
                      checked={generateStateValueProp($state, [
                        "confierm2",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.confierm2)}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "confierm2",
                          "checked"
                        ]).apply(null, eventArgs);

                        (async checked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.cancelled3.checked = false;
                                      return ($state.settlement2.checked =
                                        false);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["generateUrl"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      const baseUrl =
                                        "https://gateway.rentamon.com/webhook/getReserve";
                                      const queryParams = [];
                                      queryParams.push(`v=2`);
                                      queryParams.push(
                                        `limit=${$state.dataSize}`
                                      );
                                      if ($state.settlement2.checked) {
                                        queryParams.push(
                                          `is_settled=${!$state.settlement2
                                            .checked}`
                                        );
                                      }
                                      if ($state.confierm2.checked) {
                                        queryParams.push(`status=Confirmed`);
                                      } else if ($state.cancelled3.checked) {
                                        queryParams.push(`status=Cancelled`);
                                      }
                                      $state.filterUrl = `${baseUrl}?${queryParams.join(
                                        "&"
                                      )}`;
                                      return $state.filterUrl;
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["generateUrl"] != null &&
                            typeof $steps["generateUrl"] === "object" &&
                            typeof $steps["generateUrl"].then === "function"
                          ) {
                            $steps["generateUrl"] = await $steps["generateUrl"];
                          }

                          $steps["sendRequests"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.filterUrl;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["sendRequests"] != null &&
                            typeof $steps["sendRequests"] === "object" &&
                            typeof $steps["sendRequests"].then === "function"
                          ) {
                            $steps["sendRequests"] = await $steps[
                              "sendRequests"
                            ];
                          }

                          $steps["updateReservations"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.reservations =
                                        $steps.sendRequests.data;
                                      return console.log($state.reservations);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateReservations"] != null &&
                            typeof $steps["updateReservations"] === "object" &&
                            typeof $steps["updateReservations"].then ===
                              "function"
                          ) {
                            $steps["updateReservations"] = await $steps[
                              "updateReservations"
                            ];
                          }

                          $steps["showToast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0641\u06cc\u0644\u062a\u0631 \u0627\u0639\u0645\u0627\u0644 \u0634\u062f",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }
                        }).apply(null, eventArgs);
                      }}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"cancelled"}
                  data-plasmic-override={overrides.cancelled}
                  className={classNames(projectcss.all, sty.cancelled)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vToxj)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__axhzD)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___82D43
                        )}
                      >
                        {"\u0644\u063a\u0648 \u0634\u062f\u0647"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kxrn2)}
                  >
                    <Switch
                      data-plasmic-name={"cancelled3"}
                      data-plasmic-override={overrides.cancelled3}
                      checked={generateStateValueProp($state, [
                        "cancelled3",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.cancelled3)}
                      onCheckedChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "cancelled3",
                          "checked"
                        ]).apply(null, eventArgs);

                        (async checked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.confierm2.checked = false;
                                      return ($state.settlement2.checked =
                                        false);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["generateUrl"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      const baseUrl =
                                        "https://gateway.rentamon.com/webhook/getReserve";
                                      const queryParams = [];
                                      queryParams.push(`v=2`);
                                      queryParams.push(
                                        `limit=${$state.dataSize}`
                                      );
                                      if ($state.settlement2.checked) {
                                        queryParams.push(
                                          `is_settled=${!$state.settlement2
                                            .checked}`
                                        );
                                      }
                                      if ($state.confierm2.checked) {
                                        queryParams.push(`status=Confirmed`);
                                      } else if ($state.cancelled3.checked) {
                                        queryParams.push(`status=Cancelled`);
                                      }
                                      $state.filterUrl = `${baseUrl}?${queryParams.join(
                                        "&"
                                      )}`;
                                      return $state.filterUrl;
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["generateUrl"] != null &&
                            typeof $steps["generateUrl"] === "object" &&
                            typeof $steps["generateUrl"].then === "function"
                          ) {
                            $steps["generateUrl"] = await $steps["generateUrl"];
                          }

                          $steps["sendRequests"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.filterUrl;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["sendRequests"] != null &&
                            typeof $steps["sendRequests"] === "object" &&
                            typeof $steps["sendRequests"].then === "function"
                          ) {
                            $steps["sendRequests"] = await $steps[
                              "sendRequests"
                            ];
                          }

                          $steps["updateReservations"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.reservations =
                                        $steps.sendRequests.data;
                                      return console.log($state.reservations);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateReservations"] != null &&
                            typeof $steps["updateReservations"] === "object" &&
                            typeof $steps["updateReservations"].then ===
                              "function"
                          ) {
                            $steps["updateReservations"] = await $steps[
                              "updateReservations"
                            ];
                          }

                          $steps["showToast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0641\u06cc\u0644\u062a\u0631 \u0627\u0639\u0645\u0627\u0644 \u0634\u062f",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }
                        }).apply(null, eventArgs);
                      }}
                    />
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(projectcss.all, sty.button)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ng1Ta)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kJeY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__klqPu
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTest"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["showFilter"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTest"] != null &&
                            typeof $steps["updateTest"] === "object" &&
                            typeof $steps["updateTest"].then === "function"
                          ) {
                            $steps["updateTest"] = await $steps["updateTest"];
                          }
                        }}
                      >
                        {"\u0645\u0634\u0627\u0647\u062f\u0647"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__szNcq)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["removeAllFilter"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.settlement2.checked = false;
                                  $state.confierm2.checked = false;
                                  return ($state.cancelled3.checked = false);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["removeAllFilter"] != null &&
                        typeof $steps["removeAllFilter"] === "object" &&
                        typeof $steps["removeAllFilter"].then === "function"
                      ) {
                        $steps["removeAllFilter"] = await $steps[
                          "removeAllFilter"
                        ];
                      }

                      $steps["generateUrl"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const baseUrl =
                                    "https://gateway.rentamon.com/webhook/getReserve";
                                  const queryParams = [];
                                  queryParams.push(`v=2`);
                                  queryParams.push(`limit=${$state.dataSize}`);
                                  if ($state.settlement2.checked) {
                                    queryParams.push(
                                      `is_settled=${!$state.settlement2
                                        .checked}`
                                    );
                                  }
                                  if ($state.confierm2.checked) {
                                    queryParams.push(`status=Confirmed`);
                                  } else if ($state.cancelled3.checked) {
                                    queryParams.push(`status=Cancelled`);
                                  }
                                  $state.filterUrl = `${baseUrl}?${queryParams.join(
                                    "&"
                                  )}`;
                                  return $state.filterUrl;
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["generateUrl"] != null &&
                        typeof $steps["generateUrl"] === "object" &&
                        typeof $steps["generateUrl"].then === "function"
                      ) {
                        $steps["generateUrl"] = await $steps["generateUrl"];
                      }

                      $steps["sendRequests"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                (() => {
                                  try {
                                    return $state.filterUrl;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["sendRequests"] != null &&
                        typeof $steps["sendRequests"] === "object" &&
                        typeof $steps["sendRequests"].then === "function"
                      ) {
                        $steps["sendRequests"] = await $steps["sendRequests"];
                      }

                      $steps["updateReservations"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.reservations =
                                    $steps.sendRequests.data;
                                  return console.log($state.reservations);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateReservations"] != null &&
                        typeof $steps["updateReservations"] === "object" &&
                        typeof $steps["updateReservations"].then === "function"
                      ) {
                        $steps["updateReservations"] = await $steps[
                          "updateReservations"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0641\u06cc\u0644\u062a\u0631\u0647\u0627 \u0628\u0631\u062f\u0627\u0634\u062a\u0647 \u0634\u062f",
                                "top-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wdZ2T
                      )}
                    >
                      {
                        "\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0647\u0645\u0647"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "header",
    "sidebar",
    "sideBar2",
    "sidebarLite",
    "profile",
    "checkFeatureStatus",
    "toastMessageRnt",
    "filterSection",
    "filterAndSearch",
    "search",
    "searchBox",
    "textInput2",
    "searchIcon",
    "filter",
    "filterMenu",
    "sort",
    "container",
    "titles",
    "property",
    "guestName",
    "arriveDate",
    "source",
    "reserveMainStack2",
    "reserveData2",
    "reserveMainStack",
    "reserveData",
    "navbarRntFooter",
    "pagination2",
    "pagination",
    "intro",
    "returnButton",
    "clarityRntComponent",
    "faviconRntComponent",
    "finalModal",
    "title2",
    "cancelle",
    "confirmed",
    "main2",
    "_3",
    "_17",
    "_18",
    "status2",
    "falseStatus2",
    "_4",
    "_19",
    "_110",
    "_111",
    "_112",
    "shab2",
    "jabama2",
    "jajiga2",
    "mihmansho2",
    "mizbon2",
    "homsa2",
    "otaghak2",
    "title",
    "source2",
    "property2",
    "settlement",
    "settlement2",
    "confierm",
    "confierm2",
    "cancelled",
    "cancelled3",
    "button"
  ],
  sideEffect: ["sideEffect"],
  header: ["header", "sidebar", "sideBar2", "sidebarLite", "profile"],
  sidebar: ["sidebar", "sideBar2"],
  sideBar2: ["sideBar2"],
  sidebarLite: ["sidebarLite"],
  profile: ["profile"],
  checkFeatureStatus: ["checkFeatureStatus", "toastMessageRnt"],
  toastMessageRnt: ["toastMessageRnt"],
  filterSection: [
    "filterSection",
    "filterAndSearch",
    "search",
    "searchBox",
    "textInput2",
    "searchIcon",
    "filter",
    "filterMenu",
    "sort"
  ],
  filterAndSearch: [
    "filterAndSearch",
    "search",
    "searchBox",
    "textInput2",
    "searchIcon",
    "filter",
    "filterMenu",
    "sort"
  ],
  search: ["search", "searchBox", "textInput2", "searchIcon"],
  searchBox: ["searchBox", "textInput2", "searchIcon"],
  textInput2: ["textInput2"],
  searchIcon: ["searchIcon"],
  filter: ["filter", "filterMenu"],
  filterMenu: ["filterMenu"],
  sort: ["sort"],
  container: [
    "container",
    "titles",
    "property",
    "guestName",
    "arriveDate",
    "source",
    "reserveMainStack2",
    "reserveData2",
    "reserveMainStack",
    "reserveData"
  ],
  titles: ["titles", "property", "guestName", "arriveDate", "source"],
  property: ["property"],
  guestName: ["guestName"],
  arriveDate: ["arriveDate"],
  source: ["source"],
  reserveMainStack2: ["reserveMainStack2", "reserveData2"],
  reserveData2: ["reserveData2"],
  reserveMainStack: ["reserveMainStack", "reserveData"],
  reserveData: ["reserveData"],
  navbarRntFooter: ["navbarRntFooter"],
  pagination2: ["pagination2", "pagination"],
  pagination: ["pagination"],
  intro: ["intro"],
  returnButton: ["returnButton"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"],
  finalModal: ["finalModal", "title2", "cancelle"],
  title2: ["title2"],
  cancelle: ["cancelle"],
  confirmed: [
    "confirmed",
    "main2",
    "_3",
    "_17",
    "_18",
    "status2",
    "falseStatus2",
    "_4",
    "_19",
    "_110",
    "_111",
    "_112",
    "shab2",
    "jabama2",
    "jajiga2",
    "mihmansho2",
    "mizbon2",
    "homsa2",
    "otaghak2"
  ],
  main2: [
    "main2",
    "_3",
    "_17",
    "_18",
    "status2",
    "falseStatus2",
    "_4",
    "_19",
    "_110",
    "_111",
    "_112"
  ],
  _3: ["_3", "_17", "_18", "status2", "falseStatus2"],
  _17: ["_17"],
  _18: ["_18", "status2", "falseStatus2"],
  status2: ["status2"],
  falseStatus2: ["falseStatus2"],
  _4: ["_4", "_19", "_110", "_111", "_112"],
  _19: ["_19"],
  _110: ["_110"],
  _111: ["_111"],
  _112: ["_112"],
  shab2: ["shab2"],
  jabama2: ["jabama2"],
  jajiga2: ["jajiga2"],
  mihmansho2: ["mihmansho2"],
  mizbon2: ["mizbon2"],
  homsa2: ["homsa2"],
  otaghak2: ["otaghak2"],
  title: ["title"],
  source2: ["source2"],
  property2: ["property2"],
  settlement: ["settlement", "settlement2"],
  settlement2: ["settlement2"],
  confierm: ["confierm", "confierm2"],
  confierm2: ["confierm2"],
  cancelled: ["cancelled", "cancelled3"],
  cancelled3: ["cancelled3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  header: "div";
  sidebar: "div";
  sideBar2: typeof SideBar2;
  sidebarLite: typeof SidebarLite;
  profile: typeof ApiRequest;
  checkFeatureStatus: typeof ApiRequest;
  toastMessageRnt: typeof ToastMessageRnt;
  filterSection: "div";
  filterAndSearch: "div";
  search: "div";
  searchBox: "div";
  textInput2: typeof TextInput2;
  searchIcon: "div";
  filter: "div";
  filterMenu: typeof AntdModal;
  sort: "div";
  container: "div";
  titles: "div";
  property: "div";
  guestName: "div";
  arriveDate: "div";
  source: "div";
  reserveMainStack2: "div";
  reserveData2: typeof ApiRequest;
  reserveMainStack: "div";
  reserveData: typeof ApiRequest;
  navbarRntFooter: typeof NavbarRntFooter;
  pagination2: "div";
  pagination: typeof AntdPagination;
  intro: "div";
  returnButton: "div";
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
  finalModal: typeof AntdModal;
  title2: "div";
  cancelle: typeof AntdButton;
  confirmed: typeof AntdModal;
  main2: "div";
  _3: "div";
  _17: "div";
  _18: "div";
  status2: "div";
  falseStatus2: "div";
  _4: "div";
  _19: "div";
  _110: "div";
  _111: "div";
  _112: "div";
  shab2: typeof PlasmicImg__;
  jabama2: typeof PlasmicImg__;
  jajiga2: typeof PlasmicImg__;
  mihmansho2: typeof PlasmicImg__;
  mizbon2: typeof PlasmicImg__;
  homsa2: typeof PlasmicImg__;
  otaghak2: typeof PlasmicImg__;
  title: "div";
  source2: "div";
  property2: "div";
  settlement: "div";
  settlement2: typeof Switch;
  confierm: "div";
  confierm2: typeof Switch;
  cancelled: "div";
  cancelled3: typeof Switch;
  button: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReservations__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReservations__VariantsArgs;
    args?: PlasmicReservations__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReservations__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReservations__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReservations__ArgProps,
          internalVariantPropNames: PlasmicReservations__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReservations__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReservations";
  } else {
    func.displayName = `PlasmicReservations.${nodeName}`;
  }
  return func;
}

export const PlasmicReservations = Object.assign(
  // Top-level PlasmicReservations renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    header: makeNodeComponent("header"),
    sidebar: makeNodeComponent("sidebar"),
    sideBar2: makeNodeComponent("sideBar2"),
    sidebarLite: makeNodeComponent("sidebarLite"),
    profile: makeNodeComponent("profile"),
    checkFeatureStatus: makeNodeComponent("checkFeatureStatus"),
    toastMessageRnt: makeNodeComponent("toastMessageRnt"),
    filterSection: makeNodeComponent("filterSection"),
    filterAndSearch: makeNodeComponent("filterAndSearch"),
    search: makeNodeComponent("search"),
    searchBox: makeNodeComponent("searchBox"),
    textInput2: makeNodeComponent("textInput2"),
    searchIcon: makeNodeComponent("searchIcon"),
    filter: makeNodeComponent("filter"),
    filterMenu: makeNodeComponent("filterMenu"),
    sort: makeNodeComponent("sort"),
    container: makeNodeComponent("container"),
    titles: makeNodeComponent("titles"),
    property: makeNodeComponent("property"),
    guestName: makeNodeComponent("guestName"),
    arriveDate: makeNodeComponent("arriveDate"),
    source: makeNodeComponent("source"),
    reserveMainStack2: makeNodeComponent("reserveMainStack2"),
    reserveData2: makeNodeComponent("reserveData2"),
    reserveMainStack: makeNodeComponent("reserveMainStack"),
    reserveData: makeNodeComponent("reserveData"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    pagination2: makeNodeComponent("pagination2"),
    pagination: makeNodeComponent("pagination"),
    intro: makeNodeComponent("intro"),
    returnButton: makeNodeComponent("returnButton"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),
    finalModal: makeNodeComponent("finalModal"),
    title2: makeNodeComponent("title2"),
    cancelle: makeNodeComponent("cancelle"),
    confirmed: makeNodeComponent("confirmed"),
    main2: makeNodeComponent("main2"),
    _3: makeNodeComponent("_3"),
    _17: makeNodeComponent("_17"),
    _18: makeNodeComponent("_18"),
    status2: makeNodeComponent("status2"),
    falseStatus2: makeNodeComponent("falseStatus2"),
    _4: makeNodeComponent("_4"),
    _19: makeNodeComponent("_19"),
    _110: makeNodeComponent("_110"),
    _111: makeNodeComponent("_111"),
    _112: makeNodeComponent("_112"),
    shab2: makeNodeComponent("shab2"),
    jabama2: makeNodeComponent("jabama2"),
    jajiga2: makeNodeComponent("jajiga2"),
    mihmansho2: makeNodeComponent("mihmansho2"),
    mizbon2: makeNodeComponent("mizbon2"),
    homsa2: makeNodeComponent("homsa2"),
    otaghak2: makeNodeComponent("otaghak2"),
    title: makeNodeComponent("title"),
    source2: makeNodeComponent("source2"),
    property2: makeNodeComponent("property2"),
    settlement: makeNodeComponent("settlement"),
    settlement2: makeNodeComponent("settlement2"),
    confierm: makeNodeComponent("confierm"),
    confierm2: makeNodeComponent("confierm2"),
    cancelled: makeNodeComponent("cancelled"),
    cancelled3: makeNodeComponent("cancelled3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicReservations
    internalVariantProps: PlasmicReservations__VariantProps,
    internalArgProps: PlasmicReservations__ArgProps,

    // Key-value metadata
    metadata: { nameRobots: 'content="noindex, nofollow"' },

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReservations;
/* prettier-ignore-end */
