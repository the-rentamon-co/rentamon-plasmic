/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: rNSSH2xZnrkV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import NavbarRntFooter from "../../NavbarRntFooter"; // plasmic-import: y37kcAs9RXYg/component
import ClarityRntComponent from "../../ClarityRntComponent"; // plasmic-import: J5D8c7V05ty1/component
import FaviconRntComponent from "../../FaviconRntComponent"; // plasmic-import: 2Chy9NeUIB9Q/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicBookings.module.css"; // plasmic-import: rNSSH2xZnrkV/css

createPlasmicElementProxy;

export type PlasmicBookings__VariantMembers = {};
export type PlasmicBookings__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookings__VariantsArgs;
export const PlasmicBookings__VariantProps = new Array<VariantPropType>();

export type PlasmicBookings__ArgsType = {};
type ArgPropType = keyof PlasmicBookings__ArgsType;
export const PlasmicBookings__ArgProps = new Array<ArgPropType>();

export type PlasmicBookings__OverridesType = {
  root?: Flex__<"div">;
  detail2?: Flex__<"div">;
  shab?: Flex__<typeof PlasmicImg__>;
  jabama?: Flex__<typeof PlasmicImg__>;
  jajiga?: Flex__<typeof PlasmicImg__>;
  homsa?: Flex__<typeof PlasmicImg__>;
  otaghak?: Flex__<typeof PlasmicImg__>;
  mihmansho?: Flex__<typeof PlasmicImg__>;
  divar?: Flex__<typeof PlasmicImg__>;
  prevGuest?: Flex__<typeof PlasmicImg__>;
  colleague?: Flex__<typeof PlasmicImg__>;
  others?: Flex__<typeof PlasmicImg__>;
  offline?: Flex__<typeof PlasmicImg__>;
  social?: Flex__<typeof PlasmicImg__>;
  header?: Flex__<"div">;
  returnButton?: Flex__<"div">;
  detail?: Flex__<"div">;
  booking?: Flex__<typeof ApiRequest>;
  generalData?: Flex__<"div">;
  feature?: Flex__<"div">;
  smartBooking?: Flex__<"div">;
  data?: Flex__<"div">;
  title?: Flex__<"div">;
  guestInfo?: Flex__<"div">;
  bookInfo?: Flex__<"div">;
  bookPrice?: Flex__<"div">;
  bookCommission?: Flex__<"div">;
  bookNetPrice?: Flex__<"div">;
  bookSettleStatus?: Flex__<"div">;
  error?: Flex__<"div">;
  _true?: Flex__<"div">;
  true2?: Flex__<"div">;
  openAndCloseButton?: Flex__<"div">;
  manulBooking?: Flex__<"div">;
  data3?: Flex__<"div">;
  title3?: Flex__<"div">;
  guestInfo2?: Flex__<"div">;
  bookInfo2?: Flex__<"div">;
  bookCommission2?: Flex__<"div">;
  bookNetPrice2?: Flex__<"div">;
  netPrice?: Flex__<"div">;
  true4?: Flex__<"div">;
  true5?: Flex__<"div">;
  autoSync?: Flex__<"div">;
  data2?: Flex__<"div">;
  title2?: Flex__<"div">;
  description?: Flex__<"div">;
  platformStatus?: Flex__<"div">;
  openAndCloseButton2?: Flex__<"div">;
  navbarRntFooter?: Flex__<typeof NavbarRntFooter>;
  profile?: Flex__<typeof ApiRequest>;
  html?: Flex__<"div">;
  clarityRntComponent?: Flex__<typeof ClarityRntComponent>;
  faviconRntComponent?: Flex__<typeof FaviconRntComponent>;
};

export interface DefaultBookingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookings__RenderFunc(props: {
  variants: PlasmicBookings__VariantsArgs;
  args: PlasmicBookings__ArgsType;
  overrides: PlasmicBookings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordionOpenSmartBooking",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "accordionOpenAutoSync",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "profile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "profile"
      },
      {
        path: "booking.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "booking"
      },
      {
        path: "booking.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "booking"
      },
      {
        path: "booking.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "booking"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qDRqe)}>
            <div className={classNames(projectcss.all, sty.freeBox__u8Ps)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__n1Zd2)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? "auto"
                    : "100%"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? "100%"
                    : "100%"
                }
                loading={"lazy"}
                src={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? (() => {
                        try {
                          return $state.booking.data.property_pic_link;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/website_starter/images/homeCoverJpg.jpg",
                              fullWidth: 1247,
                              fullHeight: 529,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()
                    : hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return $state.booking.data.property_pic_link;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/website_starter/images/homeCoverJpg.jpg",
                              fullWidth: 1247,
                              fullHeight: 529,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? (() => {
                        try {
                          return $state.booking.data.property_pic_link;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/website_starter/images/homeCoverJpg.jpg",
                              fullWidth: 1247,
                              fullHeight: 529,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.booking.data.property_pic_link;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/website_starter/images/homeCoverJpg.jpg",
                              fullWidth: 1247,
                              fullHeight: 529,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()
                }
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__inIyH)} />

            <div className={classNames(projectcss.all, sty.freeBox__jGlSw)}>
              <div
                data-plasmic-name={"detail2"}
                data-plasmic-override={overrides.detail2}
                className={classNames(projectcss.all, sty.detail2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vbPkj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hiet1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.booking.data.property_name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7WZp8)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sv7Au)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.website == "shab";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data.website == "shab";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        data-plasmic-name={"shab"}
                        data-plasmic-override={overrides.shab}
                        alt={""}
                        className={classNames(sty.shab)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "23px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "26px"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "46px"
                            : "40px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image20.svg",
                          fullWidth: 46,
                          fullHeight: 45,
                          aspectRatio: 1.022222
                        }}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.website == "jabama";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data.website == "jabama";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        data-plasmic-name={"jabama"}
                        data-plasmic-override={overrides.jabama}
                        alt={""}
                        className={classNames(sty.jabama)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "23px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "26px"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "40px"
                            : "40px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image19.svg",
                          fullWidth: 45,
                          fullHeight: 46,
                          aspectRatio: 0.978261
                        }}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.website == "jajiga";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data.website == "jajiga";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        data-plasmic-name={"jajiga"}
                        data-plasmic-override={overrides.jajiga}
                        alt={""}
                        className={classNames(sty.jajiga)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "23px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "26px"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "46px"
                            : "40px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/jajigaWebp.webp",
                          fullWidth: 192,
                          fullHeight: 192,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.website == "homsa";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data.website == "homsa";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        data-plasmic-name={"homsa"}
                        data-plasmic-override={overrides.homsa}
                        alt={""}
                        className={classNames(sty.homsa)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "23px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "26px"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "46px"
                            : "40px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image66.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.website == "otaghak";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data.website == "otaghak";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        data-plasmic-name={"otaghak"}
                        data-plasmic-override={overrides.otaghak}
                        alt={""}
                        className={classNames(sty.otaghak)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "23px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "26px"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "46px"
                            : "40px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image65.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.website == "mihmansho";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data.website == "mihmansho";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <PlasmicImg__
                        data-plasmic-name={"mihmansho"}
                        data-plasmic-override={overrides.mihmansho}
                        alt={""}
                        className={classNames(sty.mihmansho)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? "23px"
                            : hasVariant(globalVariants, "screen", "mobile")
                            ? "26px"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "46px"
                            : "40px"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image68.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.booking.data.website == "divar";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"divar"}
                        data-plasmic-override={overrides.divar}
                        alt={""}
                        className={classNames(sty.divar)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/iconDivarPng2.png",
                          fullWidth: 130,
                          fullHeight: 130,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.booking.data.website == "Returning_Guest";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"prevGuest"}
                        data-plasmic-override={overrides.prevGuest}
                        alt={""}
                        className={classNames(sty.prevGuest)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/iconReturnedPng2.png",
                          fullWidth: 130,
                          fullHeight: 131,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.booking.data.website == "Broker or Colleague"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"colleague"}
                        data-plasmic-override={overrides.colleague}
                        alt={""}
                        className={classNames(sty.colleague)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/iconColleaguePng.png",
                          fullWidth: 138,
                          fullHeight: 138,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.booking.data.website == "others";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"others"}
                        data-plasmic-override={overrides.others}
                        alt={""}
                        className={classNames(sty.others)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/iconOtherPng2.png",
                          fullWidth: 130,
                          fullHeight: 131,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.booking.data.website == "offline";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"offline"}
                        data-plasmic-override={overrides.offline}
                        alt={""}
                        className={classNames(sty.offline)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/iconArrivedPng2.png",
                          fullWidth: 130,
                          fullHeight: 130,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.booking.data.website == "social";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        data-plasmic-name={"social"}
                        data-plasmic-override={overrides.social}
                        alt={""}
                        className={classNames(sty.social)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/iconSocialMediaPng.png",
                          fullWidth: 130,
                          fullHeight: 131,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xqoMq
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const websiteMap = {
                                  jabama: "جاباما",
                                  jajiga: "جاجیگا",
                                  shab: "شب",
                                  otaghak: "اتاقک",
                                  mihmansho: "میهمانشو",
                                  homsa: "هومسا",
                                  mizboon: "میزبون",
                                  divar: "دیوار",
                                  "Broker or Colleague": "واسطه یا همکار",
                                  Returning_Guest: "قبلی",
                                  social: "پیام‌رسان و شبکه‌اجتماعی",
                                  others: "سایر",
                                  offline: "حضوری",
                                  host: "میزبان"
                                };
                                return (
                                  websiteMap[$state.booking.data.website] ||
                                  $state.booking.data.website
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const websiteMap = {
                                  jabama: "جاباما",
                                  jajiga: "جاجیگا",
                                  shab: "شب",
                                  otaghak: "اتاقک",
                                  mihmansho: "میهمانشو",
                                  homsa: "هومسا",
                                  mizboon: "میزبون",
                                  divar: "دیوار",
                                  "Broker or Colleague": "واسطه یا همکار",
                                  Returning_Guest: "قبلی",
                                  social: "پیام‌رسان و شبکه‌اجتماعی",
                                  others: "سایر",
                                  offline: "حضوری",
                                  host: "میزبان"
                                };
                                return (
                                  websiteMap[$state.booking.data.website] ||
                                  $state.booking.data.website
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"returnButton"}
              data-plasmic-override={overrides.returnButton}
              className={classNames(projectcss.all, sty.returnButton)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__a710N)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___9Mfa9)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "28px"
                      : hasVariant(globalVariants, "screen", "mobile")
                      ? "33px"
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? "48px"
                      : "60px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/website_starter/images/image153.svg",
                    fullWidth: 34,
                    fullHeight: 34,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"detail"}
              data-plasmic-override={overrides.detail}
              className={classNames(projectcss.all, sty.detail)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iw0Ee)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ao5Xg
                  )}
                >
                  {
                    "\u0633\u0627\u062d\u0644\u06cc \u0645\u0647\u062a\u0627\u0628 \u0637\u0628\u0642\u0647 \u06cc\u06a9"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___6YImL)}>
                <div className={classNames(projectcss.all, sty.freeBox__xMpHr)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___3DxSj)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "smallMobile")
                        ? "23px"
                        : hasVariant(globalVariants, "screen", "mobile")
                        ? "26px"
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? "46px"
                        : "63px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image20.svg",
                      fullWidth: 46,
                      fullHeight: 45,
                      aspectRatio: 1.022222
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Mjlp
                    )}
                  >
                    {"\u0634\u0628"}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fdSc6)}>
            <ApiRequest
              data-plasmic-name={"booking"}
              data-plasmic-override={overrides.booking}
              className={classNames("__wab_instance", sty.booking)}
              errorDisplay={
                (
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : (() => {
                        try {
                          return (
                            $state.booking.error.error.message ==
                            "Booking ID does not exist"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q9Xw9)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6YVk8
                      )}
                    >
                      {
                        "\u0627\u06cc\u0646 \u0631\u0632\u0631\u0648 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                      }
                    </div>
                  </div>
                ) : null
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["booking", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["booking", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["booking", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              ref={ref => {
                $refs["booking"] = ref;
              }}
              url={(() => {
                try {
                  return `https://gateway.rentamon.com/webhook/booking?booking_id=${$ctx.params.booking_id}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                data-plasmic-name={"generalData"}
                data-plasmic-override={overrides.generalData}
                className={classNames(projectcss.all, sty.generalData)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__pxMr9)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lRf4L)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lzc9
                      )}
                    >
                      {"\u0648\u0631\u0648\u062f:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Fev3
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                const persianWeekdays = [
                                  "یک‌شنبه",
                                  "دوشنبه",
                                  "سه‌شنبه",
                                  "چهارشنبه",
                                  "پنج‌شنبه",
                                  "جمعه",
                                  "شنبه"
                                ];

                                function toPersianDigits(input) {
                                  const persianDigits = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return input
                                    .toString()
                                    .replace(/\d/g, d => persianDigits[d]);
                                }
                                function toJalali(gYear, gMonth, gDay) {
                                  const gDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  const jDaysInMonth = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                                  let gm = gMonth - 1;
                                  let gd = gDay - 1;
                                  let gDayNo =
                                    365 * gy +
                                    Math.floor((gy + 3) / 4) -
                                    Math.floor((gy + 99) / 100) +
                                    Math.floor((gy + 399) / 400);
                                  for (let i = 0; i < gm; ++i)
                                    gDayNo += gDaysInMonth[i];
                                  gDayNo += gd;
                                  let jDayNo =
                                    gDayNo - (gYear >= 1600 ? 79 : 0);
                                  let jNp = Math.floor(jDayNo / 12053);
                                  jDayNo %= 12053;
                                  let jYear =
                                    979 +
                                    33 * jNp +
                                    4 * Math.floor(jDayNo / 1461);
                                  jDayNo %= 1461;
                                  if (jDayNo >= 366) {
                                    jYear += Math.floor((jDayNo - 1) / 365);
                                    jDayNo = (jDayNo - 1) % 365;
                                  }
                                  let jMonth;
                                  for (
                                    jMonth = 0;
                                    jMonth < 11 &&
                                    jDayNo >= jDaysInMonth[jMonth];
                                    ++jMonth
                                  )
                                    jDayNo -= jDaysInMonth[jMonth];
                                  let jDay = jDayNo + 1;
                                  return {
                                    jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                    jm: jMonth + 1,
                                    jd: jDay
                                  };
                                }
                                function convertDateToJalaliFullString(
                                  dateString
                                ) {
                                  const date = new Date(dateString);
                                  const gYear = date.getFullYear();
                                  const gMonth = date.getMonth() + 1;
                                  const gDay = date.getDate();
                                  const weekdayIndex = date.getDay();
                                  const { jy, jm, jd } = toJalali(
                                    gYear,
                                    gMonth,
                                    gDay
                                  );
                                  const weekday = persianWeekdays[weekdayIndex];
                                  const monthName = persianMonths[jm - 1];
                                  return `${weekday} ${toPersianDigits(
                                    jd
                                  )} ${monthName}`;
                                }
                                const checkIn = $state.booking.data.check_in;
                                const result =
                                  convertDateToJalaliFullString(checkIn);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "tablet") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                const persianWeekdays = [
                                  "یک‌شنبه",
                                  "دوشنبه",
                                  "سه‌شنبه",
                                  "چهارشنبه",
                                  "پنج‌شنبه",
                                  "جمعه",
                                  "شنبه"
                                ];

                                function toPersianDigits(input) {
                                  const persianDigits = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return input
                                    .toString()
                                    .replace(/\d/g, d => persianDigits[d]);
                                }
                                function toJalali(gYear, gMonth, gDay) {
                                  const gDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  const jDaysInMonth = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                                  let gm = gMonth - 1;
                                  let gd = gDay - 1;
                                  let gDayNo =
                                    365 * gy +
                                    Math.floor((gy + 3) / 4) -
                                    Math.floor((gy + 99) / 100) +
                                    Math.floor((gy + 399) / 400);
                                  for (let i = 0; i < gm; ++i)
                                    gDayNo += gDaysInMonth[i];
                                  gDayNo += gd;
                                  let jDayNo =
                                    gDayNo - (gYear >= 1600 ? 79 : 0);
                                  let jNp = Math.floor(jDayNo / 12053);
                                  jDayNo %= 12053;
                                  let jYear =
                                    979 +
                                    33 * jNp +
                                    4 * Math.floor(jDayNo / 1461);
                                  jDayNo %= 1461;
                                  if (jDayNo >= 366) {
                                    jYear += Math.floor((jDayNo - 1) / 365);
                                    jDayNo = (jDayNo - 1) % 365;
                                  }
                                  let jMonth;
                                  for (
                                    jMonth = 0;
                                    jMonth < 11 &&
                                    jDayNo >= jDaysInMonth[jMonth];
                                    ++jMonth
                                  )
                                    jDayNo -= jDaysInMonth[jMonth];
                                  let jDay = jDayNo + 1;
                                  return {
                                    jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                    jm: jMonth + 1,
                                    jd: jDay
                                  };
                                }
                                function convertDateToJalaliFullString(
                                  dateString
                                ) {
                                  const date = new Date(dateString);
                                  const gYear = date.getFullYear();
                                  const gMonth = date.getMonth() + 1;
                                  const gDay = date.getDate();
                                  const weekdayIndex = date.getDay();
                                  const { jy, jm, jd } = toJalali(
                                    gYear,
                                    gMonth,
                                    gDay
                                  );
                                  const weekday = persianWeekdays[weekdayIndex];
                                  const monthName = persianMonths[jm - 1];
                                  return `${weekday} ${toPersianDigits(
                                    jd
                                  )} ${monthName}`;
                                }
                                const checkIn = $state.booking.data.check_in;
                                const result =
                                  convertDateToJalaliFullString(checkIn);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                const persianWeekdays = [
                                  "یک‌شنبه",
                                  "دوشنبه",
                                  "سه‌شنبه",
                                  "چهارشنبه",
                                  "پنج‌شنبه",
                                  "جمعه",
                                  "شنبه"
                                ];

                                function toPersianDigits(input) {
                                  const persianDigits = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return input
                                    .toString()
                                    .replace(/\d/g, d => persianDigits[d]);
                                }
                                function toJalali(gYear, gMonth, gDay) {
                                  const gDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  const jDaysInMonth = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                                  let gm = gMonth - 1;
                                  let gd = gDay - 1;
                                  let gDayNo =
                                    365 * gy +
                                    Math.floor((gy + 3) / 4) -
                                    Math.floor((gy + 99) / 100) +
                                    Math.floor((gy + 399) / 400);
                                  for (let i = 0; i < gm; ++i)
                                    gDayNo += gDaysInMonth[i];
                                  gDayNo += gd;
                                  let jDayNo =
                                    gDayNo - (gYear >= 1600 ? 79 : 0);
                                  let jNp = Math.floor(jDayNo / 12053);
                                  jDayNo %= 12053;
                                  let jYear =
                                    979 +
                                    33 * jNp +
                                    4 * Math.floor(jDayNo / 1461);
                                  jDayNo %= 1461;
                                  if (jDayNo >= 366) {
                                    jYear += Math.floor((jDayNo - 1) / 365);
                                    jDayNo = (jDayNo - 1) % 365;
                                  }
                                  let jMonth;
                                  for (
                                    jMonth = 0;
                                    jMonth < 11 &&
                                    jDayNo >= jDaysInMonth[jMonth];
                                    ++jMonth
                                  )
                                    jDayNo -= jDaysInMonth[jMonth];
                                  let jDay = jDayNo + 1;
                                  return {
                                    jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                    jm: jMonth + 1,
                                    jd: jDay
                                  };
                                }
                                function convertDateToJalaliFullString(
                                  dateString
                                ) {
                                  const date = new Date(dateString);
                                  const gYear = date.getFullYear();
                                  const gMonth = date.getMonth() + 1;
                                  const gDay = date.getDate();
                                  const weekdayIndex = date.getDay();
                                  const { jy, jm, jd } = toJalali(
                                    gYear,
                                    gMonth,
                                    gDay
                                  );
                                  const weekday = persianWeekdays[weekdayIndex];
                                  const monthName = persianMonths[jm - 1];
                                  return `${weekday} ${toPersianDigits(
                                    jd
                                  )} ${monthName}`;
                                }
                                const checkIn = $state.booking.data.check_in;
                                const result =
                                  convertDateToJalaliFullString(checkIn);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Epy1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9XcZ1
                      )}
                    >
                      {"\u0648\u0636\u0639\u06cc\u062a:"}
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? (() => {
                            try {
                              return $state.booking.data.status == "reserve";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.booking.data[0].status == "reserve";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ioC76
                        )}
                      >
                        {"\u0646\u0647\u0627\u06cc\u06cc \u0634\u062f\u0647"}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.booking.data.status != "reserve";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sgcH
                        )}
                      >
                        {"\u0644\u063a\u0648 \u0634\u062f\u0647"}
                      </div>
                    ) : null}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__b98V)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hxnJz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vcEth
                      )}
                    >
                      {"\u062e\u0631\u0648\u062c:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o9Y4I
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                const persianWeekdays = [
                                  "یک‌شنبه",
                                  "دوشنبه",
                                  "سه‌شنبه",
                                  "چهارشنبه",
                                  "پنج‌شنبه",
                                  "جمعه",
                                  "شنبه"
                                ];

                                function toPersianDigits(input) {
                                  const persianDigits = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return input
                                    .toString()
                                    .replace(/\d/g, d => persianDigits[d]);
                                }
                                function toJalali(gYear, gMonth, gDay) {
                                  const gDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  const jDaysInMonth = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                                  let gm = gMonth - 1;
                                  let gd = gDay - 1;
                                  let gDayNo =
                                    365 * gy +
                                    Math.floor((gy + 3) / 4) -
                                    Math.floor((gy + 99) / 100) +
                                    Math.floor((gy + 399) / 400);
                                  for (let i = 0; i < gm; ++i)
                                    gDayNo += gDaysInMonth[i];
                                  gDayNo += gd;
                                  let jDayNo =
                                    gDayNo - (gYear >= 1600 ? 79 : 0);
                                  let jNp = Math.floor(jDayNo / 12053);
                                  jDayNo %= 12053;
                                  let jYear =
                                    979 +
                                    33 * jNp +
                                    4 * Math.floor(jDayNo / 1461);
                                  jDayNo %= 1461;
                                  if (jDayNo >= 366) {
                                    jYear += Math.floor((jDayNo - 1) / 365);
                                    jDayNo = (jDayNo - 1) % 365;
                                  }
                                  let jMonth;
                                  for (
                                    jMonth = 0;
                                    jMonth < 11 &&
                                    jDayNo >= jDaysInMonth[jMonth];
                                    ++jMonth
                                  )
                                    jDayNo -= jDaysInMonth[jMonth];
                                  let jDay = jDayNo + 1;
                                  return {
                                    jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                    jm: jMonth + 1,
                                    jd: jDay
                                  };
                                }
                                function convertDateToJalaliFullString(
                                  dateString
                                ) {
                                  const date = new Date(dateString);
                                  const gYear = date.getFullYear();
                                  const gMonth = date.getMonth() + 1;
                                  const gDay = date.getDate();
                                  const weekdayIndex = date.getDay();
                                  const { jy, jm, jd } = toJalali(
                                    gYear,
                                    gMonth,
                                    gDay
                                  );
                                  const weekday = persianWeekdays[weekdayIndex];
                                  const monthName = persianMonths[jm - 1];
                                  return `${weekday} ${toPersianDigits(
                                    jd
                                  )} ${monthName}`;
                                }
                                const checkIn = $state.booking.data.check_out;
                                const result =
                                  convertDateToJalaliFullString(checkIn);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "tablet") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                const persianWeekdays = [
                                  "یک‌شنبه",
                                  "دوشنبه",
                                  "سه‌شنبه",
                                  "چهارشنبه",
                                  "پنج‌شنبه",
                                  "جمعه",
                                  "شنبه"
                                ];

                                function toPersianDigits(input) {
                                  const persianDigits = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return input
                                    .toString()
                                    .replace(/\d/g, d => persianDigits[d]);
                                }
                                function toJalali(gYear, gMonth, gDay) {
                                  const gDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  const jDaysInMonth = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                                  let gm = gMonth - 1;
                                  let gd = gDay - 1;
                                  let gDayNo =
                                    365 * gy +
                                    Math.floor((gy + 3) / 4) -
                                    Math.floor((gy + 99) / 100) +
                                    Math.floor((gy + 399) / 400);
                                  for (let i = 0; i < gm; ++i)
                                    gDayNo += gDaysInMonth[i];
                                  gDayNo += gd;
                                  let jDayNo =
                                    gDayNo - (gYear >= 1600 ? 79 : 0);
                                  let jNp = Math.floor(jDayNo / 12053);
                                  jDayNo %= 12053;
                                  let jYear =
                                    979 +
                                    33 * jNp +
                                    4 * Math.floor(jDayNo / 1461);
                                  jDayNo %= 1461;
                                  if (jDayNo >= 366) {
                                    jYear += Math.floor((jDayNo - 1) / 365);
                                    jDayNo = (jDayNo - 1) % 365;
                                  }
                                  let jMonth;
                                  for (
                                    jMonth = 0;
                                    jMonth < 11 &&
                                    jDayNo >= jDaysInMonth[jMonth];
                                    ++jMonth
                                  )
                                    jDayNo -= jDaysInMonth[jMonth];
                                  let jDay = jDayNo + 1;
                                  return {
                                    jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                    jm: jMonth + 1,
                                    jd: jDay
                                  };
                                }
                                function convertDateToJalaliFullString(
                                  dateString
                                ) {
                                  const date = new Date(dateString);
                                  const gYear = date.getFullYear();
                                  const gMonth = date.getMonth() + 1;
                                  const gDay = date.getDate();
                                  const weekdayIndex = date.getDay();
                                  const { jy, jm, jd } = toJalali(
                                    gYear,
                                    gMonth,
                                    gDay
                                  );
                                  const weekday = persianWeekdays[weekdayIndex];
                                  const monthName = persianMonths[jm - 1];
                                  return `${weekday} ${toPersianDigits(
                                    jd
                                  )} ${monthName}`;
                                }
                                const checkIn = $state.booking.data.check_out;
                                const result =
                                  convertDateToJalaliFullString(checkIn);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const persianMonths = [
                                  "فروردین",
                                  "اردیبهشت",
                                  "خرداد",
                                  "تیر",
                                  "مرداد",
                                  "شهریور",
                                  "مهر",
                                  "آبان",
                                  "آذر",
                                  "دی",
                                  "بهمن",
                                  "اسفند"
                                ];

                                const persianWeekdays = [
                                  "یک‌شنبه",
                                  "دوشنبه",
                                  "سه‌شنبه",
                                  "چهارشنبه",
                                  "پنج‌شنبه",
                                  "جمعه",
                                  "شنبه"
                                ];

                                function toPersianDigits(input) {
                                  const persianDigits = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  return input
                                    .toString()
                                    .replace(/\d/g, d => persianDigits[d]);
                                }
                                function toJalali(gYear, gMonth, gDay) {
                                  const gDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  const jDaysInMonth = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let gy = gYear - (gYear >= 1600 ? 1600 : 621);
                                  let gm = gMonth - 1;
                                  let gd = gDay - 1;
                                  let gDayNo =
                                    365 * gy +
                                    Math.floor((gy + 3) / 4) -
                                    Math.floor((gy + 99) / 100) +
                                    Math.floor((gy + 399) / 400);
                                  for (let i = 0; i < gm; ++i)
                                    gDayNo += gDaysInMonth[i];
                                  gDayNo += gd;
                                  let jDayNo =
                                    gDayNo - (gYear >= 1600 ? 79 : 0);
                                  let jNp = Math.floor(jDayNo / 12053);
                                  jDayNo %= 12053;
                                  let jYear =
                                    979 +
                                    33 * jNp +
                                    4 * Math.floor(jDayNo / 1461);
                                  jDayNo %= 1461;
                                  if (jDayNo >= 366) {
                                    jYear += Math.floor((jDayNo - 1) / 365);
                                    jDayNo = (jDayNo - 1) % 365;
                                  }
                                  let jMonth;
                                  for (
                                    jMonth = 0;
                                    jMonth < 11 &&
                                    jDayNo >= jDaysInMonth[jMonth];
                                    ++jMonth
                                  )
                                    jDayNo -= jDaysInMonth[jMonth];
                                  let jDay = jDayNo + 1;
                                  return {
                                    jy: jYear + (gYear >= 1600 ? 1600 : 621),
                                    jm: jMonth + 1,
                                    jd: jDay
                                  };
                                }
                                function convertDateToJalaliFullString(
                                  dateString
                                ) {
                                  const date = new Date(dateString);
                                  const gYear = date.getFullYear();
                                  const gMonth = date.getMonth() + 1;
                                  const gDay = date.getDate();
                                  const weekdayIndex = date.getDay();
                                  const { jy, jm, jd } = toJalali(
                                    gYear,
                                    gMonth,
                                    gDay
                                  );
                                  const weekday = persianWeekdays[weekdayIndex];
                                  const monthName = persianMonths[jm - 1];
                                  return `${weekday} ${toPersianDigits(
                                    jd
                                  )} ${monthName}`;
                                }
                                const checkIn = $state.booking.data.check_out;
                                const result =
                                  convertDateToJalaliFullString(checkIn);
                                return result;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rBuvx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s4KBq
                      )}
                    >
                      {"\u06a9\u062f \u0631\u0632\u0631\u0648:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eijx
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.booking.data.booking_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.booking.data.booking_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"feature"}
                data-plasmic-override={overrides.feature}
                className={classNames(projectcss.all, sty.feature)}
              >
                {(() => {
                  try {
                    return $state.booking.data.smart_booking != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"smartBooking"}
                    data-plasmic-override={overrides.smartBooking}
                    className={classNames(projectcss.all, sty.smartBooking)}
                  >
                    <div
                      data-plasmic-name={"data"}
                      data-plasmic-override={overrides.data}
                      className={classNames(
                        projectcss.all,
                        sty.data,
                        (() => {
                          try {
                            return (() => {})();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      )}
                    >
                      <div
                        data-plasmic-name={"title"}
                        data-plasmic-override={overrides.title}
                        className={classNames(projectcss.all, sty.title)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3A21E
                          )}
                        >
                          {
                            "\u0631\u0632\u0631\u0648 \u0647\u0648\u0634\u0645\u0646\u062f"
                          }
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__bMfM)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "smallMobile")
                              ? "26px"
                              : "auto"
                          }
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image155.svg",
                            fullWidth: 27,
                            fullHeight: 26,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"guestInfo"}
                        data-plasmic-override={overrides.guestInfo}
                        className={classNames(projectcss.all, sty.guestInfo)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__adlWs
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__pkI36)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image156.svg",
                              fullWidth: 14,
                              fullHeight: 15,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wxoad
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "smallMobile"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.smart_booking
                                        .guest_phone_number || "موبایل مهمان: ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.smart_booking
                                        .guest_phone_number || "موبایل مهمان: ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.smart_booking
                                        .guest_phone_number || "موبایل مهمان: ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__s0ZDt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__agLat
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "smallMobile"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.smart_booking
                                        .guest_name || "نام مهمان :‌ ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "tablet"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.smart_booking
                                        .guest_name || "؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.smart_booking
                                        .guest_name || "؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062e\u0633\u0631\u0648 \u067e\u0627\u0631\u0633\u0627\u06cc\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookInfo"}
                        data-plasmic-override={overrides.bookInfo}
                        className={classNames(
                          projectcss.all,
                          sty.bookInfo,
                          (() => {
                            try {
                              return $state.accordionOpenSmartBooking
                                ? "display_block"
                                : "display_hidden";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aU2Qf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aIhhR
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "smallMobile"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.smart_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت: " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.smart_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت: " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "tablet"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.smart_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت رزرو : " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.smart_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت رزرو : " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__w81Ii
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oufwt
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__awjXa)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image158.svg",
                                fullWidth: 13,
                                fullHeight: 16,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qgaal
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "smallMobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.booking.data.smart_booking
                                          .night + " شب" || "نفرات"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.smart_booking
                                            .night == null
                                        ) {
                                          return "مدت اقامت";
                                        }
                                        return (
                                          $state.booking.data.smart_booking
                                            .night + " شب" || "مدت اقامت"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.smart_booking
                                            .night == null
                                        ) {
                                          return "مدت اقامت";
                                        }
                                        return (
                                          $state.booking.data.smart_booking
                                            .night + " شب" || "مدت اقامت"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5UCox
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__jioCg)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image157.svg",
                                fullWidth: 14,
                                fullHeight: 14,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pXy5
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.smart_booking
                                            .guests_count == null
                                        ) {
                                          return "نفرات";
                                        }
                                        return (
                                          $state.booking.data.smart_booking
                                            .guests_count + " نفر"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u06f5 \u0646\u0641\u0631";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.smart_booking
                                            .guests_count == null
                                        ) {
                                          return "نفرات";
                                        }
                                        return (
                                          $state.booking.data.smart_booking
                                            .guests_count + " نفر"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookPrice"}
                        data-plasmic-override={overrides.bookPrice}
                        className={classNames(
                          projectcss.all,
                          sty.bookPrice,
                          (() => {
                            try {
                              return $state.accordionOpenSmartBooking
                                ? "display_block"
                                : "display_hidden";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__d8ITf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bc7Tf
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "tablet") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      let price =
                                        $state.booking.data.smart_booking
                                          .amount;
                                      if (
                                        $state.booking.data.website == "jabama"
                                      ) {
                                        price = price / 10;
                                      }
                                      return new Intl.NumberFormat(
                                        "fa-IR"
                                      ).format(price);
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      let price =
                                        $state.booking.data.smart_booking
                                          .amount;
                                      if (
                                        $state.booking.data.website == "jabama"
                                      ) {
                                        price = price / 10;
                                      }
                                      return new Intl.NumberFormat(
                                        "fa-IR"
                                      ).format(price);
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n3CAg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__b0H3N
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__q1Tbt
                              )}
                            >
                              {
                                "\u0645\u0628\u0644\u063a \u0631\u0632\u0631\u0648 \u062f\u0631 \u0634\u0628:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookCommission"}
                        data-plasmic-override={overrides.bookCommission}
                        className={classNames(
                          projectcss.all,
                          sty.bookCommission,
                          (() => {
                            try {
                              return (() => {})();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fDlu7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dgPoa
                            )}
                          >
                            {"%\u06f1\u06f0"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rCc6I
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kffH
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6GyPc
                              )}
                            >
                              {
                                "\u06a9\u0627\u0631\u0645\u0632\u062f (\u0648 \u0645\u0627\u0644\u06cc\u0627\u062a) \u0634\u0628:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookNetPrice"}
                        data-plasmic-override={overrides.bookNetPrice}
                        className={classNames(projectcss.all, sty.bookNetPrice)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rLZsn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tdgzg
                            )}
                          >
                            {"\u06f2/\u06f6\u06f5\u06f5/\u06f0\u06f0\u06f0"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yuNmr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eb3EI
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l1HKf
                              )}
                            >
                              {
                                "\u062f\u0631\u0622\u0645\u062f \u062e\u0627\u0644\u0635 \u0634\u0645\u0627:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookSettleStatus"}
                        data-plasmic-override={overrides.bookSettleStatus}
                        className={classNames(
                          projectcss.all,
                          sty.bookSettleStatus
                        )}
                      >
                        {(() => {
                          try {
                            return (
                              $state.booking.data.smart_booking.is_settled ==
                              false
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"error"}
                            data-plasmic-override={overrides.error}
                            className={classNames(projectcss.all, sty.error)}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__qOrc4)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "18px"
                                  : "auto"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image141.svg",
                                fullWidth: 23,
                                fullHeight: 23,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yiaF
                              )}
                            >
                              {
                                "\u062a\u0633\u0648\u06cc\u0647 \u0646\u0634\u062f\u0647"
                              }
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $state.booking.data.smart_booking.is_settled ==
                              true
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"_true"}
                            data-plasmic-override={overrides._true}
                            className={classNames(projectcss.all, sty._true)}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__eWUza)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "18px"
                                  : "auto"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image141.svg",
                                fullWidth: 23,
                                fullHeight: 23,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__di7DJ
                              )}
                            >
                              {
                                "\u062a\u0633\u0648\u06cc\u0647 \u0634\u062f\u0647"
                              }
                            </div>
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? (() => {
                                try {
                                  return (
                                    $state.booking.data.smart_booking
                                      .is_settled == null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (
                                    $state.booking.data.smart_booking
                                      .is_settled == null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <div
                            data-plasmic-name={"true2"}
                            data-plasmic-override={overrides.true2}
                            className={classNames(projectcss.all, sty.true2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__skgW4
                              )}
                            >
                              {"\u061f"}
                            </div>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___90Cmi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iznGv
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pVcZ
                              )}
                            >
                              {
                                "\u0648\u0636\u0639\u06cc\u062a \u0645\u0627\u0644\u06cc:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"openAndCloseButton"}
                      data-plasmic-override={overrides.openAndCloseButton}
                      className={classNames(
                        projectcss.all,
                        sty.openAndCloseButton
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAccordionOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["accordionOpenSmartBooking"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAccordionOpen"] != null &&
                          typeof $steps["updateAccordionOpen"] === "object" &&
                          typeof $steps["updateAccordionOpen"].then ===
                            "function"
                        ) {
                          $steps["updateAccordionOpen"] = await $steps[
                            "updateAccordionOpen"
                          ];
                        }
                      }}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(
                          sty.img__rkHvn,
                          (() => {
                            try {
                              return $state.accordionOpenSmartBooking
                                ? ".rotate-normal"
                                : "rotate-flipped";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image154.svg",
                          fullWidth: 21,
                          fullHeight: 10,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.booking.data.manual_booking != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"manulBooking"}
                    data-plasmic-override={overrides.manulBooking}
                    className={classNames(projectcss.all, sty.manulBooking)}
                  >
                    <div
                      data-plasmic-name={"data3"}
                      data-plasmic-override={overrides.data3}
                      className={classNames(projectcss.all, sty.data3)}
                    >
                      <div
                        data-plasmic-name={"title3"}
                        data-plasmic-override={overrides.title3}
                        className={classNames(projectcss.all, sty.title3)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ewOqG
                          )}
                        >
                          {"\u0631\u0632\u0631\u0648 \u062f\u0633\u062a\u06cc"}
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__rNlAs)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "smallMobile")
                              ? "26px"
                              : "auto"
                          }
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/website_starter/images/image155.svg",
                            fullWidth: 27,
                            fullHeight: 26,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        data-plasmic-name={"guestInfo2"}
                        data-plasmic-override={overrides.guestInfo2}
                        className={classNames(projectcss.all, sty.guestInfo2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6UWUc
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__oUumn)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image156.svg",
                              fullWidth: 14,
                              fullHeight: 15,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__utevI
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "smallMobile"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.manual_booking
                                        .guest_phone_number || "موبایل مهمان: ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.manual_booking
                                        .guest_phone_number || "موبایل مهمان: ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.manual_booking
                                        .guest_phone_number || "موبایل مهمان: ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kFsnw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eStQg
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "smallMobile"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.manual_booking
                                        .guest_name || "نام مهمان :‌ ؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "tablet"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.manual_booking
                                        .guest_name || "؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.booking.data.manual_booking
                                        .guest_name || "؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookInfo2"}
                        data-plasmic-override={overrides.bookInfo2}
                        className={classNames(projectcss.all, sty.bookInfo2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pxXzy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sdp9D
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "smallMobile"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.manual_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت: " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.manual_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت: " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : hasVariant(
                                globalVariants,
                                "screen",
                                "tablet"
                              ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.manual_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت رزرو : " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const persianMonths = [
                                        "فروردین",
                                        "اردیبهشت",
                                        "خرداد",
                                        "تیر",
                                        "مرداد",
                                        "شهریور",
                                        "مهر",
                                        "آبان",
                                        "آذر",
                                        "دی",
                                        "بهمن",
                                        "اسفند"
                                      ];

                                      const persianWeekdays = [
                                        "یک‌شنبه",
                                        "دوشنبه",
                                        "سه‌شنبه",
                                        "چهارشنبه",
                                        "پنج‌شنبه",
                                        "جمعه",
                                        "شنبه"
                                      ];

                                      function toPersianDigits(input) {
                                        const persianDigits = [
                                          "۰",
                                          "۱",
                                          "۲",
                                          "۳",
                                          "۴",
                                          "۵",
                                          "۶",
                                          "۷",
                                          "۸",
                                          "۹"
                                        ];

                                        return input
                                          .toString()
                                          .replace(
                                            /\d/g,
                                            d => persianDigits[d]
                                          );
                                      }
                                      function toJalali(gYear, gMonth, gDay) {
                                        const gDaysInMonth = [
                                          31, 28, 31, 30, 31, 30, 31, 31, 30,
                                          31, 30, 31
                                        ];

                                        const jDaysInMonth = [
                                          31, 31, 31, 31, 31, 31, 30, 30, 30,
                                          30, 30, 29
                                        ];

                                        let gy =
                                          gYear - (gYear >= 1600 ? 1600 : 621);
                                        let gm = gMonth - 1;
                                        let gd = gDay - 1;
                                        let gDayNo =
                                          365 * gy +
                                          Math.floor((gy + 3) / 4) -
                                          Math.floor((gy + 99) / 100) +
                                          Math.floor((gy + 399) / 400);
                                        for (let i = 0; i < gm; ++i)
                                          gDayNo += gDaysInMonth[i];
                                        gDayNo += gd;
                                        let jDayNo =
                                          gDayNo - (gYear >= 1600 ? 79 : 0);
                                        let jNp = Math.floor(jDayNo / 12053);
                                        jDayNo %= 12053;
                                        let jYear =
                                          979 +
                                          33 * jNp +
                                          4 * Math.floor(jDayNo / 1461);
                                        jDayNo %= 1461;
                                        if (jDayNo >= 366) {
                                          jYear += Math.floor(
                                            (jDayNo - 1) / 365
                                          );
                                          jDayNo = (jDayNo - 1) % 365;
                                        }
                                        let jMonth;
                                        for (
                                          jMonth = 0;
                                          jMonth < 11 &&
                                          jDayNo >= jDaysInMonth[jMonth];
                                          ++jMonth
                                        )
                                          jDayNo -= jDaysInMonth[jMonth];
                                        let jDay = jDayNo + 1;
                                        return {
                                          jy:
                                            jYear +
                                            (gYear >= 1600 ? 1600 : 621),
                                          jm: jMonth + 1,
                                          jd: jDay
                                        };
                                      }
                                      function convertDateToJalaliFullString(
                                        dateString
                                      ) {
                                        const date = new Date(dateString);
                                        const gYear = date.getFullYear();
                                        const gMonth = date.getMonth() + 1;
                                        const gDay = date.getDate();
                                        const weekdayIndex = date.getDay();
                                        const { jy, jm, jd } = toJalali(
                                          gYear,
                                          gMonth,
                                          gDay
                                        );
                                        const weekday =
                                          persianWeekdays[weekdayIndex];
                                        const monthName = persianMonths[jm - 1];
                                        return `${weekday} ${toPersianDigits(
                                          jd
                                        )} ${monthName}`;
                                      }
                                      const checkIn =
                                        $state.booking.data.manual_booking
                                          .created_at;
                                      const result =
                                        convertDateToJalaliFullString(checkIn);
                                      return "دریافت رزرو : " + result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jUzls
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v65EK
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__xKPjf)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image158.svg",
                                fullWidth: 13,
                                fullHeight: 16,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lNfrd
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "smallMobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.booking.data.manual_booking
                                          .night + " شب" || "نفرات"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.manual_booking
                                            .night == null
                                        ) {
                                          return "مدت اقامت";
                                        }
                                        return (
                                          $state.booking.data.manual_booking
                                            .night + " شب" || "مدت اقامت"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.manual_booking
                                            .night == null
                                        ) {
                                          return "مدت اقامت";
                                        }
                                        return (
                                          $state.booking.data.manual_booking
                                            .night + " شب" || "مدت اقامت"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__d39Xe
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___1Okd5)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image157.svg",
                                fullWidth: 14,
                                fullHeight: 14,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c5Rz1
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobile"
                              ) ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.manual_booking
                                            .guests_count == null
                                        ) {
                                          return "نفرات";
                                        }
                                        return (
                                          $state.booking.data.manual_booking
                                            .guests_count + " نفر"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        if (
                                          $state.booking.data.manual_booking
                                            .guests_count == null
                                        ) {
                                          return "نفرات";
                                        }
                                        return (
                                          $state.booking.data.manual_booking
                                            .guests_count + " نفر"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return " ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookCommission2"}
                        data-plasmic-override={overrides.bookCommission2}
                        className={classNames(
                          projectcss.all,
                          sty.bookCommission2,
                          (() => {
                            try {
                              return (() => {})();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gSemk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cExJl
                            )}
                          >
                            {"%\u06f1\u06f0"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ib4Yp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z9QzL
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jfwmV
                              )}
                            >
                              {
                                "\u06a9\u0627\u0631\u0645\u0632\u062f (\u0648 \u0645\u0627\u0644\u06cc\u0627\u062a) \u0634\u0628:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"bookNetPrice2"}
                        data-plasmic-override={overrides.bookNetPrice2}
                        className={classNames(
                          projectcss.all,
                          sty.bookNetPrice2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wnzV
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zsX2U
                            )}
                          >
                            {"\u06f2/\u06f6\u06f5\u06f5/\u06f0\u06f0\u06f0"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dxQVs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__d2Xvy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__m2TTu
                              )}
                            >
                              {
                                "\u062f\u0631\u0622\u0645\u062f \u062e\u0627\u0644\u0635 \u0634\u0645\u0627:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"netPrice"}
                        data-plasmic-override={overrides.netPrice}
                        className={classNames(projectcss.all, sty.netPrice)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? (() => {
                                try {
                                  return (
                                    $state.booking.data.manual_booking.amount ==
                                    null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (
                                    $state.booking.data.manual_booking.amount ==
                                    null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <div
                            data-plasmic-name={"true4"}
                            data-plasmic-override={overrides.true4}
                            className={classNames(projectcss.all, sty.true4)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qWmt
                              )}
                            >
                              {"\u061f"}
                            </div>
                          </div>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "smallMobile")
                            ? (() => {
                                try {
                                  return (
                                    $state.booking.data.manual_booking.amount !=
                                    null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return (
                                    $state.booking.data.manual_booking.amount !=
                                    null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <div
                            data-plasmic-name={"true5"}
                            data-plasmic-override={overrides.true5}
                            className={classNames(projectcss.all, sty.true5)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mqXl
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat(
                                      "fa-IR"
                                    ).format(
                                      $state.booking.data.manual_booking.amount
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return " ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ba6CE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4OEmw
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uMp0K
                              )}
                            >
                              {
                                "\u062f\u0631\u0622\u0645\u062f \u062e\u0627\u0644\u0635 \u0634\u0645\u0627:"
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.booking.data.auto_sync_status != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"autoSync"}
                    data-plasmic-override={overrides.autoSync}
                    className={classNames(projectcss.all, sty.autoSync)}
                  >
                    <div
                      data-plasmic-name={"data2"}
                      data-plasmic-override={overrides.data2}
                      className={classNames(
                        projectcss.all,
                        sty.data2,
                        (() => {
                          try {
                            return (() => {})();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      )}
                    >
                      <div
                        data-plasmic-name={"title2"}
                        data-plasmic-override={overrides.title2}
                        className={classNames(projectcss.all, sty.title2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oIafE,
                            (() => {
                              try {
                                return (() => {
                                  if (
                                    $state.booking.data.auto_sync_status == null
                                  ) {
                                    return "display_hidden";
                                  }
                                  return $state.accordionOpenAutoSync
                                    ? "display_hidden"
                                    : "display_block";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          )}
                        >
                          {(() => {
                            try {
                              return !$state.booking.data.auto_sync_status.some(
                                platform => !platform.status
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__x4L7O)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "18px"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                  ? "30px"
                                  : "37px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image160.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return $state.booking.data.auto_sync_status.some(
                                      platform => !platform.status
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return $state.booking.data.auto_sync_status.some(
                                      platform => !platform.status
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__pemI9)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "18px"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                  ? "30px"
                                  : "37px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "100%"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobile"
                                    )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image161.svg",
                                fullWidth: 22,
                                fullHeight: 22,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ljl7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__joCMm
                            )}
                          >
                            {
                              "\u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627"
                            }
                          </div>
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__gLuYa)}
                            displayHeight={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "smallMobile"
                              )
                                ? "22px"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "smallMobile"
                              )
                                ? "100%"
                                : hasVariant(globalVariants, "screen", "mobile")
                                ? "100%"
                                : "100%"
                            }
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/image159.svg",
                              fullWidth: 29,
                              fullHeight: 28,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"description"}
                        data-plasmic-override={overrides.description}
                        className={classNames(
                          projectcss.all,
                          sty.description,
                          (() => {
                            try {
                              return $state.accordionOpenAutoSync
                                ? "display_block"
                                : "display_hidden";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iyOnW
                          )}
                        >
                          {(() => {
                            try {
                              return (
                                $state.booking.data.auto_sync_status != null
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zn2Wr
                              )}
                            >
                              {
                                "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0644\u0627\u0634 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0631\u0627\u06cc \u0628\u0633\u062a\u0646 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627:"
                              }
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $state.booking.data.auto_sync_status == null
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qzN7
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0631\u0632\u0631\u0648 \u0641\u0639\u0627\u0644 \u0646\u0628\u0648\u062f\u0647 \u0627\u0633\u062a"
                              }
                            </div>
                          ) : null}
                        </div>
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.booking.data.auto_sync_status;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"platformStatus"}
                            data-plasmic-override={overrides.platformStatus}
                            className={classNames(
                              projectcss.all,
                              sty.platformStatus,
                              (() => {
                                try {
                                  return $state.accordionOpenAutoSync
                                    ? "display_block"
                                    : "display_hidden";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__diq12
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__o51MG
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                ) ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const websiteMap = {
                                            shab: "شب",
                                            jabama: "جاباما",
                                            homsa: "هومسا",
                                            jajiga: "جاجیگا",
                                            mizboon: "میزبون",
                                            mihmansho: "مهمانشو",
                                            otaghak: "اتاقک"
                                          };
                                          const faWebsiteName =
                                            websiteMap[
                                              currentItem.website_name
                                            ] || currentItem.website_name;
                                          return faWebsiteName;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0634\u0628";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const websiteMap = {
                                            shab: "شب",
                                            jabama: "جاباما",
                                            homsa: "هومسا",
                                            jajiga: "جاجیگا",
                                            mizboon: "میزبون",
                                            mihmansho: "مهمانشو",
                                            otaghak: "اتاقک"
                                          };
                                          const faWebsiteName =
                                            websiteMap[
                                              currentItem.website_name
                                            ] || currentItem.website_name;
                                          return faWebsiteName;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0634\u0628";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                              {(() => {
                                try {
                                  return currentItem.status == false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__q849)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "smallMobile"
                                    )
                                      ? "22px"
                                      : hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                      ? "24px"
                                      : hasVariant(
                                          globalVariants,
                                          "screen",
                                          "tablet"
                                        )
                                      ? "24px"
                                      : "27px"
                                  }
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "smallMobile"
                                    )
                                      ? "100%"
                                      : hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobile"
                                        )
                                      ? "100%"
                                      : "100%"
                                  }
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/website_starter/images/image161.svg",
                                    fullWidth: 22,
                                    fullHeight: 22,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.status == true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__mxXba)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "smallMobile"
                                    )
                                      ? "22px"
                                      : hasVariant(
                                          globalVariants,
                                          "screen",
                                          "tablet"
                                        )
                                      ? "24px"
                                      : "27px"
                                  }
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/website_starter/images/image160.svg",
                                    fullWidth: 22,
                                    fullHeight: 22,
                                    aspectRatio: undefined
                                  }}
                                />
                              ) : null}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                    <div
                      data-plasmic-name={"openAndCloseButton2"}
                      data-plasmic-override={overrides.openAndCloseButton2}
                      className={classNames(
                        projectcss.all,
                        sty.openAndCloseButton2
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAccordionOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["accordionOpenAutoSync"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAccordionOpen"] != null &&
                          typeof $steps["updateAccordionOpen"] === "object" &&
                          typeof $steps["updateAccordionOpen"].then ===
                            "function"
                        ) {
                          $steps["updateAccordionOpen"] = await $steps[
                            "updateAccordionOpen"
                          ];
                        }
                      }}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(
                          sty.img__os5Gg,
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return $state.accordionOpenAutoSync
                                    ? ".rotate-normal"
                                    : "rotate-flipped";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return $state.accordionOpenSmartBooking
                                    ? ".rotate-normal"
                                    : "rotate-flipped";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        )}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image154.svg",
                          fullWidth: 21,
                          fullHeight: 10,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>
                ) : null}
              </div>
            </ApiRequest>
          </div>
          <NavbarRntFooter
            data-plasmic-name={"navbarRntFooter"}
            data-plasmic-override={overrides.navbarRntFooter}
            className={classNames("__wab_instance", sty.navbarRntFooter)}
            navPage={"reservations"}
            userType={"1"}
          />

          <ApiRequest
            data-plasmic-name={"profile"}
            data-plasmic-override={overrides.profile}
            className={classNames("__wab_instance", sty.profile)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["profile", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["profile", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["profile", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["profile"] = ref;
            }}
            url={"https://api-v2.rentamon.com/api/user_info?property_id=1"}
          />

          <div
            data-plasmic-name={"html"}
            data-plasmic-override={overrides.html}
            className={classNames(projectcss.all, sty.html)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wUeQg)}>
              <ClarityRntComponent
                data-plasmic-name={"clarityRntComponent"}
                data-plasmic-override={overrides.clarityRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.clarityRntComponent
                )}
              />

              <FaviconRntComponent
                data-plasmic-name={"faviconRntComponent"}
                data-plasmic-override={overrides.faviconRntComponent}
                className={classNames(
                  "__wab_instance",
                  sty.faviconRntComponent
                )}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "detail2",
    "shab",
    "jabama",
    "jajiga",
    "homsa",
    "otaghak",
    "mihmansho",
    "divar",
    "prevGuest",
    "colleague",
    "others",
    "offline",
    "social",
    "header",
    "returnButton",
    "detail",
    "booking",
    "generalData",
    "feature",
    "smartBooking",
    "data",
    "title",
    "guestInfo",
    "bookInfo",
    "bookPrice",
    "bookCommission",
    "bookNetPrice",
    "bookSettleStatus",
    "error",
    "_true",
    "true2",
    "openAndCloseButton",
    "manulBooking",
    "data3",
    "title3",
    "guestInfo2",
    "bookInfo2",
    "bookCommission2",
    "bookNetPrice2",
    "netPrice",
    "true4",
    "true5",
    "autoSync",
    "data2",
    "title2",
    "description",
    "platformStatus",
    "openAndCloseButton2",
    "navbarRntFooter",
    "profile",
    "html",
    "clarityRntComponent",
    "faviconRntComponent"
  ],
  detail2: [
    "detail2",
    "shab",
    "jabama",
    "jajiga",
    "homsa",
    "otaghak",
    "mihmansho",
    "divar",
    "prevGuest",
    "colleague",
    "others",
    "offline",
    "social"
  ],
  shab: ["shab"],
  jabama: ["jabama"],
  jajiga: ["jajiga"],
  homsa: ["homsa"],
  otaghak: ["otaghak"],
  mihmansho: ["mihmansho"],
  divar: ["divar"],
  prevGuest: ["prevGuest"],
  colleague: ["colleague"],
  others: ["others"],
  offline: ["offline"],
  social: ["social"],
  header: ["header", "returnButton", "detail"],
  returnButton: ["returnButton"],
  detail: ["detail"],
  booking: [
    "booking",
    "generalData",
    "feature",
    "smartBooking",
    "data",
    "title",
    "guestInfo",
    "bookInfo",
    "bookPrice",
    "bookCommission",
    "bookNetPrice",
    "bookSettleStatus",
    "error",
    "_true",
    "true2",
    "openAndCloseButton",
    "manulBooking",
    "data3",
    "title3",
    "guestInfo2",
    "bookInfo2",
    "bookCommission2",
    "bookNetPrice2",
    "netPrice",
    "true4",
    "true5",
    "autoSync",
    "data2",
    "title2",
    "description",
    "platformStatus",
    "openAndCloseButton2"
  ],
  generalData: ["generalData"],
  feature: [
    "feature",
    "smartBooking",
    "data",
    "title",
    "guestInfo",
    "bookInfo",
    "bookPrice",
    "bookCommission",
    "bookNetPrice",
    "bookSettleStatus",
    "error",
    "_true",
    "true2",
    "openAndCloseButton",
    "manulBooking",
    "data3",
    "title3",
    "guestInfo2",
    "bookInfo2",
    "bookCommission2",
    "bookNetPrice2",
    "netPrice",
    "true4",
    "true5",
    "autoSync",
    "data2",
    "title2",
    "description",
    "platformStatus",
    "openAndCloseButton2"
  ],
  smartBooking: [
    "smartBooking",
    "data",
    "title",
    "guestInfo",
    "bookInfo",
    "bookPrice",
    "bookCommission",
    "bookNetPrice",
    "bookSettleStatus",
    "error",
    "_true",
    "true2",
    "openAndCloseButton"
  ],
  data: [
    "data",
    "title",
    "guestInfo",
    "bookInfo",
    "bookPrice",
    "bookCommission",
    "bookNetPrice",
    "bookSettleStatus",
    "error",
    "_true",
    "true2"
  ],
  title: ["title"],
  guestInfo: ["guestInfo"],
  bookInfo: ["bookInfo"],
  bookPrice: ["bookPrice"],
  bookCommission: ["bookCommission"],
  bookNetPrice: ["bookNetPrice"],
  bookSettleStatus: ["bookSettleStatus", "error", "_true", "true2"],
  error: ["error"],
  _true: ["_true"],
  true2: ["true2"],
  openAndCloseButton: ["openAndCloseButton"],
  manulBooking: [
    "manulBooking",
    "data3",
    "title3",
    "guestInfo2",
    "bookInfo2",
    "bookCommission2",
    "bookNetPrice2",
    "netPrice",
    "true4",
    "true5"
  ],
  data3: [
    "data3",
    "title3",
    "guestInfo2",
    "bookInfo2",
    "bookCommission2",
    "bookNetPrice2",
    "netPrice",
    "true4",
    "true5"
  ],
  title3: ["title3"],
  guestInfo2: ["guestInfo2"],
  bookInfo2: ["bookInfo2"],
  bookCommission2: ["bookCommission2"],
  bookNetPrice2: ["bookNetPrice2"],
  netPrice: ["netPrice", "true4", "true5"],
  true4: ["true4"],
  true5: ["true5"],
  autoSync: [
    "autoSync",
    "data2",
    "title2",
    "description",
    "platformStatus",
    "openAndCloseButton2"
  ],
  data2: ["data2", "title2", "description", "platformStatus"],
  title2: ["title2"],
  description: ["description"],
  platformStatus: ["platformStatus"],
  openAndCloseButton2: ["openAndCloseButton2"],
  navbarRntFooter: ["navbarRntFooter"],
  profile: ["profile"],
  html: ["html", "clarityRntComponent", "faviconRntComponent"],
  clarityRntComponent: ["clarityRntComponent"],
  faviconRntComponent: ["faviconRntComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  detail2: "div";
  shab: typeof PlasmicImg__;
  jabama: typeof PlasmicImg__;
  jajiga: typeof PlasmicImg__;
  homsa: typeof PlasmicImg__;
  otaghak: typeof PlasmicImg__;
  mihmansho: typeof PlasmicImg__;
  divar: typeof PlasmicImg__;
  prevGuest: typeof PlasmicImg__;
  colleague: typeof PlasmicImg__;
  others: typeof PlasmicImg__;
  offline: typeof PlasmicImg__;
  social: typeof PlasmicImg__;
  header: "div";
  returnButton: "div";
  detail: "div";
  booking: typeof ApiRequest;
  generalData: "div";
  feature: "div";
  smartBooking: "div";
  data: "div";
  title: "div";
  guestInfo: "div";
  bookInfo: "div";
  bookPrice: "div";
  bookCommission: "div";
  bookNetPrice: "div";
  bookSettleStatus: "div";
  error: "div";
  _true: "div";
  true2: "div";
  openAndCloseButton: "div";
  manulBooking: "div";
  data3: "div";
  title3: "div";
  guestInfo2: "div";
  bookInfo2: "div";
  bookCommission2: "div";
  bookNetPrice2: "div";
  netPrice: "div";
  true4: "div";
  true5: "div";
  autoSync: "div";
  data2: "div";
  title2: "div";
  description: "div";
  platformStatus: "div";
  openAndCloseButton2: "div";
  navbarRntFooter: typeof NavbarRntFooter;
  profile: typeof ApiRequest;
  html: "div";
  clarityRntComponent: typeof ClarityRntComponent;
  faviconRntComponent: typeof FaviconRntComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookings__VariantsArgs;
    args?: PlasmicBookings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBookings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookings__ArgProps,
          internalVariantPropNames: PlasmicBookings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookings";
  } else {
    func.displayName = `PlasmicBookings.${nodeName}`;
  }
  return func;
}

export const PlasmicBookings = Object.assign(
  // Top-level PlasmicBookings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    detail2: makeNodeComponent("detail2"),
    shab: makeNodeComponent("shab"),
    jabama: makeNodeComponent("jabama"),
    jajiga: makeNodeComponent("jajiga"),
    homsa: makeNodeComponent("homsa"),
    otaghak: makeNodeComponent("otaghak"),
    mihmansho: makeNodeComponent("mihmansho"),
    divar: makeNodeComponent("divar"),
    prevGuest: makeNodeComponent("prevGuest"),
    colleague: makeNodeComponent("colleague"),
    others: makeNodeComponent("others"),
    offline: makeNodeComponent("offline"),
    social: makeNodeComponent("social"),
    header: makeNodeComponent("header"),
    returnButton: makeNodeComponent("returnButton"),
    detail: makeNodeComponent("detail"),
    booking: makeNodeComponent("booking"),
    generalData: makeNodeComponent("generalData"),
    feature: makeNodeComponent("feature"),
    smartBooking: makeNodeComponent("smartBooking"),
    data: makeNodeComponent("data"),
    title: makeNodeComponent("title"),
    guestInfo: makeNodeComponent("guestInfo"),
    bookInfo: makeNodeComponent("bookInfo"),
    bookPrice: makeNodeComponent("bookPrice"),
    bookCommission: makeNodeComponent("bookCommission"),
    bookNetPrice: makeNodeComponent("bookNetPrice"),
    bookSettleStatus: makeNodeComponent("bookSettleStatus"),
    error: makeNodeComponent("error"),
    _true: makeNodeComponent("_true"),
    true2: makeNodeComponent("true2"),
    openAndCloseButton: makeNodeComponent("openAndCloseButton"),
    manulBooking: makeNodeComponent("manulBooking"),
    data3: makeNodeComponent("data3"),
    title3: makeNodeComponent("title3"),
    guestInfo2: makeNodeComponent("guestInfo2"),
    bookInfo2: makeNodeComponent("bookInfo2"),
    bookCommission2: makeNodeComponent("bookCommission2"),
    bookNetPrice2: makeNodeComponent("bookNetPrice2"),
    netPrice: makeNodeComponent("netPrice"),
    true4: makeNodeComponent("true4"),
    true5: makeNodeComponent("true5"),
    autoSync: makeNodeComponent("autoSync"),
    data2: makeNodeComponent("data2"),
    title2: makeNodeComponent("title2"),
    description: makeNodeComponent("description"),
    platformStatus: makeNodeComponent("platformStatus"),
    openAndCloseButton2: makeNodeComponent("openAndCloseButton2"),
    navbarRntFooter: makeNodeComponent("navbarRntFooter"),
    profile: makeNodeComponent("profile"),
    html: makeNodeComponent("html"),
    clarityRntComponent: makeNodeComponent("clarityRntComponent"),
    faviconRntComponent: makeNodeComponent("faviconRntComponent"),

    // Metadata about props expected for PlasmicBookings
    internalVariantProps: PlasmicBookings__VariantProps,
    internalArgProps: PlasmicBookings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBookings;
/* prettier-ignore-end */
