/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: g7mACfQqrf7P

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicDropdownRntComponent.module.css"; // plasmic-import: g7mACfQqrf7P/css

import Icon82Icon from "./icons/PlasmicIcon__Icon82"; // plasmic-import: 2O4NC5vDxvXg/icon

createPlasmicElementProxy;

export type PlasmicDropdownRntComponent__VariantMembers = {};
export type PlasmicDropdownRntComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicDropdownRntComponent__VariantsArgs;
export const PlasmicDropdownRntComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDropdownRntComponent__ArgsType = {
  selectedItemClicked?: boolean;
  onSelectedItemClickedChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicDropdownRntComponent__ArgsType;
export const PlasmicDropdownRntComponent__ArgProps = new Array<ArgPropType>(
  "selectedItemClicked",
  "onSelectedItemClickedChange"
);

export type PlasmicDropdownRntComponent__OverridesType = {
  main?: Flex__<"div">;
  selectedItem?: Flex__<"div">;
  image?: Flex__<"div">;
  propertyName?: Flex__<"div">;
  arrowDown?: Flex__<"div">;
  svg?: Flex__<"svg">;
  menuItems?: Flex__<"div">;
  dropMenu?: Flex__<"div">;
  image2?: Flex__<"div">;
  propertyName2?: Flex__<"div">;
};

export interface DefaultDropdownRntComponentProps {
  selectedItemClicked?: boolean;
  onSelectedItemClickedChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDropdownRntComponent__RenderFunc(props: {
  variants: PlasmicDropdownRntComponent__VariantsArgs;
  args: PlasmicDropdownRntComponent__ArgsType;
  overrides: PlasmicDropdownRntComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedItemClicked",
        type: "writable",
        variableType: "boolean",

        valueProp: "selectedItemClicked",
        onChangeProp: "onSelectedItemClickedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"main"}
      data-plasmic-override={overrides.main}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.main
      )}
    >
      <div
        data-plasmic-name={"selectedItem"}
        data-plasmic-override={overrides.selectedItem}
        className={classNames(projectcss.all, sty.selectedItem, "clickable")}
        onClick={async event => {
          const $steps = {};

          $steps["updateSelectedItemClicked"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["selectedItemClicked"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedItemClicked"] != null &&
            typeof $steps["updateSelectedItemClicked"] === "object" &&
            typeof $steps["updateSelectedItemClicked"].then === "function"
          ) {
            $steps["updateSelectedItemClicked"] = await $steps[
              "updateSelectedItemClicked"
            ];
          }
        }}
      >
        <div
          data-plasmic-name={"image"}
          data-plasmic-override={overrides.image}
          className={classNames(projectcss.all, sty.image)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___8KiXk)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/website_starter/images/persianHouse3WideJpg.jpg",
              fullWidth: 750,
              fullHeight: 428,
              aspectRatio: undefined
            }}
          />
        </div>
        <div
          data-plasmic-name={"propertyName"}
          data-plasmic-override={overrides.propertyName}
          className={classNames(projectcss.all, sty.propertyName)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7DA1H
            )}
          >
            {
              "\u0648\u06cc\u0644\u0627 \u062f\u0648\u062e\u0648\u0627\u0628\u0647 \u0627\u0631\u0633\u0628\u0627\u0631\u0627\u0646"
            }
          </div>
        </div>
        <div
          data-plasmic-name={"arrowDown"}
          data-plasmic-override={overrides.arrowDown}
          className={classNames(projectcss.all, sty.arrowDown)}
        >
          <Icon82Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>
      {(() => {
        try {
          return $state.selectedItemClicked;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"menuItems"}
          data-plasmic-override={overrides.menuItems}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuItems, "fadeinf ")}
        >
          <div
            data-plasmic-name={"dropMenu"}
            data-plasmic-override={overrides.dropMenu}
            className={classNames(projectcss.all, sty.dropMenu, "clickable")}
          >
            <div
              data-plasmic-name={"image2"}
              data-plasmic-override={overrides.image2}
              className={classNames(projectcss.all, sty.image2)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__r2Sn)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/persianHouse3WideJpg.jpg",
                  fullWidth: 750,
                  fullHeight: 428,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"propertyName2"}
              data-plasmic-override={overrides.propertyName2}
              className={classNames(projectcss.all, sty.propertyName2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rrFyO
                )}
              >
                {
                  "\u0648\u06cc\u0644\u0627 \u062f\u0648\u062e\u0648\u0627\u0628\u0647 \u0627\u0631\u0633\u0628\u0627\u0631\u0627\u0646"
                }
              </div>
            </div>
          </div>
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  main: [
    "main",
    "selectedItem",
    "image",
    "propertyName",
    "arrowDown",
    "svg",
    "menuItems",
    "dropMenu",
    "image2",
    "propertyName2"
  ],
  selectedItem: ["selectedItem", "image", "propertyName", "arrowDown", "svg"],
  image: ["image"],
  propertyName: ["propertyName"],
  arrowDown: ["arrowDown", "svg"],
  svg: ["svg"],
  menuItems: ["menuItems", "dropMenu", "image2", "propertyName2"],
  dropMenu: ["dropMenu", "image2", "propertyName2"],
  image2: ["image2"],
  propertyName2: ["propertyName2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  main: "div";
  selectedItem: "div";
  image: "div";
  propertyName: "div";
  arrowDown: "div";
  svg: "svg";
  menuItems: "div";
  dropMenu: "div";
  image2: "div";
  propertyName2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdownRntComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdownRntComponent__VariantsArgs;
    args?: PlasmicDropdownRntComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdownRntComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDropdownRntComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdownRntComponent__ArgProps,
          internalVariantPropNames: PlasmicDropdownRntComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdownRntComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "main") {
    func.displayName = "PlasmicDropdownRntComponent";
  } else {
    func.displayName = `PlasmicDropdownRntComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdownRntComponent = Object.assign(
  // Top-level PlasmicDropdownRntComponent renders the root element
  makeNodeComponent("main"),
  {
    // Helper components rendering sub-elements
    selectedItem: makeNodeComponent("selectedItem"),
    image: makeNodeComponent("image"),
    propertyName: makeNodeComponent("propertyName"),
    arrowDown: makeNodeComponent("arrowDown"),
    svg: makeNodeComponent("svg"),
    menuItems: makeNodeComponent("menuItems"),
    dropMenu: makeNodeComponent("dropMenu"),
    image2: makeNodeComponent("image2"),
    propertyName2: makeNodeComponent("propertyName2"),

    // Metadata about props expected for PlasmicDropdownRntComponent
    internalVariantProps: PlasmicDropdownRntComponent__VariantProps,
    internalArgProps: PlasmicDropdownRntComponent__ArgProps
  }
);

export default PlasmicDropdownRntComponent;
/* prettier-ignore-end */
