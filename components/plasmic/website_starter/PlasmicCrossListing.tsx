// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: sQu22rJFNRn7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicCrossListing.module.css"; // plasmic-import: sQu22rJFNRn7/css

createPlasmicElementProxy;

export type PlasmicCrossListing__VariantMembers = {};
export type PlasmicCrossListing__VariantsArgs = {};
type VariantPropType = keyof PlasmicCrossListing__VariantsArgs;
export const PlasmicCrossListing__VariantProps = new Array<VariantPropType>();

export type PlasmicCrossListing__ArgsType = {};
type ArgPropType = keyof PlasmicCrossListing__ArgsType;
export const PlasmicCrossListing__ArgProps = new Array<ArgPropType>();

export type PlasmicCrossListing__OverridesType = {
  crossListingPage?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  step1Host?: Flex__<"div">;
  nameField?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  lastNameField?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  nationalCodeField?: Flex__<typeof FormItemWrapper>;
  input3?: Flex__<typeof AntdInput>;
  dateofBirthField?: Flex__<typeof FormItemWrapper>;
  input4?: Flex__<typeof AntdInput>;
  postalCodeField?: Flex__<typeof FormItemWrapper>;
  input5?: Flex__<typeof AntdInput>;
  phone2Field?: Flex__<typeof FormItemWrapper>;
  input6?: Flex__<typeof AntdInput>;
  step1Buttons?: Flex__<"div">;
  step2Documentation?: Flex__<"div">;
  nameField2?: Flex__<typeof FormItemWrapper>;
  input7?: Flex__<typeof AntdInput>;
  lastNameField2?: Flex__<typeof FormItemWrapper>;
  input8?: Flex__<typeof AntdInput>;
  nationalCodeField2?: Flex__<typeof FormItemWrapper>;
  input9?: Flex__<typeof AntdInput>;
  dateofBirthField2?: Flex__<typeof FormItemWrapper>;
  input10?: Flex__<typeof AntdInput>;
  postalCodeField2?: Flex__<typeof FormItemWrapper>;
  input11?: Flex__<typeof AntdInput>;
  step1Buttons2?: Flex__<"div">;
  step3PropertyInfo?: Flex__<"div">;
  nameField3?: Flex__<typeof FormItemWrapper>;
  input13?: Flex__<typeof AntdInput>;
  lastNameField3?: Flex__<typeof FormItemWrapper>;
  input14?: Flex__<typeof AntdInput>;
  nationalCodeField3?: Flex__<typeof FormItemWrapper>;
  input15?: Flex__<typeof AntdInput>;
  dateofBirthField3?: Flex__<typeof FormItemWrapper>;
  input16?: Flex__<typeof AntdInput>;
  postalCodeField3?: Flex__<typeof FormItemWrapper>;
  input17?: Flex__<typeof AntdInput>;
  phone2Field3?: Flex__<typeof FormItemWrapper>;
  input18?: Flex__<typeof AntdInput>;
  step1Buttons3?: Flex__<"div">;
};

export interface DefaultCrossListingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCrossListing__RenderFunc(props: {
  variants: PlasmicCrossListing__VariantsArgs;
  args: PlasmicCrossListing__ArgsType;
  overrides: PlasmicCrossListing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"crossListingPage"}
          data-plasmic-override={overrides.crossListingPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.crossListingPage
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oeD5Q
            )}
          >
            {
              "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0627\u0632 \u062a\u0648\u060c \u062b\u0628\u062a \u0648\u06cc\u0644\u0627 \u062f\u0631 \u0647\u0645\u0647\u200c\u06cc \u067e\u0644\u062a\u0641\u0631\u0645\u200c\u0647\u0627 \u0628\u0627 \u0645\u0646"
            }
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["form", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $state.step == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step1Host"}
                    data-plasmic-override={overrides.step1Host}
                    className={classNames(projectcss.all, sty.step1Host)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xoRtl
                      )}
                    >
                      {
                        "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u06cc\u0632\u0628\u0627\u0646 \u06f1/\u06f8"
                      }
                    </div>
                    <FormItemWrapper
                      data-plasmic-name={"nameField"}
                      data-plasmic-override={overrides.nameField}
                      className={classNames("__wab_instance", sty.nameField)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1B0X9
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"name"}
                      rules={[{ ruleType: "required" }]}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u0646\u0627\u0645",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"lastNameField"}
                      data-plasmic-override={overrides.lastNameField}
                      className={classNames(
                        "__wab_instance",
                        sty.lastNameField
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Rgwa
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"lastName"}
                      rules={[{ ruleType: "required" }]}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input2),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input2", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"nationalCodeField"}
                      data-plasmic-override={overrides.nationalCodeField}
                      className={classNames(
                        "__wab_instance",
                        sty.nationalCodeField
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hlrbw
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"nationalCode"}
                      rules={[{ ruleType: "required" }]}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input3),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input3", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u06a9\u062f \u0645\u0644\u06cc",
                          size: "large",
                          type: "number",
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"dateofBirthField"}
                      data-plasmic-override={overrides.dateofBirthField}
                      className={classNames(
                        "__wab_instance",
                        sty.dateofBirthField
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lh5Yk
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                          }
                        </div>
                      }
                      name={"dateofBirth"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input4),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f",
                          size: "large",
                          type: "date",
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"postalCodeField"}
                      data-plasmic-override={overrides.postalCodeField}
                      className={classNames(
                        "__wab_instance",
                        sty.postalCodeField
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0WQyn
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"postalCode"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input5),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input5", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u06a9\u062f \u067e\u0633\u062a\u06cc",
                          size: "large",
                          type: "number",
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"phone2Field"}
                      data-plasmic-override={overrides.phone2Field}
                      className={classNames("__wab_instance", sty.phone2Field)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__akXt6
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"phone2"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input6),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a",
                          size: "large",
                          type: "tel",
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      data-plasmic-name={"step1Buttons"}
                      data-plasmic-override={overrides.step1Buttons}
                      className={classNames(projectcss.all, sty.step1Buttons)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__whmiL
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["submit"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/crosslist",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.form.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["submit"] != null &&
                            typeof $steps["submit"] === "object" &&
                            typeof $steps["submit"].then === "function"
                          ) {
                            $steps["submit"] = await $steps["submit"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0645\u062a\u0634\u06a9\u0631\u060c \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u062f!",
                                    "top-center",
                                    3000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lEk8J
                          )}
                        >
                          {"\u0628\u0639\u062f\u06cc"}
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step2Documentation"}
                    data-plasmic-override={overrides.step2Documentation}
                    className={classNames(
                      projectcss.all,
                      sty.step2Documentation
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c7GQ9
                      )}
                    >
                      {
                        "\u0627\u0633\u0646\u0627\u062f \u0648 \u0645\u062f\u0627\u0631\u06a9 \u06f2/\u06f8"
                      }
                    </div>
                    <FormItemWrapper
                      data-plasmic-name={"nameField2"}
                      data-plasmic-override={overrides.nameField2}
                      className={classNames("__wab_instance", sty.nameField2)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bmKs0
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"profilePic"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input7),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input7", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0635\u0648\u06cc\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"lastNameField2"}
                      data-plasmic-override={overrides.lastNameField2}
                      className={classNames(
                        "__wab_instance",
                        sty.lastNameField2
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dY4KB
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"nationalCardPic"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input8),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0635\u0648\u06cc\u0631 \u06a9\u0627\u0631\u062a \u0645\u0644\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"nationalCodeField2"}
                      data-plasmic-override={overrides.nationalCodeField2}
                      className={classNames(
                        "__wab_instance",
                        sty.nationalCodeField2
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pyLg4
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"sanadPic"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input9),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input9", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u06a9\u062f \u0645\u0644\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input9.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input9"}
                            data-plasmic-override={overrides.input9}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"dateofBirthField2"}
                      data-plasmic-override={overrides.dateofBirthField2}
                      className={classNames(
                        "__wab_instance",
                        sty.dateofBirthField2
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rNfQe
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"rentalPic"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input10),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input10", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f",
                          size: "large",
                          type: "date",
                          value: generateStateValueProp($state, [
                            "input10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input10.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input10"}
                            data-plasmic-override={overrides.input10}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"postalCodeField2"}
                      data-plasmic-override={overrides.postalCodeField2}
                      className={classNames(
                        "__wab_instance",
                        sty.postalCodeField2
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__beUy
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"representationPic"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input11),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input11", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u06a9\u062f \u067e\u0633\u062a\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input11",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input11.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input11"}
                            data-plasmic-override={overrides.input11}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      data-plasmic-name={"step1Buttons2"}
                      data-plasmic-override={overrides.step1Buttons2}
                      className={classNames(projectcss.all, sty.step1Buttons2)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__j08O
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["submit"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/crosslist",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.form.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["submit"] != null &&
                            typeof $steps["submit"] === "object" &&
                            typeof $steps["submit"].then === "function"
                          ) {
                            $steps["submit"] = await $steps["submit"];
                          }

                          $steps["toast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0645\u062a\u0634\u06a9\u0631\u060c \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u062f!",
                                    "top-center",
                                    3000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["toast"] != null &&
                            typeof $steps["toast"] === "object" &&
                            typeof $steps["toast"].then === "function"
                          ) {
                            $steps["toast"] = await $steps["toast"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4KfFx
                          )}
                        >
                          {"\u0628\u0639\u062f\u06cc"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__eblE
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tVuDh
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc"}
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step3PropertyInfo"}
                    data-plasmic-override={overrides.step3PropertyInfo}
                    className={classNames(
                      projectcss.all,
                      sty.step3PropertyInfo
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hmWpx
                      )}
                    >
                      {
                        "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0644\u06a9 \u06f3/\u06f8"
                      }
                    </div>
                    <FormItemWrapper
                      data-plasmic-name={"nameField3"}
                      data-plasmic-override={overrides.nameField3}
                      className={classNames("__wab_instance", sty.nameField3)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kKCI
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"name"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input13),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input13", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u0646\u0627\u0645",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input13",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input13.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input13"}
                            data-plasmic-override={overrides.input13}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"lastNameField3"}
                      data-plasmic-override={overrides.lastNameField3}
                      className={classNames(
                        "__wab_instance",
                        sty.lastNameField3
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hMvr9
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"lastName"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input14),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input14", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input14",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input14.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input14"}
                            data-plasmic-override={overrides.input14}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"nationalCodeField3"}
                      data-plasmic-override={overrides.nationalCodeField3}
                      className={classNames(
                        "__wab_instance",
                        sty.nationalCodeField3
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xIJsr
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"nationalCode"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input15),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input15", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u06a9\u062f \u0645\u0644\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input15",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input15.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input15"}
                            data-plasmic-override={overrides.input15}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"dateofBirthField3"}
                      data-plasmic-override={overrides.dateofBirthField3}
                      className={classNames(
                        "__wab_instance",
                        sty.dateofBirthField3
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___00Hm
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"dateofBirth"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input16),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input16", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f",
                          size: "large",
                          type: "date",
                          value: generateStateValueProp($state, [
                            "input16",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input16.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input16"}
                            data-plasmic-override={overrides.input16}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"postalCodeField3"}
                      data-plasmic-override={overrides.postalCodeField3}
                      className={classNames(
                        "__wab_instance",
                        sty.postalCodeField3
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2SPZy
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"postalCode"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input17),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input17", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "\u06a9\u062f \u067e\u0633\u062a\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input17",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input17.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input17"}
                            data-plasmic-override={overrides.input17}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"phone2Field3"}
                      data-plasmic-override={overrides.phone2Field3}
                      className={classNames("__wab_instance", sty.phone2Field3)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eSbJo
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"phone2"}
                    >
                      {(() => {
                        const child$Props = {
                          bordered: true,
                          className: classNames("__wab_instance", sty.input18),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input18", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input18",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input18.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input18"}
                            data-plasmic-override={overrides.input18}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      data-plasmic-name={"step1Buttons3"}
                      data-plasmic-override={overrides.step1Buttons3}
                      className={classNames(projectcss.all, sty.step1Buttons3)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__ryGlp
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["submit"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/crosslist",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.form.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["submit"] != null &&
                            typeof $steps["submit"] === "object" &&
                            typeof $steps["submit"].then === "function"
                          ) {
                            $steps["submit"] = await $steps["submit"];
                          }

                          $steps["toast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0645\u062a\u0634\u06a9\u0631\u060c \u062f\u0631\u06cc\u0627\u0641\u062a \u0634\u062f!",
                                    "top-center",
                                    3000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["toast"] != null &&
                            typeof $steps["toast"] === "object" &&
                            typeof $steps["toast"].then === "function"
                          ) {
                            $steps["toast"] = await $steps["toast"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vlUPz
                          )}
                        >
                          {"\u0628\u0639\u062f\u06cc"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__elLWc
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bIs9I
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc"}
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  crossListingPage: [
    "crossListingPage",
    "form",
    "step1Host",
    "nameField",
    "input",
    "lastNameField",
    "input2",
    "nationalCodeField",
    "input3",
    "dateofBirthField",
    "input4",
    "postalCodeField",
    "input5",
    "phone2Field",
    "input6",
    "step1Buttons",
    "step2Documentation",
    "nameField2",
    "input7",
    "lastNameField2",
    "input8",
    "nationalCodeField2",
    "input9",
    "dateofBirthField2",
    "input10",
    "postalCodeField2",
    "input11",
    "step1Buttons2",
    "step3PropertyInfo",
    "nameField3",
    "input13",
    "lastNameField3",
    "input14",
    "nationalCodeField3",
    "input15",
    "dateofBirthField3",
    "input16",
    "postalCodeField3",
    "input17",
    "phone2Field3",
    "input18",
    "step1Buttons3"
  ],
  form: [
    "form",
    "step1Host",
    "nameField",
    "input",
    "lastNameField",
    "input2",
    "nationalCodeField",
    "input3",
    "dateofBirthField",
    "input4",
    "postalCodeField",
    "input5",
    "phone2Field",
    "input6",
    "step1Buttons",
    "step2Documentation",
    "nameField2",
    "input7",
    "lastNameField2",
    "input8",
    "nationalCodeField2",
    "input9",
    "dateofBirthField2",
    "input10",
    "postalCodeField2",
    "input11",
    "step1Buttons2",
    "step3PropertyInfo",
    "nameField3",
    "input13",
    "lastNameField3",
    "input14",
    "nationalCodeField3",
    "input15",
    "dateofBirthField3",
    "input16",
    "postalCodeField3",
    "input17",
    "phone2Field3",
    "input18",
    "step1Buttons3"
  ],
  step1Host: [
    "step1Host",
    "nameField",
    "input",
    "lastNameField",
    "input2",
    "nationalCodeField",
    "input3",
    "dateofBirthField",
    "input4",
    "postalCodeField",
    "input5",
    "phone2Field",
    "input6",
    "step1Buttons"
  ],
  nameField: ["nameField", "input"],
  input: ["input"],
  lastNameField: ["lastNameField", "input2"],
  input2: ["input2"],
  nationalCodeField: ["nationalCodeField", "input3"],
  input3: ["input3"],
  dateofBirthField: ["dateofBirthField", "input4"],
  input4: ["input4"],
  postalCodeField: ["postalCodeField", "input5"],
  input5: ["input5"],
  phone2Field: ["phone2Field", "input6"],
  input6: ["input6"],
  step1Buttons: ["step1Buttons"],
  step2Documentation: [
    "step2Documentation",
    "nameField2",
    "input7",
    "lastNameField2",
    "input8",
    "nationalCodeField2",
    "input9",
    "dateofBirthField2",
    "input10",
    "postalCodeField2",
    "input11",
    "step1Buttons2"
  ],
  nameField2: ["nameField2", "input7"],
  input7: ["input7"],
  lastNameField2: ["lastNameField2", "input8"],
  input8: ["input8"],
  nationalCodeField2: ["nationalCodeField2", "input9"],
  input9: ["input9"],
  dateofBirthField2: ["dateofBirthField2", "input10"],
  input10: ["input10"],
  postalCodeField2: ["postalCodeField2", "input11"],
  input11: ["input11"],
  step1Buttons2: ["step1Buttons2"],
  step3PropertyInfo: [
    "step3PropertyInfo",
    "nameField3",
    "input13",
    "lastNameField3",
    "input14",
    "nationalCodeField3",
    "input15",
    "dateofBirthField3",
    "input16",
    "postalCodeField3",
    "input17",
    "phone2Field3",
    "input18",
    "step1Buttons3"
  ],
  nameField3: ["nameField3", "input13"],
  input13: ["input13"],
  lastNameField3: ["lastNameField3", "input14"],
  input14: ["input14"],
  nationalCodeField3: ["nationalCodeField3", "input15"],
  input15: ["input15"],
  dateofBirthField3: ["dateofBirthField3", "input16"],
  input16: ["input16"],
  postalCodeField3: ["postalCodeField3", "input17"],
  input17: ["input17"],
  phone2Field3: ["phone2Field3", "input18"],
  input18: ["input18"],
  step1Buttons3: ["step1Buttons3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  crossListingPage: "div";
  form: typeof FormWrapper;
  step1Host: "div";
  nameField: typeof FormItemWrapper;
  input: typeof AntdInput;
  lastNameField: typeof FormItemWrapper;
  input2: typeof AntdInput;
  nationalCodeField: typeof FormItemWrapper;
  input3: typeof AntdInput;
  dateofBirthField: typeof FormItemWrapper;
  input4: typeof AntdInput;
  postalCodeField: typeof FormItemWrapper;
  input5: typeof AntdInput;
  phone2Field: typeof FormItemWrapper;
  input6: typeof AntdInput;
  step1Buttons: "div";
  step2Documentation: "div";
  nameField2: typeof FormItemWrapper;
  input7: typeof AntdInput;
  lastNameField2: typeof FormItemWrapper;
  input8: typeof AntdInput;
  nationalCodeField2: typeof FormItemWrapper;
  input9: typeof AntdInput;
  dateofBirthField2: typeof FormItemWrapper;
  input10: typeof AntdInput;
  postalCodeField2: typeof FormItemWrapper;
  input11: typeof AntdInput;
  step1Buttons2: "div";
  step3PropertyInfo: "div";
  nameField3: typeof FormItemWrapper;
  input13: typeof AntdInput;
  lastNameField3: typeof FormItemWrapper;
  input14: typeof AntdInput;
  nationalCodeField3: typeof FormItemWrapper;
  input15: typeof AntdInput;
  dateofBirthField3: typeof FormItemWrapper;
  input16: typeof AntdInput;
  postalCodeField3: typeof FormItemWrapper;
  input17: typeof AntdInput;
  phone2Field3: typeof FormItemWrapper;
  input18: typeof AntdInput;
  step1Buttons3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCrossListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCrossListing__VariantsArgs;
    args?: PlasmicCrossListing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCrossListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCrossListing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCrossListing__ArgProps,
          internalVariantPropNames: PlasmicCrossListing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCrossListing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "crossListingPage") {
    func.displayName = "PlasmicCrossListing";
  } else {
    func.displayName = `PlasmicCrossListing.${nodeName}`;
  }
  return func;
}

export const PlasmicCrossListing = Object.assign(
  // Top-level PlasmicCrossListing renders the root element
  makeNodeComponent("crossListingPage"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    step1Host: makeNodeComponent("step1Host"),
    nameField: makeNodeComponent("nameField"),
    input: makeNodeComponent("input"),
    lastNameField: makeNodeComponent("lastNameField"),
    input2: makeNodeComponent("input2"),
    nationalCodeField: makeNodeComponent("nationalCodeField"),
    input3: makeNodeComponent("input3"),
    dateofBirthField: makeNodeComponent("dateofBirthField"),
    input4: makeNodeComponent("input4"),
    postalCodeField: makeNodeComponent("postalCodeField"),
    input5: makeNodeComponent("input5"),
    phone2Field: makeNodeComponent("phone2Field"),
    input6: makeNodeComponent("input6"),
    step1Buttons: makeNodeComponent("step1Buttons"),
    step2Documentation: makeNodeComponent("step2Documentation"),
    nameField2: makeNodeComponent("nameField2"),
    input7: makeNodeComponent("input7"),
    lastNameField2: makeNodeComponent("lastNameField2"),
    input8: makeNodeComponent("input8"),
    nationalCodeField2: makeNodeComponent("nationalCodeField2"),
    input9: makeNodeComponent("input9"),
    dateofBirthField2: makeNodeComponent("dateofBirthField2"),
    input10: makeNodeComponent("input10"),
    postalCodeField2: makeNodeComponent("postalCodeField2"),
    input11: makeNodeComponent("input11"),
    step1Buttons2: makeNodeComponent("step1Buttons2"),
    step3PropertyInfo: makeNodeComponent("step3PropertyInfo"),
    nameField3: makeNodeComponent("nameField3"),
    input13: makeNodeComponent("input13"),
    lastNameField3: makeNodeComponent("lastNameField3"),
    input14: makeNodeComponent("input14"),
    nationalCodeField3: makeNodeComponent("nationalCodeField3"),
    input15: makeNodeComponent("input15"),
    dateofBirthField3: makeNodeComponent("dateofBirthField3"),
    input16: makeNodeComponent("input16"),
    postalCodeField3: makeNodeComponent("postalCodeField3"),
    input17: makeNodeComponent("input17"),
    phone2Field3: makeNodeComponent("phone2Field3"),
    input18: makeNodeComponent("input18"),
    step1Buttons3: makeNodeComponent("step1Buttons3"),

    // Metadata about props expected for PlasmicCrossListing
    internalVariantProps: PlasmicCrossListing__VariantProps,
    internalArgProps: PlasmicCrossListing__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCrossListing;
/* prettier-ignore-end */
