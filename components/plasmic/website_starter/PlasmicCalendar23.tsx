/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: 9y5OemMhUNlV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: MR9MOBuvKPN3/codeComponent
import FragmentLongPress from "../../FragmentLongPress"; // plasmic-import: F6FdGjFt2-9F/component
import DayCell2 from "../../DayCell2"; // plasmic-import: KYzeJuIix3i-/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import TextInput from "../../TextInput"; // plasmic-import: 7KjdVT2JykAk/component
import { Input } from "@/fragment/components/input"; // plasmic-import: fpBkcjHl6n0Y/codeComponent
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Textarea } from "@/fragment/components/textarea"; // plasmic-import: kolEMmvCWkE1/codeComponent
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicCalendar23.module.css"; // plasmic-import: 9y5OemMhUNlV/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: xpwiGbFxHMB2/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: TftNRT31euw0/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: PIv_Q4vxdPrZ/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: JGzy20bJEzcD/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: zCddQXMUCxH0/icon
import Icon83Icon from "./icons/PlasmicIcon__Icon83"; // plasmic-import: gfE8ZaasAWNB/icon

createPlasmicElementProxy;

export type PlasmicCalendar23__VariantMembers = {};
export type PlasmicCalendar23__VariantsArgs = {};
type VariantPropType = keyof PlasmicCalendar23__VariantsArgs;
export const PlasmicCalendar23__VariantProps = new Array<VariantPropType>();

export type PlasmicCalendar23__ArgsType = {
  propertyId?: number;
  daystatuses?: any;
  calendarType?: string;
  isFirstVisit?: boolean;
  reservationsMode?: boolean;
};
type ArgPropType = keyof PlasmicCalendar23__ArgsType;
export const PlasmicCalendar23__ArgProps = new Array<ArgPropType>(
  "propertyId",
  "daystatuses",
  "calendarType",
  "isFirstVisit",
  "reservationsMode"
);

export type PlasmicCalendar23__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  guide1?: Flex__<"div">;
  fragmentDatePicker?: Flex__<typeof DatePicker>;
  fragmentLongPress?: Flex__<typeof FragmentLongPress>;
  dayCell2?: Flex__<typeof DayCell2>;
  modalDiscount?: Flex__<typeof AntdModal>;
  main?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  modal?: Flex__<typeof AntdModal>;
  ثبتتغییرات?: Flex__<"div">;
  پر?: Flex__<"section">;
  خالیقیمتتخفیفParent?: Flex__<"section">;
  خالی?: Flex__<"section">;
  قیمت?: Flex__<"section">;
  تخفیف?: Flex__<"section">;
  modalChangePrice?: Flex__<typeof AntdModal>;
  main2?: Flex__<"div">;
  input?: Flex__<typeof Input>;
  textInput?: Flex__<typeof TextInput>;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  fetchModal?: Flex__<typeof AntdModal>;
  getJabamaSmartPriceStatus?: Flex__<typeof ApiRequest>;
  userPlatform?: Flex__<typeof ApiRequest>;
  loading2?: Flex__<typeof PlasmicImg__>;
  ok?: Flex__<typeof PlasmicImg__>;
  ok3?: Flex__<typeof PlasmicImg__>;
  fail?: Flex__<typeof PlasmicImg__>;
  loading?: Flex__<typeof PlasmicImg__>;
  ok2?: Flex__<typeof PlasmicImg__>;
  block?: Flex__<typeof AntdModal>;
  reserve?: Flex__<"div">;
  blockParent?: Flex__<"div">;
  block2?: Flex__<"div">;
  noteModal?: Flex__<typeof AntdModal>;
  writeNoteModal?: Flex__<typeof AntdModal>;
  textarea?: Flex__<typeof Textarea>;
  updateNoteModal?: Flex__<typeof AntdModal>;
  textarea2?: Flex__<typeof Textarea>;
  checkForChange?: Flex__<typeof AntdModal>;
  buttonYes?: Flex__<"div">;
  newDiscountModal?: Flex__<typeof AntdModal>;
  textInput4?: Flex__<typeof TextInput>;
  guide?: Flex__<"div">;
  block3?: Flex__<"div">;
  color?: Flex__<"div">;
  text?: Flex__<"div">;
  smartBookings?: Flex__<"div">;
  color2?: Flex__<"div">;
  text2?: Flex__<"div">;
  discount?: Flex__<"div">;
  color3?: Flex__<"div">;
  text3?: Flex__<"div">;
  note?: Flex__<"div">;
  text4?: Flex__<"div">;
  submitChange?: Flex__<"div">;
  visitBookings?: Flex__<typeof Button>;
  addingGuestInfo?: Flex__<typeof AntdModal>;
  form?: Flex__<"div">;
  p4?: Flex__<"div">;
  referrer?: Flex__<"div">;
  guestReferrer?: Flex__<typeof Select>;
  count2?: Flex__<"div">;
  guestCount?: Flex__<typeof AntdInputNumber>;
  p3?: Flex__<"div">;
  input2?: Flex__<typeof Input>;
  amount?: Flex__<typeof AntdInputNumber>;
  p1?: Flex__<"div">;
  guestName?: Flex__<typeof TextInput>;
  p2?: Flex__<"div">;
  phoneNumber?: Flex__<typeof TextInput>;
  p5?: Flex__<"div">;
  reserveData?: Flex__<typeof ApiRequest>;
};

export interface DefaultCalendar23Props {
  propertyId?: number;
  daystatuses?: any;
  calendarType?: string;
  isFirstVisit?: boolean;
  reservationsMode?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCalendar23__RenderFunc(props: {
  variants: PlasmicCalendar23__VariantsArgs;
  args: PlasmicCalendar23__ArgsType;
  overrides: PlasmicCalendar23__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isFirstVisit: false,
          reservationsMode: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentDatePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fragmentDatePicker.month",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.year",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
              ? false
              : false
      },
      {
        path: "modalChangePrice.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
              ? false
              : false
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalDiscount.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "tablet")
              ? false
              : false
      },
      {
        path: "count",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "block.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : false
      },
      {
        path: "fetchModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : hasVariant(globalVariants, "screen", "tablet")
                ? false
                : false
      },
      {
        path: "variable3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "userPlatform.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPlatform"
      },
      {
        path: "userPlatform.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPlatform"
      },
      {
        path: "userPlatform.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPlatform"
      },
      {
        path: "platformRequestStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "requestdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dayStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const websiteNames = {
                  host: "رزرو",
                  jajiga: "جاجیگا",
                  jabama: "جاباما",
                  shab: "شب",
                  homsa: "هومسا",
                  mihmansho: "مهمانشو",
                  otaghak: "اتاقک",
                  mizboon: "میزبون"
                };
                const calendar = $state.apiRequest.data.calendar.map(item => {
                  if (
                    item.status === "reserved" &&
                    websiteNames[item.website]
                  ) {
                    return {
                      ...item,
                      website: websiteNames[item.website]
                    };
                  }
                  return item;
                });
                return calendar;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "noteModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : false
      },
      {
        path: "dateProp",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "writeNoteModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "targetNoteItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "updateNoteModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile")
            ? (() => {
                try {
                  return (() => {
                    const notesAndTimestamps =
                      $state.apiRequest.data[2].notesAndTimestamps;
                    const selectedTimestamp = $state.dateProp.unix;
                    function timestampToDateString(timestamp) {
                      if (!timestamp || isNaN(parseInt(timestamp, 10))) {
                        return null;
                      }
                      const date = new Date(parseInt(timestamp, 10) * 1000);
                      if (isNaN(date.getTime())) {
                        return null;
                      }
                      return date.toISOString().split("T")[0];
                    }
                    const selectedDate =
                      timestampToDateString(selectedTimestamp);
                    if (!selectedDate) {
                      return [];
                    }
                    const filteredNotes = notesAndTimestamps.filter(
                      noteItem => {
                        const noteDate = timestampToDateString(
                          noteItem.timestamps
                        );
                        return noteDate === selectedDate;
                      }
                    );
                    return filteredNotes[0].noteText;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (() => {
                    const notesAndTimestamps =
                      $state.apiRequest.data[2].notesAndTimestamps;
                    const selectedTimestamp = $state.dateProp.unix;
                    function timestampToDateString(timestamp) {
                      if (!timestamp || isNaN(parseInt(timestamp, 10))) {
                        return null;
                      }
                      const date = new Date(parseInt(timestamp, 10) * 1000);
                      if (isNaN(date.getTime())) {
                        return null;
                      }
                      return date.toISOString().split("T")[0];
                    }
                    const selectedDate =
                      timestampToDateString(selectedTimestamp);
                    if (!selectedDate) {
                      console.error(
                        "Selected timestamp is invalid:",
                        selectedTimestamp
                      );
                      return [];
                    }
                    const filteredNotes = notesAndTimestamps.filter(
                      noteItem => {
                        const noteDate = timestampToDateString(
                          noteItem.timestamps
                        );
                        return noteDate === selectedDate;
                      }
                    );
                    return filteredNotes[0].noteText;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "year",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let initialMonth = new Date()
                  .toLocaleDateString("fa")
                  .split("/")[0];
                return initialMonth;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkForChange.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobile") ? false : false
      },
      {
        path: "addingGuestInfo.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "smallMobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : hasVariant(globalVariants, "screen", "tablet")
                ? false
                : false
      },
      {
        path: "guestName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "phoneNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "guestReferrer.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "guestCount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "amount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedDay",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "newDiscountModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "selectedItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "updateStyle",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tourSteps",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "lastSteps",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "watingForResponse",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "phoneError",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showMobileError",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "manualReserveBookingId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "getJabamaSmartPriceStatus.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getJabamaSmartPriceStatus"
      },
      {
        path: "getJabamaSmartPriceStatus.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getJabamaSmartPriceStatus"
      },
      {
        path: "getJabamaSmartPriceStatus.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getJabamaSmartPriceStatus"
      },
      {
        path: "reserveData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "reserveData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      },
      {
        path: "reserveData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "reserveData"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        children={null}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );

          (async error => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      (() => {
                        try {
                          return `https://gateway.rentamon.com/webhook/get_note?prop_id=${$props.propertyId}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["updateStateVariable2"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: (() => {
                      $state.apiRequest.data[0] =
                        $steps.invokeGlobalAction.data[0];
                      $state.apiRequest.data[2] =
                        $steps.invokeGlobalAction.data[1];
                      if (
                        Array.isArray(
                          $state.apiRequest?.data?.[0]?.timestampsArray
                        ) &&
                        Array.isArray($state.apiRequest?.data?.[1]?.calendar)
                      ) {
                        const notedDates =
                          $state.apiRequest.data[0].timestampsArray;
                        const calendar = $state.apiRequest.data[1].calendar;
                        calendar.forEach(day => {
                          day.isnoted = notedDates.includes(day.date);
                        });
                        return ($state.apiRequest.data[1].calendar = calendar);
                      }
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable2"] != null &&
              typeof $steps["updateStateVariable2"] === "object" &&
              typeof $steps["updateStateVariable2"].then === "function"
            ) {
              $steps["updateStateVariable2"] =
                await $steps["updateStateVariable2"];
            }
          }).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={
          hasVariant(globalVariants, "screen", "smallMobile")
            ? (() => {
                try {
                  return (() => {
                    function toEnglishDigits(str) {
                      return str.replace(/[۰-۹]/g, function (char) {
                        return String.fromCharCode(char.charCodeAt(0) - 1728);
                      });
                    }
                    const secondSpan = document.querySelector(
                      ".rmdp-header-values span:nth-child(3)"
                    );
                    if (secondSpan) {
                      $state.year = secondSpan.textContent;
                    }
                    let initialMonth = new Date()
                      .toLocaleDateString("fa")
                      .split("/");
                    let monStr =
                      $state.fragmentDatePicker?.month ?? initialMonth[1];
                    if (/[\u06F0-\u06F9]/.test(monStr)) {
                      monStr = toEnglishDigits(monStr);
                    }
                    let mon = parseInt(monStr, 10);
                    let daysInMonth = mon >= 1 && mon <= 6 ? 31 : 30;
                    return `https://api-v2.rentamon.com/api/getcalendar?v=2&start_date=${$state.year}-${mon}-01&end_date=${$state.year}-${mon}-${daysInMonth}&property_id=${$props.propertyId}`;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return (() => {
                      function toEnglishDigits(str) {
                        return str.replace(/[۰-۹]/g, function (char) {
                          return String.fromCharCode(char.charCodeAt(0) - 1728);
                        });
                      }
                      const secondSpan = document.querySelector(
                        ".rmdp-header-values span:nth-child(3)"
                      );
                      if (secondSpan) {
                        $state.year = secondSpan.textContent;
                      }
                      let initialMonth = new Date()
                        .toLocaleDateString("fa")
                        .split("/");
                      let monStr =
                        $state.fragmentDatePicker?.month ?? initialMonth[1];
                      if (/[\u06F0-\u06F9]/.test(monStr)) {
                        monStr = toEnglishDigits(monStr);
                      }
                      let mon = parseInt(monStr, 10);
                      let daysInMonth = mon >= 1 && mon <= 6 ? 31 : 30;
                      return `https://api-v2.rentamon.com/api/getcalendar?v=2&start_date=${$state.year}-${mon}-01&end_date=${$state.year}-${mon}-${daysInMonth}&property_id=${$props.propertyId}`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : hasVariant(globalVariants, "screen", "tablet")
                ? (() => {
                    try {
                      return (() => {
                        function toEnglishDigits(str) {
                          return str.replace(/[۰-۹]/g, function (char) {
                            return String.fromCharCode(
                              char.charCodeAt(0) - 1728
                            );
                          });
                        }
                        const secondSpan = document.querySelector(
                          ".rmdp-header-values span:nth-child(3)"
                        );
                        if (secondSpan) {
                          $state.year = secondSpan.textContent;
                        }
                        let initialMonth = new Date()
                          .toLocaleDateString("fa")
                          .split("/");
                        let monStr =
                          $state.fragmentDatePicker?.month ?? initialMonth[1];
                        if (/[\u06F0-\u06F9]/.test(monStr)) {
                          monStr = toEnglishDigits(monStr);
                        }
                        let mon = parseInt(monStr, 10);
                        let daysInMonth = mon >= 1 && mon <= 6 ? 31 : 30;
                        return `https://api-v2.rentamon.com/api/getcalendar?v=2&start_date=${$state.year}-${mon}-01&end_date=${$state.year}-${mon}-${daysInMonth}&property_id=${$props.propertyId}`;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return (() => {
                        function toEnglishDigits(str) {
                          return str.replace(/[۰-۹]/g, function (char) {
                            return String.fromCharCode(
                              char.charCodeAt(0) - 1728
                            );
                          });
                        }
                        const secondSpan = document.querySelector(
                          ".rmdp-header-values span:nth-child(3)"
                        );
                        if (secondSpan) {
                          $state.year = secondSpan.textContent;
                        }
                        let initialMonth = new Date()
                          .toLocaleDateString("fa")
                          .split("/");
                        let monStr =
                          $state.fragmentDatePicker?.month ?? initialMonth[1];
                        if (/[\u06F0-\u06F9]/.test(monStr)) {
                          monStr = toEnglishDigits(monStr);
                        }
                        let mon = parseInt(monStr, 10);
                        let daysInMonth = mon >= 1 && mon <= 6 ? 31 : 30;
                        return `https://api-v2.rentamon.com/api/getcalendar?v=2&start_date=${$state.year}-${mon}-01&end_date=${$state.year}-${mon}-${daysInMonth}&property_id=${$props.propertyId}`;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
        }
      />

      <SideEffect
        className={classNames("__wab_instance", sty.sideEffect__dSgdz)}
        deps={(() => {
          try {
            return [$props.propertyId];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["updateFragmentDatePickerValue"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["fragmentDatePicker", "value"]
                  },
                  operation: 0,
                  value: ($state.fragmentDatePicker.values = [])
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateFragmentDatePickerValue"] != null &&
            typeof $steps["updateFragmentDatePickerValue"] === "object" &&
            typeof $steps["updateFragmentDatePickerValue"].then === "function"
          ) {
            $steps["updateFragmentDatePickerValue"] =
              await $steps["updateFragmentDatePickerValue"];
          }
        }}
      />

      <SideEffect
        className={classNames("__wab_instance", sty.sideEffect__q7Mga)}
        deps={(() => {
          try {
            return [$state.updateStyle];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["updateSelectedDay"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["selectedDay"]
                  },
                  operation: 0,
                  value: ($state.selectedDay = $state.fragmentDatePicker.values)
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectedDay"] != null &&
            typeof $steps["updateSelectedDay"] === "object" &&
            typeof $steps["updateSelectedDay"].then === "function"
          ) {
            $steps["updateSelectedDay"] = await $steps["updateSelectedDay"];
          }

          $steps["updateAddingGuestInfoOpen"] = (() => {
            if ($props.calendarType == "pro") {
              return false;
            }
            if ($state.requestdata.request_for == "reserve") {
              return true;
            } else {
              return false;
            }
          })()
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["addingGuestInfo", "open"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateAddingGuestInfoOpen"] != null &&
            typeof $steps["updateAddingGuestInfoOpen"] === "object" &&
            typeof $steps["updateAddingGuestInfoOpen"].then === "function"
          ) {
            $steps["updateAddingGuestInfoOpen"] =
              await $steps["updateAddingGuestInfoOpen"];
          }

          $steps["updateStateVariable"] =
            $props.calendarType == "lite"
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: (() => {
                      function convertToEnglishNumber(persianStr = "") {
                        let str = persianStr.replace(/٬/g, "");
                        const faDigits = /[۰-۹]/g;
                        const faMap = "۰۱۲۳۴۵۶۷۸۹";
                        str = str.replace(faDigits, char =>
                          faMap.indexOf(char)
                        );
                        return Number(str);
                      }
                      function formatPriceToPersian(num = 0) {
                        const formatter = new Intl.NumberFormat("fa-IR");
                        return formatter.format(num);
                      }
                      $state.fetchModal.open = false;
                      $state.block.open = false;
                      $state.modal.open = false;
                      $state.modalChangePrice.open = false;
                      const changedDaysTimestamps = (
                        $state.requestdata.days || []
                      ).flat();
                      const changedDaysDates = changedDaysTimestamps.map(
                        timestamp => {
                          const date = new Date(timestamp * 1000);
                          const year = date.getFullYear();
                          const month = ("0" + (date.getMonth() + 1)).slice(-2);
                          const day = ("0" + date.getDate()).slice(-2);
                          return `${year}-${month}-${day}`;
                        }
                      );
                      const allowedWebsites = [
                        "رزرو",
                        "دیوار",
                        "واسطه",
                        "حضوری",
                        "همکار",
                        "قبلی",
                        "اینستا",
                        "واسطه یا همکار",
                        "پیام‌رسان",
                        "سایر"
                      ];

                      const updatedCalendar =
                        $state.apiRequest.data[1].calendar.map(day => {
                          if (!changedDaysDates.includes(day.date)) {
                            return day;
                          }
                          if (
                            day.status === "reserved" &&
                            day.website !== null &&
                            !allowedWebsites.includes(day.website)
                          ) {
                            return day;
                          }
                          const updates = {};
                          if ($state.requestdata.request_for === "block") {
                            updates.status = "blocked";
                          } else if (
                            $state.requestdata.request_for === "reserve"
                          ) {
                            updates.status = "reserved";
                            updates.website = "رزرو";
                            updates.book_at = new Date().toISOString();
                          } else if (
                            $state.requestdata.request_for === "unblock" ||
                            !$state.requestdata.request_for
                          ) {
                            updates.status = "unblocked";
                            updates.website = null;
                          }
                          if ($state.requestdata.price !== undefined) {
                            let numericPrice = Number($state.requestdata.price)
                              ? Number($state.requestdata.price)
                              : convertToEnglishNumber(
                                  $state.requestdata.price
                                );
                            let appliedDiscount = 0;
                            if ($state.requestdata.discount !== undefined) {
                              appliedDiscount = Number(
                                $state.requestdata.discount
                              );
                            } else if (day.discount_percentage) {
                              appliedDiscount = Number(day.discount_percentage);
                            }
                            updates.discount_percentage = appliedDiscount;
                            if (appliedDiscount > 0) {
                              const discountedPrice = Math.round(
                                numericPrice * (1 - appliedDiscount / 100)
                              );
                              const finalPrice = Math.round(
                                discountedPrice / 1000
                              );
                              updates.price = formatPriceToPersian(finalPrice);
                            } else {
                              const finalPrice = Math.round(
                                numericPrice / 1000
                              );
                              updates.price = formatPriceToPersian(finalPrice);
                              updates.status = day.status;
                            }
                          } else if (
                            $state.requestdata.discount !== undefined
                          ) {
                            const newDiscount = Number(
                              $state.requestdata.discount
                            );
                            const currentDayPrice = day.price
                              ? convertToEnglishNumber(day.price.toString())
                              : 0;
                            const oldDiscount =
                              Number(day.discount_percentage) || 0;
                            let basePrice = currentDayPrice;
                            if (oldDiscount > 0) {
                              const factor = 1 - oldDiscount / 100;
                              if (factor !== 0) {
                                basePrice = Math.round(
                                  currentDayPrice / factor
                                );
                              }
                            }
                            if (newDiscount === 0) {
                              updates.discount_percentage = 0;
                              updates.status = day.status;
                              updates.price = formatPriceToPersian(
                                Math.round(basePrice)
                              );
                            } else {
                              updates.discount_percentage = newDiscount;
                              const discountedPrice = Math.round(
                                basePrice * (1 - newDiscount / 100)
                              );
                              updates.price =
                                formatPriceToPersian(discountedPrice);
                              updates.status = day.status;
                            }
                          }
                          return {
                            ...day,
                            ...updates
                          };
                        });
                      $state.apiRequest.data[1].calendar = updatedCalendar;
                      $state.platformRequestStatus = [];
                      $state.requestdata = [];
                      $state.fragmentDatePicker.values = [];
                      $state.textInput.value = 0;
                      $state.textInput2.value = 0;
                      $state.textInput4.value = 0;
                      return ($state.selectedItem = []);
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateStateVariable"] != null &&
            typeof $steps["updateStateVariable"] === "object" &&
            typeof $steps["updateStateVariable"].then === "function"
          ) {
            $steps["updateStateVariable"] = await $steps["updateStateVariable"];
          }

          $steps["updateStateVariable2"] =
            $props.calendarType == "pro"
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: (() => {
                      function convertToEnglishNumber(persianStr = "") {
                        let str = persianStr.replace(/٬/g, "");
                        const faDigits = /[۰-۹]/g;
                        const faMap = "۰۱۲۳۴۵۶۷۸۹";
                        str = str.replace(faDigits, char =>
                          faMap.indexOf(char)
                        );
                        return Number(str);
                      }
                      function formatPriceToPersian(num = 0) {
                        const formatter = new Intl.NumberFormat("fa-IR");
                        return formatter.format(num);
                      }
                      $state.fetchModal.open = false;
                      $state.block.open = false;
                      $state.modal.open = false;
                      $state.modalChangePrice.open = false;
                      const changedDaysTimestamps = (
                        $state.requestdata.days || []
                      ).flat();
                      const changedDaysDates = changedDaysTimestamps.map(
                        timestamp => {
                          const date = new Date(timestamp * 1000);
                          const year = date.getFullYear();
                          const month = ("0" + (date.getMonth() + 1)).slice(-2);
                          const day = ("0" + date.getDate()).slice(-2);
                          return `${year}-${month}-${day}`;
                        }
                      );
                      const allowedWebsites = [
                        "رزرو",
                        "دیوار",
                        "واسطه",
                        "حضوری",
                        "همکار",
                        "قبلی",
                        "اینستا",
                        "واسطه یا همکار",
                        "پیام‌رسان",
                        "سایر"
                      ];

                      const updatedCalendar =
                        $state.apiRequest.data[1].calendar.map(day => {
                          if (!changedDaysDates.includes(day.date)) {
                            return day;
                          }
                          if (
                            day.status === "reserved" &&
                            day.website !== null &&
                            !allowedWebsites.includes(day.website)
                          ) {
                            return day;
                          }
                          const updates = {};
                          if ($state.requestdata.request_for === "block") {
                            updates.status = "blocked";
                          } else if (
                            $state.requestdata.request_for === "reserve"
                          ) {
                            updates.status = "reserved";
                            updates.website = "رزرو";
                            updates.booking_id = $state.manualReserveBookingId;
                          } else if (
                            $state.requestdata.request_for === "unblock" ||
                            !$state.requestdata.request_for
                          ) {
                            updates.status = "unblocked";
                            updates.website = null;
                            updates.booking_id = null;
                          }
                          if ($state.requestdata.price !== undefined) {
                            let numericPrice = Number($state.requestdata.price)
                              ? Number($state.requestdata.price)
                              : convertToEnglishNumber(
                                  $state.requestdata.price
                                );
                            let appliedDiscount = 0;
                            if ($state.requestdata.discount !== undefined) {
                              appliedDiscount = Number(
                                $state.requestdata.discount
                              );
                            } else if (day.discount_percentage) {
                              appliedDiscount = Number(day.discount_percentage);
                            }
                            updates.discount_percentage = appliedDiscount;
                            if (appliedDiscount > 0) {
                              const discountedPrice = Math.round(
                                numericPrice * (1 - appliedDiscount / 100)
                              );
                              const finalPrice = Math.round(
                                discountedPrice / 1000
                              );
                              updates.price = formatPriceToPersian(finalPrice);
                            } else {
                              const finalPrice = Math.round(
                                numericPrice / 1000
                              );
                              updates.price = formatPriceToPersian(finalPrice);
                              updates.status = day.status;
                            }
                          } else if (
                            $state.requestdata.discount !== undefined
                          ) {
                            const newDiscount = Number(
                              $state.requestdata.discount
                            );
                            const currentDayPrice = day.price
                              ? convertToEnglishNumber(day.price.toString())
                              : 0;
                            const oldDiscount =
                              Number(day.discount_percentage) || 0;
                            let basePrice = currentDayPrice;
                            if (oldDiscount > 0) {
                              const factor = 1 - oldDiscount / 100;
                              if (factor !== 0) {
                                basePrice = Math.round(
                                  currentDayPrice / factor
                                );
                              }
                            }
                            if (newDiscount === 0) {
                              updates.discount_percentage = 0;
                              updates.status = day.status;
                              updates.price = formatPriceToPersian(
                                Math.round(basePrice)
                              );
                            } else {
                              updates.discount_percentage = newDiscount;
                              const discountedPrice = Math.round(
                                basePrice * (1 - newDiscount / 100)
                              );
                              updates.price =
                                formatPriceToPersian(discountedPrice);
                              updates.status = day.status;
                            }
                          }
                          return {
                            ...day,
                            ...updates
                          };
                        });
                      $state.apiRequest.data[1].calendar = updatedCalendar;
                      console.log(
                        "Calendar updated with changes:",
                        updatedCalendar
                      );
                      $state.platformRequestStatus = [];
                      $state.requestdata = [];
                      $state.fragmentDatePicker.values = [];
                      $state.textInput.value = 0;
                      $state.textInput2.value = 0;
                      $state.textInput4.value = 0;
                      return ($state.selectedItem = []);
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateStateVariable2"] != null &&
            typeof $steps["updateStateVariable2"] === "object" &&
            typeof $steps["updateStateVariable2"].then === "function"
          ) {
            $steps["updateStateVariable2"] =
              await $steps["updateStateVariable2"];
          }

          $steps["invokeGlobalAction"] =
            $props.calendarType == "lite"
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "\u062b\u0628\u062a \u0634\u062f",
                      "top-center"
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }
        }}
      />

      <div
        className={classNames(
          projectcss.all,
          sty.freeBox__r3Nm0,
          (() => {
            try {
              return $props.isFirstVisit == true && $state.tourSteps == 0
                ? "attention-grabber"
                : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
        )}
      >
        {(() => {
          try {
            return (() => {
              if ($props.isFirstVisit == true) {
                if (
                  $state.tourSteps == 0 ||
                  $state.tourSteps == 1 ||
                  $state.tourSteps == 5
                ) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"guide1"}
            data-plasmic-override={overrides.guide1}
            className={classNames(projectcss.all, sty.guide1, "fadein2")}
          >
            {(() => {
              try {
                return $state.tourSteps == 1 ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qCqYq,
                  "fadein2"
                )}
              >
                {
                  "\u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u0628\u0632\u0646"
                }
              </div>
            ) : null}
            {(() => {
              try {
                return (() => {
                  console.log($state.tourSteps == 5 ? true : false);
                  return $state.tourSteps == 5 ? true : false;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__icqRi
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u062d\u0627\u0644\u0627 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0627\u06cc\u0646 \u0631\u0648\u0632  \u0631\u0648 \u062a\u0648\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0628\u0628\u06cc\u0646\u06cc \u06a9\u0647 \u0633\u0628\u0632 \u0631\u0646\u06af \u0634\u062f\u0647\r\n\r\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0631\u0648\u06cc \u06af\u0632\u06cc\u0646\u0647 \u00ab\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646\u00bb \u0628\u0632\u0646"
                      }
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u062d\u0627\u0644\u0627 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0627\u06cc\u0646 \u0631\u0648\u0632  \u0631\u0648 \u062a\u0648\u06cc \u062a\u0642\u0648\u06cc\u0645 \u0628\u0628\u06cc\u0646\u06cc \u06a9\u0647 \u0633\u0628\u0632 \u0631\u0646\u06af \u0634\u062f\u0647"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 600 }}
                    >
                      {"\r"}
                    </span>
                    <React.Fragment>
                      {
                        "\n\u0631\u0648\u06cc \u0645\u0646\u0648 \u0628\u0627\u0644\u0627 \u0628\u0632\u0646 \u0648 \u0631\u0648\u06cc \u06af\u0632\u06cc\u0646\u0647 \u00ab\u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646\u00bb \u0628\u0632\u0646"
                      }
                    </React.Fragment>
                  </React.Fragment>
                )}
              </div>
            ) : null}
            {(() => {
              try {
                return $state.tourSteps == 0 ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wb4Rh
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u0627\u06cc\u0646\u062c\u0627 \u062a\u0642\u0648\u06cc\u0645 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u0647 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u0647\u0645\u0631\u0627\u0647\u062a\u0647\n\u0628\u06cc\u0627 \u062a\u0633\u062a\u0634 \u06a9\u0646\u06cc\u0645\n\n"
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 600 }}
                  >
                    {
                      "\u0627\u0648\u0644 \u06cc\u06a9 \u0631\u0648\u0632 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                    }
                  </span>
                </React.Fragment>
              </div>
            ) : null}
          </div>
        ) : null}
        <DatePicker
          data-plasmic-name={"fragmentDatePicker"}
          data-plasmic-override={overrides.fragmentDatePicker}
          className={classNames("__wab_instance", sty.fragmentDatePicker)}
          customDayCell={
            hasVariant(globalVariants, "screen", "mobile") ? true : true
          }
          dayCell={(dateProps: any) => (
            <FragmentLongPress
              data-plasmic-name={"fragmentLongPress"}
              data-plasmic-override={overrides.fragmentLongPress}
              className={classNames("__wab_instance", sty.fragmentLongPress)}
              duration={800}
              onLongPress={async () => {
                const $steps = {};

                $steps["updateEditModalText"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["targetNoteItem"]
                        },
                        operation: 0,
                        value: ($state.targetNoteItem = {})
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditModalText"] != null &&
                  typeof $steps["updateEditModalText"] === "object" &&
                  typeof $steps["updateEditModalText"].then === "function"
                ) {
                  $steps["updateEditModalText"] =
                    await $steps["updateEditModalText"];
                }

                $steps["openReadModal"] =
                  $state.apiRequest.data[1].calendar[dateProps.date.day - 1]
                    .isnoted == true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["noteModal", "open"]
                          },
                          operation: 0,
                          value: (() => {
                            $state.dateProp = dateProps;
                            return true;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["openReadModal"] != null &&
                  typeof $steps["openReadModal"] === "object" &&
                  typeof $steps["openReadModal"].then === "function"
                ) {
                  $steps["openReadModal"] = await $steps["openReadModal"];
                }

                $steps["openWriteModal"] =
                  $state.apiRequest.data[1].calendar[dateProps.date.day - 1]
                    .isnoted == false
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["writeNoteModal", "open"]
                          },
                          operation: 0,
                          value: (() => {
                            $state.dateProp = dateProps;
                            return true;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["openWriteModal"] != null &&
                  typeof $steps["openWriteModal"] === "object" &&
                  typeof $steps["openWriteModal"].then === "function"
                ) {
                  $steps["openWriteModal"] = await $steps["openWriteModal"];
                }
              }}
              onStart={async () => {
                const $steps = {};
              }}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__wW1T)}
                id={``}
              />

              <DayCell2
                data-plasmic-name={"dayCell2"}
                data-plasmic-override={overrides.dayCell2}
                className={classNames("__wab_instance", sty.dayCell2)}
                dayNumber={(() => {
                  try {
                    return (() => {
                      function convertEnglishNumbersToPersian(str) {
                        const englishNumbers = [
                          "0",
                          "1",
                          "2",
                          "3",
                          "4",
                          "5",
                          "6",
                          "7",
                          "8",
                          "9"
                        ];

                        const persianNumbers = [
                          "۰",
                          "۱",
                          "۲",
                          "۳",
                          "۴",
                          "۵",
                          "۶",
                          "۷",
                          "۸",
                          "۹"
                        ];

                        return str
                          .toString()
                          .replace(
                            /[0-9]/g,
                            char =>
                              persianNumbers[englishNumbers.indexOf(char)] ||
                              char
                          );
                      }
                      const englishNumber = dateProps.date.day;
                      const persianNumber =
                        convertEnglishNumbersToPersian(englishNumber);
                      return persianNumber;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                dayStatus={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? (() => {
                        try {
                          return (() => {
                            const currentDate = new Date();
                            const yesterdayDate = new Date(
                              currentDate.getTime() - 24 * 60 * 60 * 1000
                            );
                            const yesterdayTimestamp = Math.floor(
                              yesterdayDate.getTime() / 1000
                            );
                            const minTimestamp = yesterdayTimestamp;
                            const maxTimestamp = 1768988921;
                            function getDayClass(dateProps, calendarData) {
                              const dayIndex = dateProps.date.day - 1;
                              const calendarItem = calendarData[dayIndex] || {};
                              const currentBookingId = calendarItem.booking_id;
                              const prevItem = calendarData[dayIndex - 1] || {};
                              const nextItem = calendarData[dayIndex + 1] || {};
                              const prevBookingId = prevItem.booking_id;
                              const nextBookingId = nextItem.booking_id;
                              if (
                                dateProps.unix < minTimestamp ||
                                dateProps.unix > maxTimestamp
                              ) {
                                if (
                                  calendarItem.status === "reserved" &&
                                  currentBookingId
                                ) {
                                  const isFirstDay =
                                    currentBookingId !== prevBookingId;
                                  const isLastDay =
                                    currentBookingId !== nextBookingId;
                                  if (isFirstDay && isLastDay)
                                    return "passedReservedV2";
                                  if (isFirstDay)
                                    return "passedFirstDayReserveV2";
                                  if (isLastDay)
                                    return "passedLastDayReserveV2";
                                  return "passedMidDayReserveV2";
                                }
                                return "disabledV2";
                              }
                              if (
                                $state.fragmentDatePicker.values.includes(
                                  dateProps.unix
                                )
                              ) {
                                return "selected";
                              }
                              if (calendarItem.status === "reserved") {
                                if (currentBookingId) {
                                  const isFirstDay =
                                    currentBookingId !== prevBookingId;
                                  const isLastDay =
                                    currentBookingId !== nextBookingId;
                                  if (isFirstDay && isLastDay)
                                    return "reservedV2";
                                  if (isFirstDay) return "firstDayReserveV2";
                                  if (isLastDay) return "lastDayReserveV2";
                                  return "midDayReserveV2";
                                }
                                return "reservedV2";
                              }
                              if (calendarItem.status === "blocked") {
                                return "reservedV2";
                              }
                              if (calendarItem.discount_percentage > 0) {
                                return "discount";
                              }
                              return calendarItem.status || "";
                            }
                            return getDayClass(
                              dateProps,
                              $state.apiRequest.data[1].calendar
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (() => {
                            const currentDate = new Date();
                            const yesterdayDate = new Date(
                              currentDate.getTime() - 24 * 60 * 60 * 1000
                            );
                            const yesterdayTimestamp = Math.floor(
                              yesterdayDate.getTime() / 1000
                            );
                            const minTimestamp = yesterdayTimestamp;
                            const maxTimestamp = 1768988921;
                            function getDayClass(dateProps, calendarData) {
                              const dayIndex = dateProps.date.day - 1;
                              const calendarItem = calendarData[dayIndex] || {};
                              const currentBookingId = calendarItem.booking_id;
                              const prevItem = calendarData[dayIndex - 1] || {};
                              const nextItem = calendarData[dayIndex + 1] || {};
                              const prevBookingId = prevItem.booking_id;
                              const nextBookingId = nextItem.booking_id;
                              if (
                                dateProps.unix < minTimestamp ||
                                dateProps.unix > maxTimestamp
                              ) {
                                if (
                                  calendarItem.status === "reserved" &&
                                  currentBookingId
                                ) {
                                  const isFirstDay =
                                    currentBookingId !== prevBookingId;
                                  const isLastDay =
                                    currentBookingId !== nextBookingId;
                                  if (isFirstDay && isLastDay)
                                    return "passedReservedV2";
                                  if (isFirstDay)
                                    return "passedFirstDayReserveV2";
                                  if (isLastDay)
                                    return "passedLastDayReserveV2";
                                  return "passedMidDayReserveV2";
                                }
                                return "disabledV2";
                              }
                              if (
                                $state.fragmentDatePicker.values.includes(
                                  dateProps.unix
                                )
                              ) {
                                return "selected";
                              }
                              if (calendarItem.status === "reserved") {
                                if (currentBookingId) {
                                  const isFirstDay =
                                    currentBookingId !== prevBookingId;
                                  const isLastDay =
                                    currentBookingId !== nextBookingId;
                                  if (isFirstDay && isLastDay)
                                    return "reservedV2";
                                  if (isFirstDay) return "firstDayReserveV2";
                                  if (isLastDay) return "lastDayReserveV2";
                                  return "midDayReserveV2";
                                }
                                return "reservedV2";
                              }
                              if (calendarItem.status === "blocked") {
                                return "reservedV2";
                              }
                              if (calendarItem.discount_percentage > 0) {
                                return "discount";
                              }
                              return calendarItem.status || "";
                            }
                            return getDayClass(
                              dateProps,
                              $state.apiRequest.data[1].calendar
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                }
                holidays={(() => {
                  try {
                    return (() => {
                      return $state.apiRequest.data[1].calendar[
                        dateProps.date.day - 1
                      ].isholiday;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                isSmartBooking={true}
                note={(() => {
                  try {
                    return $state.apiRequest.data[1].calendar[
                      dateProps.date.day - 1
                    ].isnoted;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                platform={(() => {
                  try {
                    return $state.apiRequest.data[1].calendar[
                      dateProps.date.day - 1
                    ].website;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                price={(() => {
                  try {
                    return (() => {
                      if (
                        $state.apiRequest.data[1].calendar[
                          dateProps.date.day - 1
                        ].status == "reserved"
                      ) {
                        return $state.apiRequest.data[1].calendar[
                          dateProps.date.day - 1
                        ].guest_name;
                      }
                      if (
                        $state.apiRequest.data[1].calendar[
                          dateProps.date.day - 1
                        ].status == "blocked"
                      ) {
                        return "غیرفعال";
                      } else {
                        return $state.apiRequest.data[1].calendar[
                          dateProps.date.day - 1
                        ].price;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                selected={(() => {
                  try {
                    return $state.fragmentDatePicker.values.includes(
                      dateProps.unix
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              />
            </FragmentLongPress>
          )}
          locale={"fa"}
          mode={"multiple"}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "value"
            ]).apply(null, eventArgs);
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "values"
            ]).apply(null, eventArgs);

            (async date => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const timestamps = $state.fragmentDatePicker.values;
                          const previousSelectedItems = Array.isArray(
                            $state.selectedItem
                          )
                            ? $state.selectedItem
                            : [];
                          const calendar = $state.apiRequest.data[1].calendar;
                          const targetDates = timestamps.map(ts => {
                            const d = new Date(ts * 1000);
                            return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
                          });
                          const targetDateSet = new Set(targetDates);
                          const currentItems = calendar.filter(item =>
                            targetDateSet.has(item.date)
                          );
                          const prevDates = new Set(
                            previousSelectedItems.map(i => i.date)
                          );
                          const addedItem = currentItems.find(
                            item => !prevDates.has(item.date)
                          );
                          let removedItem = null;
                          let addedItemIndex = -1;
                          if (addedItem) {
                            addedItemIndex = targetDates.indexOf(
                              addedItem.date
                            );
                          }
                          if (
                            currentItems.length < previousSelectedItems.length
                          ) {
                            const currentDateSet = new Set(
                              currentItems.map(i => i.date)
                            );
                            removedItem = previousSelectedItems.find(
                              item => !currentDateSet.has(item.date)
                            );
                          }
                          if (currentItems.length === 0) {
                            $state.selectedItem = [];
                            return;
                          }
                          if (removedItem && removedItem.booking_id) {
                            $state.selectedItem = [];
                            $state.fragmentDatePicker.values = [];
                            return;
                          }
                          if (addedItem && addedItem.booking_id) {
                            const bookingId = addedItem.booking_id;
                            const fullBookingGroup = calendar.filter(
                              day => day.booking_id === bookingId
                            );
                            $state.selectedItem = fullBookingGroup;
                            const referenceTimestamp =
                              timestamps[addedItemIndex] ||
                              timestamps[0] ||
                              Date.now();
                            const referenceDate = new Date(
                              referenceTimestamp * 1000
                            );
                            const hours = referenceDate.getHours();
                            const minutes = referenceDate.getMinutes();
                            const seconds = referenceDate.getSeconds();
                            const finalTimestamps = fullBookingGroup.map(
                              item => {
                                const [year, month, day] = item.date
                                  .split("-")
                                  .map(Number);
                                const newDate = new Date(
                                  year,
                                  month - 1,
                                  day,
                                  hours,
                                  minutes,
                                  seconds
                                );
                                return Math.floor(newDate.getTime() / 1000);
                              }
                            );
                            $state.fragmentDatePicker.values = finalTimestamps;
                            return;
                          }
                          if (addedItem && !addedItem.booking_id) {
                            const wasPrevStateBooked =
                              previousSelectedItems.some(i => i.booking_id);
                            if (wasPrevStateBooked) {
                              $state.selectedItem = [addedItem];
                              $state.fragmentDatePicker.values = [
                                timestamps[addedItemIndex]
                              ];
                            } else {
                              $state.selectedItem = currentItems;
                            }
                            return;
                          }
                          return ($state.selectedItem = currentItems);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        const timestamps = $state.fragmentDatePicker.values;
                        const targetDates = timestamps.map(ts => {
                          const d = new Date(ts * 1000);
                          const year = d.getFullYear();
                          const month = String(d.getMonth() + 1).padStart(
                            2,
                            "0"
                          );
                          const day = String(d.getDate()).padStart(2, "0");
                          return `${year}-${month}-${day}`;
                        });
                        const calendar = $state.apiRequest.data[1].calendar;
                        let currentSelected = $state.selectedItem;
                        if (!Array.isArray(currentSelected)) {
                          currentSelected = [];
                        }
                        const stillValidItems = currentSelected.filter(item =>
                          targetDates.includes(item.date)
                        );
                        const newItems = calendar.filter(item => {
                          return (
                            targetDates.includes(item.date) &&
                            !stillValidItems.some(
                              existing => existing.date === item.date
                            )
                          );
                        });
                        const updatedSelected = [
                          ...stillValidItems,
                          ...newItems
                        ];

                        $state.selectedItem = updatedSelected;
                        return console.log($state.selectedItem);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] =
                  await $steps["updateStateVariable"];
              }

              $steps["updateTourSteps"] = (() => {
                if ($props.isFirstVisit == false) {
                  return false;
                }
                const startOfToday = new Date();
                startOfToday.setHours(0, 0, 0, 0);
                const startOfTodayTimestamp = Math.floor(
                  startOfToday.getTime() / 1000
                );
                const hasUnfilteredDay = $state.fragmentDatePicker.values.some(
                  timestamp => timestamp >= startOfTodayTimestamp
                );
                if (hasUnfilteredDay) {
                  return ($state.tourSteps = 1);
                }
              })()
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["tourSteps"]
                      },
                      operation: 0,
                      value:
                        $state.tourSteps == 0
                          ? ($state.tourSteps = 1)
                          : ($state.tourSteps = 1)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTourSteps"] != null &&
                typeof $steps["updateTourSteps"] === "object" &&
                typeof $steps["updateTourSteps"].then === "function"
              ) {
                $steps["updateTourSteps"] = await $steps["updateTourSteps"];
              }
            }).apply(null, eventArgs);
          }}
          onMonthChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "month"
            ]).apply(null, eventArgs);

            (async month => {
              const $steps = {};

              $steps["runCode"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const secondSpan = document.querySelector(
                            ".rmdp-header-values span:nth-child(3)"
                          );
                          if (secondSpan) {
                            return ($state.year = secondSpan.textContent);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }).apply(null, eventArgs);
          }}
          onYearChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "year"
            ]).apply(null, eventArgs);

            (async year => {
              const $steps = {};

              $steps["updateFragmentDatePickerValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["fragmentDatePicker", "value"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFragmentDatePickerValue"] != null &&
                typeof $steps["updateFragmentDatePickerValue"] === "object" &&
                typeof $steps["updateFragmentDatePickerValue"].then ===
                  "function"
              ) {
                $steps["updateFragmentDatePickerValue"] =
                  await $steps["updateFragmentDatePickerValue"];
              }
            }).apply(null, eventArgs);
          }}
          value={generateStateValueProp($state, [
            "fragmentDatePicker",
            "value"
          ])}
          values={generateStateValueProp($state, [
            "fragmentDatePicker",
            "values"
          ])}
        />

        <AntdModal
          data-plasmic-name={"modalDiscount"}
          data-plasmic-override={overrides.modalDiscount}
          cancelText={"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\u0634"}
          className={classNames("__wab_instance", sty.modalDiscount)}
          closeButtonClassName={classNames({
            [sty["pcls_OvBF-DKWV-aO"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={
            hasVariant(globalVariants, "screen", "mobile") ? true : true
          }
          modalContentClassName={classNames({
            [sty["pcls_fcCMEkh8RAlD"]]: true
          })}
          modalScopeClassName={sty["modalDiscount__modal"]}
          okText={"\u062a\u0627\u06cc\u06cc\u062f"}
          onOk={async () => {
            const $steps = {};
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["modalDiscount", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["modalDiscount", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__jYOh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rvB96
                )}
              >
                {
                  "\u062f\u0631\u0635\u062f \u062a\u062e\u0641\u06cc\u0641\ud83d\udd25\u0631\u0648 \u0645\u0634\u062e\u0635 \u06a9\u0646\n"
                }
              </div>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__ufFeg)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalDiscountOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalDiscount", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalDiscountOpen"] != null &&
                    typeof $steps["updateModalDiscountOpen"] === "object" &&
                    typeof $steps["updateModalDiscountOpen"].then === "function"
                  ) {
                    $steps["updateModalDiscountOpen"] =
                      await $steps["updateModalDiscountOpen"];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
                ? "320px"
                : "320px"
          }
          wrapClassName={classNames({ [sty["pcls_zxwQJY1rIhry"]]: true })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__bUbfH)}>
            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main, "bordeRadius")}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iSiNf)}>
                <Button
                  className={classNames("__wab_instance", sty.button__cMvV4)}
                  color={"softSand"}
                  isDisabled={(() => {
                    try {
                      return (() => {
                        const timestamps = $state.fragmentDatePicker.values;
                        const dates = timestamps.map(timestamp => {
                          const date = new Date(timestamp * 1000);
                          return date.toISOString().split("T")[0];
                        });
                        const calendar = $state.apiRequest.data[1].calendar;
                        const result = dates.some(date => {
                          const item = calendar.find(
                            entry => entry.date === date
                          );
                          return item && item.price === null;
                        });
                        return result;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStateVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: (() => {
                              if (Number($state.textInput2.value) === 0) {
                                return ($state.textInput2.value = 10);
                              } else if (Number($state.textInput2.value) < 70) {
                                return ($state.textInput2.value =
                                  (Number($state.textInput2.value) || 0) + 5);
                              }
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateVariable"] != null &&
                      typeof $steps["updateStateVariable"] === "object" &&
                      typeof $steps["updateStateVariable"].then === "function"
                    ) {
                      $steps["updateStateVariable"] =
                        await $steps["updateStateVariable"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pWim8
                    )}
                  >
                    {"+"}
                  </div>
                </Button>
                <div className={classNames(projectcss.all, sty.freeBox__kWapX)}>
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"0"}
                    type={"number"}
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__mctpH)}
                  color={"clear"}
                  isDisabled={(() => {
                    try {
                      return (() => {
                        const timestamps = $state.fragmentDatePicker.values;
                        const dates = timestamps.map(timestamp => {
                          const date = new Date(timestamp * 1000);
                          return date.toISOString().split("T")[0];
                        });
                        const calendar = $state.apiRequest.data[1].calendar;
                        const result = dates.some(date => {
                          const item = calendar.find(
                            entry => entry.date === date
                          );
                          return item && item.price === null;
                        });
                        return result;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStateVariable"] = true
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: (() => {
                              if (Number($state.textInput2.value) > 10) {
                                return ($state.textInput2.value =
                                  (Number($state.textInput2.value) || 0) - 5);
                              } else {
                                return ($state.textInput2.value = 0);
                              }
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateVariable"] != null &&
                      typeof $steps["updateStateVariable"] === "object" &&
                      typeof $steps["updateStateVariable"].then === "function"
                    ) {
                      $steps["updateStateVariable"] =
                        await $steps["updateStateVariable"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2DsC
                    )}
                  >
                    {"-"}
                  </div>
                </Button>
              </div>
              {(() => {
                try {
                  return (() => {
                    if ($state.textInput2.value == "5") {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__jBMbG)}>
                  <div
                    className={classNames(projectcss.all, sty.column___0YHhI)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__amRpA
                      )}
                    >
                      {
                        "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u06a9\u0645\u200c\u062a\u0631 \u0627\u0632 \u06f1\u06f0\u066a \u0628\u0631\u0627\u06cc \u0634\u0628 \u0646\u06cc\u0633\u062a"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    if ($state.textInput2.value >= "70") {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__zRzEf)}>
                  <div
                    className={classNames(projectcss.all, sty.column___2MLwQ)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fPcu
                      )}
                    >
                      {
                        "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0628\u0627\u0644\u0627\u06cc \u06f7\u06f0\u066a \u0628\u0631\u0627\u06cc \u062c\u0627\u062c\u06cc\u06af\u0627 \u0646\u06cc\u0633\u062a"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    if (
                      $state.textInput2.value % 10 != 0 &&
                      $state.textInput2.value != 0
                    ) {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__kpl1O)}>
                  <div
                    className={classNames(projectcss.all, sty.column__ye1Yk)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zi5C5
                      )}
                    >
                      {
                        "\u062c\u0627\u062c\u06cc\u06af\u0627 \u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0628\u0631\u0627\u06cc \u0645\u0636\u0631\u0628 5 \u0631\u0627 \u0646\u0645\u06cc\u062f\u0647\u062f"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.columns__eTo7H)}>
                <div className={classNames(projectcss.all, sty.column__saDUw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mHxkF
                    )}
                  >
                    {
                      "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0628\u0627\u0644\u0627\u06cc \u06f7\u06f0\u066a \u0628\u0631\u0627\u06cc \u0634\u0628 \u0646\u06cc\u0633\u062a"
                    }
                  </div>
                </div>
              </div>
              {(() => {
                try {
                  return $state.textInput2.value == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.columns___4Y6Hc)}
                >
                  <div className={classNames(projectcss.all, sty.column__wlOH)}>
                    {(() => {
                      try {
                        return (() => {
                          const timestamps = $state.fragmentDatePicker.values;
                          const dates = timestamps.map(timestamp => {
                            const date = new Date(timestamp * 1000);
                            return date.toISOString().split("T")[0];
                          });
                          const calendar = $state.apiRequest.data[1].calendar;
                          const result = dates.some(date => {
                            const item = calendar.find(
                              entry => entry.date === date
                            );
                            return item && item.price === null;
                          });
                          return !result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w7YQ
                        )}
                      >
                        {"\u062d\u0630\u0641 \u062a\u062e\u0641\u06cc\u0641"}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (() => {
                          const timestamps = $state.fragmentDatePicker.values;
                          const dates = timestamps.map(timestamp => {
                            const date = new Date(timestamp * 1000);
                            return date.toISOString().split("T")[0];
                          });
                          const calendar = $state.apiRequest.data[1].calendar;
                          const result = dates.some(date => {
                            const item = calendar.find(
                              entry => entry.date === date
                            );
                            return item && item.price === null;
                          });
                          return result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dWi3G
                        )}
                      >
                        {
                          "\u0627\u0648\u0644 \u0628\u0627\u06cc\u062f \u0642\u06cc\u0645\u062a \u062b\u0628\u062a \u06a9\u0646\u06cc"
                        }
                      </div>
                    ) : null}
                  </div>
                </div>
              ) : null}
              <Button
                className={classNames("__wab_instance", sty.button__gHpgr)}
                isDisabled={(() => {
                  try {
                    return (() => {
                      const timestamps = $state.fragmentDatePicker.values;
                      const dates = timestamps.map(timestamp => {
                        const date = new Date(timestamp * 1000);
                        return date.toISOString().split("T")[0];
                      });
                      const calendar = $state.apiRequest.data[1].calendar;
                      const result = dates.some(date => {
                        const item = calendar.find(
                          entry => entry.date === date
                        );
                        return item && item.price === null;
                      });
                      return result;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.modalDiscount.open = false)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }

                  $steps["updateFetchModalOpen"] =
                    $props.calendarType == "pro"
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["fetchModal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateFetchModalOpen"] != null &&
                    typeof $steps["updateFetchModalOpen"] === "object" &&
                    typeof $steps["updateFetchModalOpen"].then === "function"
                  ) {
                    $steps["updateFetchModalOpen"] =
                      await $steps["updateFetchModalOpen"];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function convertPersianNumbersToEnglish(str) {
                                const persianNumbers = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                const englishNumbers = [
                                  "0",
                                  "1",
                                  "2",
                                  "3",
                                  "4",
                                  "5",
                                  "6",
                                  "7",
                                  "8",
                                  "9"
                                ];

                                return str.replace(
                                  /[۰-۹]/g,
                                  char =>
                                    englishNumbers[
                                      persianNumbers.indexOf(char)
                                    ] || char
                                );
                              }
                              function padZero(num) {
                                return num.length === 1 ? `0${num}` : num;
                              }
                              function convertTimestampToPersianDateWithEnglishNumbers(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                const [year, month, day] = date
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                return formattedDate;
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                discount: String($state.textInput2.value)
                              };
                              $state.requestdata = data;
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                )
                                .flat();
                              return fetch(
                                "https://api-v2.rentamon.com/api/setdiscount",
                                {
                                  method: "POST",
                                  headers: {
                                    "Content-Type": "application/json",
                                    Accept: "*/*"
                                  },
                                  credentials: "include",
                                  body: JSON.stringify(data)
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error(
                                      `HTTP error! status: ${response.status}`
                                    );
                                  }
                                  return response.json();
                                })
                                .then(result => {
                                  $state.platformRequestStatus = result;
                                  console.log(
                                    "Response saved to state:",
                                    result
                                  );
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  $state.platformRequestStatus = {
                                    error: error.message
                                  };
                                });
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateStateVariable2"] =
                    $props.calendarType == "lite"
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: ($state.updateStyle = $state.updateStyle + 1)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateStateVariable2"] != null &&
                    typeof $steps["updateStateVariable2"] === "object" &&
                    typeof $steps["updateStateVariable2"].then === "function"
                  ) {
                    $steps["updateStateVariable2"] =
                      await $steps["updateStateVariable2"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__talIn
                  )}
                >
                  {
                    "\u0627\u0639\u0645\u0627\u0644 \u062a\u062e\u0641\u06cc\u0641"
                  }
                </div>
              </Button>
            </div>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          cancelText={``}
          className={classNames("__wab_instance", sty.modal)}
          closeButtonClassName={classNames({
            [sty["pcls_jrPigKLsyAk8"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          maskClosable={true}
          modalContentClassName={classNames({
            [sty["pcls_LOdSX1qTx8Yt"]]: true
          })}
          modalScopeClassName={sty["modal__modal"]}
          okText={``}
          onOk={async () => {
            const $steps = {};
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["modal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["modal", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__x8Z51)}>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__jZId)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
                ? "320px"
                : "320px"
          }
        >
          <div
            data-plasmic-name={
              "\u062b\u0628\u062a\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
            }
            data-plasmic-override={overrides.ثبتتغییرات}
            className={classNames(projectcss.all, sty.ثبتتغییرات)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m2Hip
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      {
                        return (() => {
                          const startOfToday = new Date();
                          startOfToday.setHours(0, 0, 0, 0);
                          const startOfTodayTimestamp = Math.floor(
                            startOfToday.getTime() / 1000
                          );
                          const flatDays = (
                            $state.fragmentDatePicker.values.flat?.() ??
                            $state.fragmentDatePicker.values
                          )
                            .filter(ts => ts >= startOfTodayTimestamp)
                            .sort((a, b) => a - b);
                          if (!flatDays.length) {
                            return "انتخاب تغییر";
                          }
                          let isConsecutive = true;
                          for (let i = 1; i < flatDays.length; i++) {
                            const diffInDays =
                              (flatDays[i] - flatDays[i - 1]) / (60 * 60 * 24);
                            if (diffInDays !== 1) {
                              isConsecutive = false;
                              break;
                            }
                          }
                          if (!isConsecutive) {
                            return "انتخاب تغییر";
                          }
                          const fmt = new Intl.DateTimeFormat(
                            "fa-IR-u-ca-persian",
                            {
                              day: "numeric",
                              month: "long"
                            }
                          );
                          const firstDate = fmt.format(
                            new Date(flatDays[0] * 1000)
                          );
                          let dateStr = firstDate;
                          if (flatDays.length > 1) {
                            const lastDate = fmt.format(
                              new Date(flatDays[flatDays.length - 1] * 1000)
                            );
                            dateStr = `${firstDate} تا ${lastDate}`;
                          }
                          return `ثبت تغییرات برای ${dateStr}`;
                        })();
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0646\u062a\u06cc\u062c\u0647 \u00ab\u062b\u0628\u062a \u0631\u0632\u0631\u0648\u00bb \u06f2\u06f4 \u062e\u0631\u062f\u0627\u062f \u062a\u0627 \u06f2\u06f6 \u062e\u0631\u062f\u0627\u062f";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <section
            data-plasmic-name={"\u067e\u0631"}
            data-plasmic-override={overrides.پر}
            className={classNames(
              projectcss.all,
              sty.پر,
              ` ${$props.isFirstVisit == true && $state.tourSteps == 2 ? "blinkBorderTourGuide clickable" : ""}`
            )}
            onClick={async event => {
              const $steps = {};

              $steps["updateBlockOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["block", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateBlockOpen"] != null &&
                typeof $steps["updateBlockOpen"] === "object" &&
                typeof $steps["updateBlockOpen"].then === "function"
              ) {
                $steps["updateBlockOpen"] = await $steps["updateBlockOpen"];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: ($state.modal.open = false)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] =
                  await $steps["updateStateVariable"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kG5HF, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k92Qu
                )}
              >
                {"\u067e\u064f\u0640\u0631"}
              </div>
              <Icon16Icon
                className={classNames(projectcss.all, sty.svg__tOely)}
                role={"img"}
              />
            </div>
          </section>
          {(() => {
            try {
              return $props.isFirstVisit && $state.tourSteps == 2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__rkzCj)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__ghIx,
                  "fadein2"
                )}
              >
                {(() => {
                  try {
                    return $state.tourSteps == 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pJldv
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0645\u062b\u0644\u0627 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0631\u0648\u0632 \u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u06cc\u060c\n\u067e\u0633 \u0627\u0632 \u0628\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647\u200c\u0647\u0627 \n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 600 }}
                      >
                        {
                          "\u00ab\u067e\u0631\u00bb \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                ) : null}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__x6USm)}
                onClick={async event => {
                  const $steps = {};

                  $steps["deleteCookie"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function deleteCookie(name) {
                                document.cookie =
                                  name +
                                  "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/";
                              }
                              deleteCookie("first_visit");
                              console.log("delete cookie");
                              $state.tourSteps = 10;
                              return console.log(
                                "delete cookie",
                                $state.tourSteps
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["deleteCookie"] != null &&
                    typeof $steps["deleteCookie"] === "object" &&
                    typeof $steps["deleteCookie"].then === "function"
                  ) {
                    $steps["deleteCookie"] = await $steps["deleteCookie"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v0ND
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCodeDeleteCookie"] = false
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                function deleteCookie(name) {
                                  document.cookie =
                                    name +
                                    "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/";
                                }
                                deleteCookie("first_visit");
                                console.log("delete cookie");
                                $state.tourSteps = 10;
                                return console.log(
                                  "delete cookie",
                                  $state.tourSteps
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCodeDeleteCookie"] != null &&
                      typeof $steps["runCodeDeleteCookie"] === "object" &&
                      typeof $steps["runCodeDeleteCookie"].then === "function"
                    ) {
                      $steps["runCodeDeleteCookie"] =
                        await $steps["runCodeDeleteCookie"];
                    }
                  }}
                >
                  {"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\n"}
                </div>
              </div>
            </div>
          ) : null}
          <section
            data-plasmic-name={
              "\u062e\u0627\u0644\u06cc\u0642\u06cc\u0645\u062a\u062a\u062e\u0641\u06cc\u0641Parent"
            }
            data-plasmic-override={overrides.خالیقیمتتخفیفParent}
            className={classNames(projectcss.all, sty.خالیقیمتتخفیفParent)}
            onClick={async event => {
              const $steps = {};

              $steps["toast"] = ($props.isFirstVisit ? true : false)
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u062f\u0631 \u062d\u0627\u0644\u062a \u062a\u0633\u062a \u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647 \u06a9\u0627\u0631 \u0646\u0645\u06cc\u200c\u06a9\u0646\u0647!",
                        "top-center",
                        3000
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["toast"] != null &&
                typeof $steps["toast"] === "object" &&
                typeof $steps["toast"].then === "function"
              ) {
                $steps["toast"] = await $steps["toast"];
              }
            }}
          >
            <section
              data-plasmic-name={"\u062e\u0627\u0644\u06cc"}
              data-plasmic-override={overrides.خالی}
              className={classNames(
                projectcss.all,
                sty.خالی,
                (() => {
                  try {
                    return $props.isFirstVisit ? "unclickable" : "clickable";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateFetchModalOpen"] =
                  $props.calendarType == "pro"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fetchModal", "open"]
                          },
                          operation: 0,
                          value: (() => {
                            const calendar = $state.selectedItem;
                            const platforms = [
                              "شب",
                              "مهمانشو",
                              "اتاقک",
                              "جاباما",
                              "جاجیگا",
                              "هومسا",
                              "میزبون"
                            ];

                            const result = calendar.some(item =>
                              platforms.includes(item.website)
                            );
                            return !result;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] =
                    await $steps["updateFetchModalOpen"];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: ($state.modal.open = false)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] =
                    await $steps["updateStateVariable"];
                }

                $steps["checkForChange"] =
                  $props.calendarType == "pro"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["checkForChange", "open"]
                          },
                          operation: 0,
                          value: (() => {
                            const calendar = $state.selectedItem;
                            const platforms = [
                              "شب",
                              "مهمانشو",
                              "اتاقک",
                              "جاباما",
                              "جاجیگا",
                              "هومسا",
                              "میزبون"
                            ];

                            const result = calendar.some(item =>
                              platforms.includes(item.website)
                            );
                            return result;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["checkForChange"] != null &&
                  typeof $steps["checkForChange"] === "object" &&
                  typeof $steps["checkForChange"].then === "function"
                ) {
                  $steps["checkForChange"] = await $steps["checkForChange"];
                }

                $steps["updateStateVariable2"] =
                  $props.calendarType == "lite"
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.updateStyle = $state.updateStyle + 1)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateStateVariable2"] != null &&
                  typeof $steps["updateStateVariable2"] === "object" &&
                  typeof $steps["updateStateVariable2"].then === "function"
                ) {
                  $steps["updateStateVariable2"] =
                    await $steps["updateStateVariable2"];
                }

                $steps["setUnblock"] = (() => {
                  const calendar = $state.selectedItem;
                  const platforms = [
                    "شب",
                    "مهمانشو",
                    "اتاقک",
                    "جاباما",
                    "جاجیگا",
                    "هومسا",
                    "میزبون"
                  ];

                  const result = calendar.some(item =>
                    platforms.includes(item.website)
                  );
                  return !result;
                })()
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/set-unblock",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function convertPersianNumbersToEnglish(str) {
                                  const persianNumbers = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  const englishNumbers = [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7",
                                    "8",
                                    "9"
                                  ];

                                  return str.replace(
                                    /[۰-۹]/g,
                                    char =>
                                      englishNumbers[
                                        persianNumbers.indexOf(char)
                                      ] || char
                                  );
                                }
                                function padZero(num) {
                                  return num.length === 1 ? `0${num}` : num;
                                }
                                function convertTimestampToPersianDateWithEnglishNumbers(
                                  timestamp
                                ) {
                                  const date = new Date(timestamp * 1000);
                                  const [year, month, day] = date
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                function getTodayInPersian() {
                                  const today = new Date();
                                  const [year, month, day] = today
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                const todayInPersian = getTodayInPersian();
                                const data = {
                                  days: [$state.fragmentDatePicker.values],
                                  property_id: $props.propertyId
                                };
                                $state.requestdata = data;
                                data.days = data.days
                                  .map(timestampArray =>
                                    timestampArray
                                      .map(timestamp =>
                                        convertTimestampToPersianDateWithEnglishNumbers(
                                          timestamp
                                        )
                                      )
                                      .filter(day => day >= todayInPersian)
                                  )
                                  .flat();
                                return data;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["setUnblock"] != null &&
                  typeof $steps["setUnblock"] === "object" &&
                  typeof $steps["setUnblock"].then === "function"
                ) {
                  $steps["setUnblock"] = await $steps["setUnblock"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.platformRequestStatus =
                            $steps.setUnblock.data[0]);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["invokeGlobalAction"] = (() => {
                  const calendar = $state.selectedItem;
                  const platforms = [
                    "شب",
                    "مهمانشو",
                    "اتاقک",
                    "جاباما",
                    "جاجیگا",
                    "هومسا",
                    "میزبون"
                  ];

                  const result = calendar.some(item =>
                    platforms.includes(item.website)
                  );
                  return !result;
                })()
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/reservations/cancelation",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                const bookingIds = ($state.selectedItem ?? [])
                                  .map(item => item.booking_id)
                                  .filter(id => id != null);
                                return { dates: [...new Set(bookingIds)] };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }
              }}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__r8P9K, ``)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h5Rxl
                  )}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  {"\u062e\u0627\u0644\u06cc"}
                </div>
              </div>
            </section>
            <section
              data-plasmic-name={"\u0642\u06cc\u0645\u062a"}
              data-plasmic-override={overrides.قیمت}
              className={classNames(
                projectcss.all,
                sty.قیمت,
                (() => {
                  try {
                    return $props.isFirstVisit ? "unclickable" : "clickable";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateModalChangePriceOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modalChangePrice", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalChangePriceOpen"] != null &&
                  typeof $steps["updateModalChangePriceOpen"] === "object" &&
                  typeof $steps["updateModalChangePriceOpen"].then ===
                    "function"
                ) {
                  $steps["updateModalChangePriceOpen"] =
                    await $steps["updateModalChangePriceOpen"];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          return ($state.modal.open = false);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] =
                    await $steps["updateStateVariable"];
                }
              }}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__remGa, ``)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bpfL3
                  )}
                >
                  {"\u0642\u06cc\u0645\u062a"}
                </div>
                <Icon16Icon
                  className={classNames(projectcss.all, sty.svg___3D7Tn)}
                  role={"img"}
                />
              </div>
            </section>
            <section
              data-plasmic-name={"\u062a\u062e\u0641\u06cc\u0641"}
              data-plasmic-override={overrides.تخفیف}
              className={classNames(
                projectcss.all,
                sty.تخفیف,
                (() => {
                  try {
                    return $props.isFirstVisit ? "unclickable" : "clickable";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateNewDiscountModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["newDiscountModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNewDiscountModalOpen"] != null &&
                  typeof $steps["updateNewDiscountModalOpen"] === "object" &&
                  typeof $steps["updateNewDiscountModalOpen"].then ===
                    "function"
                ) {
                  $steps["updateNewDiscountModalOpen"] =
                    await $steps["updateNewDiscountModalOpen"];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          return ($state.modal.open = false);
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] =
                    await $steps["updateStateVariable"];
                }
              }}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__j65OM, ``)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2AHu
                  )}
                >
                  {"\u062a\u062e\u0641\u06cc\u0641 \u066a"}
                </div>
                <Icon16Icon
                  className={classNames(projectcss.all, sty.svg__pXkC)}
                  role={"img"}
                />
              </div>
            </section>
          </section>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modalChangePrice"}
          data-plasmic-override={overrides.modalChangePrice}
          cancelText={"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\u0634"}
          className={classNames("__wab_instance", sty.modalChangePrice)}
          closeButtonClassName={classNames({
            [sty["pcls_WyZP4aceYO9b"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          maskClosable={true}
          modalScopeClassName={sty["modalChangePrice__modal"]}
          okText={"\u062a\u0627\u06cc\u06cc\u062f"}
          onOk={async () => {
            const $steps = {};
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "modalChangePrice",
              "open"
            ]).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["modalChangePrice", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__lNrIo)}>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__dViH)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalChangePriceOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modalChangePrice", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalChangePriceOpen"] != null &&
                    typeof $steps["updateModalChangePriceOpen"] === "object" &&
                    typeof $steps["updateModalChangePriceOpen"].then ===
                      "function"
                  ) {
                    $steps["updateModalChangePriceOpen"] =
                      await $steps["updateModalChangePriceOpen"];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jjgi5
                )}
              >
                {
                  "\u0646\u0631\u062e \ud83d\udcb5 \u0631\u0648 \u0628\u0647 \u062a\u0648\u0645\u0646 \u0648\u0627\u0631\u062f \u06a9\u0646"
                }
              </div>
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile")
              ? "320px"
              : hasVariant(globalVariants, "screen", "tablet")
                ? "320px"
                : "320px"
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__y81Tb)}>
            <div
              data-plasmic-name={"main2"}
              data-plasmic-override={overrides.main2}
              className={classNames(projectcss.all, sty.main2)}
            >
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u0645\u062b\u0644\u0627 \u06f2/\u06f0\u06f0\u06f0/\u06f0\u06f0\u06f0"
                }
                type={"number"}
                value={generateStateValueProp($state, ["input", "value"])}
              />

              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "\u0645\u062b\u0644\u0627 \u06f2/\u06f0\u06f0\u06f0/\u06f0\u06f0\u06f0"
                }
                type={"number"}
                value={
                  generateStateValueProp($state, ["textInput", "value"]) ?? ""
                }
              />

              {false ? (
                <AntdInputNumber
                  data-plasmic-name={"numberInput2"}
                  data-plasmic-override={overrides.numberInput2}
                  className={classNames("__wab_instance", sty.numberInput2)}
                  controls={false}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "numberInput2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={
                    "\u0645\u062b\u0644\u0627 \u06f2/\u06f0\u06f0\u06f0/\u06f0\u06f0\u06f0"
                  }
                  readOnly={false}
                  type={"number"}
                  value={generateStateValueProp($state, [
                    "numberInput2",
                    "value"
                  ])}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xUoaD
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        function numberToPersian(num) {
                          const units = [
                            "",
                            "یک",
                            "دو",
                            "سه",
                            "چهار",
                            "پنج",
                            "شش",
                            "هفت",
                            "هشت",
                            "نه"
                          ];

                          const tens = [
                            "",
                            "ده",
                            "بیست",
                            "سی",
                            "چهل",
                            "پنجاه",
                            "شصت",
                            "هفتاد",
                            "هشتاد",
                            "نود"
                          ];

                          const teens = [
                            "ده",
                            "یازده",
                            "دوازده",
                            "سیزده",
                            "چهارده",
                            "پانزده",
                            "شانزده",
                            "هفده",
                            "هجده",
                            "نوزده"
                          ];

                          const hundreds = [
                            "",
                            "صد",
                            "دویست",
                            "سیصد",
                            "چهارصد",
                            "پانصد",
                            "ششصد",
                            "هفتصد",
                            "هشتصد",
                            "نهصد"
                          ];

                          const groupNames = ["", "هزار", "میلیون", "میلیارد"];

                          if (num == null || num === "" || num === 0)
                            return "صفر";
                          const splitNumber = n => {
                            const str = n.toString();
                            const len = str.length;
                            if (len <= 3) return [n];
                            const groups = [];
                            let i = len;
                            while (i > 0) {
                              groups.unshift(
                                Number(str.substring(Math.max(0, i - 3), i))
                              );
                              i -= 3;
                            }
                            return groups;
                          };
                          const convertGroup = n => {
                            if (n === 0) return "";
                            const h = Math.floor(n / 100);
                            const t = Math.floor((n % 100) / 10);
                            const u = n % 10;
                            const hundred = hundreds[h];
                            let tenUnit = "";
                            if (t === 1) {
                              tenUnit = teens[u];
                            } else {
                              tenUnit =
                                tens[t] + (u > 0 ? " و " + units[u] : "");
                            }
                            return [hundred, tenUnit]
                              .filter(Boolean)
                              .join(" و ")
                              .trim();
                          };
                          const groups = splitNumber(num);
                          const result = groups
                            .map((g, i) => {
                              const groupText = convertGroup(g);
                              if (groupText) {
                                return (
                                  groupText +
                                  (groupNames[groups.length - i - 1]
                                    ? " " + groupNames[groups.length - i - 1]
                                    : "")
                                );
                              }
                              return "";
                            })
                            .filter(Boolean)
                            .join(" و ");
                          const finalResult = result.startsWith("و ")
                            ? result.slice(2)
                            : result;
                          return finalResult.trim() + " تومان";
                        }
                        const input = $state.input?.value || "";
                        const output =
                          input === "" ? "صفر" : numberToPersian(Number(input));
                        return output;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gDo1)}>
              <Button
                className={classNames("__wab_instance", sty.button__vNpt8)}
                isDisabled={(() => {
                  try {
                    return (
                      $state.input.value <= 99999 ||
                      $state.input.value == null ||
                      $state.input.value >= 30000000
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.modalChangePrice.open = false)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }

                  $steps["updateFetchModalOpen"] =
                    $props.calendarType == "pro"
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["fetchModal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateFetchModalOpen"] != null &&
                    typeof $steps["updateFetchModalOpen"] === "object" &&
                    typeof $steps["updateFetchModalOpen"].then === "function"
                  ) {
                    $steps["updateFetchModalOpen"] =
                      await $steps["updateFetchModalOpen"];
                  }

                  $steps["runCode"] = false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function convertPersianNumbersToEnglish(str) {
                                const persianNumbers = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                const englishNumbers = [
                                  "0",
                                  "1",
                                  "2",
                                  "3",
                                  "4",
                                  "5",
                                  "6",
                                  "7",
                                  "8",
                                  "9"
                                ];

                                return str.replace(
                                  /[۰-۹]/g,
                                  char =>
                                    englishNumbers[
                                      persianNumbers.indexOf(char)
                                    ] || char
                                );
                              }
                              function padZero(num) {
                                return num.length === 1 ? `0${num}` : num;
                              }
                              function convertTimestampToPersianDateWithEnglishNumbers(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                const [year, month, day] = date
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                return formattedDate;
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                price: String($state.input.value)
                              };
                              $state.requestdata = data;
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                )
                                .flat();
                              fetch(
                                "https://api-v2.rentamon.com/api/setprice",
                                {
                                  method: "POST",
                                  headers: {
                                    "Content-Type": "application/json",
                                    Accept: "*/*"
                                  },
                                  credentials: "include",
                                  body: JSON.stringify(data)
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error(
                                      `HTTP error! status: ${response.status}`
                                    );
                                  }
                                  return response.json();
                                })
                                .then(result => {
                                  $state.platformRequestStatus = result;
                                  console.log(
                                    "Response saved to state:",
                                    result
                                  );
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  $state.platformRequestStatus = {
                                    error: error.message
                                  };
                                });
                              $state.numberInput2.value = "";
                              return console.log(data, "done");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateStateVariable2"] =
                    $props.calendarType == "lite"
                      ? (() => {
                          const actionArgs = {
                            operation: 0,
                            value: ($state.updateStyle = $state.updateStyle + 1)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateStateVariable2"] != null &&
                    typeof $steps["updateStateVariable2"] === "object" &&
                    typeof $steps["updateStateVariable2"].then === "function"
                  ) {
                    $steps["updateStateVariable2"] =
                      await $steps["updateStateVariable2"];
                  }

                  $steps["setPrice"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/set-price",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  function convertPersianNumbersToEnglish(str) {
                                    const persianNumbers = [
                                      "۰",
                                      "۱",
                                      "۲",
                                      "۳",
                                      "۴",
                                      "۵",
                                      "۶",
                                      "۷",
                                      "۸",
                                      "۹"
                                    ];

                                    const englishNumbers = [
                                      "0",
                                      "1",
                                      "2",
                                      "3",
                                      "4",
                                      "5",
                                      "6",
                                      "7",
                                      "8",
                                      "9"
                                    ];

                                    return str.replace(
                                      /[۰-۹]/g,
                                      char =>
                                        englishNumbers[
                                          persianNumbers.indexOf(char)
                                        ] || char
                                    );
                                  }
                                  function padZero(num) {
                                    return num.length === 1 ? `0${num}` : num;
                                  }
                                  function convertTimestampToPersianDateWithEnglishNumbers(
                                    timestamp
                                  ) {
                                    const date = new Date(timestamp * 1000);
                                    const [year, month, day] = date
                                      .toLocaleDateString("fa")
                                      .split("/");
                                    const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                    return formattedDate;
                                  }
                                  const data = {
                                    days: [$state.fragmentDatePicker.values],
                                    property_id: $props.propertyId,
                                    price: String($state.input.value)
                                  };
                                  $state.requestdata = data;
                                  data.days = data.days
                                    .map(timestampArray =>
                                      timestampArray.map(timestamp =>
                                        convertTimestampToPersianDateWithEnglishNumbers(
                                          timestamp
                                        )
                                      )
                                    )
                                    .flat();
                                  return data;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["setPrice"] != null &&
                    typeof $steps["setPrice"] === "object" &&
                    typeof $steps["setPrice"].then === "function"
                  ) {
                    $steps["setPrice"] = await $steps["setPrice"];
                  }

                  $steps["runCode2"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.platformRequestStatus =
                              $steps.setPrice.data[0]);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode2"] != null &&
                    typeof $steps["runCode2"] === "object" &&
                    typeof $steps["runCode2"].then === "function"
                  ) {
                    $steps["runCode2"] = await $steps["runCode2"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wEXuL
                  )}
                >
                  {
                    "\u062b\u0628\u062a \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                  }
                </div>
              </Button>
            </div>
          </div>
        </AntdModal>
        <div className={classNames(projectcss.all, sty.freeBox__ox6V, ``)}>
          <AntdModal
            data-plasmic-name={"fetchModal"}
            data-plasmic-override={overrides.fetchModal}
            className={classNames("__wab_instance", sty.fetchModal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_5Ic5upGDCBpx"]]: true
            })}
            modalScopeClassName={sty["fetchModal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["fetchModal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["fetchModal", "open"])}
            title={
              (() => {
                try {
                  return !$props.isFirstVisit;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___7BQk4)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUpdateStyle"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["updateStyle"]
                            },
                            operation: 0,
                            value: ($state.updateStyle = $state.updateStyle + 1)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUpdateStyle"] != null &&
                      typeof $steps["updateUpdateStyle"] === "object" &&
                      typeof $steps["updateUpdateStyle"].then === "function"
                    ) {
                      $steps["updateUpdateStyle"] =
                        await $steps["updateUpdateStyle"];
                    }
                  }}
                >
                  {(() => {
                    try {
                      return Object.keys($state.platformRequestStatus).length;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon23Icon
                      className={classNames(projectcss.all, sty.svg__dhgzD, ``)}
                      role={"img"}
                    />
                  ) : null}
                </div>
              ) : null
            }
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "smallMobile")
                ? "320"
                : hasVariant(globalVariants, "screen", "mobile")
                  ? "340"
                  : hasVariant(globalVariants, "screen", "tablet")
                    ? "320px"
                    : "350"
            }
            wrapClassName={classNames({ [sty["pcls_wpFF0N8xktMo"]]: true })}
          >
            <ApiRequest
              data-plasmic-name={"getJabamaSmartPriceStatus"}
              data-plasmic-override={overrides.getJabamaSmartPriceStatus}
              className={classNames(
                "__wab_instance",
                sty.getJabamaSmartPriceStatus
              )}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "getJabamaSmartPriceStatus",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "getJabamaSmartPriceStatus",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "getJabamaSmartPriceStatus",
                  "data"
                ]).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["getJabamaSmartPriceStatus"] = ref;
              }}
              url={(() => {
                try {
                  return `https://gateway.rentamon.com/webhook/check-property-smart-pricing?prop_id=${$props.propertyId}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <ApiRequest
              data-plasmic-name={"userPlatform"}
              data-plasmic-override={overrides.userPlatform}
              className={classNames("__wab_instance", sty.userPlatform)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bwRKl
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__niOyd)}>
                  {(() => {
                    try {
                      return (() => {
                        if (
                          !$state.platformRequestStatus ||
                          !$state.platformRequestStatus.data ||
                          Object.keys($state.platformRequestStatus.data)
                            .length === 0
                        ) {
                          return true;
                        } else {
                          return false;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"loading2"}
                      data-plasmic-override={overrides.loading2}
                      alt={""}
                      className={classNames(sty.loading2)}
                      displayHeight={"34px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/image140.gif",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "userPlatform",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "userPlatform",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "userPlatform",
                  "data"
                ]).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["userPlatform"] = ref;
              }}
              url={(() => {
                try {
                  return `https://api-v2.rentamon.com/api/website_statuses/?property_id=${$props.propertyId}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hGcs0)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Wyg
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          {
                            return (() => {
                              let action = "خالی کردن";
                              if (
                                $state.requestdata.request_for === "reserve"
                              ) {
                                action = "ثبت رزرو";
                              }
                              if ($state.requestdata.request_for === "block") {
                                action = "بستن";
                              }
                              if ($state.requestdata.discount != null) {
                                action = "ویرایش تخفیف";
                              }
                              if ($state.requestdata.price != null) {
                                action = "ویرایش قیمت";
                              }
                              const flatDays =
                                $state.requestdata.days.flat?.() ??
                                $state.requestdata.days;
                              if (!flatDays.length) {
                                return `نتیجه درخواست «${action}»`;
                              }
                              const dates = flatDays
                                .map(ts => {
                                  const d = new Date(ts * 1000);
                                  d.setHours(0, 0, 0, 0);
                                  return d;
                                })
                                .sort((a, b) => a - b);
                              let isConsecutive = true;
                              for (let i = 1; i < dates.length; i++) {
                                const diff =
                                  (dates[i] - dates[i - 1]) /
                                  (1000 * 60 * 60 * 24);
                                if (diff !== 1) {
                                  isConsecutive = false;
                                  break;
                                }
                              }
                              if (!isConsecutive) {
                                return `نتیجه درخواست «${action}»`;
                              }
                              const fmt = new Intl.DateTimeFormat(
                                "fa-IR-u-ca-persian",
                                {
                                  day: "numeric",
                                  month: "long"
                                }
                              );
                              const firstDate = fmt.format(dates[0]);
                              let dateStr = firstDate;
                              if (dates.length > 1) {
                                const lastDate = fmt.format(
                                  dates[dates.length - 1]
                                );
                                dateStr = `${firstDate} تا ${lastDate}`;
                              }
                              return `نتیجه «${action}» ${dateStr}`;
                            })();
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u062a\u06cc\u062c\u0647 \u00ab\u062b\u0628\u062a \u0631\u0632\u0631\u0648\u00bb \u06f2\u06f4 \u062e\u0631\u062f\u0627\u062f \u062a\u0627 \u06f2\u06f6 \u062e\u0631\u062f\u0627\u062f";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__trzgj)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        const status = $state.userPlatform.data.status;
                        const platforms = Object.keys(status);
                        return platforms;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oGczx)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kd5Ft
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pxdZx
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const nameMapping = {
                                    jajiga: "جاجیگا",
                                    mizboon: "میزبون",
                                    otaghak: "اتاقک",
                                    shab: "شب",
                                    homsa: "هومسا",
                                    jabama: "جاباما",
                                    mihmansho: "میهمانشو"
                                  };
                                  const translatedName =
                                    nameMapping[currentItem] || currentItem;
                                  return translatedName;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__spdba
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                if (
                                  !$state.platformRequestStatus ||
                                  !$state.platformRequestStatus.data ||
                                  Object.keys($state.platformRequestStatus.data)
                                    .length === 0
                                ) {
                                  return false;
                                }
                                const platforms =
                                  $state.platformRequestStatus.data;
                                const jabama_smart_price =
                                  $state.getJabamaSmartPriceStatus.data;
                                if (
                                  currentItem === "jabama" &&
                                  jabama_smart_price?.[0]?.status === true &&
                                  ($state.requestdata.discount != null ||
                                    $state.requestdata.price != null)
                                ) {
                                  return false;
                                }
                                if (platforms[currentItem]) {
                                  const item = platforms[currentItem];
                                  if (
                                    item.final_status === true &&
                                    item.status_code === 200
                                  ) {
                                    return true;
                                  } else {
                                    return false;
                                  }
                                } else {
                                  return false;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              data-plasmic-name={"ok"}
                              data-plasmic-override={overrides.ok}
                              alt={""}
                              className={classNames(sty.ok)}
                              displayHeight={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "30px"
                                  : "30px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "lazy"
                                  : "eager"
                              }
                              src={{
                                src: "/plasmic/website_starter/images/image27.svg",
                                fullWidth: 26,
                                fullHeight: 26,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                if (
                                  !$state.platformRequestStatus ||
                                  !$state.platformRequestStatus.data ||
                                  Object.keys($state.platformRequestStatus.data)
                                    .length === 0
                                ) {
                                  return false;
                                }
                                const platforms =
                                  $state.platformRequestStatus.data;
                                if (platforms[currentItem]) {
                                  const item = platforms[currentItem];
                                  if (
                                    item.final_status === "pending" &&
                                    item.status_code === 200
                                  ) {
                                    return true;
                                  } else {
                                    return false;
                                  }
                                } else {
                                  return false;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              data-plasmic-name={"ok3"}
                              data-plasmic-override={overrides.ok3}
                              alt={""}
                              className={classNames(sty.ok3)}
                              displayHeight={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "30px"
                                  : "30px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "lazy"
                                  : "eager"
                              }
                              src={{
                                src: "/plasmic/website_starter/images/image178.svg",
                                fullWidth: 36,
                                fullHeight: 36,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                if (
                                  !$state.platformRequestStatus ||
                                  !$state.platformRequestStatus.data ||
                                  Object.keys($state.platformRequestStatus.data)
                                    .length === 0
                                ) {
                                  return false;
                                }
                                const jabama_smart_price =
                                  $state.getJabamaSmartPriceStatus.data;
                                if (
                                  currentItem === "jabama" &&
                                  jabama_smart_price?.[0]?.status === true &&
                                  ($state.requestdata.discount != null ||
                                    $state.requestdata.price != null)
                                ) {
                                  return false;
                                }
                                const platforms =
                                  $state.platformRequestStatus.data;
                                const discount = $state.requestdata.discount;
                                if (platforms[currentItem]) {
                                  if (
                                    platforms[currentItem].final_status ===
                                      false ||
                                    platforms[currentItem].status_code !== 200
                                  ) {
                                    return true;
                                  } else {
                                    return false;
                                  }
                                } else {
                                  if (discount == null) {
                                    return true;
                                  } else {
                                    return false;
                                  }
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              data-plasmic-name={"fail"}
                              data-plasmic-override={overrides.fail}
                              alt={""}
                              className={classNames(sty.fail, "element")}
                              displayHeight={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "30px"
                                  : "30px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? "lazy"
                                  : "eager"
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0646\u0634\u062f!",
                                          "top-center",
                                          5000
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] =
                                    await $steps["invokeGlobalAction"];
                                }
                              }}
                              src={{
                                src: "/plasmic/website_starter/images/image28.svg",
                                fullWidth: 26,
                                fullHeight: 26,
                                aspectRatio: 1
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const jabama_smart_price =
                                  $state.getJabamaSmartPriceStatus.data;
                                if (
                                  currentItem === "jabama" &&
                                  jabama_smart_price?.[0]?.status === true &&
                                  ($state.requestdata.discount != null ||
                                    $state.requestdata.price != null)
                                ) {
                                  return false;
                                }
                                if (
                                  !$state.platformRequestStatus ||
                                  !$state.platformRequestStatus.data ||
                                  Object.keys($state.platformRequestStatus.data)
                                    .length === 0
                                ) {
                                  return true;
                                } else {
                                  return false;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              data-plasmic-name={"loading"}
                              data-plasmic-override={overrides.loading}
                              alt={""}
                              className={classNames(sty.loading)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "smallMobile"
                                )
                                  ? "26px"
                                  : "30px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/website_starter/images/image140.gif",
                                fullWidth: 500,
                                fullHeight: 500,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                if ($state.requestdata.discount == null) {
                                  return false;
                                }
                                const platformStatus =
                                  $state.platformRequestStatus?.data || {};
                                if (
                                  Object.keys(platformStatus).length > 0 &&
                                  !platformStatus[currentItem] &&
                                  ["mihmansho", "mizboon"].includes(currentItem)
                                ) {
                                  return true;
                                } else {
                                  return false;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zgQve
                              )}
                            >
                              {
                                "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0646\u062f\u0627\u0631\u0647"
                              }
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const jabama_smart_price =
                                  $state.getJabamaSmartPriceStatus.data[0]
                                    .status;
                                if (!jabama_smart_price) {
                                  return false;
                                }
                                if (
                                  currentItem === "jabama" &&
                                  ($state.requestdata.price != null ||
                                    $state.requestdata.discount != null)
                                ) {
                                  return true;
                                }
                                return false;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ax0K0
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "\u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u062a\u063a\u06cc\u06cc\u0631 \u0642\u06cc\u0645\u062a \u274c"
                                : "\u274c \u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u062a\u063a\u06cc\u06cc\u0631 \u0642\u06cc\u0645\u062a"}
                            </div>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  );
                })}
                {(() => {
                  try {
                    return !Object.keys($state.userPlatform.data.status).length;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aThqI)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__itGo4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "ثبت شد";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nzVwF)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"ok2"}
                        data-plasmic-override={overrides.ok2}
                        alt={""}
                        className={classNames(sty.ok2)}
                        displayHeight={"30px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? "lazy"
                            : "eager"
                        }
                        src={{
                          src: "/plasmic/website_starter/images/image27.svg",
                          fullWidth: 26,
                          fullHeight: 26,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__tUjr7,
                    (() => {
                      try {
                        return $props.isFirstVisit == true &&
                          $state.tourSteps == 2
                          ? "blinkBorderTourGuide clickable"
                          : "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__s6O9E)}
                    isDisabled={(() => {
                      try {
                        return !Object.keys($state.platformRequestStatus)
                          .length;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateFragmentDatePickerValue3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedDay"]
                              },
                              operation: 0,
                              value: ($state.selectedDay =
                                $state.fragmentDatePicker.values)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFragmentDatePickerValue3"] != null &&
                        typeof $steps["updateFragmentDatePickerValue3"] ===
                          "object" &&
                        typeof $steps["updateFragmentDatePickerValue3"].then ===
                          "function"
                      ) {
                        $steps["updateFragmentDatePickerValue3"] =
                          await $steps["updateFragmentDatePickerValue3"];
                      }

                      $steps["updateFragmentDatePickerValue2"] = (() => {
                        if ($state.requestdata.request_for == "reserve") {
                          return true;
                        } else {
                          return false;
                        }
                      })()
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["addingGuestInfo", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFragmentDatePickerValue2"] != null &&
                        typeof $steps["updateFragmentDatePickerValue2"] ===
                          "object" &&
                        typeof $steps["updateFragmentDatePickerValue2"].then ===
                          "function"
                      ) {
                        $steps["updateFragmentDatePickerValue2"] =
                          await $steps["updateFragmentDatePickerValue2"];
                      }

                      $steps["updateFragmentDatePickerValue4"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["updateStyle"]
                              },
                              operation: 0,
                              value: ($state.updateStyle =
                                $state.updateStyle + 1)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFragmentDatePickerValue4"] != null &&
                        typeof $steps["updateFragmentDatePickerValue4"] ===
                          "object" &&
                        typeof $steps["updateFragmentDatePickerValue4"].then ===
                          "function"
                      ) {
                        $steps["updateFragmentDatePickerValue4"] =
                          await $steps["updateFragmentDatePickerValue4"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tf9Vu
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if ($state.requestdata.request_for == "reserve") {
                                return "ثبت اطلاعات مهمان";
                              } else {
                                return "باشه";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0627\u0634\u0647";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Button>
                </div>
              </div>
            </ApiRequest>
          </AntdModal>
        </div>
        <AntdModal
          data-plasmic-name={"block"}
          data-plasmic-override={overrides.block}
          className={classNames("__wab_instance", sty.block)}
          closeIcon={null}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          modalScopeClassName={sty["block__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["block", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["block", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__ahicQ)}>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__cC0K)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateBlockOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["block", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBlockOpen"] != null &&
                    typeof $steps["updateBlockOpen"] === "object" &&
                    typeof $steps["updateBlockOpen"].then === "function"
                  ) {
                    $steps["updateBlockOpen"] = await $steps["updateBlockOpen"];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nhXaw
                )}
              >
                {"\u0686\u0631\u0627 \u067e\u0631\u0647\u061f"}
              </div>
            </div>
          }
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobile") ? "320px" : "320px"
          }
        >
          {(() => {
            try {
              return $props.isFirstVisit && $state.tourSteps != 10;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__az6Bg,
                "fadein2"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5QZrA
                )}
              >
                {hasVariant(globalVariants, "screen", "smallMobile") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0641\u0631\u0636 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645 \u0645\u0633\u0627\u0641\u0631  \u0631\u0632\u0631\u0648 \u06a9\u0631\u062f\u0647\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 600 }}
                    >
                      {
                        "\u06af\u0632\u06cc\u0646\u0647 \u00ab\u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u0645\u00bb \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      }
                    </span>
                  </React.Fragment>
                ) : hasVariant(globalVariants, "screen", "mobile") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0641\u0631\u0636 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e \u0631\u0632\u0631\u0648 \u0634\u062f\u0647\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 600 }}
                    >
                      {
                        "\u06af\u0632\u06cc\u0646\u0647 \u00ab\u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u0645\u00bb \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      }
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0641\u0631\u0636 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645 \u0645\u06cc\u062e\u0648\u0627\u0647\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0633\u0627\u0641\u0631 \u0631\u0648 \u062b\u0628\u062a \u06a9\u0646\u06cc\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 600 }}
                    >
                      {
                        "\u06af\u0632\u06cc\u0646\u0647 \u00ab\u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u0645\u00bb \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      }
                    </span>
                  </React.Fragment>
                )}
              </div>
            </div>
          ) : null}
          <div
            data-plasmic-name={"reserve"}
            data-plasmic-override={overrides.reserve}
            className={classNames(
              projectcss.all,
              sty.reserve,
              (() => {
                try {
                  return ($props.isFirstVisit == true &&
                    $state.tourSteps == 2) ||
                    $state.tourSteps == 3
                    ? "blinkBorderTourGuide clickable"
                    : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
            onClick={async event => {
              const $steps = {};

              $steps["checkConsecutive"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const items = $state.selectedItem || [];
                          if (items.length < 2) return true;
                          const dates = items
                            .map(item => new Date(item.date))
                            .sort((a, b) => a - b);
                          const isConsecutive = dates.every((cur, idx, arr) => {
                            if (idx === 0) return true;
                            const prev = arr[idx - 1];
                            const diffInDays =
                              (cur - prev) / (1000 * 60 * 60 * 24);
                            return diffInDays === 1;
                          });
                          return isConsecutive;
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["checkConsecutive"] != null &&
                typeof $steps["checkConsecutive"] === "object" &&
                typeof $steps["checkConsecutive"].then === "function"
              ) {
                $steps["checkConsecutive"] = await $steps["checkConsecutive"];
              }

              $steps["toastCheckConsecutive"] =
                $steps.checkConsecutive == false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u062f\u0633\u062a\u06cc \u0631\u0632\u0631\u0648 \u0644\u0627\u0632\u0645\u0647 \u00ab\u0631\u0648\u0632\u0647\u0627\u06cc \u067e\u0634\u062a \u0633\u0631\u0647\u0645\u00bb \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc!",
                          "top-center",
                          6000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["toastCheckConsecutive"] != null &&
                typeof $steps["toastCheckConsecutive"] === "object" &&
                typeof $steps["toastCheckConsecutive"].then === "function"
              ) {
                $steps["toastCheckConsecutive"] =
                  await $steps["toastCheckConsecutive"];
              }

              $steps["updateStateVariable"] = $steps.checkConsecutive
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: ($state.block.open = false)
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] =
                  await $steps["updateStateVariable"];
              }

              $steps["updateFetchModalOpen"] =
                $props.calendarType == "pro" && $steps.checkConsecutive
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["fetchModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateFetchModalOpen"] != null &&
                typeof $steps["updateFetchModalOpen"] === "object" &&
                typeof $steps["updateFetchModalOpen"].then === "function"
              ) {
                $steps["updateFetchModalOpen"] =
                  await $steps["updateFetchModalOpen"];
              }

              $steps["setBlock"] =
                $steps.checkConsecutive == true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/set-block",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function convertPersianNumbersToEnglish(str) {
                                  const persianNumbers = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  const englishNumbers = [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7",
                                    "8",
                                    "9"
                                  ];

                                  return str.replace(
                                    /[۰-۹]/g,
                                    char =>
                                      englishNumbers[
                                        persianNumbers.indexOf(char)
                                      ] || char
                                  );
                                }
                                function padZero(num) {
                                  return num.length === 1 ? `0${num}` : num;
                                }
                                function convertTimestampToPersianDateWithEnglishNumbers(
                                  timestamp
                                ) {
                                  const date = new Date(timestamp * 1000);
                                  const [year, month, day] = date
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                function getTodayInPersian() {
                                  const today = new Date();
                                  const [year, month, day] = today
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                const todayInPersian = getTodayInPersian();
                                const data = {
                                  days: [$state.fragmentDatePicker.values],
                                  property_id: $props.propertyId,
                                  requested_by: "user",
                                  request_for: "reserve"
                                };
                                $state.requestdata = data;
                                data.days = data.days
                                  .map(timestampArray =>
                                    timestampArray
                                      .map(timestamp =>
                                        convertTimestampToPersianDateWithEnglishNumbers(
                                          timestamp
                                        )
                                      )
                                      .filter(day => day >= todayInPersian)
                                  )
                                  .flat();
                                return data;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["setBlock"] != null &&
                typeof $steps["setBlock"] === "object" &&
                typeof $steps["setBlock"].then === "function"
              ) {
                $steps["setBlock"] = await $steps["setBlock"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.platformRequestStatus =
                          $steps.setBlock.data[0]);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateStateVariable2"] =
                $props.calendarType == "lite" && $steps.checkConsecutive
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: ($state.updateStyle = $state.updateStyle + 1)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateStateVariable2"] != null &&
                typeof $steps["updateStateVariable2"] === "object" &&
                typeof $steps["updateStateVariable2"].then === "function"
              ) {
                $steps["updateStateVariable2"] =
                  await $steps["updateStateVariable2"];
              }

              $steps["createAManualReserve"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://gateway.rentamon.com/webhook/reserve/create",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function convertPersianNumbersToEnglish(str) {
                                const persianNumbers = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                const englishNumbers = [
                                  "0",
                                  "1",
                                  "2",
                                  "3",
                                  "4",
                                  "5",
                                  "6",
                                  "7",
                                  "8",
                                  "9"
                                ];

                                return str.replace(
                                  /[۰-۹]/g,
                                  char =>
                                    englishNumbers[persianNumbers.indexOf(char)]
                                );
                              }
                              function padZero(num) {
                                return num.length === 1 ? `0${num}` : num;
                              }
                              function convertTimestampToPersianDate(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                const [year, month, day] = date
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                return formattedDate;
                              }
                              function getTodayInPersian() {
                                const today = new Date();
                                const [year, month, day] = today
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                return formattedDate;
                              }
                              const timestamps =
                                $state.fragmentDatePicker.values;
                              const today = getTodayInPersian();
                              const jalaliDates = timestamps
                                .map(ts => convertTimestampToPersianDate(ts))
                                .filter(date => date >= today)
                                .sort();
                              return {
                                check_in: jalaliDates[0],
                                check_out: jalaliDates[jalaliDates.length - 1],
                                property_id: $props.propertyId
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["createAManualReserve"] != null &&
                typeof $steps["createAManualReserve"] === "object" &&
                typeof $steps["createAManualReserve"].then === "function"
              ) {
                $steps["createAManualReserve"] =
                  await $steps["createAManualReserve"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          console.log($steps.createAManualReserve.data[0].b_id);
                          return ($state.manualReserveBookingId =
                            $steps.createAManualReserve.data[0].b_id);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          >
            <Icon25Icon
              className={classNames(projectcss.all, sty.svg__rXwgE)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zMp0H
              )}
            >
              {"\u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u0645"}
            </div>
          </div>
          <div
            data-plasmic-name={"blockParent"}
            data-plasmic-override={overrides.blockParent}
            className={classNames(projectcss.all, sty.blockParent)}
            onClick={async event => {
              const $steps = {};

              $steps["toast"] = ($props.isFirstVisit ? true : false)
                ? (() => {
                    const actionArgs = {
                      args: [
                        "error",
                        "\u062f\u0631 \u062d\u0627\u0644\u062a \u062a\u0633\u062a \u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647 \u06a9\u0627\u0631 \u0646\u0645\u06cc\u200c\u06a9\u0646\u0647!",
                        "top-center",
                        3000
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["toast"] != null &&
                typeof $steps["toast"] === "object" &&
                typeof $steps["toast"].then === "function"
              ) {
                $steps["toast"] = await $steps["toast"];
              }
            }}
          >
            <div
              data-plasmic-name={"block2"}
              data-plasmic-override={overrides.block2}
              className={classNames(
                projectcss.all,
                sty.block2,
                (() => {
                  try {
                    return $props.isFirstVisit ? "unclickable" : "clickable";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: ($state.block.open = false)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] =
                    await $steps["updateStateVariable"];
                }

                $steps["updateFetchModalOpen"] =
                  $props.calendarType == "pro"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fetchModal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] =
                    await $steps["updateFetchModalOpen"];
                }

                $steps["blockRequest"] = false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function convertPersianNumbersToEnglish(str) {
                              const persianNumbers = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              const englishNumbers = [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                              ];

                              return str.replace(
                                /[۰-۹]/g,
                                char =>
                                  englishNumbers[
                                    persianNumbers.indexOf(char)
                                  ] || char
                              );
                            }
                            function padZero(num) {
                              return num.length === 1 ? `0${num}` : num;
                            }
                            function convertTimestampToPersianDateWithEnglishNumbers(
                              timestamp
                            ) {
                              const date = new Date(timestamp * 1000);
                              const [year, month, day] = date
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                              return formattedDate;
                            }
                            function getTodayInPersian() {
                              const today = new Date();
                              const [year, month, day] = today
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                              return formattedDate;
                            }
                            const todayInPersian = getTodayInPersian();
                            const data = {
                              days: [$state.fragmentDatePicker.values],
                              property_id: $props.propertyId,
                              requested_by: "user",
                              request_for: "block"
                            };
                            $state.requestdata = data;
                            console.log($state.requestdata);
                            console.log(data);
                            data.days = data.days
                              .map(timestampArray =>
                                timestampArray
                                  .map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                  .filter(day => day >= todayInPersian)
                              )
                              .flat();
                            return fetch(
                              "https://api-v2.rentamon.com/api/setblock",
                              {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                  Accept: "*/*"
                                },
                                credentials: "include",
                                body: JSON.stringify(data)
                              }
                            )
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(
                                    `HTTP error! status: ${response.status}`
                                  );
                                }
                                return response.json();
                              })
                              .then(result => {
                                $state.platformRequestStatus = result;
                                console.log("Response saved to state:", result);
                              })
                              .catch(error => {
                                console.error("Error:", error);
                                $state.platformRequestStatus = {
                                  error: error.message
                                };
                              });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["blockRequest"] != null &&
                  typeof $steps["blockRequest"] === "object" &&
                  typeof $steps["blockRequest"].then === "function"
                ) {
                  $steps["blockRequest"] = await $steps["blockRequest"];
                }

                $steps["updateStateVariable2"] =
                  $props.calendarType == "lite"
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.updateStyle = $state.updateStyle + 1)
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateStateVariable2"] != null &&
                  typeof $steps["updateStateVariable2"] === "object" &&
                  typeof $steps["updateStateVariable2"].then === "function"
                ) {
                  $steps["updateStateVariable2"] =
                    await $steps["updateStateVariable2"];
                }

                $steps["setBlock"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/set-block",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function convertPersianNumbersToEnglish(str) {
                                  const persianNumbers = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  const englishNumbers = [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7",
                                    "8",
                                    "9"
                                  ];

                                  return str.replace(
                                    /[۰-۹]/g,
                                    char =>
                                      englishNumbers[
                                        persianNumbers.indexOf(char)
                                      ] || char
                                  );
                                }
                                function padZero(num) {
                                  return num.length === 1 ? `0${num}` : num;
                                }
                                function convertTimestampToPersianDateWithEnglishNumbers(
                                  timestamp
                                ) {
                                  const date = new Date(timestamp * 1000);
                                  const [year, month, day] = date
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                function getTodayInPersian() {
                                  const today = new Date();
                                  const [year, month, day] = today
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                const todayInPersian = getTodayInPersian();
                                const data = {
                                  days: [$state.fragmentDatePicker.values],
                                  property_id: $props.propertyId,
                                  requested_by: "user",
                                  request_for: "block"
                                };
                                $state.requestdata = data;
                                data.days = data.days
                                  .map(timestampArray =>
                                    timestampArray
                                      .map(timestamp =>
                                        convertTimestampToPersianDateWithEnglishNumbers(
                                          timestamp
                                        )
                                      )
                                      .filter(day => day >= todayInPersian)
                                  )
                                  .flat();
                                return data;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["setBlock"] != null &&
                  typeof $steps["setBlock"] === "object" &&
                  typeof $steps["setBlock"].then === "function"
                ) {
                  $steps["setBlock"] = await $steps["setBlock"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.platformRequestStatus =
                            $steps.setBlock.data[0]);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["toast"] = ($props.isFirstVisit ? true : false)
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u062f\u0631 \u062d\u0627\u0644\u062a \u062a\u0633\u062a \u0627\u06cc\u0646 \u06af\u0632\u06cc\u0646\u0647 \u06a9\u0627\u0631 \u0646\u0645\u06cc\u200c\u06a9\u0646\u0647!",
                          "top-center",
                          3000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["toast"] != null &&
                  typeof $steps["toast"] === "object" &&
                  typeof $steps["toast"].then === "function"
                ) {
                  $steps["toast"] = await $steps["toast"];
                }
              }}
            >
              <Icon24Icon
                className={classNames(projectcss.all, sty.svg__qX63H)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mdH8C
                )}
              >
                {
                  "\u0641\u0639\u0644\u0627 \u0627\u062c\u0627\u0631\u0647 \u0646\u0645\u06cc\u200c\u062f\u0645"
                }
              </div>
            </div>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"noteModal"}
          data-plasmic-override={overrides.noteModal}
          className={classNames("__wab_instance", sty.noteModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          modalScopeClassName={sty["noteModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["noteModal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["noteModal", "open"])}
          title={null}
          trigger={null}
          width={"320"}
        >
          <div className={classNames(projectcss.all, sty.freeBox___6V5Wl)}>
            <div className={classNames(projectcss.all, sty.freeBox__a6Kcp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zboTv
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        const notesAndTimestamps =
                          $state.apiRequest.data[2].notesAndTimestamps;
                        const selectedTimestamp = $state.dateProp.unix;
                        function timestampToDateString(timestamp) {
                          if (!timestamp || isNaN(parseInt(timestamp, 10))) {
                            return null;
                          }
                          const date = new Date(parseInt(timestamp, 10) * 1000);
                          if (isNaN(date.getTime())) {
                            return null;
                          }
                          return date.toISOString().split("T")[0];
                        }
                        const selectedDate =
                          timestampToDateString(selectedTimestamp);
                        if (!selectedDate) {
                          console.error(
                            "Selected timestamp is invalid:",
                            selectedTimestamp
                          );
                          return [];
                        }
                        const filteredNotes = notesAndTimestamps.filter(
                          noteItem => {
                            const noteDate = timestampToDateString(
                              noteItem.timestamps
                            );
                            return noteDate === selectedDate;
                          }
                        );
                        return filteredNotes[0].noteText;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u06cc\u0627\u062f\u062f\u0627\u0634\u062a \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__vmF2V)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateNoteModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["noteModal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNoteModalOpen"] != null &&
                    typeof $steps["updateNoteModalOpen"] === "object" &&
                    typeof $steps["updateNoteModalOpen"].then === "function"
                  ) {
                    $steps["updateNoteModalOpen"] =
                      await $steps["updateNoteModalOpen"];
                  }

                  $steps["updateUpdateNoteModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["updateNoteModal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUpdateNoteModalOpen"] != null &&
                    typeof $steps["updateUpdateNoteModalOpen"] === "object" &&
                    typeof $steps["updateUpdateNoteModalOpen"].then ===
                      "function"
                  ) {
                    $steps["updateUpdateNoteModalOpen"] =
                      await $steps["updateUpdateNoteModalOpen"];
                  }

                  $steps["updateEditModalText"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          variable: {
                            objRoot: $state,
                            variablePath: ["targetNoteItem"]
                          },
                          value: (() => {
                            $state.targetNoteItem.isUpdate = true;
                            return console.log($state.targetNoteItem);
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEditModalText"] != null &&
                    typeof $steps["updateEditModalText"] === "object" &&
                    typeof $steps["updateEditModalText"].then === "function"
                  ) {
                    $steps["updateEditModalText"] =
                      await $steps["updateEditModalText"];
                  }
                }}
                src={{
                  src: "/plasmic/website_starter/images/image43.svg",
                  fullWidth: 39,
                  fullHeight: 39,
                  aspectRatio: 1
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__rtY8D)} />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cOjQh)}>
            <Button
              className={classNames("__wab_instance", sty.button__n4Dfb)}
              onClick={async event => {
                const $steps = {};

                $steps["updateNoteModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["noteModal", "open"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNoteModalOpen"] != null &&
                  typeof $steps["updateNoteModalOpen"] === "object" &&
                  typeof $steps["updateNoteModalOpen"].then === "function"
                ) {
                  $steps["updateNoteModalOpen"] =
                    await $steps["updateNoteModalOpen"];
                }
              }}
              shape={"rounded"}
            >
              {"\u0628\u0627\u0632\u06af\u0634\u062a"}
            </Button>
            <AntdButton
              className={classNames("__wab_instance", sty.button___127Wb)}
              danger={false}
              loading={false}
              onClick={async () => {
                const $steps = {};

                $steps["updateNoteModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["noteModal", "open"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateNoteModalOpen"] != null &&
                  typeof $steps["updateNoteModalOpen"] === "object" &&
                  typeof $steps["updateNoteModalOpen"].then === "function"
                ) {
                  $steps["updateNoteModalOpen"] =
                    await $steps["updateNoteModalOpen"];
                }
              }}
              size={"medium"}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7CsO1
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a"}
              </div>
            </AntdButton>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"writeNoteModal"}
          data-plasmic-override={overrides.writeNoteModal}
          className={classNames("__wab_instance", sty.writeNoteModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          modalScopeClassName={sty["writeNoteModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["writeNoteModal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["writeNoteModal", "open"])}
          title={null}
          trigger={null}
          width={"320"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ttR90)}>
            <Textarea
              data-plasmic-name={"textarea"}
              data-plasmic-override={overrides.textarea}
              className={classNames("__wab_instance", sty.textarea)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["textarea", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={
                "\u0627\u06cc\u0646\u062c\u0627 \u0628\u0646\u0648\u06cc\u0633..."
              }
              value={generateStateValueProp($state, ["textarea", "value"])}
            />

            <Button
              className={classNames("__wab_instance", sty.button__k7Fjt)}
              onClick={async event => {
                const $steps = {};

                $steps["sendData"] =
                  $state.textarea.value != ""
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/sendNote?prop_id=1",
                            undefined,
                            (() => {
                              try {
                                return {
                                  value: $state.textarea.value,
                                  date: $state.dateProp.unix,
                                  prop_id: $props.propertyId
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["sendData"] != null &&
                  typeof $steps["sendData"] === "object" &&
                  typeof $steps["sendData"].then === "function"
                ) {
                  $steps["sendData"] = await $steps["sendData"];
                }

                $steps["updateFront"] =
                  $state.textarea.value != ""
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: (() => {
                            let data = {
                              noteText: $state.textarea.value,
                              timestamps: $state.dateProp.unix
                            };
                            $state.apiRequest.data[1].calendar[
                              $state.dateProp.date.day - 1
                            ].isnoted = true;
                            return $state.apiRequest.data[2].notesAndTimestamps.push(
                              data
                            );
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateFront"] != null &&
                  typeof $steps["updateFront"] === "object" &&
                  typeof $steps["updateFront"].then === "function"
                ) {
                  $steps["updateFront"] = await $steps["updateFront"];
                }

                $steps["closeWriteNoteModal"] =
                  $state.textarea.value != ""
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["writeNoteModal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["closeWriteNoteModal"] != null &&
                  typeof $steps["closeWriteNoteModal"] === "object" &&
                  typeof $steps["closeWriteNoteModal"].then === "function"
                ) {
                  $steps["closeWriteNoteModal"] =
                    await $steps["closeWriteNoteModal"];
                }

                $steps["updateTextareaValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["textarea", "value"]
                        },
                        operation: 0,
                        value: ($state.textarea.value = "")
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTextareaValue"] != null &&
                  typeof $steps["updateTextareaValue"] === "object" &&
                  typeof $steps["updateTextareaValue"].then === "function"
                ) {
                  $steps["updateTextareaValue"] =
                    await $steps["updateTextareaValue"];
                }
              }}
            >
              {"\u062b\u0628\u062a \u06cc\u0627\u062f\u062f\u0627\u0634\u062a"}
            </Button>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"updateNoteModal"}
          data-plasmic-override={overrides.updateNoteModal}
          className={classNames("__wab_instance", sty.updateNoteModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          modalScopeClassName={sty["updateNoteModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "updateNoteModal",
              "open"
            ]).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["updateNoteModal", "open"])}
          title={null}
          trigger={null}
          width={"320"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eFkPu)}>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.textarea2),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textarea2",
                    "value"
                  ]).apply(null, eventArgs);
                },
                placeholder:
                  "\u0627\u06cc\u0646\u062c\u0627 \u0628\u0646\u0648\u06cc\u0633...",
                value: generateStateValueProp($state, ["textarea2", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "textarea2.value"
                  }
                ],
                [],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "textarea2.value",
                    initFunc: ({ $props, $state, $queries }) =>
                      hasVariant(globalVariants, "screen", "mobile")
                        ? (() => {
                            try {
                              return (() => {
                                const notesAndTimestamps =
                                  $state.apiRequest.data[2].notesAndTimestamps;
                                const selectedTimestamp = $state.dateProp.unix;
                                function timestampToDateString(timestamp) {
                                  if (
                                    !timestamp ||
                                    isNaN(parseInt(timestamp, 10))
                                  ) {
                                    return null;
                                  }
                                  const date = new Date(
                                    parseInt(timestamp, 10) * 1000
                                  );
                                  if (isNaN(date.getTime())) {
                                    return null;
                                  }
                                  return date.toISOString().split("T")[0];
                                }
                                const selectedDate =
                                  timestampToDateString(selectedTimestamp);
                                if (!selectedDate) {
                                  return [];
                                }
                                const filteredNotes = notesAndTimestamps.filter(
                                  noteItem => {
                                    const noteDate = timestampToDateString(
                                      noteItem.timestamps
                                    );
                                    return noteDate === selectedDate;
                                  }
                                );
                                return filteredNotes[0].noteText;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (() => {
                                const notesAndTimestamps =
                                  $state.apiRequest.data[2].notesAndTimestamps;
                                const selectedTimestamp = $state.dateProp.unix;
                                function timestampToDateString(timestamp) {
                                  if (
                                    !timestamp ||
                                    isNaN(parseInt(timestamp, 10))
                                  ) {
                                    return null;
                                  }
                                  const date = new Date(
                                    parseInt(timestamp, 10) * 1000
                                  );
                                  if (isNaN(date.getTime())) {
                                    return null;
                                  }
                                  return date.toISOString().split("T")[0];
                                }
                                const selectedDate =
                                  timestampToDateString(selectedTimestamp);
                                if (!selectedDate) {
                                  console.error(
                                    "Selected timestamp is invalid:",
                                    selectedTimestamp
                                  );
                                  return [];
                                }
                                const filteredNotes = notesAndTimestamps.filter(
                                  noteItem => {
                                    const noteDate = timestampToDateString(
                                      noteItem.timestamps
                                    );
                                    return noteDate === selectedDate;
                                  }
                                );
                                return filteredNotes[0].noteText;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                  }
                ],
                []
              );
              return (
                <Textarea
                  data-plasmic-name={"textarea2"}
                  data-plasmic-override={overrides.textarea2}
                  {...child$Props}
                />
              );
            })()}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ueWaN
              )}
            >
              {"Enter some text"}
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__oseOj)}
              onClick={async event => {
                const $steps = {};

                $steps["updateFront"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          let data = {
                            noteText: $state.textarea2.value,
                            timestamps: $state.dateProp.unix
                          };
                          let targetDate = new Date(data.timestamps * 1000);
                          let targetItem =
                            $state.apiRequest.data[2].notesAndTimestamps.find(
                              item => {
                                let itemDate = new Date(item.timestamps * 1000);
                                return (
                                  itemDate.getFullYear() ===
                                    targetDate.getFullYear() &&
                                  itemDate.getMonth() ===
                                    targetDate.getMonth() &&
                                  itemDate.getDate() === targetDate.getDate()
                                );
                              }
                            );
                          $state.targetNoteItem = targetItem;
                          if (targetItem) {
                            if ($state.textarea2.value !== "") {
                              targetItem.noteText = data.noteText;
                              return console.log("Note updated successfully.");
                            } else {
                              let index =
                                $state.apiRequest.data[2].notesAndTimestamps.findIndex(
                                  item => item.id === $state.targetNoteItem.id
                                );
                              if (index !== -1) {
                                let updatedNotes = [
                                  ...$state.apiRequest.data[2]
                                    .notesAndTimestamps
                                ];
                                updatedNotes.splice(index, 1);
                                $state.apiRequest.data[2].notesAndTimestamps =
                                  updatedNotes;
                                console.log("Note deleted successfully.");
                                let calendarItem =
                                  $state.apiRequest.data[1].calendar.find(
                                    item => {
                                      let itemDate = new Date(item.date);
                                      return (
                                        itemDate.getFullYear() ===
                                          targetDate.getFullYear() &&
                                        itemDate.getMonth() ===
                                          targetDate.getMonth() &&
                                        itemDate.getDate() ===
                                          targetDate.getDate()
                                      );
                                    }
                                  );
                                if (calendarItem) {
                                  calendarItem.isnoted = false;
                                  return console.log(
                                    "isNoted set to false for the specified date."
                                  );
                                } else {
                                  return console.log(
                                    "No matching date found in the calendar."
                                  );
                                }
                              } else {
                                return console.log("Item not found.");
                              }
                            }
                          } else {
                            return console.log(
                              "No matching date found in notesAndTimestamps."
                            );
                          }
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFront"] != null &&
                  typeof $steps["updateFront"] === "object" &&
                  typeof $steps["updateFront"].then === "function"
                ) {
                  $steps["updateFront"] = await $steps["updateFront"];
                }

                $steps["sendData"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/updateNote",
                          undefined,
                          (() => {
                            try {
                              return {
                                value: $state.textarea2.value,
                                date: $state.dateProp.unix,
                                prop_id: $props.propertyId,
                                id: $state.targetNoteItem.id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["sendData"] != null &&
                  typeof $steps["sendData"] === "object" &&
                  typeof $steps["sendData"].then === "function"
                ) {
                  $steps["sendData"] = await $steps["sendData"];
                }

                $steps["closeWriteNoteModal"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["updateNoteModal", "open"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["closeWriteNoteModal"] != null &&
                  typeof $steps["closeWriteNoteModal"] === "object" &&
                  typeof $steps["closeWriteNoteModal"].then === "function"
                ) {
                  $steps["closeWriteNoteModal"] =
                    await $steps["closeWriteNoteModal"];
                }

                $steps["updateTextareaValue"] = false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["textarea2", "value"]
                        },
                        operation: 0,
                        value: ($state.textarea2.value = "")
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTextareaValue"] != null &&
                  typeof $steps["updateTextareaValue"] === "object" &&
                  typeof $steps["updateTextareaValue"].then === "function"
                ) {
                  $steps["updateTextareaValue"] =
                    await $steps["updateTextareaValue"];
                }
              }}
            >
              {"\u062b\u0628\u062a \u06cc\u0627\u062f\u062f\u0627\u0634\u062a"}
            </Button>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"checkForChange"}
          data-plasmic-override={overrides.checkForChange}
          className={classNames("__wab_instance", sty.checkForChange)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          modalScopeClassName={sty["checkForChange__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["checkForChange", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["checkForChange", "open"])}
          title={null}
          trigger={null}
          width={"320"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z6Y9
            )}
          >
            {
              "\u0628\u0627\u0632\u0647\u200c\u0627\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc \u0627\u0632 \u06cc\u06a9 \u0633\u0627\u06cc\u062a \u0631\u0632\u0631\u0648 \u0634\u062f\u0647!"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rq0Dv
            )}
          >
            {
              "\u0645\u0637\u0645\u0626\u0646\u06cc \u0645\u06cc\u062e\u0648\u0627\u06cc \u062a\u0648\u06cc \u0628\u0642\u06cc\u0647 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0627\u06cc\u0646 \u0628\u0627\u0632\u0647 \u0632\u0645\u0627\u0646\u06cc \u00ab\u062e\u0627\u0644\u06cc\u00bb \u0628\u0634\u0647\u061f"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___6PyMi)}>
            <div
              data-plasmic-name={"buttonYes"}
              data-plasmic-override={overrides.buttonYes}
              className={classNames(projectcss.all, sty.buttonYes, "clickable")}
              onClick={async event => {
                const $steps = {};

                $steps["updateCheckForChangeOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["checkForChange", "open"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCheckForChangeOpen"] != null &&
                  typeof $steps["updateCheckForChangeOpen"] === "object" &&
                  typeof $steps["updateCheckForChangeOpen"].then === "function"
                ) {
                  $steps["updateCheckForChangeOpen"] =
                    await $steps["updateCheckForChangeOpen"];
                }

                $steps["updateFetchModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["fetchModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] =
                    await $steps["updateFetchModalOpen"];
                }

                $steps["runCode"] = false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function convertPersianNumbersToEnglish(str) {
                              const persianNumbers = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              const englishNumbers = [
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9"
                              ];

                              return str.replace(
                                /[۰-۹]/g,
                                char =>
                                  englishNumbers[
                                    persianNumbers.indexOf(char)
                                  ] || char
                              );
                            }
                            function padZero(num) {
                              return num.length === 1 ? `0${num}` : num;
                            }
                            function convertTimestampToPersianDateWithEnglishNumbers(
                              timestamp
                            ) {
                              const date = new Date(timestamp * 1000);
                              const [year, month, day] = date
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                              return formattedDate;
                            }
                            function getTodayInPersian() {
                              const today = new Date();
                              const [year, month, day] = today
                                .toLocaleDateString("fa")
                                .split("/");
                              const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                              return formattedDate;
                            }
                            const todayInPersian = getTodayInPersian();
                            const data = {
                              days: [$state.fragmentDatePicker.values],
                              property_id: $props.propertyId
                            };
                            $state.requestdata = data;
                            data.days = data.days
                              .map(timestampArray =>
                                timestampArray
                                  .map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                  .filter(day => day >= todayInPersian)
                              )
                              .flat();
                            fetch(
                              "https://api-v2.rentamon.com/api/setunblock",
                              {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                  Accept: "*/*"
                                },
                                credentials: "include",
                                body: JSON.stringify(data)
                              }
                            )
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(
                                    `HTTP error! status: ${response.status}`
                                  );
                                }
                                return response.json();
                              })
                              .then(result => {
                                $state.platformRequestStatus = result;
                                console.log("Response saved to state:", result);
                              })
                              .catch(error => {
                                console.error("Error:", error);
                                $state.platformRequestStatus = {
                                  error: error.message
                                };
                              });
                            return console.log(data);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["setUnblock"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/set-unblock",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function convertPersianNumbersToEnglish(str) {
                                  const persianNumbers = [
                                    "۰",
                                    "۱",
                                    "۲",
                                    "۳",
                                    "۴",
                                    "۵",
                                    "۶",
                                    "۷",
                                    "۸",
                                    "۹"
                                  ];

                                  const englishNumbers = [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7",
                                    "8",
                                    "9"
                                  ];

                                  return str.replace(
                                    /[۰-۹]/g,
                                    char =>
                                      englishNumbers[
                                        persianNumbers.indexOf(char)
                                      ] || char
                                  );
                                }
                                function padZero(num) {
                                  return num.length === 1 ? `0${num}` : num;
                                }
                                function convertTimestampToPersianDateWithEnglishNumbers(
                                  timestamp
                                ) {
                                  const date = new Date(timestamp * 1000);
                                  const [year, month, day] = date
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                function getTodayInPersian() {
                                  const today = new Date();
                                  const [year, month, day] = today
                                    .toLocaleDateString("fa")
                                    .split("/");
                                  const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                  return formattedDate;
                                }
                                const todayInPersian = getTodayInPersian();
                                const data = {
                                  days: [$state.fragmentDatePicker.values],
                                  property_id: $props.propertyId
                                };
                                $state.requestdata = data;
                                data.days = data.days
                                  .map(timestampArray =>
                                    timestampArray
                                      .map(timestamp =>
                                        convertTimestampToPersianDateWithEnglishNumbers(
                                          timestamp
                                        )
                                      )
                                      .filter(day => day >= todayInPersian)
                                  )
                                  .flat();
                                return data;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["setUnblock"] != null &&
                  typeof $steps["setUnblock"] === "object" &&
                  typeof $steps["setUnblock"].then === "function"
                ) {
                  $steps["setUnblock"] = await $steps["setUnblock"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.platformRequestStatus =
                            $steps.setUnblock.data[0]);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://gateway.rentamon.com/webhook/reservations/cancelation",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                const bookingIds = ($state.selectedItem ?? [])
                                  .map(item => item.booking_id)
                                  .filter(id => id != null);
                                return { dates: [...new Set(bookingIds)] };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lC25A
                )}
              >
                {"\u0628\u0644\u0647"}
              </div>
            </div>
            <AntdButton
              className={classNames("__wab_instance", sty.button___1P4WZ)}
              danger={false}
              loading={false}
              onClick={async () => {
                const $steps = {};

                $steps["updateCheckForChangeOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["checkForChange", "open"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCheckForChangeOpen"] != null &&
                  typeof $steps["updateCheckForChangeOpen"] === "object" &&
                  typeof $steps["updateCheckForChangeOpen"].then === "function"
                ) {
                  $steps["updateCheckForChangeOpen"] =
                    await $steps["updateCheckForChangeOpen"];
                }
              }}
              size={"medium"}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i0MRw
                )}
              >
                {"\u0646\u0647"}
              </div>
            </AntdButton>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"newDiscountModal"}
          data-plasmic-override={overrides.newDiscountModal}
          className={classNames("__wab_instance", sty.newDiscountModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames
          )}
          hideFooter={true}
          modalScopeClassName={sty["newDiscountModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "newDiscountModal",
              "open"
            ]).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["newDiscountModal", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__wmdTn)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Qf8W
                )}
              >
                {
                  "\u062f\u0631\u0635\u062f \u062a\u062e\u0641\u06cc\u0641\ud83d\udd25\u0631\u0648 \u0645\u0634\u062e\u0635 \u06a9\u0646\n"
                }
              </div>
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__oba8E)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateNewDiscountModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["newDiscountModal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNewDiscountModalOpen"] != null &&
                    typeof $steps["updateNewDiscountModalOpen"] === "object" &&
                    typeof $steps["updateNewDiscountModalOpen"].then ===
                      "function"
                  ) {
                    $steps["updateNewDiscountModalOpen"] =
                      await $steps["updateNewDiscountModalOpen"];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            </div>
          }
          trigger={null}
          width={"320"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jc3Yw)}>
            <div className={classNames(projectcss.all, sty.freeBox___54V1K)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__f3Cg9,
                  (() => {
                    try {
                      return (() => {
                        const timestamps = $state.fragmentDatePicker.values;
                        const dates = timestamps.map(timestamp => {
                          const date = new Date(timestamp * 1000);
                          return date.toISOString().split("T")[0];
                        });
                        const calendar = $state.apiRequest.data[1].calendar;
                        const result = dates.some(date => {
                          const item = calendar.find(
                            entry => entry.date === date
                          );
                          return item && item.price === null;
                        });
                        return result ? "fake-disabled" : "";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: (() => {
                            const timestamps = $state.fragmentDatePicker.values;
                            const dates = timestamps.map(timestamp => {
                              const date = new Date(timestamp * 1000);
                              return date.toISOString().split("T")[0];
                            });
                            const calendar = $state.apiRequest.data[1].calendar;
                            const result = dates.some(date => {
                              const item = calendar.find(
                                entry => entry.date === date
                              );
                              return item && item.price === null;
                            });
                            if (!result) {
                              if (Number($state.textInput4.value) === 0) {
                                $state.textInput4.value = 10;
                              } else if (Number($state.textInput4.value) < 70) {
                                $state.textInput4.value =
                                  (Number($state.textInput4.value) || 0) + 5;
                              }
                            }
                            return result;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gjuY
                  )}
                >
                  {"+"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rcFs7)}>
                <TextInput
                  data-plasmic-name={"textInput4"}
                  data-plasmic-override={overrides.textInput4}
                  className={classNames("__wab_instance", sty.textInput4)}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput4",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={" \u06f0"}
                  type={"number"}
                  value={
                    generateStateValueProp($state, ["textInput4", "value"]) ??
                    ""
                  }
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__gSjKe,
                  (() => {
                    try {
                      return (() => {
                        const timestamps = $state.fragmentDatePicker.values;
                        const dates = timestamps.map(timestamp => {
                          const date = new Date(timestamp * 1000);
                          return date.toISOString().split("T")[0];
                        });
                        const calendar = $state.apiRequest.data[1].calendar;
                        const result = dates.some(date => {
                          const item = calendar.find(
                            entry => entry.date === date
                          );
                          return item && item.price === null;
                        });
                        return result ? "fake-disabled" : "";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "undefined";
                      }
                      throw e;
                    }
                  })()
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: (() => {
                            const timestamps = $state.fragmentDatePicker.values;
                            const dates = timestamps.map(timestamp => {
                              const date = new Date(timestamp * 1000);
                              return date.toISOString().split("T")[0];
                            });
                            const calendar = $state.apiRequest.data[1].calendar;
                            const result = dates.some(date => {
                              const item = calendar.find(
                                entry => entry.date === date
                              );
                              return item && item.price === null;
                            });
                            if (!result) {
                              if (Number($state.textInput4.value) === 0) {
                              } else if (
                                Number($state.textInput4.value) === 10
                              ) {
                                $state.textInput4.value = 0;
                              } else {
                                $state.textInput4.value =
                                  Number($state.textInput4.value) - 5;
                              }
                            }
                            return result;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hzjVn
                  )}
                >
                  {"-"}
                </div>
              </div>
            </div>
            {(() => {
              try {
                return (() => {
                  function checkAllItemsHaveSameOriginalPrice(items) {
                    if (!items || items.length === 0) return false;
                    let firstItem = items[0];
                    let firstOriginalPrice =
                      firstItem.discount_percentage &&
                      firstItem.discount_percentage > 0
                        ? firstItem.price /
                          (1 - firstItem.discount_percentage / 100)
                        : firstItem.price;
                    for (let i = 1; i < items.length; i++) {
                      let item = items[i];
                      let originalPrice =
                        item.discount_percentage && item.discount_percentage > 0
                          ? item.price / (1 - item.discount_percentage / 100)
                          : item.price;
                      if (originalPrice !== firstOriginalPrice) {
                        return false;
                      }
                    }
                    return true;
                  }
                  const items = $state.selectedItem;
                  const result = checkAllItemsHaveSameOriginalPrice(items);
                  return result;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___4DQqs)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kmoyU
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          function groupDigits(str) {
                            return str.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                          }
                          function convertEnglishDigitsToPersian(str) {
                            const persianDigits = [
                              "۰",
                              "۱",
                              "۲",
                              "۳",
                              "۴",
                              "۵",
                              "۶",
                              "۷",
                              "۸",
                              "۹"
                            ];

                            return str.replace(/\d/g, d => persianDigits[d]);
                          }
                          function formatNumberToPersian(number) {
                            let flooredNumber = Math.floor(number);
                            let numStr = flooredNumber.toString();
                            let groupedStr = groupDigits(numStr);
                            return convertEnglishDigitsToPersian(groupedStr);
                          }
                          function convertPersianToInt(str) {
                            const persianNumbers = [
                              "۰",
                              "۱",
                              "۲",
                              "۳",
                              "۴",
                              "۵",
                              "۶",
                              "۷",
                              "۸",
                              "۹"
                            ];

                            for (let i = 0; i < 10; i++) {
                              str = str.replace(
                                new RegExp(persianNumbers[i], "g"),
                                i
                              );
                            }
                            str = str.replace(/[^0-9]/g, "");
                            return parseInt(str, 10);
                          }
                          let discountedPrice =
                            convertPersianToInt($state.selectedItem[0].price) *
                            1000;
                          let discountPercentage =
                            $state.selectedItem[0].discount_percentage;
                          let originalPrice =
                            discountedPrice / (1 - discountPercentage / 100);
                          let formattedOriginalPrice =
                            formatNumberToPersian(originalPrice);
                          return formattedOriginalPrice;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rHggX)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Fv2V)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x05W1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "%" + $state.textInput4.value.toLocaleString("fa")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "15\u066a ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aGd7P
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "=";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dYhl
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          function groupDigits(str) {
                            return str.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                          }
                          function convertEnglishDigitsToPersian(str) {
                            const persianDigits = [
                              "۰",
                              "۱",
                              "۲",
                              "۳",
                              "۴",
                              "۵",
                              "۶",
                              "۷",
                              "۸",
                              "۹"
                            ];

                            return str.replace(/\d/g, d => persianDigits[d]);
                          }
                          function formatNumberToPersian(number) {
                            let flooredNumber = Math.floor(number);
                            let numStr = flooredNumber.toString();
                            let groupedStr = groupDigits(numStr);
                            return convertEnglishDigitsToPersian(groupedStr);
                          }
                          function convertPersianToInt(str) {
                            const persianNumbers = [
                              "۰",
                              "۱",
                              "۲",
                              "۳",
                              "۴",
                              "۵",
                              "۶",
                              "۷",
                              "۸",
                              "۹"
                            ];

                            for (let i = 0; i < 10; i++) {
                              str = str.replace(
                                new RegExp(persianNumbers[i], "g"),
                                i
                              );
                            }
                            str = str.replace(/[^0-9]/g, "");
                            return parseInt(str, 10);
                          }
                          let discountedPrice =
                            convertPersianToInt($state.selectedItem[0].price) *
                            1000;
                          let discountPercentage =
                            $state.selectedItem[0].discount_percentage;
                          let discount = $state.textInput4.value;
                          let originalPrice =
                            discountedPrice / (1 - discountPercentage / 100);
                          const final_price =
                            originalPrice - (originalPrice * discount) / 100;
                          let formattedOriginalPrice =
                            formatNumberToPersian(final_price);
                          return formattedOriginalPrice;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__iqdZr)}>
              {(() => {
                try {
                  return (() => {
                    if ($state.textInput4.value == "5") {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__x830)}>
                  <div className={classNames(projectcss.all, sty.column__v7Dh)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4CxIg
                      )}
                    >
                      {
                        "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u06a9\u0645\u200c\u062a\u0631 \u0627\u0632 \u06f1\u06f0\u066a \u0628\u0631\u0627\u06cc \u0634\u0628 \u0646\u06cc\u0633\u062a"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    if ($state.textInput4.value >= "70") {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__dIl1)}>
                  <div
                    className={classNames(projectcss.all, sty.column__xC5Cy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3SeU6
                      )}
                    >
                      {
                        "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0628\u0627\u0644\u0627\u06cc \u06f7\u06f0\u066a \u0628\u0631\u0627\u06cc \u062c\u0627\u062c\u06cc\u06af\u0627 \u0646\u06cc\u0633\u062a"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    if (
                      $state.textInput4.value % 10 != 0 &&
                      $state.textInput4.value != 0
                    ) {
                      return true;
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.columns___2Lw8W)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__sRhk3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cfq75
                      )}
                    >
                      {
                        "\u062c\u0627\u062c\u06cc\u06af\u0627 \u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u0628\u0631\u0627\u06cc \u0645\u0636\u0631\u0628 5 \u0631\u0627 \u0646\u0645\u06cc\u062f\u0647\u062f"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.textInput4.value == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.columns__lnV0)}>
                  <div
                    className={classNames(projectcss.all, sty.column__cBtlT)}
                  >
                    {(() => {
                      try {
                        return (() => {
                          const timestamps = $state.fragmentDatePicker.values;
                          const dates = timestamps.map(timestamp => {
                            const date = new Date(timestamp * 1000);
                            return date.toISOString().split("T")[0];
                          });
                          const calendar = $state.apiRequest.data[1].calendar;
                          const result = dates.some(date => {
                            const item = calendar.find(
                              entry => entry.date === date
                            );
                            return item && item.price === null;
                          });
                          return !result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kd7Ha
                        )}
                      >
                        {"\u062d\u0630\u0641 \u062a\u062e\u0641\u06cc\u0641"}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (() => {
                          const timestamps = $state.fragmentDatePicker.values;
                          const dates = timestamps.map(timestamp => {
                            const date = new Date(timestamp * 1000);
                            return date.toISOString().split("T")[0];
                          });
                          const calendar = $state.apiRequest.data[1].calendar;
                          const result = dates.some(date => {
                            const item = calendar.find(
                              entry => entry.date === date
                            );
                            return item && item.price === null;
                          });
                          return result;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s5DSb
                        )}
                      >
                        {
                          "\u0627\u0648\u0644 \u0628\u0627\u06cc\u062f \u0642\u06cc\u0645\u062a \u062b\u0628\u062a \u06a9\u0646\u06cc"
                        }
                      </div>
                    ) : null}
                  </div>
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__p7Ty2)}>
              <Button
                className={classNames("__wab_instance", sty.button__ua5K)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateNewDiscountModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["newDiscountModal", "open"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNewDiscountModalOpen"] != null &&
                    typeof $steps["updateNewDiscountModalOpen"] === "object" &&
                    typeof $steps["updateNewDiscountModalOpen"].then ===
                      "function"
                  ) {
                    $steps["updateNewDiscountModalOpen"] =
                      await $steps["updateNewDiscountModalOpen"];
                  }

                  $steps["updateFetchModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fetchModal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFetchModalOpen"] != null &&
                    typeof $steps["updateFetchModalOpen"] === "object" &&
                    typeof $steps["updateFetchModalOpen"].then === "function"
                  ) {
                    $steps["updateFetchModalOpen"] =
                      await $steps["updateFetchModalOpen"];
                  }

                  $steps["runCode"] = false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function convertPersianNumbersToEnglish(str) {
                                const persianNumbers = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                const englishNumbers = [
                                  "0",
                                  "1",
                                  "2",
                                  "3",
                                  "4",
                                  "5",
                                  "6",
                                  "7",
                                  "8",
                                  "9"
                                ];

                                return str.replace(
                                  /[۰-۹]/g,
                                  char =>
                                    englishNumbers[
                                      persianNumbers.indexOf(char)
                                    ] || char
                                );
                              }
                              function padZero(num) {
                                return num.length === 1 ? `0${num}` : num;
                              }
                              function convertTimestampToPersianDateWithEnglishNumbers(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                const [year, month, day] = date
                                  .toLocaleDateString("fa")
                                  .split("/");
                                const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                return formattedDate;
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                discount: String($state.textInput4.value)
                              };
                              $state.requestdata = data;
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDateWithEnglishNumbers(
                                      timestamp
                                    )
                                  )
                                )
                                .flat();
                              return fetch(
                                "https://api-v2.rentamon.com/api/setdiscount",
                                {
                                  method: "POST",
                                  headers: {
                                    "Content-Type": "application/json",
                                    Accept: "*/*"
                                  },
                                  credentials: "include",
                                  body: JSON.stringify(data)
                                }
                              )
                                .then(response => {
                                  if (!response.ok) {
                                    throw new Error(
                                      `HTTP error! status: ${response.status}`
                                    );
                                  }
                                  return response.json();
                                })
                                .then(result => {
                                  $state.platformRequestStatus = result;
                                  console.log(
                                    "Response saved to state:",
                                    result
                                  );
                                })
                                .catch(error => {
                                  console.error("Error:", error);
                                  $state.platformRequestStatus = {
                                    error: error.message
                                  };
                                });
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["setDiscout"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/set-discount",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  function convertPersianNumbersToEnglish(str) {
                                    const persianNumbers = [
                                      "۰",
                                      "۱",
                                      "۲",
                                      "۳",
                                      "۴",
                                      "۵",
                                      "۶",
                                      "۷",
                                      "۸",
                                      "۹"
                                    ];

                                    const englishNumbers = [
                                      "0",
                                      "1",
                                      "2",
                                      "3",
                                      "4",
                                      "5",
                                      "6",
                                      "7",
                                      "8",
                                      "9"
                                    ];

                                    return str.replace(
                                      /[۰-۹]/g,
                                      char =>
                                        englishNumbers[
                                          persianNumbers.indexOf(char)
                                        ] || char
                                    );
                                  }
                                  function padZero(num) {
                                    return num.length === 1 ? `0${num}` : num;
                                  }
                                  function convertTimestampToPersianDateWithEnglishNumbers(
                                    timestamp
                                  ) {
                                    const date = new Date(timestamp * 1000);
                                    const [year, month, day] = date
                                      .toLocaleDateString("fa")
                                      .split("/");
                                    const formattedDate = `${convertPersianNumbersToEnglish(year)}-${padZero(convertPersianNumbersToEnglish(month))}-${padZero(convertPersianNumbersToEnglish(day))}`;
                                    return formattedDate;
                                  }
                                  const data = {
                                    days: [$state.fragmentDatePicker.values],
                                    property_id: $props.propertyId,
                                    discount: String($state.textInput4.value)
                                  };
                                  $state.requestdata = data;
                                  data.days = data.days
                                    .map(timestampArray =>
                                      timestampArray.map(timestamp =>
                                        convertTimestampToPersianDateWithEnglishNumbers(
                                          timestamp
                                        )
                                      )
                                    )
                                    .flat();
                                  return data;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["setDiscout"] != null &&
                    typeof $steps["setDiscout"] === "object" &&
                    typeof $steps["setDiscout"].then === "function"
                  ) {
                    $steps["setDiscout"] = await $steps["setDiscout"];
                  }

                  $steps["runCode2"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.platformRequestStatus =
                              $steps.setDiscout.data[0]);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode2"] != null &&
                    typeof $steps["runCode2"] === "object" &&
                    typeof $steps["runCode2"].then === "function"
                  ) {
                    $steps["runCode2"] = await $steps["runCode2"];
                  }
                }}
              >
                {"\u062b\u0628\u062a "}
              </Button>
            </div>
          </div>
        </AntdModal>
      </div>
      {(
        hasVariant(globalVariants, "screen", "mobile")
          ? (() => {
              try {
                return $props.isFirstVisit === false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : (() => {
              try {
                return $props.isFirstVisit === false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          data-plasmic-name={"guide"}
          data-plasmic-override={overrides.guide}
          className={classNames(projectcss.all, sty.guide)}
        >
          <div
            data-plasmic-name={"block3"}
            data-plasmic-override={overrides.block3}
            className={classNames(projectcss.all, sty.block3)}
          >
            <div
              data-plasmic-name={"color"}
              data-plasmic-override={overrides.color}
              className={classNames(projectcss.all, sty.color)}
            />

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(projectcss.all, sty.text)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tmsAx
                )}
              >
                {
                  "\u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u0628\u0633\u062a\u0647"
                }
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"smartBookings"}
            data-plasmic-override={overrides.smartBookings}
            className={classNames(projectcss.all, sty.smartBookings)}
          >
            <div
              data-plasmic-name={"color2"}
              data-plasmic-override={overrides.color2}
              className={classNames(projectcss.all, sty.color2)}
            />

            <div
              data-plasmic-name={"text2"}
              data-plasmic-override={overrides.text2}
              className={classNames(projectcss.all, sty.text2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hAkWo
                )}
              >
                {
                  "\u0631\u0632\u0631\u0648 \u0647\u0648\u0634\u0645\u0646\u062f"
                }
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"discount"}
            data-plasmic-override={overrides.discount}
            className={classNames(projectcss.all, sty.discount)}
          >
            <div
              data-plasmic-name={"color3"}
              data-plasmic-override={overrides.color3}
              className={classNames(projectcss.all, sty.color3)}
            />

            <div
              data-plasmic-name={"text3"}
              data-plasmic-override={overrides.text3}
              className={classNames(projectcss.all, sty.text3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jjN5U
                )}
              >
                {"\u062a\u062e\u0641\u06cc\u0641"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"note"}
            data-plasmic-override={overrides.note}
            className={classNames(projectcss.all, sty.note)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__erPp)}
              displayHeight={"9px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image187.svg",
                fullWidth: 7,
                fullHeight: 7,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"text4"}
              data-plasmic-override={overrides.text4}
              className={classNames(projectcss.all, sty.text4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vLfvl
                )}
              >
                {"\u06cc\u0627\u062f\u062f\u0627\u0634\u062a"}
              </div>
            </div>
          </div>
        </div>
      ) : null}
      <div
        data-plasmic-name={"submitChange"}
        data-plasmic-override={overrides.submitChange}
        className={classNames(projectcss.all, sty.submitChange)}
      >
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox__tzf5H,
            (() => {
              try {
                return $props.isFirstVisit == true && $state.tourSteps == 1
                  ? "blinkBorderTourGuide clickable"
                  : "clickable";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return (() => {
                      if ($props.reservationsMode == false) {
                        return true;
                      }
                      const items = $state.selectedItem;
                      if (!items || items.length === 0) {
                        return true;
                      }
                      const firstBookingId = items[0].booking_id;
                      if (!firstBookingId) {
                        return true;
                      }
                      return !items.every(
                        item =>
                          item.status === "reserved" &&
                          item.booking_id === firstBookingId
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (() => {
                      if ($props.reservationsMode == false) {
                        return true;
                      }
                      const items = $state.selectedItem;
                      if (!items || items.length === 0) {
                        return true;
                      }
                      const firstBookingId = items[0].booking_id;
                      if (!firstBookingId) {
                        return true;
                      }
                      return !items.every(
                        item =>
                          item.status === "reserved" &&
                          item.booking_id === firstBookingId
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__i6Nfz)}
              onClick={async event => {
                const $steps = {};

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          const startOfToday = new Date();
                          startOfToday.setHours(0, 0, 0, 0);
                          const startOfTodayTimestamp = Math.floor(
                            startOfToday.getTime() / 1000
                          );
                          return ($state.fragmentDatePicker.values =
                            $state.fragmentDatePicker.values.filter(
                              timestamp => {
                                return timestamp >= startOfTodayTimestamp;
                              }
                            ));
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] =
                    await $steps["updateStateVariable"];
                }

                $steps["updateModalOpen"] = (() => {
                  if ($state.fragmentDatePicker.values == 0) {
                    return false;
                  } else {
                    return true;
                  }
                })()
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }

                $steps["invokeGlobalAction"] = (() => {
                  if ($state.fragmentDatePicker.values == 0) {
                    return true;
                  } else {
                    return false;
                  }
                })()
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0627\u0628\u062a\u062f\u0627 \u06cc\u06a9 \u0631\u0648\u0632 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u060c \u0628\u0639\u062f \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647\u200c\u06cc \u0648\u06cc\u0631\u0627\u06cc\u0634 \u0628\u0632\u0646",
                          "top-center",
                          3000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] =
                    await $steps["invokeGlobalAction"];
                }

                $steps["updateStateVariable2"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.textInput4.value = "0";
                          $state.guestName.value = "";
                          $state.guestCount.value = null;
                          $state.guestReferrer.value = "";
                          $state.phoneNumber.value = "";
                          $state.input2.value = "";
                          return ($state.input.value = "");
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable2"] != null &&
                  typeof $steps["updateStateVariable2"] === "object" &&
                  typeof $steps["updateStateVariable2"].then === "function"
                ) {
                  $steps["updateStateVariable2"] =
                    await $steps["updateStateVariable2"];
                }

                $steps["updateTourSteps"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["tourSteps"]
                        },
                        operation: 0,
                        value:
                          $state.tourSteps == 1
                            ? ($state.tourSteps = 2)
                            : ($state.tourSteps = 0)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTourSteps"] != null &&
                  typeof $steps["updateTourSteps"] === "object" &&
                  typeof $steps["updateTourSteps"].then === "function"
                ) {
                  $steps["updateTourSteps"] = await $steps["updateTourSteps"];
                }
              }}
              startIcon={null}
            >
              <div className={classNames(projectcss.all, sty.freeBox__gfJ2G)}>
                {(() => {
                  try {
                    return (() => {
                      if ($state.apiRequest.loading == true) {
                        return true;
                      } else {
                        return false;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__y6XZv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "40px"
                        : "30px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image140.gif",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__smHiJ
                  )}
                >
                  {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                </div>
              </div>
            </Button>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? (() => {
                  try {
                    return (() => {
                      if ($props.reservationsMode == false) {
                        return false;
                      }
                      const items = $state.selectedItem;
                      if (!items || items.length === 0) {
                        return false;
                      }
                      const firstBookingId = items[0].booking_id;
                      if (!firstBookingId) {
                        return false;
                      }
                      return items.every(
                        item =>
                          item.status === "reserved" &&
                          item.booking_id === firstBookingId
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (() => {
                      const items = $state.selectedItem;
                      if (!items || items.length === 0) {
                        return false;
                      }
                      const firstBookingId = items[0].booking_id;
                      if (!firstBookingId) {
                        return false;
                      }
                      return items.every(
                        item =>
                          item.status === "reserved" &&
                          item.booking_id === firstBookingId
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Button
              data-plasmic-name={"visitBookings"}
              data-plasmic-override={overrides.visitBookings}
              className={classNames("__wab_instance", sty.visitBookings)}
              onClick={async event => {
                const $steps = {};

                $steps["goToBookings"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/bookings/${(() => {
                          try {
                            return $state.selectedItem[0].booking_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToBookings"] != null &&
                  typeof $steps["goToBookings"] === "object" &&
                  typeof $steps["goToBookings"].then === "function"
                ) {
                  $steps["goToBookings"] = await $steps["goToBookings"];
                }
              }}
              startIcon={null}
            >
              <div className={classNames(projectcss.all, sty.freeBox__oDyn)}>
                {(() => {
                  try {
                    return (() => {
                      if ($state.apiRequest.loading == true) {
                        return true;
                      } else {
                        return false;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__x1JtJ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "40px"
                        : "30px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/website_starter/images/image140.gif",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__or8Ep
                  )}
                >
                  {
                    "\u062c\u0632\u06cc\u06cc\u0627\u062a \u0631\u0632\u0631\u0648"
                  }
                </div>
              </div>
            </Button>
          ) : null}
        </div>
      </div>
      <AntdModal
        data-plasmic-name={"addingGuestInfo"}
        data-plasmic-override={overrides.addingGuestInfo}
        className={classNames("__wab_instance", sty.addingGuestInfo)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        hideFooter={true}
        modalScopeClassName={sty["addingGuestInfo__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["addingGuestInfo", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["addingGuestInfo", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox___4Q9G9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f6HTx
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "\u062b\u0628\u062a \u062f\u0633\u062a\u06cc \u0631\u0632\u0631\u0648"
                : "\u062b\u0628\u062a \u062f\u0633\u062a\u06cc \u0631\u0632\u0631\u0648"}
            </div>
            <Icon23Icon
              className={classNames(projectcss.all, sty.svg__gacl0)}
              onClick={async event => {
                const $steps = {};

                $steps["updateAddingGuestInfoOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        variable: {
                          objRoot: $state,
                          variablePath: ["addingGuestInfo", "open"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateAddingGuestInfoOpen"] != null &&
                  typeof $steps["updateAddingGuestInfoOpen"] === "object" &&
                  typeof $steps["updateAddingGuestInfoOpen"].then === "function"
                ) {
                  $steps["updateAddingGuestInfoOpen"] =
                    await $steps["updateAddingGuestInfoOpen"];
                }
              }}
              role={"img"}
            />
          </div>
        }
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "tablet") ? "400" : undefined
        }
      >
        <div
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          className={classNames(projectcss.all, sty.form)}
        >
          <div
            data-plasmic-name={"p4"}
            data-plasmic-override={overrides.p4}
            className={classNames(projectcss.all, sty.p4)}
          >
            <div
              data-plasmic-name={"referrer"}
              data-plasmic-override={overrides.referrer}
              className={classNames(projectcss.all, sty.referrer)}
            >
              <Select
                data-plasmic-name={"guestReferrer"}
                data-plasmic-override={overrides.guestReferrer}
                className={classNames("__wab_instance", sty.guestReferrer)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "guestReferrer",
                      "value"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { label: null, value: null },
                    { value: null, label: null },
                    { value: null, label: null }
                  ];
                  __composite["0"]["value"] = "Returning_Guest";
                  __composite["0"]["label"] =
                    "\u0645\u0633\u0627\u0641\u0631 \u0642\u0628\u0644\u06cc";
                  __composite["1"]["value"] = "divar";
                  __composite["1"]["label"] = "\u062f\u06cc\u0648\u0627\u0631";
                  __composite["2"]["value"] = "Broker or Colleague";
                  __composite["2"]["label"] =
                    "\u0648\u0627\u0633\u0637\u0647 \u06cc\u0627 \u0647\u0645\u06a9\u0627\u0631";
                  __composite["3"]["label"] =
                    "\u067e\u06cc\u0627\u0645\u200c\u0631\u0633\u0627\u0646 \u0648 \u0634\u0628\u06a9\u0647\u200c\u0627\u062c\u062a\u0645\u0627\u0639\u06cc";
                  __composite["3"]["value"] = "social";
                  __composite["4"]["value"] = "offline";
                  __composite["4"]["label"] = "\u062d\u0636\u0648\u0631\u06cc";
                  __composite["5"]["value"] = "others";
                  __composite["5"]["label"] = "\u0633\u0627\u06cc\u0631";
                  return __composite;
                })()}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ov4Tb
                    )}
                  >
                    {"\u0645\u0639\u0631\u0641 \u0645\u0647\u0645\u0627\u0646"}
                  </div>
                }
                value={generateStateValueProp($state, [
                  "guestReferrer",
                  "value"
                ])}
              />
            </div>
            <div
              data-plasmic-name={"count2"}
              data-plasmic-override={overrides.count2}
              className={classNames(projectcss.all, sty.count2)}
            >
              <AntdInputNumber
                data-plasmic-name={"guestCount"}
                data-plasmic-override={overrides.guestCount}
                allowClear={true}
                className={classNames("__wab_instance", sty.guestCount)}
                controls={true}
                max={50}
                min={1}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "guestCount",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0646\u0641\u0631\u0627\u062a"
                    : "\u0646\u0641\u0631\u0627\u062a"
                }
                type={(() => {
                  try {
                    return (() => {
                      return ($state.numberInput2.valid =
                        $state.numberInput2.value >= 1);
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "number";
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, ["guestCount", "value"])}
              />

              <Icon83Icon
                className={classNames(projectcss.all, sty.svg__fQ4Au)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"p3"}
            data-plasmic-override={overrides.p3}
            className={classNames(projectcss.all, sty.p3)}
          >
            <Input
              data-plasmic-name={"input2"}
              data-plasmic-override={overrides.input2}
              className={classNames("__wab_instance", sty.input2)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["input2", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={
                "\u0645\u0628\u0644\u063a \u06a9\u0644 (\u062a\u0648\u0645\u0627\u0646)"
              }
              type={"number"}
              value={generateStateValueProp($state, ["input2", "value"])}
            />

            <AntdInputNumber
              data-plasmic-name={"amount"}
              data-plasmic-override={overrides.amount}
              className={classNames("__wab_instance", sty.amount)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["amount", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={
                "\u0645\u0628\u0644\u063a (\u062a\u0648\u0645\u0627\u0646)"
              }
              type={"number"}
              value={generateStateValueProp($state, ["amount", "value"])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8TE0P
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      function numberToPersian(num) {
                        const units = [
                          "",
                          "یک",
                          "دو",
                          "سه",
                          "چهار",
                          "پنج",
                          "شش",
                          "هفت",
                          "هشت",
                          "نه"
                        ];

                        const tens = [
                          "",
                          "ده",
                          "بیست",
                          "سی",
                          "چهل",
                          "پنجاه",
                          "شصت",
                          "هفتاد",
                          "هشتاد",
                          "نود"
                        ];

                        const teens = [
                          "ده",
                          "یازده",
                          "دوازده",
                          "سیزده",
                          "چهارده",
                          "پانزده",
                          "شانزده",
                          "هفده",
                          "هجده",
                          "نوزده"
                        ];

                        const hundreds = [
                          "",
                          "صد",
                          "دویست",
                          "سیصد",
                          "چهارصد",
                          "پانصد",
                          "ششصد",
                          "هفتصد",
                          "هشتصد",
                          "نهصد"
                        ];

                        const groupNames = ["", "هزار", "میلیون", "میلیارد"];

                        if (num == null || num === "" || num === 0)
                          return "صفر";
                        const splitNumber = n => {
                          const str = n.toString();
                          const len = str.length;
                          if (len <= 3) return [n];
                          const groups = [];
                          let i = len;
                          while (i > 0) {
                            groups.unshift(
                              Number(str.substring(Math.max(0, i - 3), i))
                            );
                            i -= 3;
                          }
                          return groups;
                        };
                        const convertGroup = n => {
                          if (n === 0) return "";
                          const h = Math.floor(n / 100);
                          const t = Math.floor((n % 100) / 10);
                          const u = n % 10;
                          const hundred = hundreds[h];
                          let tenUnit = "";
                          if (t === 1) {
                            tenUnit = teens[u];
                          } else {
                            tenUnit = tens[t] + (u > 0 ? " و " + units[u] : "");
                          }
                          return [hundred, tenUnit]
                            .filter(Boolean)
                            .join(" و ")
                            .trim();
                        };
                        const groups = splitNumber(num);
                        const result = groups
                          .map((g, i) => {
                            const groupText = convertGroup(g);
                            if (groupText) {
                              return (
                                groupText +
                                (groupNames[groups.length - i - 1]
                                  ? " " + groupNames[groups.length - i - 1]
                                  : "")
                              );
                            }
                            return "";
                          })
                          .filter(Boolean)
                          .join(" و ");
                        const finalResult = result.startsWith("و ")
                          ? result.slice(2)
                          : result;
                        return finalResult.trim() + " تومان";
                      }
                      const input = $state.input2?.value || "";
                      const output =
                        input === "" ? "صفر" : numberToPersian(Number(input));
                      return output;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"p1"}
            data-plasmic-override={overrides.p1}
            className={classNames(projectcss.all, sty.p1)}
          >
            <TextInput
              data-plasmic-name={"guestName"}
              data-plasmic-override={overrides.guestName}
              className={classNames("__wab_instance", sty.guestName)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["guestName", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"\u0646\u0627\u0645 \u0645\u0647\u0645\u0627\u0646"}
              value={
                generateStateValueProp($state, ["guestName", "value"]) ?? ""
              }
            />
          </div>
          <div
            data-plasmic-name={"p2"}
            data-plasmic-override={overrides.p2}
            className={classNames(projectcss.all, sty.p2)}
          >
            <TextInput
              data-plasmic-name={"phoneNumber"}
              data-plasmic-override={overrides.phoneNumber}
              className={classNames("__wab_instance", sty.phoneNumber)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["phoneNumber", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"\u0645\u0648\u0628\u0627\u06cc\u0644"}
              required={true}
              type={"number"}
              value={
                generateStateValueProp($state, ["phoneNumber", "value"]) ?? ""
              }
            />

            {(() => {
              try {
                return $state.showMobileError;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__on8JC
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#DC2626" }}
                  >
                    {
                      "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0627\u062c\u0628\u0627\u0631\u06cc\u0633\u062a"
                    }
                  </span>
                </React.Fragment>
              </div>
            ) : null}
          </div>
          <div
            data-plasmic-name={"p5"}
            data-plasmic-override={overrides.p5}
            className={classNames(projectcss.all, sty.p5)}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__gkdW,
                (() => {
                  try {
                    return $props.isFirstVisit == true && $state.tourSteps == 2
                      ? "blinkBorderTourGuide clickable"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              <Button
                className={classNames("__wab_instance", sty.button__g4PNg)}
                isDisabled={undefined}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function toEnglishDigits(str) {
                                const faToEn = {
                                  "۰": "0",
                                  "۱": "1",
                                  "۲": "2",
                                  "۳": "3",
                                  "۴": "4",
                                  "۵": "5",
                                  "۶": "6",
                                  "۷": "7",
                                  "۸": "8",
                                  "۹": "9"
                                };
                                return str.replace(/[۰-۹]/g, ch => faToEn[ch]);
                              }
                              function validateMobile() {
                                let raw = $state.phoneNumber.value || "";
                                const phone = toEnglishDigits(raw.trim());
                                if (phone === "") {
                                  $state.phoneError = "";
                                  $state.showMobileError = false;
                                  return true;
                                }
                                const regex = /^09\d{9}$/;
                                if (!regex.test(phone)) {
                                  if (phone.length !== 11) {
                                    $state.phoneError =
                                      "شماره باید ۱۱ رقم باشد.";
                                  } else if (!phone.startsWith("09")) {
                                    $state.phoneError =
                                      "شماره باید با 09 شروع شود.";
                                  } else {
                                    $state.phoneError = "فرمت شماره صحیح نیست.";
                                  }
                                  $state.showMobileError = true;
                                  return false;
                                }
                                $state.phoneError = "";
                                $state.showMobileError = false;
                                return true;
                              }
                              const isMobileValid = validateMobile();
                              return isMobileValid;
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["invokeGlobalAction4"] = (() => {
                    console.log(!$steps.runCode);
                    return !$steps.runCode;
                  })()
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            (() => {
                              try {
                                return $state.phoneError;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            "top-center"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction4"] != null &&
                    typeof $steps["invokeGlobalAction4"] === "object" &&
                    typeof $steps["invokeGlobalAction4"].then === "function"
                  ) {
                    $steps["invokeGlobalAction4"] =
                      await $steps["invokeGlobalAction4"];
                  }

                  $steps["updateWatingForResponse"] = $steps.runCode
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["watingForResponse"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateWatingForResponse"] != null &&
                    typeof $steps["updateWatingForResponse"] === "object" &&
                    typeof $steps["updateWatingForResponse"].then === "function"
                  ) {
                    $steps["updateWatingForResponse"] =
                      await $steps["updateWatingForResponse"];
                  }

                  $steps["invokeGlobalAction"] = $steps.runCode
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://gateway.rentamon.com/webhook/complete_manual_reserve_data",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  let a = {
                                    guest_name: $state.guestName.value,
                                    phone_number: $state.phoneNumber.value,
                                    amount: $state.input2.value,
                                    referrer: $state.guestReferrer.value,
                                    b_id: $state.manualReserveBookingId,
                                    guest_count: $state.guestCount.value,
                                    property_id: $props.propertyId
                                  };
                                  return a;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] =
                      await $steps["invokeGlobalAction"];
                  }

                  $steps["updateWatingForResponse2"] =
                    $steps.invokeGlobalAction.status != null && $steps.runCode
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["watingForResponse"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateWatingForResponse2"] != null &&
                    typeof $steps["updateWatingForResponse2"] === "object" &&
                    typeof $steps["updateWatingForResponse2"].then ===
                      "function"
                  ) {
                    $steps["updateWatingForResponse2"] =
                      await $steps["updateWatingForResponse2"];
                  }

                  $steps["invokeGlobalAction2"] =
                    $steps.invokeGlobalAction.status == 200 && $steps.runCode
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062b\u0628\u062a \u0634\u062f",
                              "top-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] =
                      await $steps["invokeGlobalAction2"];
                  }

                  $steps["invokeGlobalAction3"] =
                    $steps.invokeGlobalAction.status == 422 && $steps.runCode
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062f\u0631\u0633\u062a \u0646\u06cc\u0633\u062a",
                              "top-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction3"] != null &&
                    typeof $steps["invokeGlobalAction3"] === "object" &&
                    typeof $steps["invokeGlobalAction3"].then === "function"
                  ) {
                    $steps["invokeGlobalAction3"] =
                      await $steps["invokeGlobalAction3"];
                  }

                  $steps["updateAddingGuestInfoOpen"] =
                    $steps.invokeGlobalAction.status != 422 && $steps.runCode
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["addingGuestInfo", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateAddingGuestInfoOpen"] != null &&
                    typeof $steps["updateAddingGuestInfoOpen"] === "object" &&
                    typeof $steps["updateAddingGuestInfoOpen"].then ===
                      "function"
                  ) {
                    $steps["updateAddingGuestInfoOpen"] =
                      await $steps["updateAddingGuestInfoOpen"];
                  }

                  $steps["updateStateVariable"] = $steps.runCode
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: (() => {
                            function convertToEnglishNumber(persianStr = "") {
                              let str = persianStr.replace(/٬/g, "");
                              const faDigits = /[۰-۹]/g;
                              const faMap = "۰۱۲۳۴۵۶۷۸۹";
                              str = str.replace(faDigits, char =>
                                faMap.indexOf(char)
                              );
                              return Number(str);
                            }
                            function formatPriceToPersian(num = 0) {
                              const formatter = new Intl.NumberFormat("fa-IR");
                              return formatter.format(num);
                            }
                            const changedDaysTimestamps =
                              $state.selectedDay || [];
                            const changedDaysDates = changedDaysTimestamps.map(
                              timestamp => {
                                const date = new Date(timestamp * 1000);
                                const year = date.getFullYear();
                                const month = String(
                                  date.getMonth() + 1
                                ).padStart(2, "0");
                                const day = String(date.getDate()).padStart(
                                  2,
                                  "0"
                                );
                                return `${year}-${month}-${day}`;
                              }
                            );
                            const updatedCalendar =
                              $state.apiRequest.data[1].calendar.map(day => {
                                if (changedDaysDates.includes(day.date)) {
                                  return {
                                    ...day,
                                    price: formatPriceToPersian(
                                      $state.input2.value / 1000
                                    ),
                                    website:
                                      $state.guestReferrer.value == "divar"
                                        ? "دیوار"
                                        : $state.guestReferrer.value == "Broker"
                                          ? "واسطه"
                                          : $state.guestReferrer.value ==
                                              "Colleague"
                                            ? "همکار"
                                            : $state.guestReferrer.value ==
                                                "Returning_Guest"
                                              ? "قبلی"
                                              : $state.guestReferrer.value ==
                                                  "social"
                                                ? "پیام‌رسان"
                                                : $state.guestReferrer.value ==
                                                    "offline"
                                                  ? "حضوری"
                                                  : $state.guestReferrer
                                                        .value ==
                                                      "Broker or Colleague"
                                                    ? "واسطه"
                                                    : "سایر",
                                    guest_name: $state.guestName.value
                                  };
                                }
                                return day;
                              });
                            return ($state.apiRequest.data[1].calendar =
                              updatedCalendar);
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] =
                      await $steps["updateStateVariable"];
                  }

                  $steps["updateTourSteps"] =
                    $props.isFirstVisit == true && $steps.runCode
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["tourSteps"]
                            },
                            operation: 0,
                            value: (() => {
                              document
                                .querySelectorAll(".side_bar_border")
                                .forEach(el => {
                                  el.style.animation =
                                    "blinkBorderTourGuide 0.5s infinite";
                                });
                              return $state.tourSteps == 2
                                ? ($state.tourSteps = 5)
                                : ($state.tourSteps = 2);
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateTourSteps"] != null &&
                    typeof $steps["updateTourSteps"] === "object" &&
                    typeof $steps["updateTourSteps"].then === "function"
                  ) {
                    $steps["updateTourSteps"] = await $steps["updateTourSteps"];
                  }
                }}
                submitsForm={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Dqa1
                  )}
                >
                  {
                    "\u062b\u0628\u062a \u062f\u0631 \u0631\u0632\u0631\u0648\u0647\u0627\u06cc \u0645\u0646"
                  }
                </div>
              </Button>
            </div>
          </div>
          {(() => {
            try {
              return $props.isFirstVisit;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__f7We2,
                "fadein2"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gEYrd
                )}
              >
                {
                  "\u0645\u0634\u062e\u0635\u0627\u062a \u0631\u0632\u0631\u0648 \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u0631\u062a\u0628\u0627\u0637\u0627\u062a \u0628\u0639\u062f\u06cc\u062a \u062b\u0628\u062a \u06a9\u0646 \n\u0648 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u067e\u0627\u06cc\u06cc\u0646 \u0628\u0632\u0646"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hCcCw
                )}
              >
                {
                  "(\u062b\u0628\u062a \u0645\u0634\u062e\u0635\u0627\u062a \u0627\u062e\u062a\u06cc\u0627\u0631\u06cc \u0648 \u0628\u0631\u0627\u06cc \u062e\u0648\u062f\u062a \u0645\u062d\u0641\u0648\u0638\u0647)"
                }
              </div>
            </div>
          ) : null}
        </div>
      </AntdModal>
      <ApiRequest
        data-plasmic-name={"reserveData"}
        data-plasmic-override={overrides.reserveData}
        className={classNames("__wab_instance", sty.reserveData)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b90ON
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reserveData", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reserveData", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reserveData", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const calendarData =
                          $state.apiRequest?.data?.[1]?.calendar;
                        const reserveData = $state.reserveData?.data;
                        if (
                          !Array.isArray(calendarData) ||
                          !Array.isArray(reserveData)
                        ) {
                          return calendarData;
                        }
                        const reserveMap = reserveData.reduce((acc, item) => {
                          if (item && item.booking_id) {
                            acc[item.booking_id] = item;
                          }
                          return acc;
                        }, {});
                        calendarData.forEach(item => {
                          const bookingId = item.booking_id;
                          if (bookingId in reserveMap) {
                            const reserveItem = reserveMap[bookingId];
                            const amount = reserveItem.amount;
                            item.guest_name = reserveItem.guest_name;
                            if (amount == null || amount == 0) {
                              item.price = null;
                              return;
                            }
                            const amountNumber = parseInt(amount, 10);
                            item.price = isNaN(amountNumber)
                              ? amount
                              : (amountNumber / 1000).toLocaleString();
                          }
                        });
                        console.log(calendarData);
                        return calendarData;
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        ref={ref => {
          $refs["reserveData"] = ref;
        }}
        url={(() => {
          try {
            return (() => {
              function toEnglishDigits(str) {
                return String(str).replace(/[۰-۹]/g, function (char) {
                  return String.fromCharCode(char.charCodeAt(0) - 1728);
                });
              }
              let initialDateParts = new Date()
                .toLocaleDateString("fa")
                .split("/");
              let initialYear = initialDateParts[0];
              let initialMonth = initialDateParts[1];
              const secondSpan = document.querySelector(
                ".rmdp-header-values span:nth-child(3)"
              );
              let yearStr = "";
              if (secondSpan && secondSpan.textContent) {
                yearStr = secondSpan.textContent;
                $state.year = yearStr;
              } else {
                yearStr = $state.year ?? initialYear;
              }
              let monStr = $state.fragmentDatePicker?.month ?? initialMonth;
              const yearEn = toEnglishDigits(yearStr);
              const monStrEn = toEnglishDigits(monStr);
              const propIdEn = toEnglishDigits($props.propertyId);
              const monPadded = monStrEn.padStart(2, "0");
              let mon = parseInt(monStrEn, 10);
              let daysInMonth = mon >= 1 && mon <= 6 ? 31 : 30;
              const finalUrl = `https://gateway.rentamon.com/webhook/bookings/calendar?start_date=${yearEn}-${monPadded}-01&end_date=${yearEn}-${monPadded}-${daysInMonth}&property_id=${propIdEn}`;
              return finalUrl;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "guide1",
    "fragmentDatePicker",
    "fragmentLongPress",
    "dayCell2",
    "modalDiscount",
    "main",
    "textInput2",
    "modal",
    "\u062b\u0628\u062a\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a",
    "\u067e\u0631",
    "\u062e\u0627\u0644\u06cc\u0642\u06cc\u0645\u062a\u062a\u062e\u0641\u06cc\u0641Parent",
    "\u062e\u0627\u0644\u06cc",
    "\u0642\u06cc\u0645\u062a",
    "\u062a\u062e\u0641\u06cc\u0641",
    "modalChangePrice",
    "main2",
    "input",
    "textInput",
    "numberInput2",
    "fetchModal",
    "getJabamaSmartPriceStatus",
    "userPlatform",
    "loading2",
    "ok",
    "ok3",
    "fail",
    "loading",
    "ok2",
    "block",
    "reserve",
    "blockParent",
    "block2",
    "noteModal",
    "writeNoteModal",
    "textarea",
    "updateNoteModal",
    "textarea2",
    "checkForChange",
    "buttonYes",
    "newDiscountModal",
    "textInput4",
    "guide",
    "block3",
    "color",
    "text",
    "smartBookings",
    "color2",
    "text2",
    "discount",
    "color3",
    "text3",
    "note",
    "text4",
    "submitChange",
    "visitBookings",
    "addingGuestInfo",
    "form",
    "p4",
    "referrer",
    "guestReferrer",
    "count2",
    "guestCount",
    "p3",
    "input2",
    "amount",
    "p1",
    "guestName",
    "p2",
    "phoneNumber",
    "p5",
    "reserveData"
  ],
  apiRequest: ["apiRequest"],
  guide1: ["guide1"],
  fragmentDatePicker: ["fragmentDatePicker", "fragmentLongPress", "dayCell2"],
  fragmentLongPress: ["fragmentLongPress", "dayCell2"],
  dayCell2: ["dayCell2"],
  modalDiscount: ["modalDiscount", "main", "textInput2"],
  main: ["main", "textInput2"],
  textInput2: ["textInput2"],
  modal: [
    "modal",
    "\u062b\u0628\u062a\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a",
    "\u067e\u0631",
    "\u062e\u0627\u0644\u06cc\u0642\u06cc\u0645\u062a\u062a\u062e\u0641\u06cc\u0641Parent",
    "\u062e\u0627\u0644\u06cc",
    "\u0642\u06cc\u0645\u062a",
    "\u062a\u062e\u0641\u06cc\u0641"
  ],
  ثبتتغییرات: ["\u062b\u0628\u062a\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"],
  پر: ["\u067e\u0631"],
  خالیقیمتتخفیفParent: [
    "\u062e\u0627\u0644\u06cc\u0642\u06cc\u0645\u062a\u062a\u062e\u0641\u06cc\u0641Parent",
    "\u062e\u0627\u0644\u06cc",
    "\u0642\u06cc\u0645\u062a",
    "\u062a\u062e\u0641\u06cc\u0641"
  ],
  خالی: ["\u062e\u0627\u0644\u06cc"],
  قیمت: ["\u0642\u06cc\u0645\u062a"],
  تخفیف: ["\u062a\u062e\u0641\u06cc\u0641"],
  modalChangePrice: [
    "modalChangePrice",
    "main2",
    "input",
    "textInput",
    "numberInput2"
  ],
  main2: ["main2", "input", "textInput", "numberInput2"],
  input: ["input"],
  textInput: ["textInput"],
  numberInput2: ["numberInput2"],
  fetchModal: [
    "fetchModal",
    "getJabamaSmartPriceStatus",
    "userPlatform",
    "loading2",
    "ok",
    "ok3",
    "fail",
    "loading",
    "ok2"
  ],
  getJabamaSmartPriceStatus: ["getJabamaSmartPriceStatus"],
  userPlatform: [
    "userPlatform",
    "loading2",
    "ok",
    "ok3",
    "fail",
    "loading",
    "ok2"
  ],
  loading2: ["loading2"],
  ok: ["ok"],
  ok3: ["ok3"],
  fail: ["fail"],
  loading: ["loading"],
  ok2: ["ok2"],
  block: ["block", "reserve", "blockParent", "block2"],
  reserve: ["reserve"],
  blockParent: ["blockParent", "block2"],
  block2: ["block2"],
  noteModal: ["noteModal"],
  writeNoteModal: ["writeNoteModal", "textarea"],
  textarea: ["textarea"],
  updateNoteModal: ["updateNoteModal", "textarea2"],
  textarea2: ["textarea2"],
  checkForChange: ["checkForChange", "buttonYes"],
  buttonYes: ["buttonYes"],
  newDiscountModal: ["newDiscountModal", "textInput4"],
  textInput4: ["textInput4"],
  guide: [
    "guide",
    "block3",
    "color",
    "text",
    "smartBookings",
    "color2",
    "text2",
    "discount",
    "color3",
    "text3",
    "note",
    "text4"
  ],
  block3: ["block3", "color", "text"],
  color: ["color"],
  text: ["text"],
  smartBookings: ["smartBookings", "color2", "text2"],
  color2: ["color2"],
  text2: ["text2"],
  discount: ["discount", "color3", "text3"],
  color3: ["color3"],
  text3: ["text3"],
  note: ["note", "text4"],
  text4: ["text4"],
  submitChange: ["submitChange", "visitBookings"],
  visitBookings: ["visitBookings"],
  addingGuestInfo: [
    "addingGuestInfo",
    "form",
    "p4",
    "referrer",
    "guestReferrer",
    "count2",
    "guestCount",
    "p3",
    "input2",
    "amount",
    "p1",
    "guestName",
    "p2",
    "phoneNumber",
    "p5"
  ],
  form: [
    "form",
    "p4",
    "referrer",
    "guestReferrer",
    "count2",
    "guestCount",
    "p3",
    "input2",
    "amount",
    "p1",
    "guestName",
    "p2",
    "phoneNumber",
    "p5"
  ],
  p4: ["p4", "referrer", "guestReferrer", "count2", "guestCount"],
  referrer: ["referrer", "guestReferrer"],
  guestReferrer: ["guestReferrer"],
  count2: ["count2", "guestCount"],
  guestCount: ["guestCount"],
  p3: ["p3", "input2", "amount"],
  input2: ["input2"],
  amount: ["amount"],
  p1: ["p1", "guestName"],
  guestName: ["guestName"],
  p2: ["p2", "phoneNumber"],
  phoneNumber: ["phoneNumber"],
  p5: ["p5"],
  reserveData: ["reserveData"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  guide1: "div";
  fragmentDatePicker: typeof DatePicker;
  fragmentLongPress: typeof FragmentLongPress;
  dayCell2: typeof DayCell2;
  modalDiscount: typeof AntdModal;
  main: "div";
  textInput2: typeof TextInput;
  modal: typeof AntdModal;
  ثبتتغییرات: "div";
  پر: "section";
  خالیقیمتتخفیفParent: "section";
  خالی: "section";
  قیمت: "section";
  تخفیف: "section";
  modalChangePrice: typeof AntdModal;
  main2: "div";
  input: typeof Input;
  textInput: typeof TextInput;
  numberInput2: typeof AntdInputNumber;
  fetchModal: typeof AntdModal;
  getJabamaSmartPriceStatus: typeof ApiRequest;
  userPlatform: typeof ApiRequest;
  loading2: typeof PlasmicImg__;
  ok: typeof PlasmicImg__;
  ok3: typeof PlasmicImg__;
  fail: typeof PlasmicImg__;
  loading: typeof PlasmicImg__;
  ok2: typeof PlasmicImg__;
  block: typeof AntdModal;
  reserve: "div";
  blockParent: "div";
  block2: "div";
  noteModal: typeof AntdModal;
  writeNoteModal: typeof AntdModal;
  textarea: typeof Textarea;
  updateNoteModal: typeof AntdModal;
  textarea2: typeof Textarea;
  checkForChange: typeof AntdModal;
  buttonYes: "div";
  newDiscountModal: typeof AntdModal;
  textInput4: typeof TextInput;
  guide: "div";
  block3: "div";
  color: "div";
  text: "div";
  smartBookings: "div";
  color2: "div";
  text2: "div";
  discount: "div";
  color3: "div";
  text3: "div";
  note: "div";
  text4: "div";
  submitChange: "div";
  visitBookings: typeof Button;
  addingGuestInfo: typeof AntdModal;
  form: "div";
  p4: "div";
  referrer: "div";
  guestReferrer: typeof Select;
  count2: "div";
  guestCount: typeof AntdInputNumber;
  p3: "div";
  input2: typeof Input;
  amount: typeof AntdInputNumber;
  p1: "div";
  guestName: typeof TextInput;
  p2: "div";
  phoneNumber: typeof TextInput;
  p5: "div";
  reserveData: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCalendar23__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCalendar23__VariantsArgs;
    args?: PlasmicCalendar23__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCalendar23__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCalendar23__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCalendar23__ArgProps,
          internalVariantPropNames: PlasmicCalendar23__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCalendar23__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCalendar23";
  } else {
    func.displayName = `PlasmicCalendar23.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendar23 = Object.assign(
  // Top-level PlasmicCalendar23 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    guide1: makeNodeComponent("guide1"),
    fragmentDatePicker: makeNodeComponent("fragmentDatePicker"),
    fragmentLongPress: makeNodeComponent("fragmentLongPress"),
    dayCell2: makeNodeComponent("dayCell2"),
    modalDiscount: makeNodeComponent("modalDiscount"),
    main: makeNodeComponent("main"),
    textInput2: makeNodeComponent("textInput2"),
    modal: makeNodeComponent("modal"),
    ثبتتغییرات: makeNodeComponent(
      "\u062b\u0628\u062a\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
    ),
    پر: makeNodeComponent("\u067e\u0631"),
    خالیقیمتتخفیفParent: makeNodeComponent(
      "\u062e\u0627\u0644\u06cc\u0642\u06cc\u0645\u062a\u062a\u062e\u0641\u06cc\u0641Parent"
    ),
    خالی: makeNodeComponent("\u062e\u0627\u0644\u06cc"),
    قیمت: makeNodeComponent("\u0642\u06cc\u0645\u062a"),
    تخفیف: makeNodeComponent("\u062a\u062e\u0641\u06cc\u0641"),
    modalChangePrice: makeNodeComponent("modalChangePrice"),
    main2: makeNodeComponent("main2"),
    input: makeNodeComponent("input"),
    textInput: makeNodeComponent("textInput"),
    numberInput2: makeNodeComponent("numberInput2"),
    fetchModal: makeNodeComponent("fetchModal"),
    getJabamaSmartPriceStatus: makeNodeComponent("getJabamaSmartPriceStatus"),
    userPlatform: makeNodeComponent("userPlatform"),
    loading2: makeNodeComponent("loading2"),
    ok: makeNodeComponent("ok"),
    ok3: makeNodeComponent("ok3"),
    fail: makeNodeComponent("fail"),
    loading: makeNodeComponent("loading"),
    ok2: makeNodeComponent("ok2"),
    block: makeNodeComponent("block"),
    reserve: makeNodeComponent("reserve"),
    blockParent: makeNodeComponent("blockParent"),
    block2: makeNodeComponent("block2"),
    noteModal: makeNodeComponent("noteModal"),
    writeNoteModal: makeNodeComponent("writeNoteModal"),
    textarea: makeNodeComponent("textarea"),
    updateNoteModal: makeNodeComponent("updateNoteModal"),
    textarea2: makeNodeComponent("textarea2"),
    checkForChange: makeNodeComponent("checkForChange"),
    buttonYes: makeNodeComponent("buttonYes"),
    newDiscountModal: makeNodeComponent("newDiscountModal"),
    textInput4: makeNodeComponent("textInput4"),
    guide: makeNodeComponent("guide"),
    block3: makeNodeComponent("block3"),
    color: makeNodeComponent("color"),
    text: makeNodeComponent("text"),
    smartBookings: makeNodeComponent("smartBookings"),
    color2: makeNodeComponent("color2"),
    text2: makeNodeComponent("text2"),
    discount: makeNodeComponent("discount"),
    color3: makeNodeComponent("color3"),
    text3: makeNodeComponent("text3"),
    note: makeNodeComponent("note"),
    text4: makeNodeComponent("text4"),
    submitChange: makeNodeComponent("submitChange"),
    visitBookings: makeNodeComponent("visitBookings"),
    addingGuestInfo: makeNodeComponent("addingGuestInfo"),
    form: makeNodeComponent("form"),
    p4: makeNodeComponent("p4"),
    referrer: makeNodeComponent("referrer"),
    guestReferrer: makeNodeComponent("guestReferrer"),
    count2: makeNodeComponent("count2"),
    guestCount: makeNodeComponent("guestCount"),
    p3: makeNodeComponent("p3"),
    input2: makeNodeComponent("input2"),
    amount: makeNodeComponent("amount"),
    p1: makeNodeComponent("p1"),
    guestName: makeNodeComponent("guestName"),
    p2: makeNodeComponent("p2"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    p5: makeNodeComponent("p5"),
    reserveData: makeNodeComponent("reserveData"),

    // Metadata about props expected for PlasmicCalendar23
    internalVariantProps: PlasmicCalendar23__VariantProps,
    internalArgProps: PlasmicCalendar23__ArgProps
  }
);

export default PlasmicCalendar23;
/* prettier-ignore-end */
